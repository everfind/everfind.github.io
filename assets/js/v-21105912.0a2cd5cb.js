"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[5763],{4075:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-21105912",path:"/posts/2021/07/06/virtual-dom.html",title:"如何快速实现一个虚拟 DOM 系统",lang:"zh-CN",frontmatter:{title:"如何快速实现一个虚拟 DOM 系统",description:"描述如何快速实现一个简单的虚拟 DOM 系统。阐述一个虚拟 DOM 系统的组成部分。",keywords:["Virtual DOM","虚拟 DOM","diff 算法"],date:"2021-07-06T00:00:00.000Z",permalinkPattern:"posts/:year/:month/:day/:slug.html",tags:["通用知识"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"为什么需要虚拟 DOM？",slug:"为什么需要虚拟-dom",children:[]},{level:2,title:"如何实现虚拟 DOM",slug:"如何实现虚拟-dom",children:[]}],filePathRelative:"posts/virtual-dom.md"}},2861:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>虚拟 DOM 是目前主流前端框架的技术核心之一，本文阐述如何实现一个简单的虚拟 DOM 系统。</p></div><h2 id="为什么需要虚拟-dom" tabindex="-1"><a class="header-anchor" href="#为什么需要虚拟-dom" aria-hidden="true">#</a> 为什么需要虚拟 DOM？</h2><p>虚拟 DOM 就是一棵由虚拟节点组成的树，这棵树展现了真实 DOM 的结构。这些虚拟节点是轻量的、无状态的，一般是字符串或者仅仅包含必要字段的 JavaScript 对象。虚拟节点可以被组装成节点树树，通过特定的 &quot;diff&quot; 算法对两个节点树进行对比，找出其中细微的变更点，然后更新到真实 DOM 上去。</p><p>之所以会有虚拟 DOM，是因为直接更新真实 DOM 非常昂贵。通过新比对虚拟 DOM，然后只将变化的部分更新到真实 DOM 上去。这么做都是操作纯 JavaScript 对象，尽量避免了直接操作 DOM，读写成本低很多。</p><h2 id="如何实现虚拟-dom" tabindex="-1"><a class="header-anchor" href="#如何实现虚拟-dom" aria-hidden="true">#</a> 如何实现虚拟 DOM</h2><p>在开始之前，我们需要明确一个虚拟 DOM 系统应该包含哪些必要的组成部分？</p><p>首先，我们要定义清楚什么是虚拟节点。一个虚拟节点可以是一个普通 JavaScript 对象，也可以是一个字符串。</p><p>我们定义一个函数 <code>createNode</code> 来创建虚拟节点。一个虚拟节点至少包含三个信息：</p><ul><li><code>tag</code>：保存虚拟节点的标签名，字符串</li><li><code>props</code>：保存虚拟节点的 properties/attributes，普通对象</li><li><code>children</code>：保存虚拟节点的子节点，数组</li></ul><p>下面的代码是 <code>createNode</code> 实现样例：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">createNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  tag<span class="token punctuation">,</span>\n  props<span class="token punctuation">,</span>\n  children<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们通过 <code>createNode</code> 可以轻松的创建虚拟节点：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;app&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 返回如下：</span>\n<span class="token punctuation">{</span>\n  tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;app&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>现在，我们需要定义一个 <code>createElement</code> 函数来根据虚拟节点创建真实的 DOM 元素。</p><p>在 <code>createElement</code> 中，我们需要创建一个新的 DOM 元素，然后遍历虚拟节点的 props 属性，将其中的属性添加到 DOM 元素上去，之后再遍历 children 属性。如下代码是一个实现样例：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">createElement</span> <span class="token operator">=</span> vnode <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>typof vnode <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果是字符串就直接返回文本元素</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      el<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> el<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>现在，我们可以通过 <code>createElement</code> 将虚拟节点转变成真实 DOM 了。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;app&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 输出： &lt;div id=&quot;app&quot;&gt;Hello World&lt;/div&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们再来定义一个 <code>diff</code> 函数来实现 &#39;diff&#39; 算法。这个 <code>diff</code> 函数接收三个参数，一个是已经存在的 DOM 元素，一个是旧的虚拟节点，一个是新的虚拟节点。在这个函数中，我们将对比两个虚拟节点，在需要的时候，将旧的元素替换掉。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">replace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newVNode<span class="token punctuation">)</span> <span class="token keyword">return</span> el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token keyword">return</span> el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 处理纯文本的情况</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldVNode <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> newVNode <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">!==</span> newVNode<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 对比标签名</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>tag <span class="token operator">!==</span> newVNode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 对比 props</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">.</span>props<span class="token operator">?.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> oldVNode<span class="token punctuation">.</span>props<span class="token operator">?.</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>props<span class="token operator">?.</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 对比 children</span>\n    <span class="token punctuation">[</span><span class="token operator">...</span>el<span class="token punctuation">.</span>childNodes<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">diff</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>children<span class="token operator">?.</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>children<span class="token operator">?.</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个函数中，我们先处理纯文本的情况，如果新旧两个字符串不相同，则直接替换。之后，我们就可以假定两个虚拟节点都是对象了。我们先对比两个节点的标签名是否相同，不同则直接替换。之后对比两个节点的 props 是否相同，不同也直接替换。最后我们在递归的使用 <code>diff</code> 函数对比两个虚拟节点的 children。</p><p>至此，我们就实现了一个简版虚拟 DOM 系统所必须的所有功能。下面是使用样例：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> oldVNode <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;app&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newVNode <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;app&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;Goodbye World&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &lt;div id=&quot;app&quot;&gt;Hello World&lt;/div&gt;</span>\n\n<span class="token function">diff</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// el will become: &lt;div id=&quot;app&quot;&gt;Goodbye World&lt;/div&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>文中的实现侧重于展示虚拟 DOM 的实现原理，在实现代码中并未考虑性能等其他因素。</p></blockquote><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',25),t={render:function(n,s){return p}}}}]);