"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[2844],{1570:(e,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-20084bba",path:"/code-reading/react/",title:"React 源码解读",lang:"zh-CN",frontmatter:{title:"React 源码解读",description:"React 是目前主流的两大框架之一，学习 React 源码不仅可以增进对 React 的理解，加深对 React 的掌握，还能学习优秀框架的设计思路。",sidebar:!1,onTop:!0},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],filePathRelative:"code-reading/react/README.md",articleList:[{key:"v-78bbe8d8",path:"/code-reading/react/install.html",title:"阅读源码之前的准备工作",lang:"zh-CN",frontmatter:{title:"阅读源码之前的准备工作",description:null,keywords:["React","源码阅读"],date:"2021-08-22T00:00:00.000Z",key:1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"下载代码",slug:"下载代码",children:[]},{level:2,title:"安装依赖",slug:"安装依赖",children:[]},{level:2,title:"阅读工具",slug:"阅读工具",children:[]}],content:"\n阅读源码之前当然是先准备好阅读环境了。React 经过这么多年的发展，代码仓库已经非常庞大，安装依赖也有些麻烦，因此独立出一篇记录准备环境中遇到的问题，以及我们需要使用哪些工具。\n\n## 下载代码\n\nReact 源代码托管在 Github 上，通过如下命令可以将源代码下载到本地。\n\n```bash\ngit clone git@github.com:facebook/react.git\n```\n\n鉴于目前的网络环境，访问 Github 不是很友好，我们可以稍稍优化下，减少代码下载时间。\n\n```bash\ngit clone git@github.com:facebook/react.git --depth=1\n```\n\n> 由于我们要基于 v16.13.1 版本的代码，因此我们是全量下载代码。\n\n## 安装依赖\n\n下载完成之后，我们需要安装项目的依赖，在安装过程中，我们碰到了几个问题，记录如下。\n\n首先在代码更目录执行：\n\n```bash\nyarn\n```\n\n安装依赖，在安装过程中，报了一个错误：\n\n```\nerror /Users/xxx/workspace/open-source/react/node_modules/gifsicle: Command failed.\nExit code: 1\nCommand: node lib/install.js\nArguments:\nDirectory: /Users/xxx/workspace/open-source/react/node_modules/gifsicle\nOutput:\n⚠ connect ECONNREFUSED 0.0.0.0:443\n  ⚠ gifsicle pre-build test failed\n  ℹ compiling from source\n  ✖ Error: Command failed: /bin/sh -c autoreconf -ivf\n/bin/sh: autoreconf: command not found\n```\n\n是因为 React 的依赖包中依赖了 autoconf 这个包，我们使用 Homebrew 来安装。\n\n```bash\nbrew install autoconf automake libtool\n```\n\n默认情况下，Homebrew 会先执行更新，这是一项非常耗时的操作，我们可以通过设置环境变量 `HOMEBREW_NO_AUTO_UPDATE=1` 来禁用更新。可以将这个环境变量写入 `~/.bashrc` 中，每次执行 Homebrew 都生效：\n\n```\nexport HOMEBREW_NO_AUTO_UPDATE=1\n```\n\n或者在命令行使用，单次生效：\n\n```bash\nHOMEBREW_NO_AUTO_UPDATE=1 brew install autoconf automake libtool\n```\n\nHomebrew 安装完成后，重新执行 `yarn` 命令，过了一段时间，提示 electron 安装超时。我们可以通过在 `~/.npmrc` 中添加如下配置（注意最后的 '/'）：\n\n```\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\n```\n\n将 electron 的镜像源设置为淘宝的站点，来加速下载。\n\n## 阅读工具\n\n工欲善其事必先利其器，没有一个好的工具怎么能提高阅读代码的效率呢？\n\n作为一个前端开发人员，VSCode 是一个不错的选择。\n\n使用 VSCode 打开代码以后，会发现每个代码文件都提示很多语法错误。原因是 React 代码中使用 [Flow](https://flow.org/en) 来声明类型，VSCode 中 TS 引擎默认会对 JS 进行语法检查，因此会提示在 JS 文件中不能声明类型，需要将文件重命名为 TS 文件。\n\n这当然属于误报，我们需要在设置中关闭 JS 检查。`CMD + ,` 打开设置页面，输入 `javascript.validate`，去勾选查出来的第一项即可。\n\n同时我们也建议安装下 [Flow Language Support](https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode) 这个插件，可以提供对 Flow 提供很好的支持。\n\n在解决完满屏的红色错误提示以后，我们需要安装 [Bookmarks](https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks) 这个插件，有了它，我们可以在任意代码打一个标签，然后在任意时间点通过这个标签返回到这段代码，避免在庞大的代码仓库中迷路。\n",contentRendered:'<p>阅读源码之前当然是先准备好阅读环境了。React 经过这么多年的发展，代码仓库已经非常庞大，安装依赖也有些麻烦，因此独立出一篇记录准备环境中遇到的问题，以及我们需要使用哪些工具。</p>\n<h2 id="下载代码" tabindex="-1"><a class="header-anchor" href="#下载代码" aria-hidden="true">#</a> 下载代码</h2>\n<p>React 源代码托管在 Github 上，通过如下命令可以将源代码下载到本地。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:facebook/react.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>鉴于目前的网络环境，访问 Github 不是很友好，我们可以稍稍优化下，减少代码下载时间。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:facebook/react.git --depth<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p>由于我们要基于 v16.13.1 版本的代码，因此我们是全量下载代码。</p>\n</blockquote>\n<h2 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h2>\n<p>下载完成之后，我们需要安装项目的依赖，在安装过程中，我们碰到了几个问题，记录如下。</p>\n<p>首先在代码更目录执行：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装依赖，在安装过程中，报了一个错误：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>error /Users/xxx/workspace/open-source/react/node_modules/gifsicle: Command failed.\nExit code: 1\nCommand: node lib/install.js\nArguments:\nDirectory: /Users/xxx/workspace/open-source/react/node_modules/gifsicle\nOutput:\n⚠ connect ECONNREFUSED 0.0.0.0:443\n  ⚠ gifsicle pre-build test failed\n  ℹ compiling from source\n  ✖ Error: Command failed: /bin/sh -c autoreconf -ivf\n/bin/sh: autoreconf: command not found\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>是因为 React 的依赖包中依赖了 autoconf 这个包，我们使用 Homebrew 来安装。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>brew <span class="token function">install</span> autoconf automake libtool\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>默认情况下，Homebrew 会先执行更新，这是一项非常耗时的操作，我们可以通过设置环境变量 <code>HOMEBREW_NO_AUTO_UPDATE=1</code> 来禁用更新。可以将这个环境变量写入 <code>~/.bashrc</code> 中，每次执行 Homebrew 都生效：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>export HOMEBREW_NO_AUTO_UPDATE=1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者在命令行使用，单次生效：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token assign-left variable">HOMEBREW_NO_AUTO_UPDATE</span><span class="token operator">=</span><span class="token number">1</span> brew <span class="token function">install</span> autoconf automake libtool\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Homebrew 安装完成后，重新执行 <code>yarn</code> 命令，过了一段时间，提示 electron 安装超时。我们可以通过在 <code>~/.npmrc</code> 中添加如下配置（注意最后的 \'/\'）：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>electron_mirror=https://npm.taobao.org/mirrors/electron/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将 electron 的镜像源设置为淘宝的站点，来加速下载。</p>\n<h2 id="阅读工具" tabindex="-1"><a class="header-anchor" href="#阅读工具" aria-hidden="true">#</a> 阅读工具</h2>\n<p>工欲善其事必先利其器，没有一个好的工具怎么能提高阅读代码的效率呢？</p>\n<p>作为一个前端开发人员，VSCode 是一个不错的选择。</p>\n<p>使用 VSCode 打开代码以后，会发现每个代码文件都提示很多语法错误。原因是 React 代码中使用 <a href="https://flow.org/en" target="_blank" rel="noopener noreferrer">Flow<OutboundLink/></a> 来声明类型，VSCode 中 TS 引擎默认会对 JS 进行语法检查，因此会提示在 JS 文件中不能声明类型，需要将文件重命名为 TS 文件。</p>\n<p>这当然属于误报，我们需要在设置中关闭 JS 检查。<code>CMD + ,</code> 打开设置页面，输入 <code>javascript.validate</code>，去勾选查出来的第一项即可。</p>\n<p>同时我们也建议安装下 <a href="https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode" target="_blank" rel="noopener noreferrer">Flow Language Support<OutboundLink/></a> 这个插件，可以提供对 Flow 提供很好的支持。</p>\n<p>在解决完满屏的红色错误提示以后，我们需要安装 <a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks" target="_blank" rel="noopener noreferrer">Bookmarks<OutboundLink/></a> 这个插件，有了它，我们可以在任意代码打一个标签，然后在任意时间点通过这个标签返回到这段代码，避免在庞大的代码仓库中迷路。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-08-22",deps:[],hoistedTags:[],links:[],pathInferred:"/code-reading/react/install.html",pathLocale:"/",permalink:null,slug:"install",filePath:"/Users/bingooo/workspace/everfind/website/docs/code-reading/react/install.md",filePathRelative:"code-reading/react/install.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/react/install.html.vue",componentFilePathRelative:"pages/code-reading/react/install.html.vue",componentFileChunkName:"v-78bbe8d8",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/react/install.html.js",dataFilePathRelative:"pages/code-reading/react/install.html.js",dataFileChunkName:"v-78bbe8d8",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/code-reading/react/install.html",htmlFilePathRelative:"code-reading/react/install.html"}]}},938:(e,n,a)=>{a.r(n),a.d(n,{default:()=>u});var t=a(6252);const s={href:"https://github.com/facebook/react",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("React"),o=(0,t.Uk)(" React 是目前主流的两大框架之一，学习 React 源码可以增进对 React 的理解，加深对 React 的掌握，同时，通过阅读源码，还能学习优秀框架的设计思路，扩宽架构视野。"),l=(0,t.Wm)("p",null,"本系列是阅读 React 源码过程中的文章记录，有对 React 源码的分析解读，也有自己的思考感悟。",-1),i=(0,t.Uk)("本系列基于 React 源代码 "),c={href:"https://github.com/facebook/react/tree/v16.13.1",target:"_blank",rel:"noopener noreferrer"},p=(0,t.Uk)("v16.13.1"),d=(0,t.Uk)(" 版本。"),m=(0,t.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),u={render:function(e,n){const a=(0,t.up)("OutboundLink"),u=(0,t.up)("ArticleList");return(0,t.wg)(),(0,t.j4)(t.HY,null,[(0,t.Wm)("p",null,[(0,t.Wm)("a",s,[r,(0,t.Wm)(a)]),o]),l,(0,t.Wm)("blockquote",null,[(0,t.Wm)("p",null,[i,(0,t.Wm)("a",c,[p,(0,t.Wm)(a)]),d])]),(0,t.Wm)(u,{noTag:!0}),m],64)}}}}]);