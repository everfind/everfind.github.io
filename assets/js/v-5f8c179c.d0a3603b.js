"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[9610],{2190:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-5f8c179c",path:"/courses/python/error-exception.html",title:"错误和异常",lang:"zh-CN",frontmatter:{title:"错误和异常",description:"Python 中的错误、异常处理",keywords:["Python"],date:"2021-09-10T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"语法错误",slug:"语法错误",children:[]},{level:2,title:"异常",slug:"异常",children:[{level:3,title:"处理异常",slug:"处理异常",children:[]},{level:3,title:"抛出异常",slug:"抛出异常",children:[]}]}],filePathRelative:"courses/python/error-exception.md"}},5842:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var e=a(6252);const p=(0,e.uE)('<h2 id="语法错误" tabindex="-1"><a class="header-anchor" href="#语法错误" aria-hidden="true">#</a> 语法错误</h2><p>如下，当我们编写的代码中出现语法错误的时候，Python 解析器会报这类的错误。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> True print<span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">1</span>\n    <span class="token keyword">while</span> True print<span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>\n                   ^\nSyntaxError: invalid syntax\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><p>在程序运行过程中，难免会出现异常。下面展示了几种运行时异常。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> * <span class="token punctuation">(</span><span class="token number">1</span>/0<span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nZeroDivisionError: division by zero\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span> + spam*3\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nNameError: name <span class="token string">&#39;spam&#39;</span> is not defined\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span> + <span class="token number">2</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nTypeError: Can<span class="token string">&#39;t convert &#39;</span>int&#39; object to str implicitly\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="处理异常" tabindex="-1"><a class="header-anchor" href="#处理异常" aria-hidden="true">#</a> 处理异常</h3><p>我们通过 <code>try</code> 语句来处理异常，完成的使用方法如下：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">.</span>\n    <span class="token punctuation">.</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span>\n<span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">&gt;</span>\n<span class="token keyword">except</span> <span class="token punctuation">(</span>RuntimeError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> NameError<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">&gt;</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">&gt;</span>\n<span class="token keyword">finally</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>首先执行 <code>try</code> 和 <code>except</code> 之间的语句，如果未出现异常，则 <code>try</code> 语句执行结束。否则，会逐个匹配 <code>except</code> 语句，匹配上则执行 <code>except</code> 语句，否则会继续抛出异常。<code>except Except as err</code>，我们可以通过 <code>err</code> 来访问异常对象，我们可以通过 <code>err.args</code> 来访问构造这个异常对象时的参数。</p><p><code>else</code> 语句在 <code>try</code> 中执行完，且没有出现异常的时候执行。<code>finally</code> 语句指定了在 <code>try</code> 返回之前要做的事情，不管是否有异常发生，通常会被用来做一些收尾工作，比如关闭文件等。如果 <code>finally</code> 语句中指定了 <code>return</code> 语句，那么 <code>finally</code> 中 <code>return</code> 的会替换掉 <code>try</code> 中 <code>return</code> 的值。</p><h3 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h3><p>我们可以通过 <code>raise</code> 语句抛出一个异常。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> try:\n<span class="token punctuation">..</span>.     raise NameError<span class="token punctuation">(</span><span class="token string">&#39;HiThere&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. except NameError as err:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&#39;An exception flew by!&#39;</span> + str<span class="token punctuation">(</span>err.args<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.     raise\n<span class="token punctuation">..</span>.\nAn exception flew by<span class="token operator">!</span> <span class="token punctuation">(</span><span class="token string">&#39;HiThere&#39;</span>,<span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nNameError: HiThere\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>raise</code> 语句还支持后跟一个 <code>from</code> 语句来实现异常的级联。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def func<span class="token punctuation">(</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     raise IOError\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> try:\n<span class="token punctuation">..</span>.     func<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. except IOError as exc:\n<span class="token punctuation">..</span>.     raise RuntimeError<span class="token punctuation">(</span><span class="token string">&#39;Failed to open database&#39;</span><span class="token punctuation">)</span> from exc\n<span class="token punctuation">..</span>.\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> func\nOSError\n\nThe above exception was the direct cause of the following exception:\n\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nRuntimeError: Failed to <span class="token function">open</span> database\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过异常级联，我们可以清楚的看出异常抛出的链路。</p><p>注意，在 <code>except</code> 语句和 <code>finally</code> 语句中抛出的异常是自动级联的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> try:\n<span class="token punctuation">..</span>.     raise NameError<span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. except NameError as err:\n<span class="token punctuation">..</span>.     raise RuntimeError from err\n<span class="token punctuation">..</span>.\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nNameError: aa\n\nThe above exception was the direct cause of the following exception:\n\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nRuntimeError\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>前面说到，<code>finally</code> 语句可以用来处理异常发生后的收尾工作。但是很多时候会显得比较繁琐，比如读写文件的时候，如果忘记在 <code>finally</code> 语句中关闭文件，则会导致内存泄漏等严重问题。</p><p>我们可以通过 <code>with</code> 语句来帮助我们自动处理这些收尾工作，使得代码更加简洁。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.txt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',22),t=(0,e.Uk)("当然，"),o=(0,e.Wm)("code",null,"with",-1),l=(0,e.Uk)(" 语句不是所有地方都能用。要使用 "),r=(0,e.Wm)("code",null,"with",-1),c=(0,e.Uk)(" 语句，需实现 "),i=(0,e.Wm)("code",null,"__enter__",-1),u=(0,e.Uk)(" 和 "),k=(0,e.Wm)("code",null,"__exit__",-1),b=(0,e.Uk)(" 方法，具体细节可以看"),d={href:"https://docs.python.org/3/reference/compound_stmts.html#with",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("这里"),g=(0,e.Uk)("。"),h=(0,e.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),y={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,o,l,r,c,i,u,k,b,(0,e.Wm)("a",d,[m,(0,e.Wm)(a)]),g]),h],64)}}}}]);