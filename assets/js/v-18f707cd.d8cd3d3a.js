"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4987],{2889:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-18f707cd",path:"/courses/webpack/code-split.html",title:"Code Spliting",lang:"zh-CN",frontmatter:{title:"Code Spliting",description:"介绍 Webpack 中如何进行代码分割",keywords:["Webpack"],date:"2021-01-16T00:00:00.000Z",key:14},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"如何实现代码分割",slug:"如何实现代码分割",children:[]},{level:2,title:"在运行时控制代码分割",slug:"在运行时控制代码分割",children:[]},{level:2,title:"React 中的代码分割",slug:"react-中的代码分割",children:[]},{level:2,title:"禁用代码分割",slug:"禁用代码分割",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/code-split.md"}},2762:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var e=a(6252);const p=(0,e.uE)('<p>随着功能的不断迭代，Web 应用变得越来越大，这也导致网页的加载时间越来越长，用户体验越来越差。 Webpack 的代码分割能力（Code Spliting）可以实现应用代码的按需加载，减少应用首次加载的代码量，提升加载速度。</p><p>通过代码分割，我们可以在用户进入到一个新页面的时候加载代码，也可以在用户点击某一个按钮的时候加载代码，甚至可以猜测用户下一步要做的事情而提前加载代码。</p><p>代码分割的核心目的就是通过在应用中设置多个分割点（split point）来实现按需加载。在分割的文件中还可以再创建分割点，不断分割下去。 整个应用就是构建在这些分割模块之上。</p><p><img src="/courses/webpack/code-split-c.png" alt="code-split"></p><h2 id="如何实现代码分割" tabindex="-1"><a class="header-anchor" href="#如何实现代码分割" aria-hidden="true">#</a> 如何实现代码分割</h2><p>Webpack 提供了两种实现代码分割的方式：动态 <code>import</code> 和 <code>require.ensure</code>。其中 <code>require.ensure</code> 已经不在提倡使用。</p><p>动态 <code>import</code> 通过 Promise 来实现：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;optional-name&quot; */</span> <span class="token string">&quot;./module&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>\n  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面的例子中，我们看到一行 <code>webpackChunkName</code> 注释，这是 Webpack 提供的额外的配置选项，<code>webpackChunkName</code> 重新命名了分割出来的模块名称。相同 <code>webpackChunkName</code> 的分割模块将会被合并到一个文件中。除了 <code>webpackChunkName</code> 以外，Webpack 还提供了 <code>webpackMode</code>、<code>webpackPrefetch</code> 和 <code>webpackPrefetch</code> 等选项来自定义模块什么时候被加载以及浏览器如何来加载模块。在服务端渲染（server-side rendering, ssr）中，我们还可以设置 <code>weak</code> 参数。这样避免加载额外的模块。</p><blockquote><p>prefetch 告诉浏览器该资源在不久的将来会被使用，而 preload 告诉浏览器该资源在当前页面下需要使用。通过这些信息，浏览器可以知道需要加载哪些资源。</p></blockquote><blockquote><p><code>webpackChunkName</code> 同时还支持 <code>[index]</code> 和 <code>[request]</code> 这两个占位符来自定义分割出来的模块名称。</p></blockquote><p>我们可以并行加载多个模块，比如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;lunr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../search_index.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>lunr<span class="token punctuation">,</span> search<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      index<span class="token operator">:</span> lunr<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      lines<span class="token operator">:</span> search<span class="token punctuation">.</span>lines<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>下面我们在我们的项目中使用代码分割。</p><p><strong>src/lazy.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;Hello from lazy&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们在点击按钮的时候加载这个模块，来修改按钮的文案。</p><p><strong>src/component.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;rounded bg-red-100 border max-w-md m-4 p-4&#39;</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./lazy&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lazy</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> lazy<span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>此时，执行 <code>npm start</code>，然后点击按钮，我们可以看到按钮的文案发生了变化。</p><p>再执行 <code>npm run build</code>, 我们观察下输出结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by chunk 10.8 KiB (name: main)\n    asset main.css 7.94 KiB [emitted] (name: main)\n    asset main.js 2.91 KiB [emitted] [minimized] (name: main) 1 related asset\n  asset index.html 229 bytes [compared for emit]\n  asset 958.js 183 bytes [emitted] [minimized] 1 related asset\n  Entrypoint main 10.8 KiB (5.61 KiB) = main.css 7.94 KiB main.js 2.91 KiB 1 auxiliary asset\n  runtime modules 6.71 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 597 bytes (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 564 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n    ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 9113 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>958.js</code> 就是分割点，如果我们要自定义文件名称，则可以通过 <code>output.chunkFilename</code> 来设置文件名称。比如设置为 <code>&quot;chunk.[id].js&quot;</code> 可以在输出的文件名称前面加一个 <code>chunk</code>。</p><h2 id="在运行时控制代码分割" tabindex="-1"><a class="header-anchor" href="#在运行时控制代码分割" aria-hidden="true">#</a> 在运行时控制代码分割</h2>',24),t=(0,e.Uk)("特别是在具有第三方依赖项和高级部署设置的复杂环境中，您可能希望控制从何处加载拆分代码。"),c={href:"https://www.npmjs.com/package/webpack-require-from",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("webpack-require-from"),l=(0,e.Uk)(" 可以解决这个问题，这个包可以重写 import 的路径。"),r=(0,e.Wm)("h2",{id:"react-中的代码分割",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#react-中的代码分割","aria-hidden":"true"},"#"),(0,e.Uk)(" React 中的代码分割")],-1),i=(0,e.Uk)("React 的"),u={href:"https://reactjs.org/docs/code-splitting.html",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("官方文档"),k=(0,e.Uk)("中详细说明了代码分割的相关 API。其中最重要的就是 "),m=(0,e.Wm)("code",null,"React.lazy",-1),b=(0,e.Uk)(" 和 "),g=(0,e.Wm)("code",null,"React.Suspense",-1),h=(0,e.Uk)("。"),y={href:"https://www.npmjs.com/package/@loadable/component",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("@loadable/component"),v=(0,e.Uk)(" 对这两个 API 做了封装。"),w=(0,e.uE)('<h2 id="禁用代码分割" tabindex="-1"><a class="header-anchor" href="#禁用代码分割" aria-hidden="true">#</a> 禁用代码分割</h2><p>有时候我们不需要代码分割，比如 SSR，这个时候可以通过如下设置来禁用代码分割：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>LimitChunkCountPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> maxChunks<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>代码分割可以加速页面的首次加载性能，提升用户使用体验。</p><p>代码分割需要我们自主决定分割点。通常我们通过路由来分割，有时候也会根据某一个特性功能被使用到的时候来创建分割点。</p><p>我们可以通过指定相同的名称来将多个分割出来的模块打包到同一个文件中。</p><p>在现代框架中，比如 React，提供了一些 API 来支持代码分割，我们可以将这些 API 做一些封装，让使用体验更加友好。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',9),f={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",c,[o,(0,e.Wm)(a)]),l]),r,(0,e.Wm)("p",null,[i,(0,e.Wm)("a",u,[d,(0,e.Wm)(a)]),k,m,b,g,h,(0,e.Wm)("a",y,[x,(0,e.Wm)(a)]),v]),w],64)}}}}]);