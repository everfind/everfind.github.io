"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[1423],{1884:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-32a7a778",path:"/posts/2021/09/26/nodejs-debug-tools.html",title:"如何调试 NodeJS 程序?",lang:"zh-CN",frontmatter:{title:"如何调试 NodeJS 程序?",description:"代码调试在开发阶段非常重要，本文介绍几个 NodeJS 的代码调试工具，帮助提高开发效率。",keywords:["调试","debug"],date:"2021-09-26T00:00:00.000Z",permalinkPattern:"posts/:year/:month/:day/:slug.html",tags:["通用知识"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"日志",slug:"日志",children:[{level:3,title:"debug 模块",slug:"debug-模块",children:[]},{level:3,title:"记录日志到文件",slug:"记录日志到文件",children:[]}]},{level:2,title:"调试",slug:"调试",children:[{level:3,title:"NodeJS 内置调试模块",slug:"nodejs-内置调试模块",children:[]},{level:3,title:"V8 Inspector",slug:"v8-inspector",children:[]},{level:3,title:"VSCode",slug:"vscode",children:[]}]}],filePathRelative:"posts/nodejs-debug-tools.md"}},6807:(n,s,a)=>{a.r(s),a.d(s,{default:()=>S});var e=a(6252);const t=(0,e.Wm)("p",null,"代码调试有时候是一种充满挑战的工作，如果有一个趁手的调试工具的话，往往可以做到事半功倍的效果。得益于这些年的快速发展，在 NodeJS 生态中已经有了多种调试工具可以使用。我们今年就来分享几个常用的调试工具。",-1),p=(0,e.Wm)("p",null,"在 NodeJS 的代码调试中，通常又两大类调试方法，一种是打印日志，另一种是直接调试代码。我们现在来分别说明。",-1),o=(0,e.Wm)("h2",{id:"日志",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#日志","aria-hidden":"true"},"#"),(0,e.Uk)(" 日志")],-1),l=(0,e.Wm)("p",null,"日志可以帮助我们记录在程序运行过程中的一些状态和错误信息。通过日志，我们可以快速的找到出问题的代码。比如借助于异常日志，我们可以快速的定位到具体的代码行。",-1),c=(0,e.Wm)("h3",{id:"debug-模块",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#debug-模块","aria-hidden":"true"},"#"),(0,e.Uk)(" debug 模块")],-1),r={href:"https://www.npmjs.com/package/debug",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("debug"),i=(0,e.Uk)(" 是很多 NodeJS 包和框架使用的日志工具。这个包的优点是可以通过环境变量的形式细粒度的控制打印哪些日志。"),d=(0,e.uE)('<p>比如在下面的代码中，假设我们先发送了一些请求，然后又接受到了响应数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// index.js</span>\n<span class="token keyword">const</span> debugHttpIncoming <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;http:incoming&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> debugHttpOutgoing <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;http:outgoing&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> outgoingRequest <span class="token operator">=</span> <span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;https://google.com&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// sending some request</span>\n<span class="token function">debugHttpOutgoing</span><span class="token punctuation">(</span><span class="token string">&#39;sending request to %s&#39;</span><span class="token punctuation">,</span> outgoingRequest<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> incomingRequest <span class="token operator">=</span> <span class="token punctuation">{</span>\n  body<span class="token operator">:</span> <span class="token string">&#39;{&quot;status&quot;: &quot;ok&quot;}&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// serving some request</span>\n<span class="token function">debugHttpOutgoing</span><span class="token punctuation">(</span><span class="token string">&#39;got JSON body %s&#39;</span><span class="token punctuation">,</span> incomingRequest<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>当我们通过如下方式启动程序的时候:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>http:incoming,http:outgoing node index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>日志展示如下：</p><p><img src="/posts/images/nodejs-debug-tools/debug-c.png" alt="debug 日志输出"></p><p>同时，debug 模块还支持 <code>*</code> 通配符，我们可以通过 <code>DEBUG=http:* node index.js</code> 获得上面相同的日志输出。</p><h3 id="记录日志到文件" tabindex="-1"><a class="header-anchor" href="#记录日志到文件" aria-hidden="true">#</a> 记录日志到文件</h3><p>通常，我们需要将应用运行的日志做持久化处理，最简单的方式就是记录到文件。</p>',9),b={href:"https://www.npmjs.com/package/pino",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("pino"),m=(0,e.Uk)(" 是一个高性能的日志模块，与 "),g={href:"https://www.npmjs.com/package/bunyan",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("bunyan"),q=(0,e.Uk)(" 类似，但是性能更好。"),v=(0,e.uE)('<p>以下是几种日志模块的性能数据对比：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>benchWinston*10000:     2226.117ms\nbenchBunyan*10000:      1355.229ms\nbenchDebug*10000:       445.291ms\nbenchLogLevel*10000:    322.181ms\nbenchBole*10000:        291.727ms\nbenchPino*10000:        269.109ms\nbenchPinoExtreme*10000: 102.239ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>pino 使用非常简单：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pino <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;pino&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\npino<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;hello pino&#39;</span><span class="token punctuation">)</span>\npino<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;the answer is %d&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>\npino<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;an error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的代码，日志输出如下：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>{&quot;level&quot;:30,&quot;time&quot;:1632626946507,&quot;pid&quot;:77749,&quot;hostname&quot;:&quot;everfind-MacBook-Pro.local&quot;,&quot;msg&quot;:&quot;hello pino&quot;}\n{&quot;level&quot;:30,&quot;time&quot;:1632626946508,&quot;pid&quot;:77749,&quot;hostname&quot;:&quot;everfind-MacBook-Pro.local&quot;,&quot;msg&quot;:&quot;the answer is 42&quot;}\n{&quot;level&quot;:50,&quot;time&quot;:1632626946508,&quot;pid&quot;:77749,&quot;hostname&quot;:&quot;everfind-MacBook-Pro.local&quot;,&quot;stack&quot;:&quot;Error: an error\\n    at Object.&lt;anonymous&gt; (/Users/everfind/workspace/ztest/test/pino.js:5:12)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:76:12)\\n    at internal/main/run_main_module.js:17:47&quot;,&quot;type&quot;:&quot;Error&quot;,&quot;msg&quot;:&quot;an error&quot;}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h2><h3 id="nodejs-内置调试模块" tabindex="-1"><a class="header-anchor" href="#nodejs-内置调试模块" aria-hidden="true">#</a> NodeJS 内置调试模块</h3><p>NodeJS 提供了内置的调试模块。使用起来非常简单直接，缺点是没有 UI 页面，纯命令行操作。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ node debug index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们通过 <code>debugger</code> 语句来设置断点。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">debugger</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>内置的调试模块支持如下命令：</p><ul><li>cont 或 c –- 继续执行</li><li>next 或 n –- 往下一步</li><li>step 或 s –- 进入函数</li><li>out 或 o –- 退出函数</li><li>repl –- 刷新上下文信息</li></ul><p><img src="/posts/images/nodejs-debug-tools/nodejs-debug-c.gif" alt="nodejs debug"></p><h3 id="v8-inspector" tabindex="-1"><a class="header-anchor" href="#v8-inspector" aria-hidden="true">#</a> V8 Inspector</h3><p>我们还可以通过 V8 inspector，使用 Chrome 的 DevTools 来调试 NodeJS 代码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ node --inspect index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面这条命令，通过 <code>--inspect</code> 参数告诉 NodeJS 启用 V8 Inspector。之后我们在 Chrome 中输入 <code>chrome://inspect/</code>，然后找到我们要调试的那个文件，就可以使用 Chrome DevTools 调试代码了。</p><p>有时候，我们需要在代码的入口处开始调试，则可以通过 <code>--inspect-brk</code> 来在起始地点开始调试。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ node --inspect-brk index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/posts/images/nodejs-debug-tools/inspector-c.gif" alt="node --inspect"></p><h3 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode" aria-hidden="true">#</a> VSCode</h3><p>最后我们介绍如何在 VSCode 中调试代码，这也是最高频使用的。</p><p><img src="/posts/images/nodejs-debug-tools/vscode-c.gif" alt="vscode"></p><p>通常我们可以直接通过菜单启动调试，就像上面的演示效果那样。</p><p>如果我们需要一些高级设置，VSCode 允许我们配置一个 <code>.vscode/launch.json</code> 文件，来告诉 VSCode 如何启动调试器。</p><p>默认的配置项如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Launch Program&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceRoot}/index.js&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attach&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Attach to Port&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">5858</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',29),x=(0,e.Uk)("关于每个配置项的作用和具体用法，可以在 "),y={href:"https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("VSCode 的文档"),f=(0,e.Uk)("中查询。"),w=(0,e.uE)('<p>另外，如果我们在 VSCode 的内置命令行通过 <code>node --inspect</code> 启动程序的话，会自动激活 VSCode 的调试功能。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',2),S={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,p,o,l,c,(0,e.Wm)("p",null,[(0,e.Wm)("a",r,[u,(0,e.Wm)(a)]),i]),d,(0,e.Wm)("p",null,[(0,e.Wm)("a",b,[k,(0,e.Wm)(a)]),m,(0,e.Wm)("a",g,[h,(0,e.Wm)(a)]),q]),v,(0,e.Wm)("p",null,[x,(0,e.Wm)("a",y,[j,(0,e.Wm)(a)]),f]),w],64)}}}}]);