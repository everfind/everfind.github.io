"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8257],{5848:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2e1ba6c6",path:"/courses/webpack/export-css.html",title:"导出样式文件",lang:"zh-CN",frontmatter:{title:"导出样式文件",description:"介绍 Webpack 如何导出样式文件",keywords:["Webpack"],date:"2021-01-08T00:00:00.000Z",key:6},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"mini-css-extract-plugin",slug:"mini-css-extract-plugin",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/export-css.md"}},4053:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var p=a(6252);const e=(0,p.Wm)("p",null,"默认情况下，css 会被打包到 JavaScript 中，在生产环境这么做有一些问题，比如会导致页面闪动。因为浏览器需要加载完 js 以后才能加载样式，此时已有的 html 只能使用浏览器的默认样式。",-1),t=(0,p.Uk)("我们需要将 css 导出到单独的文件中。通过 "),c={href:"https://www.npmjs.com/package/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("mini-css-extract-plugin"),l=(0,p.Uk)(" 插件我们可以实现将 css 导出到单独的 css bundle 中。mini-css-extract-plugin 插件还可以将多个 css 文件合并成一个 css 文件。出于这个原因，mini-css-extract-plugin 实际上会有一个 loader 来处理导出过程，然后将导出的内容通过插件保存为 css 文件。"),i=(0,p.uE)('<h2 id="mini-css-extract-plugin" tabindex="-1"><a class="header-anchor" href="#mini-css-extract-plugin" aria-hidden="true">#</a> mini-css-extract-plugin</h2><p>安装 mini-css-extract-plugin 插件：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> mini-css-extract-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>mini-css-extract-plugin 包含有一个 loader <code>MiniCssExtractPlugin.loader</code>，这个 loader 负责将最终 css 内容导出，然后插件基于导出的内容处理，最终生成 css 文件。</p><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">extractCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span> loader<span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          sideEffects<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 如果构建结果作为一个 npm 包使用时建设设置</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        filename<span class="token operator">:</span> <span class="token string">&#39;[name].css&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><code>[name]</code> 占位符使用了导入 css 文件的那个 entry 的名字，如果需要将 css 生成到目录，则可以将路径也放到 <code>filename</code> 配置项里，比如 <code>filename: &quot;styles/[name].css&quot;</code>。</p><p>更新 <strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token comment">// parts.loadCSS(),</span>\n  parts<span class="token punctuation">.</span><span class="token function">extractCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>执行 <code>npm run build</code>，输出结果如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset index.html 229 bytes [compared for emit]\n  asset main.js 136 bytes [compared for emit] [minimized] (name: main)\n  asset main.css 33 bytes [compared for emit] (name: main)\n  Entrypoint main 169 bytes = main.css 33 bytes main.js 136 bytes\n  orphan modules 199 bytes [orphan] 2 modules\n  code generated modules 298 bytes (javascript) 32 bytes (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 298 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./src/main.css 32 bytes [code generated]\n  webpack 5.11.1 compiled successfully in 572 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>css 被打包到单独的文件中，避免了闪屏问题。</p>',12),r=(0,p.Uk)("默认情况下，我们需要在应用入口引入 css 文件，换句话说需要在 js 文件中引入 css。如果不想在 js 文件引用 css 的话，则可以通过 webpack entry 和 "),u={href:"https://www.npmjs.com/package/glob",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("glob"),m=(0,p.Uk)(" 的形式实现 css 的加载。示例如下："),b=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;glob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">&#39;./src/**/*.css&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 需要手动保证 css 的顺序</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过使用 MiniCssExtractPlugin 插件可以解决闪屏问题，同时也优化了浏览器资源加载性能。</p><p>如果不想在 JavaScript 中引入 css 文件，则可以通过 webpack entry 的形式加载 css，但是要额外 css 的引用顺序。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',5),d={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)("a",c,[o,(0,p.Wm)(a)]),l]),i,(0,p.Wm)("p",null,[r,(0,p.Wm)("a",u,[k,(0,p.Wm)(a)]),m]),b],64)}}}}]);