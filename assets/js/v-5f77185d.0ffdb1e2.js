"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[2662],{9360:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-5f77185d",path:"/tools/ls-lint.html",title:"文件和目录命名 lint 工具",lang:"zh-CN",frontmatter:{title:"文件和目录命名 lint 工具",date:"2021-08-27T00:00:00.000Z",description:"约束文件和代码目录命名规范，实现统一的风格。",keywords:["ls-lint"],tags:["工具"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"规则",slug:"规则",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],filePathRelative:"tools/ls-lint.md"}},8925:(n,a,s)=>{s.r(a),s.d(a,{default:()=>u});var e=s(6252);const t=(0,e.Wm)("p",null,"不知道大家有没有维护过陈年老代码的经历，我曾经看过一个项目，维护代码的人都换过好多个的那种。因为缺少一些规范约束，编码风格、文件命名等都带着浓重的个人风格。",-1),p=(0,e.Wm)("p",null,"对于一个需要多人协作的项目来说，我们还是需要有一些编码约束来提高协作效率的。",-1),l=(0,e.Uk)("今天我们来介绍一个工具，"),c={href:"https://ls-lint.org/1.x/getting-started/introduction.html#key-facts",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("ls-lint"),r=(0,e.Uk)(" 用于对文件和目录名称进行规范约束。"),i=(0,e.uE)('<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>在项目根目录下安装依赖包。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @ls-lint/ls-lint\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>安装完成后，在项目根目录下配置一个配置文件 <code>.ls-lint.yml</code>。配置文件非常简单，分成两个部分：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">ls</span><span class="token punctuation">:</span> \n  <span class="token punctuation">...</span>\n<span class="token key atrule">ignore</span><span class="token punctuation">:</span> \n  <span class="token punctuation">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>ls</code> 下面配置对哪些文件使用规则，支持文件名、目录、正则等多种配置方式。<code>ignore</code> 是一个数组，定义需要忽略的文件或者目录。</p><p>下面是一个配置样例，注释是每个用法的具体说明：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">ls</span><span class="token punctuation">:</span>\n  <span class="token key atrule">.js</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case <span class="token comment"># 对所有 JS 文件使用 kebab-case 形式</span>\n  <span class="token key atrule">.ts</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case <span class="token punctuation">|</span> camelCase <span class="token punctuation">|</span> PascalCase <span class="token comment"># 对所有 TS 文件使用 kebab-case 或者 camelCase 或者 PascalCase 形式</span>\n  <span class="token key atrule">.d.ts</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case <span class="token comment"># 对所有 .d.ts 文件使用 kebab-case 形式</span>\n\n  <span class="token key atrule">packages/src</span><span class="token punctuation">:</span>\n    <span class="token key atrule">.dir</span><span class="token punctuation">:</span> camelCase <span class="token comment"># 对当前目录和所有子目录使用 camelCase</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> camelCase <span class="token comment"># 对 packages/src 下的 JS 文件使用 camelCase，会覆盖上面的全局配置</span>\n\n  <span class="token key atrule">models</span><span class="token punctuation">:</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> PascalCase <span class="token comment"># models 目录下的 JS 文件使用 PascalCase</span>\n\n  <span class="token key atrule">packages/*/src</span><span class="token punctuation">:</span> <span class="token comment"># * 号匹配除了目录分隔符以外的任意字符</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case\n\n  <span class="token key atrule">packages/**/templates</span><span class="token punctuation">:</span> <span class="token comment"># ** 号匹配包含目录分隔符以外的任意字符</span>\n    <span class="token key atrule">.html</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case\n\n  packages/<span class="token important">*/</span><span class="token punctuation">{</span>src<span class="token punctuation">,</span>tests<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token comment"># 匹配 package 下下一级目录中的 src 或 tests 目录中的文件</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case\n\n<span class="token key atrule">ignore</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> .git <span class="token comment"># 忽略 .git 目录</span>\n  <span class="token punctuation">-</span> node_modules <span class="token comment"># 忽略 node_modules 目录</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>注意，目录匹配在 <code>ignore</code> 中不支持。</p><h2 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h2><p>上面的例子，除了展示各种支持的匹配文件或目录的方式以外，还配置了这些名称要满足哪些规则要求。</p><p>下面的表格展示了所有支持的规则：</p><table><thead><tr><th>规则</th><th>别名</th><th>描述</th></tr></thead><tbody><tr><td>正则</td><td>-</td><td>满则正则表达式<code>^{pattern}$</code></td></tr><tr><td>lowercase</td><td>-</td><td>文件或目录名必须全小写，数字除外，如 abeautifulname</td></tr><tr><td>camelcase</td><td>camelCase</td><td>文件和目录名必须为驼峰式，且只支持字母和数字，如 aBeautifulCase</td></tr><tr><td>pascalcase</td><td>PascalCase</td><td>文件和目录名必须满足帕斯卡命名法，且只支持字母和数字，如 ABeautifulName</td></tr><tr><td>snakecase</td><td>snake_case</td><td>文件和目录名必须为下划线联接，且只支持字母、数字和下划线，如 a_beautiful_name</td></tr><tr><td>kebabcase</td><td>kebab-case</td><td>文件和目录名必须为中划线联接，且只支持字母、数字和中划线，如 a-beautiful-name</td></tr><tr><td>pointcase</td><td>point.case</td><td>文件和目录名必须满足点文件规范，且只支持字母、数字和点，如 a.beautiful.name</td></tr></tbody></table><p>其中正则表达式要多说一句，即我们配置了模式为 <code>pattern</code>，最终生成的正则表达式是 <code>^{pattern}$</code>。</p><p>比如：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">ls</span><span class="token punctuation">:</span>\n  <span class="token key atrule">.js</span><span class="token punctuation">:</span> regex<span class="token punctuation">:</span><span class="token punctuation">[</span>a<span class="token punctuation">-</span>z0<span class="token punctuation">-</span><span class="token number">9</span><span class="token punctuation">]</span>+ <span class="token comment"># 最终的正则是 ^[a-z0-9]+$</span>\n  <span class="token key atrule">.ts</span><span class="token punctuation">:</span> regex<span class="token punctuation">:</span>Schema(\\.test)<span class="token punctuation">?</span> <span class="token punctuation">|</span> regex<span class="token punctuation">:</span>Resolver(\\.test)<span class="token punctuation">?</span> <span class="token comment"># 支持配置多个正则，使用 | 分割，但是这种情况下就不能再使用正则中的 | 符号了。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>今天我们介绍了一个对文件和目录名称进行约束的工具 ls-lint。通过样例详细说明了各种用法和支持的约束规则。通过这个工具，我们可以保证代码中文件和目录命名是统一风格的。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',20),u={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,p,(0,e.Wm)("p",null,[l,(0,e.Wm)("a",c,[o,(0,e.Wm)(s)]),r]),i],64)}}}}]);