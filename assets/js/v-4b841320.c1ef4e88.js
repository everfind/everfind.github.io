"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6494],{5273:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4b841320",path:"/solutions/micro-frontend/qiankun.html",title:"qiankun 技术分析",lang:"zh-CN",frontmatter:{title:"qiankun 技术分析",description:"对阿里的微前端框架 qiankun 进行技术分析，了解技术原理。",keywords:["micro frontend","微前端","qiankun"],date:"2021-12-15T00:00:00.000Z",key:3,tags:["技术分析"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"如何加载子应用",slug:"如何加载子应用",children:[{level:3,title:"import-html-entry",slug:"import-html-entry",children:[]},{level:3,title:"loadApp",slug:"loadapp",children:[]}]},{level:2,title:"隔离",slug:"隔离",children:[{level:3,title:"JS 隔离",slug:"js-隔离",children:[]},{level:3,title:"样式隔离",slug:"样式隔离",children:[]}]},{level:2,title:"小结",slug:"小结",children:[]}],filePathRelative:"solutions/micro-frontend/qiankun.md"}},8741:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Mn});var t=a(6252);const p=(0,t.Uk)("我们在"),e=(0,t.Uk)("single-spa 技术分析"),o=(0,t.Uk)("里面讲到，"),l={href:"https://single-spa.js.org/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("single-spa"),r=(0,t.Uk)(" 基本实现了一个微前端框架需要具备的各种功能，但是又实现的不够彻底，遗留了很多问题需要解决。虽然官方提供了很多样例和最佳实践，但是总显得过于单薄，总给人一种“问题解决了，但是又没有完全解决”的感觉。"),u={href:"https://qiankun.umijs.org/zh",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("qiankun"),k=(0,t.Uk)(" 在 single-spa 的基础上做了二次开发，完善了很多功能，算是一个比较完备的微前端框架了。今天我们来聊一聊 qiankun 的技术原理。"),m=(0,t.Wm)("p",null,"在本系列的开头，我们提到微前端的核心问题其实就是解决如何加载子应用以及如果做好子应用间的隔离问题。所以，我们从这两点来看 qiankun 的实现。",-1),d=(0,t.Wm)("h2",{id:"如何加载子应用",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#如何加载子应用","aria-hidden":"true"},"#"),(0,t.Uk)(" 如何加载子应用")],-1),b=(0,t.Uk)("single-spa 通过 js entry 的形式来加载子应用。而 qiankun 采用了 html entry 的形式。这两种方式的优缺点我们在"),g=(0,t.Uk)("理解微前端技术原理"),h=(0,t.Uk)("中已经做过分析，这里不再赘述，我们看看 qiankun 是如何实现 html entry 的。"),y=(0,t.Wm)("p",null,[(0,t.Uk)("qiankun 提供了一个 API "),(0,t.Wm)("code",null,"registerMicroApps"),(0,t.Uk)(" 来注册子应用，其内部调用 single-spa 提供的 "),(0,t.Wm)("code",null,"registerApplication"),(0,t.Uk)(" 方法。在调用 "),(0,t.Wm)("code",null,"registerApplication"),(0,t.Uk)(" 之前，会调用内部的 "),(0,t.Wm)("code",null,"loadApp"),(0,t.Uk)(" 方法来加载子应用的资源，初始化子应用的配置。")],-1),f=(0,t.Uk)("通过阅读 "),x=(0,t.Wm)("code",null,"loadApp",-1),W=(0,t.Uk)(" 的代码，我们发现，qiankun 通过 "),U={href:"https://npmjs.org/package/import-html-entry",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("import-html-entry"),q=(0,t.Uk)(" 这个包来加载子应用。import-html-entry 的作用就是通过解析子应用的入口 html 文件，来获取子应用的 html 模板、css 样式和入口 JS 导出的生命周期函数。"),w=(0,t.uE)('<h3 id="import-html-entry" tabindex="-1"><a class="header-anchor" href="#import-html-entry" aria-hidden="true">#</a> import-html-entry</h3><p><code>import-html-entry</code> 是这样工作的，假设我们有如下 html entry 文件:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- mark the entry script with entry attribute --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/mobx@5.0.3/lib/mobx.umd.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">entry</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/react@16.4.2/umd/react.production.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>我们使用 <code>import-html-entry</code> 来解析这个 html 文件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> importHTML <span class="token keyword">from</span> <span class="token string">&#39;import-html-entry&#39;</span><span class="token punctuation">;</span>\n\n<span class="token function">importHTML</span><span class="token punctuation">(</span><span class="token string">&#39;./subApp/index.html&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        res<span class="token punctuation">.</span><span class="token function">execScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">exports</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> mobx <span class="token operator">=</span> exports<span class="token punctuation">;</span>\n            <span class="token keyword">const</span> <span class="token punctuation">{</span> observable <span class="token punctuation">}</span> <span class="token operator">=</span> mobx<span class="token punctuation">;</span>\n            <span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                name<span class="token operator">:</span> <span class="token string">&#39;kuitos&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\t\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>importHTML</code> 的返回值有如下几个属性：</p><ul><li>template 处理后的 HTML 模板</li><li>assetPublicPath 静态资源的公共路径</li><li>getExternalScripts 获取所有外部脚本的函数，返回脚本路径</li><li>getExternalStyleSheets 获取所有外部样式的函数，返回样式文件的路径</li><li>execScripts 执行脚本的函数</li></ul><p>在 <code>importHTML</code> 的返回值中，除了几个工具类的方法，最重要的就是 <code>template</code> 和 <code>execScripts</code> 了。</p>',8),S=(0,t.Wm)("code",null,"importHTML('./subApp/index.html')",-1),j=(0,t.Uk)(" 的整个执行过程代码比较长，我们只讲一下大概的执行原理，感兴趣的同学可以自行查看"),E={href:"https://github.com/kuitos/import-html-entry/blob/master/src/index.js#L239",target:"_blank",rel:"noopener noreferrer"},A=(0,t.Uk)("importHTML 的源码"),P=(0,t.Uk)("。"),L=(0,t.Wm)("code",null,"importHTML",-1),T=(0,t.Uk)(" 首先会通过 "),H=(0,t.Wm)("code",null,"fetch",-1),M=(0,t.Uk)(" 函数请求具体的 html 内容，然后在 "),_={href:"https://github.com/kuitos/import-html-entry/blob/master/src/process-tpl.js#L58",target:"_blank",rel:"noopener noreferrer"},F=(0,t.Wm)("code",null,"processTpl",-1),C=(0,t.Uk)(" 函数"),B=(0,t.Uk)(" 中通过一系列复杂的正则匹配，解析出 html 中的样式文件和 js 文件。"),I=(0,t.Wm)("p",null,[(0,t.Wm)("code",null,"importHTML"),(0,t.Uk)(" 函数返回值为 "),(0,t.Wm)("code",null,"{ template, scripts, entry, styles }"),(0,t.Uk)("，分别是 html 模板，html 中的 js 文件（包含内嵌的代码和通过链接加载的代码），子应用的入口文件，html 中的样式文件（同样是包含内嵌的代码和通过链接加载的代码）。")],-1),O=(0,t.Uk)("之后通过 "),z={href:"https://github.com/kuitos/import-html-entry/blob/master/src/index.js#L38",target:"_blank",rel:"noopener noreferrer"},J=(0,t.Wm)("code",null,"getEmbedHTML",-1),D=(0,t.Uk)(" 函数"),K=(0,t.Uk)(" 将所有使用外部链接加载的样式全部转化成内嵌到 html 中的样式。"),R=(0,t.Wm)("code",null,"getEmbedHTML",-1),G=(0,t.Uk)(" 返回的 html 就是 "),N=(0,t.Wm)("code",null,"importHTML",-1),Y=(0,t.Uk)(" 函数最终返回的 "),V=(0,t.Wm)("code",null,"template",-1),Z=(0,t.Uk)(" 内容。"),Q=(0,t.uE)('<p>现在，我们看看 <code>execScripts</code> 是怎么实现的。</p><p><code>execScripts</code> 内部会调用 <code>getExternalScripts</code> 加载所有 js 代码的文本内容，然后通过 <code>eval(&quot;code&quot;)</code> 的形式执行加载的代码。</p><p>注意，<code>execScripts</code> 的函数签名是这样的 <code>(sandbox?: object, strictGlobal?: boolean, execScriptsHooks?: ExecScriptsHooks): Promise&lt;unknown&gt;</code>。允许我们传入一个沙箱对象，如果子应用按照微前端的规范打包，那么会在全局对象上设置 <code>mount</code>、<code>unmount</code> 这几个生命周期函数属性。<code>execScripts</code> 在执行 <code>eval(&quot;code&quot;)</code> 的时候，会巧妙的把我们指定的沙箱最为全局对象包装到 <code>&quot;code&quot;</code> 中，子应用能够运行在沙盒环境中。</p><p>在执行完 <code>eval(&quot;code&quot;)</code> 以后，就可以从沙盒对象上获取子应用导出的生命周期函数了。</p><h3 id="loadapp" tabindex="-1"><a class="header-anchor" href="#loadapp" aria-hidden="true">#</a> loadApp</h3>',5),X=(0,t.Uk)("现在我们把视线拉回 "),$=(0,t.Wm)("code",null,"loadApp",-1),nn=(0,t.Uk)(" 中，"),sn=(0,t.Wm)("code",null,"loadApp",-1),an=(0,t.Uk)(" 在获取到 "),tn=(0,t.Wm)("code",null,"template",-1),pn=(0,t.Uk)("、"),en=(0,t.Wm)("code",null,"execScripts",-1),on=(0,t.Uk)(" 这些信息以后，会基于 "),ln=(0,t.Wm)("code",null,"template",-1),cn=(0,t.Uk)(" 生成 "),rn={href:"https://github.com/umijs/qiankun/blob/master/src/loader.ts#L296",target:"_blank",rel:"noopener noreferrer"},un=(0,t.Wm)("code",null,"render",-1),kn=(0,t.Uk)(" 函数"),mn=(0,t.Uk)("用于渲染子应用的页面。之后会根据需要生成沙盒，并将沙盒对象传给 "),dn=(0,t.Wm)("code",null,"execScripts",-1),bn=(0,t.Uk)(" 来获取子应用导出的声明周期函数。"),gn=(0,t.Wm)("p",null,"之后，在子应用生命周期函数的基础上，构建新的生命周期函数，再调用 single-spa 的 API 启动子应用。",-1),hn=(0,t.Wm)("p",null,"在这些新的生命周期函数中，会在不同时机负责启动沙盒、渲染子应用、清理沙盒等事务。",-1),yn=(0,t.Wm)("h2",{id:"隔离",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#隔离","aria-hidden":"true"},"#"),(0,t.Uk)(" 隔离")],-1),fn=(0,t.Wm)("p",null,"在完成子应用的加载以后，作为一个微前端框架，要解决好子应用的隔离问题，主要要解决 JS 隔离和样式隔离这两方面的问题。",-1),xn=(0,t.Wm)("h3",{id:"js-隔离",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#js-隔离","aria-hidden":"true"},"#"),(0,t.Uk)(" JS 隔离")],-1),Wn=(0,t.Uk)("qiankun 为根据浏览器的能力创建两种沙箱，在老旧浏览器中会创建"),Un=(0,t.Uk)("快照模式"),vn=(0,t.Uk)("的沙箱 "),qn=(0,t.Wm)("code",null,"SnapshotSandbox",-1),wn=(0,t.Uk)("，在支持 "),Sn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},jn=(0,t.Uk)("Proxy"),En=(0,t.Uk)(" 的浏览器中创建 "),An=(0,t.Uk)("VM 模式"),Pn=(0,t.Uk)("的沙箱 "),Ln=(0,t.Wm)("code",null,"ProxySandbox",-1),Tn=(0,t.Uk)("。"),Hn=(0,t.uE)('<p>篇幅限制，我们只看 <code>ProxySandbox</code> 的实现，在其构造函数中，我们可以看到具体的逻辑：首先会根据用户指定的全局对象（默认是 window）创建一个 <code>fakeWindow</code>，之后在这个 <code>fakeWindow</code> 上创建一个 proxy 对象，在子应用中，这个 proxy 对象就是全局变量 <code>window</code>。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> globalContext <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> fakeWindow<span class="token punctuation">,</span> propertiesWithGetter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createFakeWindow</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      set<span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      get<span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function">has</span><span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> PropertyDescriptor <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">)</span><span class="token operator">:</span> ArrayLike<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> attributes<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      deleteProperty<span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> proxy<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>其实 qiankun 中的沙箱分两个类型：</p><ul><li>app 环境沙箱 app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 <code>bootstrap</code> 。子应用在切换时，实际上切换的是 app 环境沙箱。</li><li>render 沙箱 子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。</li></ul><p>上面说的 <code>ProxySandbox</code> 其实是 render 沙箱。至于 app 环境沙箱，qiankun 目前只针对在应用 <code>bootstrap</code> 时动态创建样式链接、脚本链接等副作用打了补丁，保证子应用切换时这些副作用互不干扰。</p><p>之所以设计两层沙箱，是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。</p><h3 id="样式隔离" tabindex="-1"><a class="header-anchor" href="#样式隔离" aria-hidden="true">#</a> 样式隔离</h3><p>qiankun 提供了多种样式隔离方式，隔离效果最好的是 shadow dom，但是由于其存在诸多限制，qiankun 官方在将来的版本中将会弃用，转而推行 <code>experimentalStyleIsolation</code> 方案。</p><p>我们可以通过下面这段代码看到 <code>experimentalStyleIsolation</code> 方案的基本原理。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> styleNodes <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">forEach</span><span class="token punctuation">(</span>styleNodes<span class="token punctuation">,</span> <span class="token punctuation">(</span>stylesheetElement<span class="token operator">:</span> HTMLStyleElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  css<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>appElement<span class="token operator">!</span><span class="token punctuation">,</span> stylesheetElement<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>css.process</code> 的核心逻辑，就是给读取到的子应用的样式添加带有子应用信息的前缀。效果如下：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* 假设应用名是 react16 */</span> \n<span class="token selector">.app-main</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">div[data-qiankun-react16] .app-main</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过上面的隔离方法，基本可以保证子应用间的样式互不影响。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>qiankun 在 single-spa 的基础上根据实际的生产实践开发了很多有用的功能，大大降低了微前端的使用成本。</p><p>本文仅仅针对如何加载子应用和如何做好子应用间的隔离这两个问题，介绍了 qiankun 的实现。其实，在隔离这个问题上，qiankun 也仅仅是根据实际中会遇到的情况做了必要的隔离措施，并没有像 iframe 那样实现完全的隔离。我们可以说 qiankun 实现的隔离有缺陷，也可以说是 qiankun 在实际的业务需求和完全隔离的实现成本之间做的取舍。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',17),Mn={render:function(n,s){const a=(0,t.up)("RouterLink"),Mn=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[(0,t.Wm)("p",null,[p,(0,t.Wm)(a,{to:"/solutions/micro-frontend/single-spa.html"},{default:(0,t.w5)((()=>[e])),_:1}),o,(0,t.Wm)("a",l,[c,(0,t.Wm)(Mn)]),r]),(0,t.Wm)("p",null,[(0,t.Wm)("a",u,[i,(0,t.Wm)(Mn)]),k]),m,d,(0,t.Wm)("p",null,[b,(0,t.Wm)(a,{to:"/solutions/micro-frontend/microfrontend.html"},{default:(0,t.w5)((()=>[g])),_:1}),h]),y,(0,t.Wm)("p",null,[f,x,W,(0,t.Wm)("a",U,[v,(0,t.Wm)(Mn)]),q]),w,(0,t.Wm)("p",null,[S,j,(0,t.Wm)("a",E,[A,(0,t.Wm)(Mn)]),P]),(0,t.Wm)("p",null,[L,T,H,M,(0,t.Wm)("a",_,[F,C,(0,t.Wm)(Mn)]),B]),I,(0,t.Wm)("p",null,[O,(0,t.Wm)("a",z,[J,D,(0,t.Wm)(Mn)]),K,R,G,N,Y,V,Z]),Q,(0,t.Wm)("p",null,[X,$,nn,sn,an,tn,pn,en,on,ln,cn,(0,t.Wm)("a",rn,[un,kn,(0,t.Wm)(Mn)]),mn,dn,bn]),gn,hn,yn,fn,xn,(0,t.Wm)("p",null,[Wn,(0,t.Wm)(a,{to:"/solutions/micro-frontend/microfrontend.html#%E5%BF%AB%E7%85%A7%E6%A8%A1%E5%BC%8F"},{default:(0,t.w5)((()=>[Un])),_:1}),vn,qn,wn,(0,t.Wm)("a",Sn,[jn,(0,t.Wm)(Mn)]),En,(0,t.Wm)(a,{to:"/solutions/micro-frontend/microfrontend.html#vm-%E8%99%9A%E6%8B%9F%E6%9C%BA-%E6%A8%A1%E5%BC%8F"},{default:(0,t.w5)((()=>[An])),_:1}),Pn,Ln,Tn]),Hn],64)}}}}]);