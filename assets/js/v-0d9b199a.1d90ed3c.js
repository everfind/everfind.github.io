"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4720],{5674:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-0d9b199a",path:"/courses/webpack/what-is-loader.html",title:"什么是 loader",lang:"zh-CN",frontmatter:{title:"什么是 loader",description:"介绍 Webpack 中 loader 的概念",keywords:["Webpack"],date:"2021-01-11T00:00:00.000Z",key:9},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Loader 的顺序",slug:"loader-的顺序",children:[]},{level:2,title:"loader 的参数",slug:"loader-的参数",children:[]},{level:2,title:"内联 loader 定义",slug:"内联-loader-定义",children:[]},{level:2,title:"通过 info 对象来加载资源",slug:"通过-info-对象来加载资源",children:[]},{level:2,title:"通过 resourceQuery 加载资源",slug:"通过-resourcequery-加载资源",children:[]},{level:2,title:"通过 issuer 加载资源",slug:"通过-issuer-加载资源",children:[]},{level:2,title:"调整 loader 匹配条件的各种方法",slug:"调整-loader-匹配条件的各种方法",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/what-is-loader.md"}},9133:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<p>前面在加载样式文件的时候介绍了很多 loader，每个 loader 都有不同的配置方法。实际上，Webpack 提供了多种方式来设置 loader 参数。本文就来详细说明如何配置一个 loader。</p><p>Webpack 默认只支持 CommonJS 规范。其他规范的模块，Webpack 需要借助于 loader 来解析。下面的样例展示了利用 babel 来加载 JavaScript 文件的 loader 配置。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 文件匹配条件，支持正则表达式或者函数</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n\n        <span class="token comment">// 文件目录匹配</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">exclude</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 针对匹配到的文件需要执行的动作</span>\n        use<span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="loader-的顺序" tabindex="-1"><a class="header-anchor" href="#loader-的顺序" aria-hidden="true">#</a> Loader 的顺序</h2><p>在 Webpack 中，loader 是按从右向左，从下向上的顺序依次评估的。可以通过函数调用的方式加以理解。<code>use: [&quot;style-loader&quot;, &quot;css-loader&quot;]</code> 等同于 <code>style(css(input))</code> 。参考样例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>基于从右向左的原则，配置还可以改成这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>正常情况下，通过上面的规则，我们可以实现各种处理顺序的 loader 定义。但是，有时候如果可以动态调整 loader 定义的顺序会给开发带来极大的遍历。这时候我们可以通过 <code>enforce</code> 这个字段来实现，<code>enforce</code> 取值为 <code>pre</code> 则 loader 会在其他 loader 之前执行，取值为 <code>post</code> 则 loader 会在其他 loader 之后执行。</p><p>代码规范静态检查配置可以很好的说明 <code>enforce</code> 的使用，通常我们需要在加载源代码的时候就检查代码规范，因此需要配置 <code>enforce: &quot;pre&quot;</code>。<code>enforce:&quot;post&quot;</code> 不太常用，通常会被用在对构建输出做校验的场景下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  enforce<span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span> <span class="token comment">// &quot;post&quot; too</span>\n  use<span class="token operator">:</span> <span class="token string">&#39;eslint-loader&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通常来说，我们也可以通过纯代码的形式控制 loader 顺序，但是 <code>enforce</code> 提供了更多的遍历，同时也允许 loader 的配置分散在多个文件中，灵活性更好。</p><h2 id="loader-的参数" tabindex="-1"><a class="header-anchor" href="#loader-的参数" aria-hidden="true">#</a> loader 的参数</h2><p>Webpack 支持通过 query 参数的形式给 loader 设置参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;babel-loader?presets[]=env&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这种传参方式同样可以被应用在源代码中。缺点是可读性差一些。</p><p>通常情况下，我们使用 <code>use</code> 来给 loader 传参：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;env&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="内联-loader-定义" tabindex="-1"><a class="header-anchor" href="#内联-loader-定义" aria-hidden="true">#</a> 内联 loader 定义</h2><p>通常情况下，我们通过 webpack 的配置文件来定义 loader，但是，Webpack 同时支持在源代码中通过内联的形式定义 loader。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;url-loader!./foo.png&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;!!url-loader!./bar.png&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>一般来说，我们应该避免这么做，因为这样使得我们的源代码跟 webpack 产生了耦合。</p><p>我们也可以在 webpack 的 entry 配置中定义 loader。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> entry<span class="token operator">:</span> <span class="token punctuation">{</span> app<span class="token operator">:</span> <span class="token string">&#39;babel-loader!./app&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="通过-info-对象来加载资源" tabindex="-1"><a class="header-anchor" href="#通过-info-对象来加载资源" aria-hidden="true">#</a> 通过 <code>info</code> 对象来加载资源</h2><p><code>use</code> 支持传递一个函数，返回 loader 配置。在这个函数里，我们可以根据环境等条件返回不同的配置。<code>use</code> 函数中必须返回一个值，可以为 falsy, object，或者字符串。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span> <span class="token punctuation">{</span> presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;env&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>info 对象包含如下内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  resource<span class="token operator">:</span> <span class="token string">&#39;/webpack-demo/src/main.css&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 表示匹配到的资源路径</span>\n  realResource<span class="token operator">:</span> <span class="token string">&#39;/webpack-demo/src/main.css&#39;</span><span class="token punctuation">,</span>\n  resourceQuery<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 表示匹配到的资源的查询参数</span>\n  issuer<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 表示引用这个资源的模块路径</span>\n  compiler<span class="token operator">:</span> <span class="token string">&#39;mini-css-extract-plugin /webpack-demo/node_modules/css-loader/dist/cjs.js!/webpack-demo/node_modules/postcss-loader/src/index.js??ref--4-2!/webpack-demo/node_modules/postcss-loader/src/index.js??ref--4-3!/webpack-demo/src/main.css&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="通过-resourcequery-加载资源" tabindex="-1"><a class="header-anchor" href="#通过-resourcequery-加载资源" aria-hidden="true">#</a> 通过 resourceQuery 加载资源</h2><p>可以通过 <code>oneOf</code> 字段，我们可以配置让 Webpack 根据不同的资源加载不同的 loader。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  oneOf<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> resourceQuery<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">inline</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> resourceQuery<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">external</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>除了 resourceQuery，也可以使用 resourcePath.</p><h2 id="通过-issuer-加载资源" tabindex="-1"><a class="header-anchor" href="#通过-issuer-加载资源" aria-hidden="true">#</a> 通过 issuer 加载资源</h2><p><code>issuer</code> 可以用来根据引用者来加载不同的 loader。下面的例子，表示当一个 css 是被 JavaScript 文件引用的时候，需要加载 <code>style-loader</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> issuer<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> use<span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>issuer</code> 也可以与 <code>not</code> 混用，</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 将被其他非 css 模块引入的 css 写入到 dom 中</span>\n    <span class="token punctuation">{</span> issuer<span class="token operator">:</span> <span class="token punctuation">{</span> not<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> use<span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 处理 css 导入</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="调整-loader-匹配条件的各种方法" tabindex="-1"><a class="header-anchor" href="#调整-loader-匹配条件的各种方法" aria-hidden="true">#</a> 调整 loader 匹配条件的各种方法</h2><ul><li><code>test</code>, <code>include</code>, <code>exclude</code> 是最常用的匹配条件，可以设置为正则表达式、字符串、函数、对象，或者一个数组。</li><li><code>resource: /inline/</code> 匹配资源路径，包括查询参数，比如： <code>/path/foo.inline.js</code>, <code>/path/bar.png?inline</code>.</li><li><code>issuer: /bar.js/</code> 当一个资源的引用方满足条件的时候，这个资源被匹配到。比如：<code>/path/foo.png</code> 如果被 <code>/path/bar.js</code> 引用了，则它就会被匹配。</li><li><code>resourcePath: /inline/</code> 仅匹配资源路径，比如： <code>/path/foo.inline.png</code></li><li><code>resourceQuery: /inline/</code> 仅匹配资源的查询参数，比如： <code>/path/foo.png?inline</code>.</li></ul><p>同时还可以与下面的布尔型匹配条件组合使用。</p><ul><li><code>not</code> 不匹配某一个条件。</li><li><code>and</code> 同时满足一组条件。</li><li><code>or</code> 满足一组条件中的一个。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code> loader-runner</code> 这个包可以不借助 Webpack 直接运行 loader, 可以帮助我们更好的理解 loader 的工作机制。通过将 <code>inspect-loader</code> 这个工具与 Webpack 配置结合起来，我们可以了解 loader 之间数据是如何传递的。</p><p>我们通过 loader 来配置 Webpack 根据不同的模块使用不同的处理机制。</p><p>一个 loader 定义包块匹配模块的条件和处理模块的动作。</p><p>Webpack 提供了多种定义 loader 的方式，我们可以根据不同的需求使用不同的配置。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',48),p={render:function(s,n){return e}}}}]);