"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[2328],{2944:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-d440f426",path:"/tools/",title:"开发利器",lang:"zh-CN",frontmatter:{title:"开发利器",sidebar:!1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],filePathRelative:"tools/README.md",articleList:[{key:"v-508c1a72",path:"/tools/how-to-use-google.html",title:"如何高效使用 Google？",lang:"zh-CN",frontmatter:{title:"如何高效使用 Google？",date:"2019-07-01T00:00:00.000Z",description:"Google 搜索引擎的使用技巧",keywords:["google","search skills"],tags:["工具"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"常用搜索技巧",slug:"常用搜索技巧",children:[{level:3,title:"从搜索结果中排除特定字词",slug:"从搜索结果中排除特定字词",children:[]},{level:3,title:"搜索完全匹配的结果",slug:"搜索完全匹配的结果",children:[]},{level:3,title:"组合搜索",slug:"组合搜索",children:[]},{level:3,title:"搜索特定网站",slug:"搜索特定网站",children:[]},{level:3,title:"搜索相关网站",slug:"搜索相关网站",children:[]},{level:3,title:"搜索社交媒体",slug:"搜索社交媒体",children:[]},{level:3,title:"搜索特定价格",slug:"搜索特定价格",children:[]},{level:3,title:"在某个数字范围内执行搜索",slug:"在某个数字范围内执行搜索",children:[]}]},{level:2,title:"高级搜索",slug:"高级搜索",children:[]}],content:'\n搜索引擎已经是每一个开发者在工作中不可或缺的工具之一，在众多搜索引擎中，Google 因其搜索结果中有效信息含量最大而最受人欢迎。本文主要介绍一些常用的搜索结果优化技巧，以帮助我们快速找到想要搜索的信息。\n\n## 常用搜索技巧\n\n### 从搜索结果中排除特定字词\n\n在要排除的字词前加上 `-`。例如：`jaguar speed -car`、`react -github`。\n![IMAGE](/posts/images/how-to-use-google/exclude-c.jpg)\n\n> 图中搜索结果成功过滤了包含 `github` 的结果（包括 React 官网）。\n\n### 搜索完全匹配的结果\n\n为字词或短语加上双引号。例如：`"tallest building"`、`"上海 地铁"`。\n![IMAGE](/posts/images/how-to-use-google/fullmatch-c.jpg)\n\n### 组合搜索\n\n在各个搜索查询之间加上“`OR`”。例如：`marathon OR race`、`状态管理 React OR Vue`。\n![IMAGE](/posts/images/how-to-use-google/or-c.jpg)\n\n### 搜索特定网站\n\n在相应网站或网域前加上“`site:`”。例如：`site:youtube.com` 或 `site:.gov 社保`。\n![IMAGE](/posts/images/how-to-use-google/site-c.jpg)\n\n### 搜索相关网站\n\n在已知网址前加上“`related:`” 搜索与该网站相关的站点。例如：`related:reactjs.org`。\n![IMAGE](/posts/images/how-to-use-google/related-c.jpg)\n\n### 搜索社交媒体\n\n在用于搜索社交媒体的字词前加上 `@`。例如：`@twitter`、`@微博 垃圾分类`。\n![IMAGE](/posts/images/how-to-use-google/media-c.jpg)\n\n### 搜索特定价格\n\n在数字前加上货币单位 `$` 或 `￥` 等。例如：`camera $400`、`相机 ￥10000`。\n![IMAGE](/posts/images/how-to-use-google/price-c.jpg)\n\n### 在某个数字范围内执行搜索\n\n在两个数字之间加上 `..`。例如：`camera $50..$100` 、`性能优化 1s..2s`。\n![IMAGE](/posts/images/how-to-use-google/range-c.jpg)\n\n## 高级搜索\n\n如果上面的常用搜索技巧依然无法满足需求，那么使用 Google 提供的[高级搜索](https://www.google.com/advanced_search)。\n![IMAGE](/posts/images/how-to-use-google/advanced-c.jpg)\n',contentRendered:'<p>搜索引擎已经是每一个开发者在工作中不可或缺的工具之一，在众多搜索引擎中，Google 因其搜索结果中有效信息含量最大而最受人欢迎。本文主要介绍一些常用的搜索结果优化技巧，以帮助我们快速找到想要搜索的信息。</p>\n<h2 id="常用搜索技巧" tabindex="-1"><a class="header-anchor" href="#常用搜索技巧" aria-hidden="true">#</a> 常用搜索技巧</h2>\n<h3 id="从搜索结果中排除特定字词" tabindex="-1"><a class="header-anchor" href="#从搜索结果中排除特定字词" aria-hidden="true">#</a> 从搜索结果中排除特定字词</h3>\n<p>在要排除的字词前加上 <code>-</code>。例如：<code>jaguar speed -car</code>、<code>react -github</code>。\n<img src="/posts/images/how-to-use-google/exclude-c.jpg" alt="IMAGE"></p>\n<blockquote>\n<p>图中搜索结果成功过滤了包含 <code>github</code> 的结果（包括 React 官网）。</p>\n</blockquote>\n<h3 id="搜索完全匹配的结果" tabindex="-1"><a class="header-anchor" href="#搜索完全匹配的结果" aria-hidden="true">#</a> 搜索完全匹配的结果</h3>\n<p>为字词或短语加上双引号。例如：<code>&quot;tallest building&quot;</code>、<code>&quot;上海 地铁&quot;</code>。\n<img src="/posts/images/how-to-use-google/fullmatch-c.jpg" alt="IMAGE"></p>\n<h3 id="组合搜索" tabindex="-1"><a class="header-anchor" href="#组合搜索" aria-hidden="true">#</a> 组合搜索</h3>\n<p>在各个搜索查询之间加上“<code>OR</code>”。例如：<code>marathon OR race</code>、<code>状态管理 React OR Vue</code>。\n<img src="/posts/images/how-to-use-google/or-c.jpg" alt="IMAGE"></p>\n<h3 id="搜索特定网站" tabindex="-1"><a class="header-anchor" href="#搜索特定网站" aria-hidden="true">#</a> 搜索特定网站</h3>\n<p>在相应网站或网域前加上“<code>site:</code>”。例如：<code>site:youtube.com</code> 或 <code>site:.gov 社保</code>。\n<img src="/posts/images/how-to-use-google/site-c.jpg" alt="IMAGE"></p>\n<h3 id="搜索相关网站" tabindex="-1"><a class="header-anchor" href="#搜索相关网站" aria-hidden="true">#</a> 搜索相关网站</h3>\n<p>在已知网址前加上“<code>related:</code>” 搜索与该网站相关的站点。例如：<code>related:reactjs.org</code>。\n<img src="/posts/images/how-to-use-google/related-c.jpg" alt="IMAGE"></p>\n<h3 id="搜索社交媒体" tabindex="-1"><a class="header-anchor" href="#搜索社交媒体" aria-hidden="true">#</a> 搜索社交媒体</h3>\n<p>在用于搜索社交媒体的字词前加上 <code>@</code>。例如：<code>@twitter</code>、<code>@微博 垃圾分类</code>。\n<img src="/posts/images/how-to-use-google/media-c.jpg" alt="IMAGE"></p>\n<h3 id="搜索特定价格" tabindex="-1"><a class="header-anchor" href="#搜索特定价格" aria-hidden="true">#</a> 搜索特定价格</h3>\n<p>在数字前加上货币单位 <code>$</code> 或 <code>￥</code> 等。例如：<code>camera $400</code>、<code>相机 ￥10000</code>。\n<img src="/posts/images/how-to-use-google/price-c.jpg" alt="IMAGE"></p>\n<h3 id="在某个数字范围内执行搜索" tabindex="-1"><a class="header-anchor" href="#在某个数字范围内执行搜索" aria-hidden="true">#</a> 在某个数字范围内执行搜索</h3>\n<p>在两个数字之间加上 <code>..</code>。例如：<code>camera $50..$100</code> 、<code>性能优化 1s..2s</code>。\n<img src="/posts/images/how-to-use-google/range-c.jpg" alt="IMAGE"></p>\n<h2 id="高级搜索" tabindex="-1"><a class="header-anchor" href="#高级搜索" aria-hidden="true">#</a> 高级搜索</h2>\n<p>如果上面的常用搜索技巧依然无法满足需求，那么使用 Google 提供的<a href="https://www.google.com/advanced_search" target="_blank" rel="noopener noreferrer">高级搜索<OutboundLink/></a>。\n<img src="/posts/images/how-to-use-google/advanced-c.jpg" alt="IMAGE"></p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2019-07-01",deps:[],hoistedTags:[],links:[],pathInferred:"/tools/how-to-use-google.html",pathLocale:"/",permalink:null,slug:"how-to-use-google",filePath:"/Users/bingooo/workspace/everfind/website/docs/tools/how-to-use-google.md",filePathRelative:"tools/how-to-use-google.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/how-to-use-google.html.vue",componentFilePathRelative:"pages/tools/how-to-use-google.html.vue",componentFileChunkName:"v-508c1a72",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/how-to-use-google.html.js",dataFilePathRelative:"pages/tools/how-to-use-google.html.js",dataFileChunkName:"v-508c1a72",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/tools/how-to-use-google.html",htmlFilePathRelative:"tools/how-to-use-google.html"},{key:"v-5f77185d",path:"/tools/ls-lint.html",title:"文件和目录命名 lint 工具",lang:"zh-CN",frontmatter:{title:"文件和目录命名 lint 工具",date:"2021-08-27T00:00:00.000Z",description:"约束文件和代码目录命名规范，实现统一的风格。",keywords:["ls-lint"],tags:["工具"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"规则",slug:"规则",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],content:"\n不知道大家有没有维护过陈年老代码的经历，我曾经看过一个项目，维护代码的人都换过好多个的那种。因为缺少一些规范约束，编码风格、文件命名等都带着浓重的个人风格。\n\n对于一个需要多人协作的项目来说，我们还是需要有一些编码约束来提高协作效率的。\n\n今天我们来介绍一个工具，[ls-lint](https://ls-lint.org/1.x/getting-started/introduction.html#key-facts) 用于对文件和目录名称进行规范约束。\n\n## 安装\n\n在项目根目录下安装依赖包。\n\n```bash\nyarn add @ls-lint/ls-lint\n```\n\n## 配置\n\n安装完成后，在项目根目录下配置一个配置文件 `.ls-lint.yml`。配置文件非常简单，分成两个部分：\n\n```yaml\nls: \n  ...\nignore: \n  ...\n```\n\n`ls` 下面配置对哪些文件使用规则，支持文件名、目录、正则等多种配置方式。`ignore` 是一个数组，定义需要忽略的文件或者目录。\n\n下面是一个配置样例，注释是每个用法的具体说明：\n\n```yaml\nls:\n  .js: kebab-case # 对所有 JS 文件使用 kebab-case 形式\n  .ts: kebab-case | camelCase | PascalCase # 对所有 TS 文件使用 kebab-case 或者 camelCase 或者 PascalCase 形式\n  .d.ts: kebab-case # 对所有 .d.ts 文件使用 kebab-case 形式\n\n  packages/src:\n    .dir: camelCase # 对当前目录和所有子目录使用 camelCase\n    .js: camelCase # 对 packages/src 下的 JS 文件使用 camelCase，会覆盖上面的全局配置\n\n  models:\n    .js: PascalCase # models 目录下的 JS 文件使用 PascalCase\n\n  packages/*/src: # * 号匹配除了目录分隔符以外的任意字符\n    .js: kebab-case\n\n  packages/**/templates: # ** 号匹配包含目录分隔符以外的任意字符\n    .html: kebab-case\n\n  packages/*/{src,tests}: # 匹配 package 下下一级目录中的 src 或 tests 目录中的文件\n    .js: kebab-case\n\nignore:\n  - .git # 忽略 .git 目录\n  - node_modules # 忽略 node_modules 目录\n```\n\n注意，目录匹配在 `ignore` 中不支持。\n\n## 规则\n\n上面的例子，除了展示各种支持的匹配文件或目录的方式以外，还配置了这些名称要满足哪些规则要求。\n\n下面的表格展示了所有支持的规则：\n\n| 规则 | 别名 | 描述 |\n| ---------- | ---------- | --------- |\n| 正则 | - | 满则正则表达式`^{pattern}$` |\n| lowercase  | -  | 文件或目录名必须全小写，数字除外，如 abeautifulname |\n| camelcase  | camelCase  | 文件和目录名必须为驼峰式，且只支持字母和数字，如 aBeautifulCase |\n| pascalcase | PascalCase | 文件和目录名必须满足帕斯卡命名法，且只支持字母和数字，如 ABeautifulName |\n| snakecase  | snake_case | 文件和目录名必须为下划线联接，且只支持字母、数字和下划线，如 a_beautiful_name |\n| kebabcase  | kebab-case | 文件和目录名必须为中划线联接，且只支持字母、数字和中划线，如 a-beautiful-name |\n| pointcase  | point.case | 文件和目录名必须满足点文件规范，且只支持字母、数字和点，如 a.beautiful.name |\n\n其中正则表达式要多说一句，即我们配置了模式为 `pattern`，最终生成的正则表达式是 `^{pattern}$`。\n\n比如：\n\n```yaml\nls:\n  .js: regex:[a-z0-9]+ # 最终的正则是 ^[a-z0-9]+$\n  .ts: regex:Schema(\\.test)? | regex:Resolver(\\.test)? # 支持配置多个正则，使用 | 分割，但是这种情况下就不能再使用正则中的 | 符号了。\n```\n\n## 小结\n\n今天我们介绍了一个对文件和目录名称进行约束的工具 ls-lint。通过样例详细说明了各种用法和支持的约束规则。通过这个工具，我们可以保证代码中文件和目录命名是统一风格的。\n\n\n",contentRendered:'<p>不知道大家有没有维护过陈年老代码的经历，我曾经看过一个项目，维护代码的人都换过好多个的那种。因为缺少一些规范约束，编码风格、文件命名等都带着浓重的个人风格。</p>\n<p>对于一个需要多人协作的项目来说，我们还是需要有一些编码约束来提高协作效率的。</p>\n<p>今天我们来介绍一个工具，<a href="https://ls-lint.org/1.x/getting-started/introduction.html#key-facts" target="_blank" rel="noopener noreferrer">ls-lint<OutboundLink/></a> 用于对文件和目录名称进行规范约束。</p>\n<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2>\n<p>在项目根目录下安装依赖包。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @ls-lint/ls-lint\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2>\n<p>安装完成后，在项目根目录下配置一个配置文件 <code>.ls-lint.yml</code>。配置文件非常简单，分成两个部分：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">ls</span><span class="token punctuation">:</span> \n  <span class="token punctuation">...</span>\n<span class="token key atrule">ignore</span><span class="token punctuation">:</span> \n  <span class="token punctuation">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>ls</code> 下面配置对哪些文件使用规则，支持文件名、目录、正则等多种配置方式。<code>ignore</code> 是一个数组，定义需要忽略的文件或者目录。</p>\n<p>下面是一个配置样例，注释是每个用法的具体说明：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">ls</span><span class="token punctuation">:</span>\n  <span class="token key atrule">.js</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case <span class="token comment"># 对所有 JS 文件使用 kebab-case 形式</span>\n  <span class="token key atrule">.ts</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case <span class="token punctuation">|</span> camelCase <span class="token punctuation">|</span> PascalCase <span class="token comment"># 对所有 TS 文件使用 kebab-case 或者 camelCase 或者 PascalCase 形式</span>\n  <span class="token key atrule">.d.ts</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case <span class="token comment"># 对所有 .d.ts 文件使用 kebab-case 形式</span>\n\n  <span class="token key atrule">packages/src</span><span class="token punctuation">:</span>\n    <span class="token key atrule">.dir</span><span class="token punctuation">:</span> camelCase <span class="token comment"># 对当前目录和所有子目录使用 camelCase</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> camelCase <span class="token comment"># 对 packages/src 下的 JS 文件使用 camelCase，会覆盖上面的全局配置</span>\n\n  <span class="token key atrule">models</span><span class="token punctuation">:</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> PascalCase <span class="token comment"># models 目录下的 JS 文件使用 PascalCase</span>\n\n  <span class="token key atrule">packages/*/src</span><span class="token punctuation">:</span> <span class="token comment"># * 号匹配除了目录分隔符以外的任意字符</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case\n\n  <span class="token key atrule">packages/**/templates</span><span class="token punctuation">:</span> <span class="token comment"># ** 号匹配包含目录分隔符以外的任意字符</span>\n    <span class="token key atrule">.html</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case\n\n  packages/<span class="token important">*/</span><span class="token punctuation">{</span>src<span class="token punctuation">,</span>tests<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token comment"># 匹配 package 下下一级目录中的 src 或 tests 目录中的文件</span>\n    <span class="token key atrule">.js</span><span class="token punctuation">:</span> kebab<span class="token punctuation">-</span>case\n\n<span class="token key atrule">ignore</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> .git <span class="token comment"># 忽略 .git 目录</span>\n  <span class="token punctuation">-</span> node_modules <span class="token comment"># 忽略 node_modules 目录</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>注意，目录匹配在 <code>ignore</code> 中不支持。</p>\n<h2 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h2>\n<p>上面的例子，除了展示各种支持的匹配文件或目录的方式以外，还配置了这些名称要满足哪些规则要求。</p>\n<p>下面的表格展示了所有支持的规则：</p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>别名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>正则</td>\n<td>-</td>\n<td>满则正则表达式<code>^{pattern}$</code></td>\n</tr>\n<tr>\n<td>lowercase</td>\n<td>-</td>\n<td>文件或目录名必须全小写，数字除外，如 abeautifulname</td>\n</tr>\n<tr>\n<td>camelcase</td>\n<td>camelCase</td>\n<td>文件和目录名必须为驼峰式，且只支持字母和数字，如 aBeautifulCase</td>\n</tr>\n<tr>\n<td>pascalcase</td>\n<td>PascalCase</td>\n<td>文件和目录名必须满足帕斯卡命名法，且只支持字母和数字，如 ABeautifulName</td>\n</tr>\n<tr>\n<td>snakecase</td>\n<td>snake_case</td>\n<td>文件和目录名必须为下划线联接，且只支持字母、数字和下划线，如 a_beautiful_name</td>\n</tr>\n<tr>\n<td>kebabcase</td>\n<td>kebab-case</td>\n<td>文件和目录名必须为中划线联接，且只支持字母、数字和中划线，如 a-beautiful-name</td>\n</tr>\n<tr>\n<td>pointcase</td>\n<td>point.case</td>\n<td>文件和目录名必须满足点文件规范，且只支持字母、数字和点，如 a.beautiful.name</td>\n</tr>\n</tbody>\n</table>\n<p>其中正则表达式要多说一句，即我们配置了模式为 <code>pattern</code>，最终生成的正则表达式是 <code>^{pattern}$</code>。</p>\n<p>比如：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">ls</span><span class="token punctuation">:</span>\n  <span class="token key atrule">.js</span><span class="token punctuation">:</span> regex<span class="token punctuation">:</span><span class="token punctuation">[</span>a<span class="token punctuation">-</span>z0<span class="token punctuation">-</span><span class="token number">9</span><span class="token punctuation">]</span>+ <span class="token comment"># 最终的正则是 ^[a-z0-9]+$</span>\n  <span class="token key atrule">.ts</span><span class="token punctuation">:</span> regex<span class="token punctuation">:</span>Schema(\\.test)<span class="token punctuation">?</span> <span class="token punctuation">|</span> regex<span class="token punctuation">:</span>Resolver(\\.test)<span class="token punctuation">?</span> <span class="token comment"># 支持配置多个正则，使用 | 分割，但是这种情况下就不能再使用正则中的 | 符号了。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2>\n<p>今天我们介绍了一个对文件和目录名称进行约束的工具 ls-lint。通过样例详细说明了各种用法和支持的约束规则。通过这个工具，我们可以保证代码中文件和目录命名是统一风格的。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-08-27",deps:[],hoistedTags:[],links:[],pathInferred:"/tools/ls-lint.html",pathLocale:"/",permalink:null,slug:"ls-lint",filePath:"/Users/bingooo/workspace/everfind/website/docs/tools/ls-lint.md",filePathRelative:"tools/ls-lint.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/ls-lint.html.vue",componentFilePathRelative:"pages/tools/ls-lint.html.vue",componentFileChunkName:"v-5f77185d",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/ls-lint.html.js",dataFilePathRelative:"pages/tools/ls-lint.html.js",dataFileChunkName:"v-5f77185d",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/tools/ls-lint.html",htmlFilePathRelative:"tools/ls-lint.html"},{key:"v-2c3a8771",path:"/tools/oclif.html",title:"一个 CLI 开发框架 oclif",lang:"zh-CN",frontmatter:{title:"一个 CLI 开发框架 oclif",date:"2021-09-16T00:00:00.000Z",description:"命令行工具开发框架 colif 简介",keywords:["cli","命令行","oclif"],tags:["工具"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"基本用法",slug:"基本用法",children:[{level:3,title:"定义命令",slug:"定义命令",children:[]},{level:3,title:"使用生命周期钩子",slug:"使用生命周期钩子",children:[]},{level:3,title:"使用插件",slug:"使用插件",children:[]},{level:3,title:"错误处理",slug:"错误处理",children:[]}]},{level:2,title:"其他功能",slug:"其他功能",children:[{level:3,title:"cli-ux",slug:"cli-ux",children:[]},{level:3,title:"node-notifier",slug:"node-notifier",children:[]}]}],content:"\nCLI（命令行工具，Command Line Interface）大家都非常熟悉了，比如 create-react-app 等。我们今天介绍一个 CLI 工具的开发框架，可以帮助我们快速构建 CLI 工具。\n\n[oclif](https://oclif.io/)（发音为 'oh-cliff'） 是一个命令行工具开发框架，功能丰富，开发方便。同时 oclif 还支持通过 TypeScript 来开发，对于习惯使用 TypeScript 的同学来说非常友好。\n\n## 基本用法\n\noclif 提供两种运行模式，一种是单一命令模式，类似于 curl，通过各种参数使用不同的功能。另一种是多命令模式，类似于 git，可以定义子命令来实现不同的功能。\n\n下面的两个样例分别展示了单一命令模式和多命令模式的使用方法.\n\n```bash\n$ npx oclif single mynewcli\n? npm package name (mynewcli): mynewcli\n$ cd mynewcli\n$ ./bin/run\nhello world from ./src/index.js!\n```\n\n单命令模式下，会在 `src` 目录下生成一个 `index.{ts,js}` 文件，我们在这个文件里定义命令。\n\n```bash\n$ npx oclif multi mynewcli\n? npm package name (mynewcli): mynewcli\n$ cd mynewcli\n$ ./bin/run --version\nmynewcli/0.0.0 darwin-x64 node-v9.5.0\n$ ./bin/run --help\nUSAGE\n  $ mynewcli [COMMAND]\n\nCOMMANDS\n  hello\n  help   display help for mynewcli\n\n$ ./bin/run hello\nhello world from ./src/hello.js!\n```\n\n多命令模式下，会在 `src` 目录下生成一个 `commands` 目录，这个目录下的每一个文件就是一个子命令。比如 `./src/commands/hello.ts`、`./src/commands/goodbye.ts`。\n\n注意，多命令模式下命令和文件之间一个隐式的对应关系，比如 `src/commands` 目录下的文件是子命令。如果 `src/commands` 下是一个目录，则目录下的多个文件会形成一个 `Topic`。\n\n加入有如下目录结构：\n\n```\npackage.json\nsrc/\n└── commands/\n    └── config/\n        ├── index.ts\n        ├── set.ts\n        └── get.ts\n```\n\n那么，命令最终的执行形式为： `mynewcli config`，`mynewcli config:set` 和 `mynewcli config:get`。\n\n### 定义命令\n不管是单一命令模式还是多命令模式，开发者只需要定义一个 `class` 继承 `Command` 类即可。\n\n```ts\nimport Command from '@oclif/command'\n\nexport class MyCommand extends Command {\n  static description = 'description of this example command'\n\n  async run() {\n    console.log('running my command')\n  }\n}\n```\n\n如上，在命令运行地时候，会自动执行 `run` 方法。\n\n`Command` 还提供了很多工具方法，比如 `this.log`、`this.warn`、`this.error`、`this.exit` 等，方便在运行过程中打印日志信息。\n\n命令行工具通常都需要定义一些参数，oclif 支持两种参数定义形式，一种是 `argument`，用于定义有顺序要求的参数，一种是 `flag`，用于定义没有顺序要求的参数。\n\n#### 定义 argument\n\nargument 的使用如下：\n\n```bash\n$ mycli firstArg secondArg # 参数顺序不能乱\n```\n\n我们可以这样定义 argument 参数：\n\n```ts\nimport Command from '@oclif/command'\n\nexport class MyCLI extends Command {\n  static args = [\n    {name: 'firstArg'},\n    {name: 'secondArg'},\n  ]\n\n  async run() {\n    // 通过对象的形式获取参数\n    const { args } = this.parse(MyCLI)\n    console.log(`running my command with args: ${args.firstArg}, ${args.secondArg}`)\n    // 也可以通过数组的形式获取参数\n    const { argv } = this.parse(MyCLI)\n    console.log(`running my command with args: ${argv[0]}, ${argv[1]}`)\n  }\n}\n```\n\n我们可以对 argument 参数进行属性定义：\n\n```ts\nstatic args = [\n  {\n    name: 'file',               // 参数名称，之后通过 argv[name] 的形式获取参数\n    required: false,            // 是否必填\n    description: 'output file', // 参数描述\n    hidden: true,               // 是否从命令的 help 信息中隐藏\n    parse: input => 'output',   // 参数处理函数，可以改变用户输入的值\n    default: 'world',           // 参数默认值\n    options: ['a', 'b'],        // 参数的可选范围\n  }\n]\n```\n\n#### 定义 flag\n\nflag 的使用形式如下：\n\n```bash\n$ mycli --force --file=./myfile\n```\n\n我们可以这样定义 flag 参数：\n\n```ts\nimport Command, {flags} from '@oclif/command'\n\nexport class MyCLI extends Command {\n  static flags = {\n    // 可以通过 --force 或 -f 来指定参数\n    force: flags.boolean({char: 'f'}),\n    file: flags.string(),\n  }\n\n  async run() {\n    const {flags} = this.parse(MyCLI)\n    if (flags.force) console.log('--force is set')\n    if (flags.file) console.log(`--file is: ${flags.file}`)\n  }\n}\n```\n\n我们可以对 flag 参数进行属性定义：\n\n```ts\nstatic flags = {\n  name: flags.string({\n    char: 'n',                    // 参数短名称\n    description: 'name to print', // 参数描述\n    hidden: false,                // 是否从 help 信息中隐藏\n    multiple: false,              // 是否支持对这个参数设置多个值\n    env: 'MY_NAME',               // 默认值使用的环境变量的名称\n    options: ['a', 'b'],          // 可选值列表\n    parse: input => 'output',     // 对用户输入进行处理\n    default: 'world',             // 默认值，也可以是一个返回字符串的函数\n    required: false,              // 是否必填\n    dependsOn: ['extra-flag'],    // 依赖的其他 flag 参数列表\n    exclusive: ['extra-flag'],    // 不能一起使用的其他 flag 参数列表\n  }),\n\n  // 布尔值参数\n  force: flags.boolean({\n    char: 'f',\n    default: true,                // 默认值，可以是一个返回布尔值的函数\n  }),\n}\n```\n\n### 使用生命周期钩子\n\noclif 提供了一些生命周期钩子，可以让开发者在工具运行的各个阶段进行一些额外操作。\n\n我们可以这样定义一个钩子函数：\n\n```ts\nimport { Hook } from '@oclif/config'\n\nexport default const hook: Hook<'init'> = async function (options) {\n  console.log(`example init hook running before ${options.id}`)\n}\n```\n\n同时，还需要在 `package.json` 中注册这个钩子函数：\n\n```json\n\"oclif\": {\n  \"commands\": \"./lib/commands\",\n  \"hooks\": {\n    \"init\": \"./lib/hooks/init/example\"\n  }\n}\n```\n\noclif 还支持定义多个钩子函数，多个钩子函数会并行运行：\n\n```json\n\"oclif\": {\n  \"commands\": \"./lib/commands\",\n  \"hooks\": {\n    \"init\": [\n      \"./lib/hooks/init/example\",\n      \"./lib/hooks/init/another_hook\"\n    ]\n  }\n}\n```\n\n目前支持的生命周期钩子如下：\n\n* `init` - 在 CLI 完成初始化之后，找到对应命令之前。\n* `prerun` - 在 `init` 完成，并找到对应命令之后，但是在命令运行之前。\n* `postrun` - 在命令运行结束之后，并没有错误发生。\n* `command_not_found` - 没有找到对应命令，在展示错误信息之前。\n\n### 使用插件\n\noclif 官方和社区提供了很多有用的插件可以供新开发的命令行工具使用，只需要在 `package.json` 中声明即可。\n\n```json\n{\n  \"name\": \"mycli\",\n  \"version\": \"0.0.0\",\n  // ...\n  \"oclif\": {\n    \"plugins\": [\n      \"@oclif/plugin-help\",\n      \"@oclif/plugin-not-found\"\n    ]\n  }\n}\n```\n\n可用的插件有：\n* [@oclif/plugin-not-found](https://github.com/oclif/plugin-not-found) 当未找到命令的时候提供一个友好的 \"did you mean\" 信息。\n* [@oclif/plugin-plugins](https://github.com/oclif/plugin-plugins) 允许用户给你的命令行工具添加插件。\n* [@oclif/plugin-update](https://github.com/oclif/plugin-update) 自动更新插件。\n* [@oclif/plugin-help](https://github.com/oclif/plugin-help) 帮助信息插件。\n* [@oclif/plugin-warn-if-update-available](https://github.com/oclif/plugin-warn-if-update-available) 当有可用更新时，展示一个警告信息提示更新。\n* [@oclif/plugin-autocomplete](https://github.com/oclif/plugin-autocomplete) 提供 bash/zsh 的自动补全。\n\n### 错误处理\n\n命令行运行难免会出错，oclif 提供了两种错误处理的方法。\n\n#### `Command.catch`\n\n每个 `Command` 实例都有一个 `catch` 方法，开发者可以在这个方法中处理错误。\n\n```ts\nimport {Command, flags} from '@oclif/command'\n\nexport default class Hello extends Command {\n  async catch(error) {\n    // do something or\n    // re-throw to be handled globally\n    throw error;\n  }\n}\n```\n\n#### `bin/run` 的 `catch`\n\n`bin/run` 是每个 oclif 命令行工具的入口文件，我们可以通过 `bin/run` 的 `catch` 方法抓取错误，包括 `Command` 中重新抛出的错误。\n\n```ts\n.catch(require('@oclif/errors/handle'))\n\n//或\n\n.catch((error) => {\n  const oclifHandler = require('@oclif/errors/handle');\n  // do any extra work with error\n  return oclifHandler(error);\n})\n```\n\n## 其他功能\n\n### cli-ux\n\noclif 官方维护的 [cli-ux](https://github.com/oclif/cli-ux) 库提供了许多使用的功能。\n\n* 通过 `cliux.prompt()` 函数可以实现简单的交互功能。如果有更复杂的交互需求，可以使用 [inquirer](https://github.com/SBoudrias/Inquirer.js)。\n* 通过 `cliux.action` 可以实现旋转 loading 效果。\n* 通过 `cliux.table` 可以展示表格数据。\n\n### node-notifier\n\n通过 [node-notifier](https://github.com/mikaelbr/node-notifier) 可以实现跨平台的通知信息展示。\n",contentRendered:'<p>CLI（命令行工具，Command Line Interface）大家都非常熟悉了，比如 create-react-app 等。我们今天介绍一个 CLI 工具的开发框架，可以帮助我们快速构建 CLI 工具。</p>\n<p><a href="https://oclif.io/" target="_blank" rel="noopener noreferrer">oclif<OutboundLink/></a>（发音为 \'oh-cliff\'） 是一个命令行工具开发框架，功能丰富，开发方便。同时 oclif 还支持通过 TypeScript 来开发，对于习惯使用 TypeScript 的同学来说非常友好。</p>\n<h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2>\n<p>oclif 提供两种运行模式，一种是单一命令模式，类似于 curl，通过各种参数使用不同的功能。另一种是多命令模式，类似于 git，可以定义子命令来实现不同的功能。</p>\n<p>下面的两个样例分别展示了单一命令模式和多命令模式的使用方法.</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ npx oclif single mynewcli\n? <span class="token function">npm</span> package name <span class="token punctuation">(</span>mynewcli<span class="token punctuation">)</span>: mynewcli\n$ <span class="token builtin class-name">cd</span> mynewcli\n$ ./bin/run\nhello world from ./src/index.js<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>单命令模式下，会在 <code>src</code> 目录下生成一个 <code>index.{ts,js}</code> 文件，我们在这个文件里定义命令。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ npx oclif multi mynewcli\n? <span class="token function">npm</span> package name <span class="token punctuation">(</span>mynewcli<span class="token punctuation">)</span>: mynewcli\n$ <span class="token builtin class-name">cd</span> mynewcli\n$ ./bin/run --version\nmynewcli/0.0.0 darwin-x64 node-v9.5.0\n$ ./bin/run --help\nUSAGE\n  $ mynewcli <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>\n\nCOMMANDS\n  hello\n  <span class="token builtin class-name">help</span>   display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> mynewcli\n\n$ ./bin/run hello\nhello world from ./src/hello.js<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>多命令模式下，会在 <code>src</code> 目录下生成一个 <code>commands</code> 目录，这个目录下的每一个文件就是一个子命令。比如 <code>./src/commands/hello.ts</code>、<code>./src/commands/goodbye.ts</code>。</p>\n<p>注意，多命令模式下命令和文件之间一个隐式的对应关系，比如 <code>src/commands</code> 目录下的文件是子命令。如果 <code>src/commands</code> 下是一个目录，则目录下的多个文件会形成一个 <code>Topic</code>。</p>\n<p>加入有如下目录结构：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>package.json\nsrc/\n└── commands/\n    └── config/\n        ├── index.ts\n        ├── set.ts\n        └── get.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么，命令最终的执行形式为： <code>mynewcli config</code>，<code>mynewcli config:set</code> 和 <code>mynewcli config:get</code>。</p>\n<h3 id="定义命令" tabindex="-1"><a class="header-anchor" href="#定义命令" aria-hidden="true">#</a> 定义命令</h3>\n<p>不管是单一命令模式还是多命令模式，开发者只需要定义一个 <code>class</code> 继承 <code>Command</code> 类即可。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> Command <span class="token keyword">from</span> <span class="token string">\'@oclif/command\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> description <span class="token operator">=</span> <span class="token string">\'description of this example command\'</span>\n\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'running my command\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如上，在命令运行地时候，会自动执行 <code>run</code> 方法。</p>\n<p><code>Command</code> 还提供了很多工具方法，比如 <code>this.log</code>、<code>this.warn</code>、<code>this.error</code>、<code>this.exit</code> 等，方便在运行过程中打印日志信息。</p>\n<p>命令行工具通常都需要定义一些参数，oclif 支持两种参数定义形式，一种是 <code>argument</code>，用于定义有顺序要求的参数，一种是 <code>flag</code>，用于定义没有顺序要求的参数。</p>\n<h4 id="定义-argument" tabindex="-1"><a class="header-anchor" href="#定义-argument" aria-hidden="true">#</a> 定义 argument</h4>\n<p>argument 的使用如下：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ mycli firstArg secondArg <span class="token comment"># 参数顺序不能乱</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们可以这样定义 argument 参数：</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> Command <span class="token keyword">from</span> <span class="token string">\'@oclif/command\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCLI</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">\'firstArg\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">\'secondArg\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过对象的形式获取参数</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> args <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>MyCLI<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">running my command with args: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span>firstArg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span>secondArg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token comment">// 也可以通过数组的形式获取参数</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> argv <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>MyCLI<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">running my command with args: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>我们可以对 argument 参数进行属性定义：</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">static</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'file\'</span><span class="token punctuation">,</span>               <span class="token comment">// 参数名称，之后通过 argv[name] 的形式获取参数</span>\n    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token comment">// 是否必填</span>\n    description<span class="token operator">:</span> <span class="token string">\'output file\'</span><span class="token punctuation">,</span> <span class="token comment">// 参数描述</span>\n    hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 是否从命令的 help 信息中隐藏</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> input <span class="token operator">=></span> <span class="token string">\'output\'</span><span class="token punctuation">,</span>   <span class="token comment">// 参数处理函数，可以改变用户输入的值</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">\'world\'</span><span class="token punctuation">,</span>           <span class="token comment">// 参数默认值</span>\n    options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 参数的可选范围</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="定义-flag" tabindex="-1"><a class="header-anchor" href="#定义-flag" aria-hidden="true">#</a> 定义 flag</h4>\n<p>flag 的使用形式如下：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ mycli --force --file<span class="token operator">=</span>./myfile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们可以这样定义 flag 参数：</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> Command<span class="token punctuation">,</span> <span class="token punctuation">{</span>flags<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@oclif/command\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCLI</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> flags <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可以通过 --force 或 -f 来指定参数</span>\n    force<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>char<span class="token operator">:</span> <span class="token string">\'f\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    file<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>flags<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>MyCLI<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">.</span>force<span class="token punctuation">)</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'--force is set\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--file is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flags<span class="token punctuation">.</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>我们可以对 flag 参数进行属性定义：</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">static</span> flags <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    char<span class="token operator">:</span> <span class="token string">\'n\'</span><span class="token punctuation">,</span>                    <span class="token comment">// 参数短名称</span>\n    description<span class="token operator">:</span> <span class="token string">\'name to print\'</span><span class="token punctuation">,</span> <span class="token comment">// 参数描述</span>\n    hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token comment">// 是否从 help 信息中隐藏</span>\n    multiple<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 是否支持对这个参数设置多个值</span>\n    env<span class="token operator">:</span> <span class="token string">\'MY_NAME\'</span><span class="token punctuation">,</span>               <span class="token comment">// 默认值使用的环境变量的名称</span>\n    options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// 可选值列表</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> input <span class="token operator">=></span> <span class="token string">\'output\'</span><span class="token punctuation">,</span>     <span class="token comment">// 对用户输入进行处理</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">\'world\'</span><span class="token punctuation">,</span>             <span class="token comment">// 默认值，也可以是一个返回字符串的函数</span>\n    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 是否必填</span>\n    dependsOn<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'extra-flag\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 依赖的其他 flag 参数列表</span>\n    exclusive<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'extra-flag\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 不能一起使用的其他 flag 参数列表</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 布尔值参数</span>\n  force<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    char<span class="token operator">:</span> <span class="token string">\'f\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 默认值，可以是一个返回布尔值的函数</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="使用生命周期钩子" tabindex="-1"><a class="header-anchor" href="#使用生命周期钩子" aria-hidden="true">#</a> 使用生命周期钩子</h3>\n<p>oclif 提供了一些生命周期钩子，可以让开发者在工具运行的各个阶段进行一些额外操作。</p>\n<p>我们可以这样定义一个钩子函数：</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Hook <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@oclif/config\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> hook<span class="token operator">:</span> Hook<span class="token operator">&lt;</span><span class="token string">\'init\'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">example init hook running before </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同时，还需要在 <code>package.json</code> 中注册这个钩子函数：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token property">"oclif"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"commands"</span><span class="token operator">:</span> <span class="token string">"./lib/commands"</span><span class="token punctuation">,</span>\n  <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"init"</span><span class="token operator">:</span> <span class="token string">"./lib/hooks/init/example"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>oclif 还支持定义多个钩子函数，多个钩子函数会并行运行：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token property">"oclif"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"commands"</span><span class="token operator">:</span> <span class="token string">"./lib/commands"</span><span class="token punctuation">,</span>\n  <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"init"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"./lib/hooks/init/example"</span><span class="token punctuation">,</span>\n      <span class="token string">"./lib/hooks/init/another_hook"</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>目前支持的生命周期钩子如下：</p>\n<ul>\n<li><code>init</code> - 在 CLI 完成初始化之后，找到对应命令之前。</li>\n<li><code>prerun</code> - 在 <code>init</code> 完成，并找到对应命令之后，但是在命令运行之前。</li>\n<li><code>postrun</code> - 在命令运行结束之后，并没有错误发生。</li>\n<li><code>command_not_found</code> - 没有找到对应命令，在展示错误信息之前。</li>\n</ul>\n<h3 id="使用插件" tabindex="-1"><a class="header-anchor" href="#使用插件" aria-hidden="true">#</a> 使用插件</h3>\n<p>oclif 官方和社区提供了很多有用的插件可以供新开发的命令行工具使用，只需要在 <code>package.json</code> 中声明即可。</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"mycli"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n  <span class="token property">"oclif"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"@oclif/plugin-help"</span><span class="token punctuation">,</span>\n      <span class="token string">"@oclif/plugin-not-found"</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可用的插件有：</p>\n<ul>\n<li><a href="https://github.com/oclif/plugin-not-found" target="_blank" rel="noopener noreferrer">@oclif/plugin-not-found<OutboundLink/></a> 当未找到命令的时候提供一个友好的 &quot;did you mean&quot; 信息。</li>\n<li><a href="https://github.com/oclif/plugin-plugins" target="_blank" rel="noopener noreferrer">@oclif/plugin-plugins<OutboundLink/></a> 允许用户给你的命令行工具添加插件。</li>\n<li><a href="https://github.com/oclif/plugin-update" target="_blank" rel="noopener noreferrer">@oclif/plugin-update<OutboundLink/></a> 自动更新插件。</li>\n<li><a href="https://github.com/oclif/plugin-help" target="_blank" rel="noopener noreferrer">@oclif/plugin-help<OutboundLink/></a> 帮助信息插件。</li>\n<li><a href="https://github.com/oclif/plugin-warn-if-update-available" target="_blank" rel="noopener noreferrer">@oclif/plugin-warn-if-update-available<OutboundLink/></a> 当有可用更新时，展示一个警告信息提示更新。</li>\n<li><a href="https://github.com/oclif/plugin-autocomplete" target="_blank" rel="noopener noreferrer">@oclif/plugin-autocomplete<OutboundLink/></a> 提供 bash/zsh 的自动补全。</li>\n</ul>\n<h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3>\n<p>命令行运行难免会出错，oclif 提供了两种错误处理的方法。</p>\n<h4 id="command-catch" tabindex="-1"><a class="header-anchor" href="#command-catch" aria-hidden="true">#</a> <code>Command.catch</code></h4>\n<p>每个 <code>Command</code> 实例都有一个 <code>catch</code> 方法，开发者可以在这个方法中处理错误。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Command<span class="token punctuation">,</span> flags<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@oclif/command\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something or</span>\n    <span class="token comment">// re-throw to be handled globally</span>\n    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="bin-run-的-catch" tabindex="-1"><a class="header-anchor" href="#bin-run-的-catch" aria-hidden="true">#</a> <code>bin/run</code> 的 <code>catch</code></h4>\n<p><code>bin/run</code> 是每个 oclif 命令行工具的入口文件，我们可以通过 <code>bin/run</code> 的 <code>catch</code> 方法抓取错误，包括 <code>Command</code> 中重新抛出的错误。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">\'@oclif/errors/handle\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">//或</span>\n\n<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> oclifHandler <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">\'@oclif/errors/handle\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// do any extra work with error</span>\n  <span class="token keyword">return</span> <span class="token function">oclifHandler</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="其他功能" tabindex="-1"><a class="header-anchor" href="#其他功能" aria-hidden="true">#</a> 其他功能</h2>\n<h3 id="cli-ux" tabindex="-1"><a class="header-anchor" href="#cli-ux" aria-hidden="true">#</a> cli-ux</h3>\n<p>oclif 官方维护的 <a href="https://github.com/oclif/cli-ux" target="_blank" rel="noopener noreferrer">cli-ux<OutboundLink/></a> 库提供了许多使用的功能。</p>\n<ul>\n<li>通过 <code>cliux.prompt()</code> 函数可以实现简单的交互功能。如果有更复杂的交互需求，可以使用 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener noreferrer">inquirer<OutboundLink/></a>。</li>\n<li>通过 <code>cliux.action</code> 可以实现旋转 loading 效果。</li>\n<li>通过 <code>cliux.table</code> 可以展示表格数据。</li>\n</ul>\n<h3 id="node-notifier" tabindex="-1"><a class="header-anchor" href="#node-notifier" aria-hidden="true">#</a> node-notifier</h3>\n<p>通过 <a href="https://github.com/mikaelbr/node-notifier" target="_blank" rel="noopener noreferrer">node-notifier<OutboundLink/></a> 可以实现跨平台的通知信息展示。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-16",deps:[],hoistedTags:[],links:[],pathInferred:"/tools/oclif.html",pathLocale:"/",permalink:null,slug:"oclif",filePath:"/Users/bingooo/workspace/everfind/website/docs/tools/oclif.md",filePathRelative:"tools/oclif.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/oclif.html.vue",componentFilePathRelative:"pages/tools/oclif.html.vue",componentFileChunkName:"v-2c3a8771",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/oclif.html.js",dataFilePathRelative:"pages/tools/oclif.html.js",dataFileChunkName:"v-2c3a8771",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/tools/oclif.html",htmlFilePathRelative:"tools/oclif.html"},{key:"v-7b277786",path:"/tools/tools-navigation.html",title:"各种工具导航",lang:"zh-CN",frontmatter:{title:"各种工具导航",date:"2021-07-08T00:00:00.000Z",description:"各种工具聚合导航页面",keywords:["tools","工具导航"],key:0,onTop:!0},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],content:"\n这里收集了很多好用的工具，涵盖了开发、生活、娱乐等各方面。\n\n| 工具                                                                                     | 用途说明                                                         |\n| :--------------------------------------------------------------------------------------- | :--------------------------------------------------------------- |\n| [JSON 格式化](https://everfind.github.io/jsonformatter/)                                 | 一款简洁的 JSON 格式化工具，支持 `JSON/JSON5`。                  |\n| [图片压缩](https://squoosh.app/)                                                         | Google 开源的 Squoosh 图片压缩工具，有网页版和 APP 等多种选择    |\n| [tinypng 图片压缩](https://tinypng.com/)                                                 | 另一个在线图片压缩工具，支持 `png` 和 `jpeg` 格式                |\n| [投资收益计算器](https://everfind.github.io/xirr/)    | 投资年化收益计算器                                                   |\n| [招行贷款计算器](https://www.cmbchina.com/CmbWebPubInfo/Cal_Loan_Per.aspx?chnl=dkjsq)    | 个人贷款计算器                                                   |\n| [分期费率实际年利率计算器](http://www.abchina.com/cn/CreditCard/WealthManagement/fqnhl/) | 分期费率到实际年利率的计算，少一点套路，让你了解真实的分期年利率 |\n|[搜索免费图片](https://everfind.github.io/picsearch)|搜索免费的图片，博客、文章配图神器。|\n",contentRendered:'<p>这里收集了很多好用的工具，涵盖了开发、生活、娱乐等各方面。</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">工具</th>\n<th style="text-align:left">用途说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left"><a href="https://everfind.github.io/jsonformatter/" target="_blank" rel="noopener noreferrer">JSON 格式化<OutboundLink/></a></td>\n<td style="text-align:left">一款简洁的 JSON 格式化工具，支持 <code>JSON/JSON5</code>。</td>\n</tr>\n<tr>\n<td style="text-align:left"><a href="https://squoosh.app/" target="_blank" rel="noopener noreferrer">图片压缩<OutboundLink/></a></td>\n<td style="text-align:left">Google 开源的 Squoosh 图片压缩工具，有网页版和 APP 等多种选择</td>\n</tr>\n<tr>\n<td style="text-align:left"><a href="https://tinypng.com/" target="_blank" rel="noopener noreferrer">tinypng 图片压缩<OutboundLink/></a></td>\n<td style="text-align:left">另一个在线图片压缩工具，支持 <code>png</code> 和 <code>jpeg</code> 格式</td>\n</tr>\n<tr>\n<td style="text-align:left"><a href="https://everfind.github.io/xirr/" target="_blank" rel="noopener noreferrer">投资收益计算器<OutboundLink/></a></td>\n<td style="text-align:left">投资年化收益计算器</td>\n</tr>\n<tr>\n<td style="text-align:left"><a href="https://www.cmbchina.com/CmbWebPubInfo/Cal_Loan_Per.aspx?chnl=dkjsq" target="_blank" rel="noopener noreferrer">招行贷款计算器<OutboundLink/></a></td>\n<td style="text-align:left">个人贷款计算器</td>\n</tr>\n<tr>\n<td style="text-align:left"><a href="http://www.abchina.com/cn/CreditCard/WealthManagement/fqnhl/" target="_blank" rel="noopener noreferrer">分期费率实际年利率计算器<OutboundLink/></a></td>\n<td style="text-align:left">分期费率到实际年利率的计算，少一点套路，让你了解真实的分期年利率</td>\n</tr>\n<tr>\n<td style="text-align:left"><a href="https://everfind.github.io/picsearch" target="_blank" rel="noopener noreferrer">搜索免费图片<OutboundLink/></a></td>\n<td style="text-align:left">搜索免费的图片，博客、文章配图神器。</td>\n</tr>\n</tbody>\n</table>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-08",deps:[],hoistedTags:[],links:[],pathInferred:"/tools/tools-navigation.html",pathLocale:"/",permalink:null,slug:"tools-navigation",filePath:"/Users/bingooo/workspace/everfind/website/docs/tools/tools-navigation.md",filePathRelative:"tools/tools-navigation.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/tools-navigation.html.vue",componentFilePathRelative:"pages/tools/tools-navigation.html.vue",componentFileChunkName:"v-7b277786",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/tools/tools-navigation.html.js",dataFilePathRelative:"pages/tools/tools-navigation.html.js",dataFileChunkName:"v-7b277786",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/tools/tools-navigation.html",htmlFilePathRelative:"tools/tools-navigation.html"}]}},6106:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const t=(0,e.Wm)("div",{class:"custom-container tip"},[(0,e.Wm)("p",{class:"custom-container-title"},"TIP"),(0,e.Wm)("p",null,"工欲善其事，必先利其器。")],-1),p=(0,e.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),o={render:function(n,s){const a=(0,e.up)("ArticleList");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)(a),p],64)}}}}]);