"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4564],{2899:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-8b04edb2",path:"/solutions/graphql/schema-composition.html",title:"Schema 合成管理系统",lang:"zh-CN",frontmatter:{title:"Schema 合成管理系统",description:"采用 Apollo Federation 以后，需要对子服务的 Schema 做合成和管理，以及一些工程问题需要解决。我们通过一个独立的 Schema 合成管理系统来解决。",keywords:["GraphQL","Apollo Federation","Schema"],date:"2021-08-03T00:00:00.000Z",key:8,tags:["实践","概念"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Schema 的合成校验",slug:"schema-的合成校验",children:[]},{level:2,title:"数据字段设计",slug:"数据字段设计",children:[]},{level:2,title:"与 CI/CD 系统的交互",slug:"与-ci-cd-系统的交互",children:[{level:3,title:"子服务构建时推送 Schema",slug:"子服务构建时推送-schema",children:[]},{level:3,title:"子服务启动时确定 Schema 是否合法",slug:"子服务启动时确定-schema-是否合法",children:[]}]},{level:2,title:"网关拉取 Schema",slug:"网关拉取-schema",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"solutions/graphql/schema-composition.md"}},5074:(n,a,s)=>{s.r(a),s.d(a,{default:()=>u});var e=s(6252);const p=(0,e.Wm)("p",null,[(0,e.Uk)("上一篇我们在说网关的时候，遗留了一个问题，就是通过 "),(0,e.Wm)("code",null,"serviceList"),(0,e.Uk)(" 配置子服务无法实现动态更新。同时，各个子服务的 Schema 在合成的时候可能会出错，比如类型重复定义等。")],-1),t=(0,e.Wm)("p",null,"因此，我们需要一个独立的 Schema 合成管理系统来处理 Schema 的合成校验、不同环境的隔离、CI/CD 等工程问题。",-1),c=(0,e.Uk)("首先要说明的是，Apollo 官方提供了一个 "),o={href:"https://www.apollographql.com/docs/studio/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("Apollo Studio"),i=(0,e.Uk)(" 解决方案，可以解决我们本文讨论的问题。缺点是没有提供自托管（self host）方案，需要将 schema 上传到 Apollo 的服务中。"),r=(0,e.uE)('<p>本文来探讨实现一个 Schema 合成管理系统。</p><p>在我们这个系统中，存储各个子服务的 Schema，同时提供 Schema 的合并校验能力，将合并后的 Schema 提供给网关使用。</p><p>通常来说，服务部署都会依赖 CI/CD 来实现。因此，我们的 Schema 合成管理系统应该与 CI/CD 对接，而不是手动上传 Schema。</p><h2 id="schema-的合成校验" tabindex="-1"><a class="header-anchor" href="#schema-的合成校验" aria-hidden="true">#</a> Schema 的合成校验</h2><p>在子服务中，我们可以通过如何 GraphQL 查询获取子服务的 Schema 信息。</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token constant">SDL</span> <span class="token punctuation">{</span>\n  <span class="token object">_service</span> <span class="token punctuation">{</span>\n    <span class="token property">sdl</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上传到 Schema 合成管理系统中后，可以通过如下方法校验各个子服务的 Schema 是否合法。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;graphql&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> composeAndValidate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/federation&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// serviceList 为查到的所有子服务的 Schema 信息</span>\n<span class="token keyword">const</span> serviceDefinitions <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">type</span>Defs<span class="token operator">:</span> <span class="token function">parse</span><span class="token punctuation">(</span>service1<span class="token punctuation">.</span>sdl<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> service1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">type</span>Defs<span class="token operator">:</span> <span class="token function">parse</span><span class="token punctuation">(</span>service2<span class="token punctuation">.</span>sdl<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> service2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取合成结果</span>\n<span class="token keyword">const</span> validateResult <span class="token operator">=</span> <span class="token function">composeAndValidate</span><span class="token punctuation">(</span>serviceDefinitions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="数据字段设计" tabindex="-1"><a class="header-anchor" href="#数据字段设计" aria-hidden="true">#</a> 数据字段设计</h2><p>知道如何获取子服务的 Schema 以及如何进行校验之后，我们来定义系统的数据库表。</p><p>首先定义一张存储各个子服务信息的表。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuSfFoafDBb48JYqgoqnELQZcKb38J56mLJ0qCWOoyn9pKu4SfQIqDDtq_FoKOjrYY48be6HAQd4oIFBfrBQdankVx5ZxSlgMfnkRditfVTgr4AIW934TA1-jL0hKb9gNegG3D2WnEHl4Z0LA0-c2_Coy4f0P-c3JzTEB4Wio2dEKk6gv783IG0S20000" alt="uml diagram"><p><code>tag</code> 字段可以给每个服务打上不同的标签，方便后续管理。</p><p>再来定义每个服务的 Schema 信息表。</p><img src="https://www.plantuml.com/plantuml/svg/DSux3i8m30RWFQUmidS0PgGEZ6mSe4eJjmrgOcIxNH1tnn5bykFpBxaN3QnRMHsDJumAZziTtWuW9xZ2wNonLf3t776eeQ0j_JXDtKoKf3l4sz6EB9bgypdh4AaKAqkGfMcagbYrgQJrFpQX5t9GuYC8lo2oTn_NOqtssXS0" alt="uml diagram"><p>在 SDL 表中，除了记录 Schema 的 <code>content</code> 字段以外，我们使用 <code>git_commit_hash</code> 来作为每次发布的版本号，同时记录提交人，方便后续问题的追踪。</p><p>为了方便网关拉取合成后的数据，我们单独定义一张表记录合成后的各服务 Schema 信息。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuSfFoafDBb48AitBoynBZtVEpqlBJ5Uevb9Go4nHi5KmD386CejJYyeoarFZyn9pKu62IabfQRhf-VafnRfG6IMWehBKekBC_3oGV7fcINnoVcukaCf8BCu0oQRcbO5a2ehobRXgkRZoyajI5PIUzgzwDgVpsOA5BrVrl6oOzM9_-vFTIvzEw7lMsVjapwndixSycxRXUT_wfukQdoreLr98B5PmzGkBz_CFSUL2Sx2kBaBA8JKl1UWr0000" alt="uml diagram"><p>不同的环境都会有网关，因此通过 <code>env</code> 字段记录环境。</p><h2 id="与-ci-cd-系统的交互" tabindex="-1"><a class="header-anchor" href="#与-ci-cd-系统的交互" aria-hidden="true">#</a> 与 CI/CD 系统的交互</h2><p>前面说到，Schema 合成管理系统应该与 CI/CD 对接，杜绝个人上传 Schema 的操作。因此，我们需要定义与 CI/CD 的交过流程。</p><h3 id="子服务构建时推送-schema" tabindex="-1"><a class="header-anchor" href="#子服务构建时推送-schema" aria-hidden="true">#</a> 子服务构建时推送 Schema</h3><p>如下是子服务构建时与 Schema 合成管理系统的交互时序图。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKeiBSdFAyrDIYtYuYe0YcKcPnOavfKeA3bxAYaa5YiuUw8A1oTdfEOcAZoTqF6iOyBpTGkVJsXxlddtyztpmQg3FOEvk1AJIpBB4ajIGNgvd3qLTEs0B2k5P_DQdkxUzNpAVA16XM0N7oI5O6qGbK2cbSAJ7LrFzYm0AL9Gq5PutjdnRCwQf_tRkO2I2hfWuv0DVhvmtTDrio360yr-sWMqOTgBXjQdIpQ-sBAKoo4rBmNeKm00" alt="uml diagram"><h3 id="子服务启动时确定-schema-是否合法" tabindex="-1"><a class="header-anchor" href="#子服务启动时确定-schema-是否合法" aria-hidden="true">#</a> 子服务启动时确定 Schema 是否合法</h3><p>如下是子服务启动时与 Schema 合成管理系统的交互时序图。</p><img src="https://www.plantuml.com/plantuml/svg/NP7DIiD058NtynH3j-8BT25Tk17SvGd6PBI1DYd9f6j1gsbewu2bYpQqZIYAQ59H_0leo_JEnBTmGcfetGoNcVETU-RUcik8mxnc0n6FsPRNFA0EGYrrP-fcYrWCL-2HYx0FGLJ1nCKQTTgcJZSbcbwdJOA1-yBdCeuaFvFFgKnd1RAd8KHqPhO9ewK1MXLuUoTNLB4S971r8kRdU0lBhY_21xXuKtNH77XVtYxMVN9NTPIyw7w1lu3a0pw79I_7frZRtSVPzoIBUc8U_Tpta6KhtZ6FwWpRXmMyV1z0vtMPZe3tYY0vwQuYkaPZqw5iN0YgwdK8awbCByKqHCYW_sAkVVMFa54CyHXu0i6TcXe4C-6FikCEN3zbBpUeHYr3hUKN" alt="uml diagram"><p>之所以要在子服务启动时才校验 Schema 是否合法，是因为服务部署需要考虑环境，而 CI 在构建打包的时候应该与环境无关，因此，我们在服务启动时做校验。</p><h2 id="网关拉取-schema" tabindex="-1"><a class="header-anchor" href="#网关拉取-schema" aria-hidden="true">#</a> 网关拉取 Schema</h2><p>网关是对外提供服务的，需要拉取最新可用的全部 Schema。前面的设计中，Schema 合成管理系统的 <code>Running_Config</code> 表记录了当前可用的所有子服务的 Schema。网关只需要从 Schema 合成管理系统中拉取这个信息就可以了。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKeiBSdFAyrDIYtYuYe0YcKcPnOavfKeABadbgIM9rOgAIGMAxY7eye59sUavYOgF9tGyQnZmlDr2vzFQ7k-UVVptVF1geCzWxcu4fDBCik0He3qShc7A-ZQWSIj59ujQ7--Tf-2jiBpllLF5pKZAGHh0n98IXU-NDMZ4EpYmvMN3rHGb9cUKQAGdmQLtRtmnRRD4EEUpsfvrjdmR4xdipczJxiM0haWNGelziz-iR07OWpSQFTmAw34bAUpvxrixNs-TzsJ_GkVDQxdIab5TGZ4oI35psPlUJPj0ufYXzIy563W0G00" alt="uml diagram"><p>在拉取到配置以后，可以通过如下方式实现自动更新网关的 Schema 信息。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> graphqlGatewayModule <span class="token operator">=</span> GraphQLGatewayModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 其他配置项</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/bff/graphql&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    gateway<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 一分钟轮询时间</span>\n      experimental_pollInterval<span class="token operator">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n      experimental_updateServiceDefinitions<span class="token operator">:</span> updateServicesDefinitions<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>我们将原来的 <code>serviceList</code> 换成 <code>updateServicesDefinitions</code>，而 <code>updateServicesDefinitions</code> 负责从 Schema 合成管理系统拉取最新的 Schema 信息返回给网关。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateServicesDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://gateway-running-config-endpoint&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> serviceDefinitions <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> url<span class="token punctuation">,</span> sdl <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token keyword">type</span>Defs<span class="token operator">:</span> <span class="token function">parse</span><span class="token punctuation">(</span>sdl<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">,</span>\n    url<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    serviceDefinitions<span class="token punctuation">,</span>\n    isNewSchema<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>通过这个方法就可以实现网关自动拉取最新的 Schema 信息了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们先探索了获取子服务 Schema，并进行合成校验的方法，这是构建 Schema 合成管理系统的技术基石。然后我们设计了实现最简功能所需的数据库表。</p><p>完成了 Schema 合成管理系统的内部设计以后，我们对 CI/CD 以及网关如何与 Schema 合成管理系统交互做了定义和说明。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',40),u={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,(0,e.Wm)("p",null,[c,(0,e.Wm)("a",o,[l,(0,e.Wm)(s)]),i]),r],64)}}}}]);