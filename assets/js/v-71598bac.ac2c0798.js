"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[9799],{7364:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-71598bac",path:"/courses/webpack/dev-server.html",title:"使用开发服务器",lang:"zh-CN",frontmatter:{title:"使用开发服务器",description:"如何使用开发服务器来提升开发效率",keywords:["Webpack"],date:"2021-01-05T00:00:00.000Z",key:3},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Webpack 的 watch 模式",slug:"webpack-的-watch-模式",children:[]},{level:2,title:"Webpack-dev-server",slug:"webpack-dev-server",children:[]},{level:2,title:"Webpack-plugin-serve",slug:"webpack-plugin-serve",children:[]},{level:2,title:"通过网络访问开发服务器",slug:"通过网络访问开发服务器",children:[]},{level:2,title:"轮询文件",slug:"轮询文件",children:[]},{level:2,title:"自动重启开发服务器",slug:"自动重启开发服务器",children:[]},{level:2,title:"监控 Webpack 模块依赖图以外的文件",slug:"监控-webpack-模块依赖图以外的文件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/dev-server.md"}},9851:(n,s,a)=>{a.r(s),a.d(s,{default:()=>V});var e=a(6252);const p=(0,e.uE)('<p>在开发前端应用的时候，我们需要不停的在刷新浏览器来查看最新的编译效果。本篇介绍在 Webpack 中如何实现自动刷新。</p><h2 id="webpack-的-watch-模式" tabindex="-1"><a class="header-anchor" href="#webpack-的-watch-模式" aria-hidden="true">#</a> Webpack 的 watch 模式</h2><p>在 <code>watch</code> 模式下，每当项目中的文件发生变化，Webpack 都会重新编译输出新的内容。我们可以在配置文件中设置 <code>watch</code> 的值为 <code>true</code> 或者在命令行工具中指定 <code>--watch</code> 参数来开启 <code>watch</code> 模式。</p><p>开启 <code>watch</code> 模式可以解决文件发生变化之后 Webpack 自动编译的问题，但是如果做到自动刷新浏览器呢？</p><h2 id="webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server" aria-hidden="true">#</a> Webpack-dev-server</h2>',5),t={href:"https://www.npmjs.com/package/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("Webpack-dev-server"),l=(0,e.Uk)(" 是官方维护的开发服务器，它的输出结果保存在内存中，也就是说构建出来的 bundle 不会输出到文件中。在使用 Webpack-dev-server 的时候，如下选项需要额外关注："),o={href:"https://webpack.js.org/configuration/dev-server/#devserverhistoryapifallback",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("devServer.historyApiFallback"),i=(0,e.Uk)(" 如果应用中使用了基于 HTML5 History API 的路由，那么需要设置 "),u=(0,e.Wm)("code",null,"devServer.historyApiFallback",-1),d={href:"https://webpack.js.org/configuration/dev-server/#devservercontentbase",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("devServer.contentBase"),b=(0,e.Uk)(" 可以通过 "),m=(0,e.Wm)("code",null,"devServer.contentBase",-1),g=(0,e.Uk)(" 来指定 index.html 的位置，如果最终使用的应用的 index.html 不是 webpack 自动生成的，那么需要通过 "),h=(0,e.Wm)("code",null,"contentBase",-1),v=(0,e.Uk)(" 来指定 index.html 的位置。"),w=(0,e.Wm)("code",null,"contentBase",-1),W=(0,e.Uk)(" 的值可以为一个路径，也可以为一个路径的数组，默认值是项目根路径。"),y={href:"https://webpack.js.org/configuration/dev-server/#devserverproxy",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("devServer.proxy"),f=(0,e.Uk)(" 有时候我们需要直接在页面上访问其他服务的接口，这时就需要设置代理。代理默认是不启用的。"),j={href:"https://webpack.js.org/configuration/dev-server/#devserverheaders-",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("devServer.headers"),q=(0,e.Uk)(" 给页面的请求添加一些自定义响应头"),S=(0,e.Wm)("h2",{id:"webpack-plugin-serve",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#webpack-plugin-serve","aria-hidden":"true"},"#"),(0,e.Uk)(" Webpack-plugin-serve")],-1),_={href:"https://www.npmjs.com/package/webpack-plugin-serve",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Uk)("Webpack-plugin-serve"),P=(0,e.Uk)(" 是一个第三方插件，将更新浏览器的逻辑封装在了 webpack 插件里。WPS 底层基于 webpack 的 "),K=(0,e.Wm)("code",null,"watch",-1),H=(0,e.Uk)(" 模式，并基于此实现了 HMR 等特性。"),M=(0,e.Wm)("p",null,"WPS 同时支持 webpack 的多编译器模式，只需要指定一组配置即可。",-1),R=(0,e.Uk)("默认情况下，WPS 的编译结果输出到文件系统中。通过 "),T={href:"https://www.npmjs.com/package/webpack-plugin-ramdisk",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("webpack-plugin-ramdisk"),A=(0,e.Uk)(", 还可以将编译输出到 RAM 中，相较于输出到文件系统来说性能更好。"),C=(0,e.uE)('<p>安装 webpack-plugin-serve</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> webpack-plugin-serve --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们需要配置一下 WPS 来让 webpack 使用。配置如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-nano/argv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> MiniHtmlWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> WebpackPluginServe <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-plugin-serve&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  watch<span class="token operator">:</span> mode <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;webpack-plugin-serve/client&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  mode<span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MiniHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Demo&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">WebpackPluginServe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      port<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span><span class="token punctuation">,</span>\n      <span class="token keyword">static</span><span class="token operator">:</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">,</span>\n      liveReload<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      waitForBuild<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>添加 npm scripts：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wp --mode development&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行构建命令，<code>npm run start</code> 可以看到命令行输出如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Watching Files\n⬡ wps: Server Listening on: http://[::]:8080\n\n\n⬡ webpack: asset main.js 86.8 KiB [emitted] (name: main)\n  asset index.html 190 bytes [compared for emit]\n  runtime modules 25.5 KiB 12 modules\n  cacheable modules 35.3 KiB\n    modules by path ./node_modules/ 33.4 KiB\n      modules by path ./node_modules/webpack-plugin-serve/lib/client/ 24.1 KiB 8 modules\n      ./node_modules/webpack-plugin-serve/client.js 1.05 KiB [built] [code generated]\n      ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 6.67 KiB [built] [code generated]\n      ./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\n    modules by path ./src/ 1.88 KiB\n      modules by path ./src/*.js 248 bytes\n        ./src/index.js 99 bytes [built] [code generated]\n        ./src/component.js 149 bytes [built] [code generated]\n      modules by path ./src/*.css 1.64 KiB\n        ./src/main.css 1.32 KiB [built] [code generated]\n        ./node_modules/css-loader/dist/cjs.js!./src/main.css 332 bytes [built] [code generated]\n  0 (webpack 5.11.1) compiled successfully in 508 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>浏览器输出结果为：</p><p><img src="/courses/webpack/helloworld-c.png" alt="HelloWorld"></p><p>这时候，如果修改了源代码，我们可以看到命令行输出会有变化，同时浏览器也会自动更新。</p><h2 id="通过网络访问开发服务器" tabindex="-1"><a class="header-anchor" href="#通过网络访问开发服务器" aria-hidden="true">#</a> 通过网络访问开发服务器</h2><p>有时候我们需要别的机器也可以访问我们本地的开发服务器，这时候，我们需要告诉开发服务器本机的 IP。在类 Unix 机器上可以通过 <code>ifconfig | grep inet</code> 方式获取，在 windows 机器上，可以通过 <code>ipconfig</code> 获取。之后通过 <code>HOST=&lt;ip 地址&gt; ./node_modules/.bin/wp</code> 的方式启动开发服务器。</p><h2 id="轮询文件" tabindex="-1"><a class="header-anchor" href="#轮询文件" aria-hidden="true">#</a> 轮询文件</h2><p>Webpack 的文件 watch 模式在一些系统上不能不生效，比如老旧的 windows 或 Ubuntu。此时需要开启文件轮询功能，<code>webpack.config.js</code> 配置如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    aggregateTimeout<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token comment">// 延迟第一次 rebuild 300 毫秒</span>\n    poll<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 轮询间隔，单位毫秒</span>\n    ignored<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 忽略目录，减少 CPU 消耗</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="自动重启开发服务器" tabindex="-1"><a class="header-anchor" href="#自动重启开发服务器" aria-hidden="true">#</a> 自动重启开发服务器</h2>',17),E=(0,e.Uk)("在项目初期，需要经常修改 "),F=(0,e.Wm)("code",null,"webpack.config.js",-1),O=(0,e.Uk)("，就需要不断的重启开发服务器。我们可以通过 "),I={href:"https://www.npmjs.com/package/nodemon",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("nodemon"),z=(0,e.Uk)(" 来实现 webpack 配置变更重启开发服务器的能力。"),N=(0,e.uE)('<p>安装 nodemon：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> nodemon --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加 npm scripts：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon --watch webpack.*.js --exec \\&quot;npm start\\&quot;&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wp --mode development&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="监控-webpack-模块依赖图以外的文件" tabindex="-1"><a class="header-anchor" href="#监控-webpack-模块依赖图以外的文件" aria-hidden="true">#</a> 监控 Webpack 模块依赖图以外的文件</h2>',5),Y=(0,e.Uk)("默认情况下，Webpack 只会监控项目直接依赖的模块文件。如果我们需要监控一些其他的文件，比如在使用 mini-html-webapck-pulgin 的时候，我们需要指定模板文件，来实现模板变更页面刷新的目的，这时，可以通过 "),Z={href:"https://www.npmjs.com/package/webpack-add-dependency-plugin",target:"_blank",rel:"noopener noreferrer"},G=(0,e.Uk)("webpack-add-dependency-plugin"),J=(0,e.Uk)(" 来解决问题。"),Q=(0,e.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>WDS 和 WPS 让 webpack 对开发过程更友好。</p><ol><li>Webpack 的 <code>watch</code> 模式可以实现代码变更实时输出编译结果。</li><li>WPS 和 WDS 实现了代码变更刷新浏览器的功能，同时都支持 HMR。</li><li>在某些系统上，webpack 的 <code>watch</code> 模式可能无法起作用，需要启用轮询模式。</li><li>WDS 可以通过中间件的形式与已有 node 服务集成。</li><li>WPS 和 WDS 除了自动刷新浏览器和 HMR 以外，还有很多其他功能，比如代理。</li></ol><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',4),V={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[(0,e.Wm)("a",t,[c,(0,e.Wm)(a)]),l]),(0,e.Wm)("ol",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",o,[r,(0,e.Wm)(a)]),i,u]),(0,e.Wm)("li",null,[(0,e.Wm)("a",d,[k,(0,e.Wm)(a)]),b,m,g,h,v,w,W]),(0,e.Wm)("li",null,[(0,e.Wm)("a",y,[x,(0,e.Wm)(a)]),f]),(0,e.Wm)("li",null,[(0,e.Wm)("a",j,[U,(0,e.Wm)(a)]),q])]),S,(0,e.Wm)("p",null,[(0,e.Wm)("a",_,[B,(0,e.Wm)(a)]),P,K,H]),M,(0,e.Wm)("p",null,[R,(0,e.Wm)("a",T,[D,(0,e.Wm)(a)]),A]),C,(0,e.Wm)("p",null,[E,F,O,(0,e.Wm)("a",I,[L,(0,e.Wm)(a)]),z]),N,(0,e.Wm)("p",null,[Y,(0,e.Wm)("a",Z,[G,(0,e.Wm)(a)]),J]),Q],64)}}}}]);