"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6298],{6064:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-50a5c4e0",path:"/posts/2022/03/31/how-flexbox-works.html",title:"Flexbox 是如何工作的",lang:"zh-CN",frontmatter:{title:"Flexbox 是如何工作的",description:"通过例子说明 css flexbox 布局的工作原理。",keywords:["css layout","css 布局","flexbox"],date:"2022-03-31T00:00:00.000Z",permalinkPattern:"posts/:year/:month/:day/:slug.html",tags:["通用知识"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Flexbox 的布局原理",slug:"flexbox-的布局原理",children:[]},{level:2,title:"例子说明",slug:"例子说明",children:[{level:3,title:"设置 flex-grow",slug:"设置-flex-grow",children:[]},{level:3,title:"差异化的 flex-grow",slug:"差异化的-flex-grow",children:[]},{level:3,title:"设置 flex-basis: auto",slug:"设置-flex-basis-auto",children:[]},{level:3,title:"设置 flex-shrink",slug:"设置-flex-shrink",children:[]},{level:3,title:"设置 flex-wrap",slug:"设置-flex-wrap",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"posts/how-flexbox-works.md"}},8765:(s,n,a)=>{a.r(n),a.d(n,{default:()=>F});var e=a(6252);const p=(0,e.uE)('<p>Flexbox 是一种 CSS 布局机制，可以说是目前浏览器原生支持的最好、使用最广泛的布局机制了。本文通过一些例子来说明 Flexbox 布局的工作原理，可以让我们更好的使用 Flexbox。</p><p>与 CSS Grid 可以同时在横向和纵向两个方向进行布局不同，Flexbox 只能在单一方向上进行布局，即要么横向，要么纵向。所谓布局，其实就是空间的分配过程，也就是说计算元素尺寸和容器剩余空间尺寸的过程。</p><h2 id="flexbox-的布局原理" tabindex="-1"><a class="header-anchor" href="#flexbox-的布局原理" aria-hidden="true">#</a> Flexbox 的布局原理</h2><p>整个布局过程我们可以简单的总结如下：</p><ol><li>计算 flex 容器内的可用空间。整个容器的尺寸减去容器的 border、padding 等所得的剩余空间尺寸。</li><li>计算每个 flex 元素的 flex base 尺寸和元素的假设尺寸。具体计算方法是取 flex-basis、min-width 和 flex 元素内容尺寸的较大者。flex base 尺寸是 flex 元素需要的最小尺寸，这个尺寸不能小于元素内容的尺寸。元素的假设尺寸是指在 flex 因子生效前元素的尺寸，flex 因子生效后可能导致元素发生伸缩。</li><li>计算容器内所有 flex 元素的假设尺寸总和。</li><li>将所有元素的假设尺寸总和与容器内可用空间尺寸做比较，来确定 flex 因子，也就是说当假设尺寸总和超过容器内可用空间尺寸时，使用 flex-shrink，否则使用 flex-grow。在同一时间，flex-shrink 和 flex-grow 只有一个生效。</li></ol><p>所谓 flex 因子，简单来说就是缩小和放大。浏览器在进行 flexbox 布局时会先确定使用哪种 flex 因子，然后再根据选用的 flex 因子来对元素尺寸进行调整。</p>',6),l=(0,e.Uk)("在进行调整的时候，就会涉及到一个剩余空间的计算问题。如果 flex 元素明确指定了尺寸大小（"),t={href:"https://drafts.csswg.org/css-sizing-3/#definite_",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("definite size"),o=(0,e.Uk)("，比如设置了 width），那么这个元素就是不可伸缩的。如果没有显式指定尺寸，则会按照上面第2步那样计算假设尺寸。剩余空间的尺寸就是容器内的可用空间尺寸减去这些元素的尺寸之和。"),i=(0,e.uE)('<h2 id="例子说明" tabindex="-1"><a class="header-anchor" href="#例子说明" aria-hidden="true">#</a> 例子说明</h2><p>我们有如下 dom 结构：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Antidisestablishmentarianism<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Cherries jubilee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>样式如下：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">[id=flex]</span> <span class="token punctuation">{</span>\n    <span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n    <span class="token property">outline</span><span class="token punctuation">:</span> 1px dashed #555<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> 3rem auto<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/*其他样式已省略*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>页面展示效果如下：</p><p><img src="/posts/images/how-flexbox-works/flex-c.png" alt="flex 布局"></p><p>我们没有设置元素的 <code>flex</code> 样式属性，默认值是 <code>0 1 auto</code>。<code>flex</code> 样式属性是 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 这三个样式属性的简写形式。<code>0 1 auto</code> 分别对应为 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 的值。</p><p>通过取值可以看到，因为我们禁止了放大和收缩，并且 <code>flex-basis</code> 的值是 <code>auto</code>，浏览器就使用元素的最大内容尺寸来计算所有元素的尺寸总和，比容器的尺寸（1200px）小，所有会有额外的剩余空间。</p><p>关于 <code>flex</code> 这个样式属性，我们额外做一些说明。<code>flex</code> 属性可以接收最少一个、最多三个属性值。</p><p>当只有一个属性值的时候，<code>flex</code> 的工作模式是这样的 <code>&lt;number&gt; 1 0</code>。即 <code>flex: 2</code> 最终的结果是 <code>flex: 2 1 0</code>。</p>',11),r=(0,e.Uk)("当有两个属性值的时候，第一个值会被解析为 "),u=(0,e.Wm)("code",null,"flex-grow",-1),d=(0,e.Uk)("，第二个值如果是数字，则会被解析为 "),x=(0,e.Wm)("code",null,"flex-shrink",-1),b=(0,e.Uk)("，如果是一个"),k={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/width",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("合法的宽度值"),m=(0,e.Uk)("则会被解析为 "),f=(0,e.Wm)("code",null,"flex-basis",-1),h=(0,e.Uk)("。即 "),v=(0,e.Wm)("code",null,"flex: 1 0",-1),w=(0,e.Uk)(" 解析为 "),y=(0,e.Wm)("code",null,"flex: 1 0 0",-1),q=(0,e.Uk)("，而 "),U=(0,e.Wm)("code",null,"flex: 1 20rem",-1),W=(0,e.Uk)(" 则被解析为 "),A=(0,e.Wm)("code",null,"flex: 1 1 20rem",-1),C=(0,e.Uk)("。"),E=(0,e.uE)('<p>当有三个属性值的时候，第一个值被解析为 <code>flex-grow</code>，第二个值必须为数字，且会被解析为 <code>flex-shrink</code>，第三个值则必须是合法的宽度值，被解析为 <code>flex-basis</code>。</p><h3 id="设置-flex-grow" tabindex="-1"><a class="header-anchor" href="#设置-flex-grow" aria-hidden="true">#</a> 设置 flex-grow</h3><p>我们增加如下样式设置:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">[id=flex] &gt; div</span> <span class="token punctuation">{</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>实际上等同于 <code>flex: 1 1 0</code>，即 <code>flex-grow: 1</code>。从前面的例子我们可以看到，所有元素的假设尺寸之和是小于容器剩余空间尺寸的，所以浏览器会使用 <code>flex-grow</code> 来作为 flex 因子，因为我们设置了 <code>flex-grow: 1</code> ，因此浏览器会等比放大所有的元素。如下图：</p><p><img src="/posts/images/how-flexbox-works/flex-grow-c.png" alt="设置了 flex-grow 的 flex 布局"></p><p>实际上浏览器会循环通过下面的公式来计算每个元素的最终尺寸：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>当前元素伸缩值 = (当前剩余空间 - 所有剩余元素的 flex-grow 值的和) * 当前元素的 flex-grow 值\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在上面的例子中，容器的剩余空间为 1200px，因此，通过公式计算：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>( 1200 ÷ ( 1 + 1 + 1 + 1 + 1 ) ) × 1 = 240\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>元素 A 的最终尺寸为 <code>240px + flex-basis = 240px + 0 = 240px</code>。但是，因为 <code>Antidisestablishmentarianism</code> 这个单词比较长，实际会占用 <code>417px</code> 的空间大小，因此元素 A 的最终尺寸为 <code>417px</code>。</p><p>此时，在计算元素 B 的尺寸时，剩余空间为 <code>1200px - 417px = 783px</code>。元素 B 的伸缩值为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>( 783 ÷ ( 1 + 1 + 1 + 1 ) ) × 1 = 195.75 0 + 195.75 = 195.75\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同理，元素 C、D、E 的伸缩值分别为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>C: ( 587 ÷ ( 1 + 1 + 1 ) ) × 1 ) = 195.67\nD: ( 391.33 ÷ ( 1 + 1 ) ) × 1 = 195.665\nE: ( 391 - 195.665 ÷ 1 ) × 1 = 195.335\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>总结来说，浏览器从剩余空间中减去已经分配的空间，然后计算下一个 flex 元素的伸缩值和最终大小。</p><h3 id="差异化的-flex-grow" tabindex="-1"><a class="header-anchor" href="#差异化的-flex-grow" aria-hidden="true">#</a> 差异化的 flex-grow</h3><p>我们修改一下元素的 <code>flex-grow</code> 值：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">div &gt; :not([id=c])</span> <span class="token punctuation">{</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">[id=c]</span> <span class="token punctuation">{</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此时，页面展示效果如下：</p><p><img src="/posts/images/how-flexbox-works/flex-grow-2-c.png" alt="差异化 flex-grow"></p><p>各元素的伸缩值计算如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>A: 417px\nB: ( 783 ÷ ( 1 + 1 + 5 + 1 ) ) × 1 = 98\nC: ( 685 ÷ ( 5 + 1 + 1 ) ) × 5 = 490\nD: ( 195 ÷ ( 1 + 1 ) ) × 1 = 97.5\nE: ( 97.5 ÷ 1 ) × 1 = 97.5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="设置-flex-basis-auto" tabindex="-1"><a class="header-anchor" href="#设置-flex-basis-auto" aria-hidden="true">#</a> 设置 <code>flex-basis: auto</code></h3><p>前面的例子里，我们都设置了 <code>flex-basis</code> 的值为 0，现在我们设置 <code>flex-basis: auto</code>，再来看看元素尺寸是如何计算的。</p><p>删除其他元素的 flex 指定，修改样式如下：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">[id=c]</span> <span class="token punctuation">{</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时等价于其他元素是 <code>flex: 0 1 auto</code>，元素 C 是 <code>flex: 5 1 0</code>。展示效果如下：</p><p><img src="/posts/images/how-flexbox-works/flex-basis-c.png" alt="flex-basis"></p><p>在前面的例子中，所有元素都是 <code>flex-basis: 0</code>，现在设置为 A、B、D、E 都设置成了 <code>flex-basis: auto</code>。因此，元素 A、B、D、E 都会使用元素内容的尺寸来计算。</p><p>因此，剩余剩余可分配空间大小为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1200 - ( 417 + 33 + 35 + 30 ) = 685\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>因为元素 C 是唯一可伸缩的元素，因此它的伸缩值为 685。</p><h3 id="设置-flex-shrink" tabindex="-1"><a class="header-anchor" href="#设置-flex-shrink" aria-hidden="true">#</a> 设置 flex-shrink</h3><p>现在我们做一些调整，让所有 flex 元素的尺寸总和大于容器的可用空间尺寸，使得 flex-shrink 生效。</p><p>样式调整如下：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">:not([id=a])</span> <span class="token punctuation">{</span>\n    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">[id=a]</span> <span class="token punctuation">{</span>\n    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">div &gt; div</span> <span class="token punctuation">{</span>\n    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可以看到，所有元素 <code>flex-grow: 0</code>，元素 A <code>flex-shrink: 5</code>，其他元素 <code>flex-shrink: 1</code>，所有元素总尺寸 2500px。</p><p>显示效果如下： <img src="/posts/images/how-flexbox-works/flex-shrink-c.png" alt="flex-shrink"></p><p>因为元素尺寸总和超过了容器可用尺寸（1200px），因此 flex-shrink 将会生效。</p><p>元素 A 的伸缩值为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>( 1300 ÷  ( 5 + 1 + 1 + 1 + 1 ) ) × 5 = 722.22\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>则元素 A 的实际尺寸计算为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>500 - 722.22 = -222.22\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到得出的是负值。如果元素 A 是空元素，那么最终尺寸会是零。本例中，元素 A 的尺寸就是起内容的尺寸，大概 34px。</p><p>确定了元素 A 的尺寸之后，容器剩余空间尺寸为 <code>1200 - 34 = 1166</code>。其他元素的伸缩值计算为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>B: ( 1166 ÷ ( 1 + 1 + 1 + 1 ) ) × 1 = 291.5\nC: ( 874.5 ÷ ( 1 + 1 + 1 ) ) × 1 = 291.5\nD: ( 583 ÷ ( 1 + 1 ) ) × 1 = 291.5\nE: ( 291.5 ÷ 1 ) × 1 = 291.5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>值得注意的一点是，如果 <code>flex-grow</code> 和 <code>flex-shrink</code> 的取值都为 0，那么元素即不会放大也不会缩小，当所有元素的尺寸总和超过容器空间之后，就会产生溢出效果。</p><h3 id="设置-flex-wrap" tabindex="-1"><a class="header-anchor" href="#设置-flex-wrap" aria-hidden="true">#</a> 设置 flex-wrap</h3><p>当所有元素的尺寸总和超过容器空间之后，就会产生溢出效果。我们可以通过设置 <code>flex-wrap: wrap</code> 来是超出的元素换行。</p><p>我们调整下样式：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">div &gt; div</span> <span class="token punctuation">{</span>\n    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">[id=flex]</span> <span class="token punctuation">{</span>\n    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>显示效果如下：</p><p><img src="/posts/images/how-flexbox-works/flex-wrap-c.png" alt="flex-wrap"></p><p>我们可以看到，由于 <code>flex-basis: 500px</code> 且默认的 <code>flex-grow: 0</code>，因此每一行的末尾有 200px 的剩余空间。</p><p>我们可以通过设置 <code>flex-grow: 1</code> 来让元素占满剩余空间。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">div &gt; div</span> <span class="token punctuation">{</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 500px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时显示效果如下：</p><p><img src="/posts/images/how-flexbox-works/flex-wrap-with-grow-c.png" alt="flex-wrap with flex-grow"></p><p>可以看到，每行的剩余空间都被占满了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Flexbox 布局有时候会有一些复杂和难以理解。在实际使用过程中，我们需要牢记如下几点：</p><ul><li>Flexbox 只在单一方向上分配空间，行或者列。</li><li>flex-basis 定义了元素的最小尺寸，有时候元素的内容尺寸可能会比 flex-basis 定义的尺寸大。</li><li>浏览器同时只会使用 flex-grow 或者 flex-shrink 来排列元素，不会同时使用。</li><li>实际使用 flex-grow 还是 flex-shrink 取决于元素尺寸总和与容器剩余空间的大小。</li><li>浏览器根据 flex 因子以及元素本身设置的系数来分配每个元素的空间。</li></ul><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',64),F={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[l,(0,e.Wm)("a",t,[c,(0,e.Wm)(a)]),o]),i,(0,e.Wm)("p",null,[r,u,d,x,b,(0,e.Wm)("a",k,[g,(0,e.Wm)(a)]),m,f,h,v,w,y,q,U,W,A,C]),E],64)}}}}]);