"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[9832],{2629:(e,t,o)=>{o.r(t),o.d(t,{data:()=>r});const r={key:"v-10411a6e",path:"/courses/webpack/output-target.html",title:"设置构建输出目标",lang:"zh-CN",frontmatter:{title:"设置构建输出目标",description:"介绍 Webpack 中如何设置构建输出目标",keywords:["Webpack"],date:"2021-01-26T00:00:00.000Z",key:24},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"输出为 Web 应用",slug:"输出为-web-应用",children:[]},{level:2,title:"输出为 NodeJS 应用",slug:"输出为-nodejs-应用",children:[]},{level:2,title:"输出为桌面应用",slug:"输出为桌面应用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/output-target.md"}},6447:(e,t,o)=>{o.r(t),o.d(t,{default:()=>O});var r=o(6252);const c=(0,r.uE)('<p>尽管 Webpack 通常被用来构建 Web 项目，但其实 Webpack 还可以被用在其他类型的项目中。比如 NodeJS 环境、桌面应用环境（比如：Electron）等。</p><p>Webpack 通过 <code>target</code> 字段来控制输出目标。</p><h2 id="输出为-web-应用" tabindex="-1"><a class="header-anchor" href="#输出为-web-应用" aria-hidden="true">#</a> 输出为 Web 应用</h2><p><code>web</code> 是 <code>target</code> 字段的默认取值，用来构建 Web 项目。在最终的构建结果中，Webpack 运行时会启动应用程序，然后通过 <code>manifest</code> 文件中记录的模块列表信息来加载模块。</p><p>从 Webpack 5 开始，<code>target</code> 的默认值变为 <code>browserslist</code>，以防项目中已经定义了浏览器配置。没有浏览器配置时，默认值为 <code>web</code>。通过 <code>.browserslist</code> 文件，Webpack 可以有针对性的输出结果，而不需要兼容一些老旧浏览器。Webpack 同时还支持将构建目标指定为仅满足某些特定语言规范（比如 <code>es2020</code>）即可，也支持设置一组构建目标（比如 <code>[&quot;web&quot;, &quot;es2020&quot;]</code>）。</p><p><strong>Web worker</strong></p>',6),a=(0,r.Uk)("设置 "),l=(0,r.Wm)("code",null,"target",-1),d=(0,r.Uk)(" 为 "),n=(0,r.Wm)("code",null,"webworker",-1),p=(0,r.Uk)("，可以将应用打包为 "),i={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"},s=(0,r.Uk)("web worker"),k=(0,r.Uk)("。我们可以通过 Web worker 来实现完成复杂的计算工作，从而避免影响主流程的用户体验。"),b=(0,r.uE)('<p>在使用 Web worker 这个 <code>target</code> 的时候，有一些限制需要注意：</p><ul><li>不能使用 Webpack 的 hash 特性，即各种 hash 占位符不能生效。</li><li>在 Web worker 中不能操作 DOM。</li></ul><h2 id="输出为-nodejs-应用" tabindex="-1"><a class="header-anchor" href="#输出为-nodejs-应用" aria-hidden="true">#</a> 输出为 NodeJS 应用</h2><p>Webpack 提供了两个 Node 相关的 <code>target</code> 选项：<code>node</code> 和 <code>node-async</code>。在使用 <code>node</code> 的时候，会使用标准的 Node <code>require</code> 来加载模块，而在 <code>node-async</code> target 下，Webpack 会对输出模块进行包装，从而实现异步加载。</p><p>Node targets 主要被用在服务端渲染（Server-Side Rendering）。从 Webpack 5 开始，支持将 <code>target</code> 设置为具体的 Node 版本，比如 <code>node10.13</code>。</p>',5),u=(0,r.Uk)("如果我们要在服务中使用 Webpack，"),h={href:"https://www.npmjs.com/package/nodemon-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},W=(0,r.Uk)("nodemon-webpack-plugin"),g=(0,r.Uk)(" 这个插件可以在 webpack 配置发生变化的时候主动重启服务进程。"),m=(0,r.Wm)("h2",{id:"输出为桌面应用",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#输出为桌面应用","aria-hidden":"true"},"#"),(0,r.Uk)(" 输出为桌面应用")],-1),w=(0,r.Uk)("目前市面上有很多用来开发桌面应用的框架，比如 "),f={href:"https://nwjs.io/",target:"_blank",rel:"noopener noreferrer"},x=(0,r.Uk)("NW.js"),y=(0,r.Uk)(" 和 "),U={href:"https://electron.atom.io/",target:"_blank",rel:"noopener noreferrer"},v=(0,r.Uk)("Electron"),j=(0,r.Uk)("。Webpack 可以分别设置如下的构建目标来输出："),N=(0,r.Wm)("li",null,[(0,r.Wm)("code",null,"node-webkit"),(0,r.Uk)(" 针对 NW.js 输出")],-1),q=(0,r.Wm)("code",null,"atom",-1),_=(0,r.Uk)(", "),S=(0,r.Wm)("code",null,"electron",-1),E=(0,r.Uk)(" 和 "),J=(0,r.Wm)("code",null,"electron-main",-1),C=(0,r.Uk)(" 针对 Electron "),P={href:"https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md",target:"_blank",rel:"noopener noreferrer"},z=(0,r.Uk)("主进程"),A=(0,r.Wm)("li",null,[(0,r.Wm)("code",null,"electron-renderer"),(0,r.Uk)(" 针对 Electron 渲染进程输出")],-1),I=(0,r.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们可以通过 <code>target</code> 字段来控制 Webpack 的构建输出目标，<code>target</code> 字段的默认值是 <code>web</code>。</p><p>除了 Web 应用以外，Webpack 还可以输出桌面、NodeJS 和 Web worker 应用。</p><p>NodeJS 场景下，Webpack 通常会被用在服务端渲染场景中。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',5),O={render:function(e,t){const o=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.j4)(r.HY,null,[c,(0,r.Wm)("p",null,[a,l,d,n,p,(0,r.Wm)("a",i,[s,(0,r.Wm)(o)]),k]),b,(0,r.Wm)("blockquote",null,[(0,r.Wm)("p",null,[u,(0,r.Wm)("a",h,[W,(0,r.Wm)(o)]),g])]),m,(0,r.Wm)("p",null,[w,(0,r.Wm)("a",f,[x,(0,r.Wm)(o)]),y,(0,r.Wm)("a",U,[v,(0,r.Wm)(o)]),j]),(0,r.Wm)("ul",null,[N,(0,r.Wm)("li",null,[q,_,S,E,J,C,(0,r.Wm)("a",P,[z,(0,r.Wm)(o)])]),A]),I],64)}}}}]);