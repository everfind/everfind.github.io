"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7072],{3753:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7f45384e",path:"/courses/webpack/ssr.html",title:"服务端渲染（SSR）",lang:"zh-CN",frontmatter:{title:"服务端渲染（SSR）",description:"介绍 Webpack 中如何进行服务端渲染（SSR）",keywords:["Webpack"],date:"2021-01-28T00:00:00.000Z",key:26},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加 Babel",slug:"添加-babel",children:[]},{level:2,title:"添加 React demo",slug:"添加-react-demo",children:[]},{level:2,title:"配置 Webpack",slug:"配置-webpack",children:[]},{level:2,title:"搭建服务",slug:"搭建服务",children:[]},{level:2,title:"预渲染（Prerendering）",slug:"预渲染-prerendering",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/ssr.md"}},4083:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var p=a(6252);const e=(0,p.uE)('<p>通过服务端渲染（SSR）我们可以将应用的 HTML、JavaScript、CSS 代码，甚至是应用的初始状态数据在首次请求时就返回给浏览器。浏览器在拿到数据后，即使在 JavaScript 被禁用的状态下也能正确的展示页面。除此以外，服务端渲染还可以帮助实现搜索引擎优化（SEO）。</p><p>我们现在来展示一下如何使用 SSR。</p><h2 id="添加-babel" tabindex="-1"><a class="header-anchor" href="#添加-babel" aria-hidden="true">#</a> 添加 Babel</h2><p>通常来说，在 React 中我们都会使用 JSX，因此，需要先配置 babel。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> babel-loader @babel/core @babel/preset-react --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>.babelrc</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  &quot;presets&quot;: [\n    [&quot;@babel/preset-env&quot;, { &quot;modules&quot;: false }],\n    &quot;@babel/preset-react&quot;\n  ]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="添加-react-demo" tabindex="-1"><a class="header-anchor" href="#添加-react-demo" aria-hidden="true">#</a> 添加 React demo</h2><p>安装 react 包。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> react react-dom\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>做服务端渲染，在应用入口处有两种情况需要考虑。在浏览器端渲染时，我们需要将应用渲染到页面上。而在服务端时，我们只需要返回应用的 JSX 代码。</p><p>另外，ES2016 的导入导出语法与 CommonJS 的导入导出预发不能混用，我们需要在入口代码处统一使用 CommonJS 语法。</p><p><strong>src/ssr.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ReactDOM <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">SSR</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">SSR</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 浏览器端做渲染</span>\n  ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token constant">SSR</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="配置-webpack" tabindex="-1"><a class="header-anchor" href="#配置-webpack" aria-hidden="true">#</a> 配置 Webpack</h2><p>我们单独定义一份配置文件。假设我们需要在多种环境中使用相同的输出，则使用 <code>UMD</code> 进行输出更为合理。</p><p><strong>webpack.ssr.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">APP_SOURCE</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span> index<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span> <span class="token string">&#39;ssr.js&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span>\n    globalObject<span class="token operator">:</span> <span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> <span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>添加构建脚本.</p><p><strong>package.json</strong></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;build:ssr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wp --config webpack.ssr.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行 <code>npm run build:ssr</code>，我们可以看到新构建出来的文件 <code>./static/index.js</code>。下一步就是搭建一个服务来渲染页面。</p><h2 id="搭建服务" tabindex="-1"><a class="header-anchor" href="#搭建服务" aria-hidden="true">#</a> 搭建服务</h2><p>我们使用 express 来举例。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> express --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>server.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> renderToString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom/server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">SSR</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderMarkup</span><span class="token punctuation">(</span><span class="token function">renderToString</span><span class="token punctuation">(</span><span class="token constant">SSR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">renderMarkup</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;SSR Demo&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;\n    &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>启动服务，<code>node ./server.js</code>，访问 <code>http://localhost:8080</code> 就可以看到调试工具的 <code>Source</code> 标签页中看到服务端渲染返回的内容了。</p>',28),t=(0,p.Uk)("此时如果修改了应用代码，刷新页面数据不会更新。我们可以通过 "),o={href:"https://www.npmjs.com/package/webpack-dev-middleware",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("webpack-dev-middleware"),l=(0,p.Uk)(" 来解决这个问题。"),r=(0,p.Wm)("p",null,"上面这是简单演示了一个服务端渲染的 demo。有很多实际的问题没有解决，比如如何加载一个非 JavaScript 模块，像 CSS、图片等直接在服务端加载会导致报错。社区有很多成熟的服务端渲染框架，比如 Next.js 可以帮助解决这些问题。",-1),u=(0,p.Wm)("h2",{id:"预渲染-prerendering",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#预渲染-prerendering","aria-hidden":"true"},"#"),(0,p.Uk)(" 预渲染（Prerendering）")],-1),i=(0,p.Wm)("p",null,"预渲染同样可以解决 SEO 问题。预渲染通过一个无头浏览器将页面内容渲染完成后提供给爬虫。相对于服务端渲染来说，预渲染更易实现。预渲染也有缺点，就是对频繁变化的数据支持的不够理想。",-1),k=(0,p.Wm)("p",null,"在 Webpack 中，我们可以使用这些工具来实现预渲染。",-1),b={href:"https://www.npmjs.com/package/prerender-spa-plugin",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("prerender-spa-plugin"),m=(0,p.Uk)("，底层使用 "),g={href:"https://www.npmjs.com/package/puppeteer",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("Puppeteer"),v={href:"https://www.npmjs.com/package/prerender-loader",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("prerender-loader"),x=(0,p.Uk)(" 可以提供高度定制化的选项。可以与 html-webpack-plugin 结合使用。"),w=(0,p.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>服务端渲染可以为浏览器在加载初始 JavaScript 的时候提供更多的展示内容，同时也带来了更大的技术挑战。Webpack 可以为服务端渲染提供更多的资源构建支持。在一些主流的服务端渲染框架中，比如 Next.js 中都内置了 Webpack 来构建资源。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',3),y={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)("a",o,[c,(0,p.Wm)(a)]),l]),r,u,i,k,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",b,[d,(0,p.Wm)(a)]),m,(0,p.Wm)("a",g,[h,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",v,[f,(0,p.Wm)(a)]),x])]),w],64)}}}}]);