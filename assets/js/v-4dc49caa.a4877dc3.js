"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8725],{7798:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4dc49caa",path:"/code-reading/",title:"源码解读",lang:"zh-CN",frontmatter:{title:"源码解读",sidebar:!1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],filePathRelative:"code-reading/README.md",articleList:[{key:"v-459a8e42",path:"/code-reading/async-pool.html",title:"如何实现一个简单的并发控制？",lang:"zh-CN",frontmatter:{title:"如何实现一个简单的并发控制？",date:"2021-10-18T00:00:00.000Z",description:"并发控制是系统设计过程中非常重要的一个概念，关系到性能、可用性、安全等各方面。本文将介绍一个简单的并发控制实现。",keywords:["并发控制","pool"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],content:"\n并发控制的概念相信大家都非常熟悉，比如浏览器请求的并发控制等。今天，我们结合 [async-pool](https://github.com/rxaviers/async-pool) 这个开源工具来看看如何实现一个简单的并发控制。\n\nasync-pool 的代码分为 es6 和 es7 两个版本，都非常简单，我们主要基于 es6 版本进行说明。\n\n在去除参数校验等逻辑以后，核心代码如下，非常短小精悍：\n\n```js\nfunction asyncPool(poolLimit, array, iteratorFn) {\n  let i = 0;\n  const ret = [];\n  const executing = [];\n  const enqueue = function() {\n    if (i === array.length) {\n      return Promise.resolve();\n    }\n    const item = array[i++];\n    const p = Promise.resolve().then(() => iteratorFn(item, array));\n    ret.push(p);\n\n    let r = Promise.resolve();\n\n    if (poolLimit <= array.length) {\n      const e = p.then(() => executing.splice(executing.indexOf(e), 1));\n      executing.push(e);\n      if (executing.length >= poolLimit) {\n        r = Promise.race(executing);\n      }\n    }\n\n    return r.then(() => enqueue());\n  };\n  return enqueue().then(() => Promise.all(ret));\n}\n```\n\n`asyncPool` 支持三个参数，第一个是并发数量，第二个是一组请求输入，第三个是返回 promise 的迭代函数。我们举一个例子来进行说明。\n\n假设我们现在有 500 个请求需要发送，并发数量控制是 50。那么我们可以这样使用 `asyncPool`：\n\n```js\nasyncPool(50, [/* 500 个请求的参数数据 */], () => {/* 发起请求的函数 */})\n```\n\n我们现在来详细说明 `asyncPool` 的工作原理。\n\n首先，`asyncPool` 中初始化了两个数组，`ret` 保存返回结果，其顺序要与输入顺序一致，`executing` 用于记录当前正在执行的请求。\n\n`asyncPool` 中创建了一个 `enqueue` 函数，负责具体的并发控制逻辑。\n\n在 `enqueue` 函数中，通过变量 `i` 来逐个获取请求输入参数，调用迭代函数发起请求，然后将返回的 promise 保存在 `ret` 中。\n\n```js\nconst item = array[i++];\nconst p = Promise.resolve().then(() => iteratorFn(item, array));\nret.push(p);\n```\n\n之后就是并发数量控制的核心逻辑：\n\n```js\nlet r = Promise.resolve();\n\nif (poolLimit <= array.length) {\n    const e = p.then(() => executing.splice(executing.indexOf(e), 1));\n    executing.push(e);\n    if (executing.length >= poolLimit) {\n        r = Promise.race(executing);\n    }\n}\n\nreturn r.then(() => enqueue());\n```\n\n如果并发数量限制大于要发起的请求数量，则无需通过 `executing` 数组来记录正在执行的请求，直接循环发起请求即可。\n\n如果并发数量限制小于要发起的请求数量，则首先通过之前调用迭代函数返回的 promise 生成一个新的 promise，放入 `executing` 中。在这个新的 promise 完成时，将其从 `executing` 中删除。\n\n如果 `executing` 数组长度大于并发数量控制，则使用 `Promise.race(executing)` 获取最先返回的 promsie，并通过它进行下一次迭代。\n\n通过变量 `r` 我们可以看到，在整个循环过程中，`enqueue` 函数会形成一个 promise 链，在最后一个 promise 返回之后，`asyncPool` 通过 `Promise.all` 将所有的结果返回。\n\n```js\nreturn enqueue().then(() => Promise.all(ret));\n```\n\n至此，`async-pool` 的核心逻辑我们就分析完了。上面的分析过程是基于 es6 版本的代码，es7 版本更加简洁，如下，看官们可以自行分析：\n\n```js\nasync function asyncPool(poolLimit, array, iteratorFn) {\n  const ret = [];\n  const executing = [];\n  for (const item of array) {\n    const p = Promise.resolve().then(() => iteratorFn(item, array));\n    ret.push(p);\n\n    if (poolLimit <= array.length) {\n      const e = p.then(() => executing.splice(executing.indexOf(e), 1));\n      executing.push(e);\n      if (executing.length >= poolLimit) {\n        await Promise.race(executing);\n      }\n    }\n  }\n  return Promise.all(ret);\n}\n```\n\n我们知道，不管是 `Promise.race` 还是 `Promise.all`，只要有一个 promise 达到 `Fufilled` 或者 `Rejected` 状态，整个就会返回。这在接口请求的的场景中是不合适的。我们应该如何改造呢？\n\n其实也非常简单，只要在迭代函数的调用处做一些特殊处理即可。\n\n```js\niteratorFn(item, array).then(resp => resp).catch(error => error);\n```\n",contentRendered:'<p>并发控制的概念相信大家都非常熟悉，比如浏览器请求的并发控制等。今天，我们结合 <a href="https://github.com/rxaviers/async-pool" target="_blank" rel="noopener noreferrer">async-pool<OutboundLink/></a> 这个开源工具来看看如何实现一个简单的并发控制。</p>\n<p>async-pool 的代码分为 es6 和 es7 两个版本，都非常简单，我们主要基于 es6 版本进行说明。</p>\n<p>在去除参数校验等逻辑以后，核心代码如下，非常短小精悍：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter">poolLimit<span class="token punctuation">,</span> array<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> item <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> r <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>poolLimit <span class="token operator">&lt;=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">>=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        r <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>asyncPool</code> 支持三个参数，第一个是并发数量，第二个是一组请求输入，第三个是返回 promise 的迭代函数。我们举一个例子来进行说明。</p>\n<p>假设我们现在有 500 个请求需要发送，并发数量控制是 50。那么我们可以这样使用 <code>asyncPool</code>：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token comment">/* 500 个请求的参数数据 */</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token comment">/* 发起请求的函数 */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们现在来详细说明 <code>asyncPool</code> 的工作原理。</p>\n<p>首先，<code>asyncPool</code> 中初始化了两个数组，<code>ret</code> 保存返回结果，其顺序要与输入顺序一致，<code>executing</code> 用于记录当前正在执行的请求。</p>\n<p><code>asyncPool</code> 中创建了一个 <code>enqueue</code> 函数，负责具体的并发控制逻辑。</p>\n<p>在 <code>enqueue</code> 函数中，通过变量 <code>i</code> 来逐个获取请求输入参数，调用迭代函数发起请求，然后将返回的 promise 保存在 <code>ret</code> 中。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> item <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>之后就是并发数量控制的核心逻辑：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> r <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>poolLimit <span class="token operator">&lt;=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">>=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        r <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果并发数量限制大于要发起的请求数量，则无需通过 <code>executing</code> 数组来记录正在执行的请求，直接循环发起请求即可。</p>\n<p>如果并发数量限制小于要发起的请求数量，则首先通过之前调用迭代函数返回的 promise 生成一个新的 promise，放入 <code>executing</code> 中。在这个新的 promise 完成时，将其从 <code>executing</code> 中删除。</p>\n<p>如果 <code>executing</code> 数组长度大于并发数量控制，则使用 <code>Promise.race(executing)</code> 获取最先返回的 promsie，并通过它进行下一次迭代。</p>\n<p>通过变量 <code>r</code> 我们可以看到，在整个循环过程中，<code>enqueue</code> 函数会形成一个 promise 链，在最后一个 promise 返回之后，<code>asyncPool</code> 通过 <code>Promise.all</code> 将所有的结果返回。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>至此，<code>async-pool</code> 的核心逻辑我们就分析完了。上面的分析过程是基于 es6 版本的代码，es7 版本更加简洁，如下，看官们可以自行分析：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter">poolLimit<span class="token punctuation">,</span> array<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>poolLimit <span class="token operator">&lt;=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">>=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>我们知道，不管是 <code>Promise.race</code> 还是 <code>Promise.all</code>，只要有一个 promise 达到 <code>Fufilled</code> 或者 <code>Rejected</code> 状态，整个就会返回。这在接口请求的的场景中是不合适的。我们应该如何改造呢？</p>\n<p>其实也非常简单，只要在迭代函数的调用处做一些特殊处理即可。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=></span> resp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-10-18",deps:[],hoistedTags:[],links:[],pathInferred:"/code-reading/async-pool.html",pathLocale:"/",permalink:null,slug:"async-pool",filePath:"/Users/bingooo/workspace/everfind/website/docs/code-reading/async-pool.md",filePathRelative:"code-reading/async-pool.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/async-pool.html.vue",componentFilePathRelative:"pages/code-reading/async-pool.html.vue",componentFileChunkName:"v-459a8e42",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/async-pool.html.js",dataFilePathRelative:"pages/code-reading/async-pool.html.js",dataFileChunkName:"v-459a8e42",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/code-reading/async-pool.html",htmlFilePathRelative:"code-reading/async-pool.html"},{key:"v-3f63723d",path:"/code-reading/hotkey.html",title:"实现一个快捷键响应系统",lang:"zh-CN",frontmatter:{title:"实现一个快捷键响应系统",date:"2021-09-28T00:00:00.000Z",description:"通过 @github/hotkey 来看如何实现一个快捷键响应系统",keywords:["github/hotkey","快捷键"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"功能描述",slug:"功能描述",children:[]},{level:2,title:"如何实现",slug:"如何实现",children:[{level:3,title:"注册快捷键",slug:"注册快捷键",children:[]},{level:3,title:"响应键盘输入事件",slug:"响应键盘输入事件",children:[]}]}],content:"\n在 GitHub 的页面上有很多快捷键可以使用，比如键入 `g` + `c` 键选中 Code 标签页，键入 `g` + `i` 选中 Issues 标签页。这里是 [GitHub 支持的快捷键列表](https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts)。那么，这么丰富的快捷键，是如何来实现的呢？我们今天就通过 GitHub 官方的 [@github/hotkey](https://www.npmjs.com/package/@github/hotkey) 来一窥究竟。\n\n\n## 功能描述\n\n在需要支持快捷键的元素上，通过 `data-hotkey` 属性添加快捷键序列，然后通过 `@github/hotkey` 暴露的 `install` 方法使得快捷键生效。\n\n``` html\n<a href=\"/page/2\" data-hotkey=\"j\">Next</a>\n<a href=\"/help\" data-hotkey=\"Control+h\">Help</a>\n<a href=\"/rails/rails\" data-hotkey=\"g c\">Code</a>\n<a href=\"/search\" data-hotkey=\"s,/\">Search</a>\n```\n\n```js\nimport {install} from '@github/hotkey'\n\n// Install all the hotkeys on the page\nfor (const el of document.querySelectorAll('[data-hotkey]')) {\n  install(el)\n}\n```\n\n添加快捷键的规则是：\n\n* 如果一个元素上支持多个快捷键，则不同的快捷键之间通过 `,` 分割。\n* 组合键通过 `+` 连接，比如 `Control + j`。\n* 如果一个快捷键序列中有多个按键，则通过空格` `连接，比如 `g c`。\n\n> 我们在这里可以查到[键盘上每个功能按键对应事件键值名称](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)，方便设置快捷键。\n\n## 如何实现\n\n我们先看 `install` 函数的实现。\n\n```ts\nexport function install(element: HTMLElement, hotkey?: string): void {\n  // 响应键盘输入事件\n  if (Object.keys(hotkeyRadixTrie.children).length === 0) {\n    document.addEventListener('keydown', keyDownHandler)\n  }\n\n  // 注册快捷键\n  const hotkeys = expandHotkeyToEdges(hotkey || element.getAttribute('data-hotkey') || '')\n  const leaves = hotkeys.map(h => (hotkeyRadixTrie.insert(h) as Leaf<HTMLElement>).add(element))\n  elementsLeaves.set(element, leaves)\n}\n```\n\n在 `install` 函数中有两部分功能，第一部分是注册快捷键，第二部分是响应键盘输入事件并触发快捷键动作。\n\n### 注册快捷键\n\n因为代码较短，我们逐行说明。\n\n首先，通过 `expandHotkeyToEdges` 函数解析元素的 `data-hotkey` 属性，获得设置的快捷键列表。快捷键的设置规则在前面功能描述中已经说明。\n\n```ts\nexport function expandHotkeyToEdges(hotkey: string): string[][] {\n  return hotkey.split(',').map(edge => edge.split(' '))\n}\n```\n\n之后通过这行代码实现了快捷键注册。\n\n```ts\nconst leaves = hotkeys.map(h => (hotkeyRadixTrie.insert(h) as Leaf<HTMLElement>).add(element))\n```\n\n最后一行实则是一个缓存，方便在 `uninstall` 函数中删除已经添加的快捷键，不赘述了。\n\n因此，整个注册过程核心就是 `hotkeyRadixTrie`，`hotkeyRadixTrie` 是一棵前缀树，在系统启动时就已经初始化。\n\n```ts\nconst hotkeyRadixTrie = new RadixTrie<HTMLElement>()\n```\n\n> 所谓前缀树，就是 N 叉树的一种特殊形式。通常来说，一个前缀树是用来存储字符串的。前缀树的每一个节点代表一个字符串（前缀）。每一个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的原始字符串，以及通往该子节点路径上所有的字符组成的。\n> ![前缀树](/code-reading/hotkey/trie-tree-c.png)\n\n在 `@github/hotkey` 中，有两个类一起实现了前缀树的功能，`RadixTrie` 和 `Leaf`。\n\n`Leaf` 类，顾名思义就是树的叶子节点，其中保存着注册了快捷键的元素。\n\n```ts\nexport class Leaf<T> {\n  parent: RadixTrie<T>\n  children: T[] = []\n\n  constructor(trie: RadixTrie<T>) {\n    this.parent = trie\n  }\n\n  delete(value: T): boolean {\n    const index = this.children.indexOf(value)\n    if (index === -1) return false\n    this.children = this.children.slice(0, index).concat(this.children.slice(index + 1))\n\n    // 如果叶子节点保存的所有元素都已经删除，则从前缀树中删除这个叶子节点\n    if (this.children.length === 0) {\n      this.parent.delete(this)\n    }\n    return true\n  }\n\n  add(value: T): Leaf<T> {\n    // 在叶子节点中添加一个元素\n    this.children.push(value)\n    return this\n  }\n}\n```\n\n`RadixTrie` 类实现了前缀树的主体功能，`RadixTrie` 的功能实现其实是树中的一个非叶子节点，它的子节点可以是一个 `Leaf` 节点，也可以是另一个 `RadixTrie` 节点。\n\n```ts\nexport class RadixTrie<T> {\n  parent: RadixTrie<T> | null = null\n  children: {[key: string]: RadixTrie<T> | Leaf<T>} = {}\n\n  constructor(trie?: RadixTrie<T>) {\n    this.parent = trie || null\n  }\n\n  get(edge: string): RadixTrie<T> | Leaf<T> {\n    return this.children[edge]\n  }\n\n  insert(edges: string[]): RadixTrie<T> | Leaf<T> {\n    let currentNode: RadixTrie<T> | Leaf<T> = this\n    for (let i = 0; i < edges.length; i += 1) {\n      const edge = edges[i]\n      let nextNode: RadixTrie<T> | Leaf<T> | null = currentNode.get(edge)\n      // If we're at the end of this set of edges:\n      if (i === edges.length - 1) {\n        // 如果末端节点是 RadixTrie 节点，则删除这个节点，并用 Leaf 节点替代\n        if (nextNode instanceof RadixTrie) {\n          currentNode.delete(nextNode)\n          nextNode = null\n        }\n        if (!nextNode) {\n          nextNode = new Leaf(currentNode)\n          currentNode.children[edge] = nextNode\n        }\n        return nextNode\n        // We're not at the end of this set of edges:\n      } else {\n        // 当前快捷键序列还没有结束，如果节点是一个 Leaf 节点，则删除这个节点，并用 RadixTrie 节点替代\n        if (nextNode instanceof Leaf) nextNode = null\n        if (!nextNode) {\n          nextNode = new RadixTrie(currentNode)\n          currentNode.children[edge] = nextNode\n        }\n      }\n      currentNode = nextNode\n    }\n    return currentNode\n  }\n}\n```\n\n我们可以看到，`RadixTrie` 的 `insert` 方法会根据前面 `expandHotkeyToEdges` 方法获取到的快捷键列表，在当前 `RadixTrie` 节点上动态的添加新的 `RadixTrie` 或者 `Leaf` 节点。在添加过程中，如果之前已经有相同序列的快捷键添加，则会覆盖之前的快捷键设置。\n\n`insert` 方法返回一个 `Leaf` 节点，在前面的获取快捷键列表然后批量调用 `insert` 方法之后，都会调用返回的 `Leaf` 节点的 `add` 方法将这个元素添加到叶子节点中去。\n\n### 响应键盘输入事件\n\n有了前缀树以后，响应键盘输入事件就是根据输入的键值遍历前缀树了。功能在 `keyDownHandler` 函数中。\n\n```ts\nfunction keyDownHandler(event: KeyboardEvent) {\n  if (event.defaultPrevented) return\n  if (!(event.target instanceof Node)) return\n  if (isFormField(event.target)) {\n    const target = event.target as HTMLElement\n    if (!target.id) return\n    if (!target.ownerDocument.querySelector(`[data-hotkey-scope=${target.id}]`)) return\n  }\n\n  if (resetTriePositionTimer != null) {\n    window.clearTimeout(resetTriePositionTimer)\n  }\n  resetTriePositionTimer = window.setTimeout(resetTriePosition, 1500)\n\n  // If the user presses a hotkey that doesn't exist in the Trie,\n  // they've pressed a wrong key-combo and we should reset the flow\n  const newTriePosition = (currentTriePosition as RadixTrie<HTMLElement>).get(eventToHotkeyString(event))\n  if (!newTriePosition) {\n    resetTriePosition()\n    return\n  }\n\n  currentTriePosition = newTriePosition\n  if (newTriePosition instanceof Leaf) {\n    let shouldFire = true\n    const elementToFire = newTriePosition.children[newTriePosition.children.length - 1]\n    const hotkeyScope = elementToFire.getAttribute('data-hotkey-scope')\n    if (isFormField(event.target)) {\n      const target = event.target as HTMLElement\n      if (target.id !== elementToFire.getAttribute('data-hotkey-scope')) {\n        shouldFire = false\n      }\n    } else if (hotkeyScope) {\n      shouldFire = false\n    }\n\n    if (shouldFire) {\n      fireDeterminedAction(elementToFire)\n      event.preventDefault()\n    }\n    resetTriePosition()\n  }\n}\n```\n\n这段代码可以分成三个部分来看。\n\n第一部分是一些校验逻辑，比如接收到的事件已经被 `preventDefault` 了，或者触发事件的元素类型错误。对于表单元素，还有一些特殊的校验逻辑。\n\n第二部分是恢复逻辑。因为用户输入是逐个按键输入的，因此 `keydown` 事件也是逐次触发的。因此，我们需要一个全局指针来遍历前缀树。这个指针一开始是指向根节点 `hotkeyRadixTrie` 的。\n\n```ts\nlet currentTriePosition: RadixTrie<HTMLElement> | Leaf<HTMLElement> = hotkeyRadixTrie\n```\n\n当用户停止输入之后，不管有没有命中快捷键，我们需要将这个指针回拨到根节点的位置。这个就是恢复逻辑的功能。\n\n```ts\nfunction resetTriePosition() {\n  resetTriePositionTimer = null\n  currentTriePosition = hotkeyRadixTrie\n}\n```\n\n第三部分就是响应快捷键的核心逻辑。\n\n首先会通过 `eventToHotkeyString` 函数将事件键值翻译为快捷键，是的键值与前缀树中保存的一致。\n\n```ts\nexport default function hotkey(event: KeyboardEvent): string {\n  const elideShift = event.code.startsWith('Key') && event.shiftKey && event.key.toUpperCase() === event.key\n  return `${event.ctrlKey ? 'Control+' : ''}${event.altKey ? 'Alt+' : ''}${event.metaKey ? 'Meta+' : ''}${\n    event.shiftKey && !elideShift ? 'Shift+' : ''\n  }${event.key}`\n}\n```\n\n之后，在当前节点指针 `currentTriePosition` 根据新获取的键值获取下一个树节点。如果下一个节点为空，说明未命中快捷键，执行恢复逻辑并返回。\n\n如果找到了下一个节点，则将当前节点指针 `currentTriePosition` 往下移一个节点。如果找到的这个新节点是一个 `Leaf` 节点，则获取这个叶子节点中保存的元素，并在这个元素上执行 `fireDeterminedAction` 动作。\n\n```ts\nexport function fireDeterminedAction(el: HTMLElement): void {\n  if (isFormField(el)) {\n    el.focus()\n  } else {\n    el.click()\n  }\n}\n```\n`fireDeterminedAction` 执行的动作就是，如果这个元素是一个表单元素，则让这个元素获取焦点，否则触发点击事件。\n",contentRendered:'<p>在 GitHub 的页面上有很多快捷键可以使用，比如键入 <code>g</code> + <code>c</code> 键选中 Code 标签页，键入 <code>g</code> + <code>i</code> 选中 Issues 标签页。这里是 <a href="https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts" target="_blank" rel="noopener noreferrer">GitHub 支持的快捷键列表<OutboundLink/></a>。那么，这么丰富的快捷键，是如何来实现的呢？我们今天就通过 GitHub 官方的 <a href="https://www.npmjs.com/package/@github/hotkey" target="_blank" rel="noopener noreferrer">@github/hotkey<OutboundLink/></a> 来一窥究竟。</p>\n<h2 id="功能描述" tabindex="-1"><a class="header-anchor" href="#功能描述" aria-hidden="true">#</a> 功能描述</h2>\n<p>在需要支持快捷键的元素上，通过 <code>data-hotkey</code> 属性添加快捷键序列，然后通过 <code>@github/hotkey</code> 暴露的 <code>install</code> 方法使得快捷键生效。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/page/2<span class="token punctuation">"</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/help<span class="token punctuation">"</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Control+h<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Help<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/rails/rails<span class="token punctuation">"</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>g c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/search<span class="token punctuation">"</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s,/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>install<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@github/hotkey\'</span>\n\n<span class="token comment">// Install all the hotkeys on the page</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'[data-hotkey]\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">install</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>添加快捷键的规则是：</p>\n<ul>\n<li>如果一个元素上支持多个快捷键，则不同的快捷键之间通过 <code>,</code> 分割。</li>\n<li>组合键通过 <code>+</code> 连接，比如 <code>Control + j</code>。</li>\n<li>如果一个快捷键序列中有多个按键，则通过空格<code> </code>连接，比如 <code>g c</code>。</li>\n</ul>\n<blockquote>\n<p>我们在这里可以查到<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values" target="_blank" rel="noopener noreferrer">键盘上每个功能按键对应事件键值名称<OutboundLink/></a>，方便设置快捷键。</p>\n</blockquote>\n<h2 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现" aria-hidden="true">#</a> 如何实现</h2>\n<p>我们先看 <code>install</code> 函数的实现。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>element<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> hotkey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 响应键盘输入事件</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>hotkeyRadixTrie<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'keydown\'</span><span class="token punctuation">,</span> keyDownHandler<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 注册快捷键</span>\n  <span class="token keyword">const</span> hotkeys <span class="token operator">=</span> <span class="token function">expandHotkeyToEdges</span><span class="token punctuation">(</span>hotkey <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'data-hotkey\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> leaves <span class="token operator">=</span> hotkeys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>h <span class="token operator">=></span> <span class="token punctuation">(</span>hotkeyRadixTrie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token keyword">as</span> Leaf<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  elementsLeaves<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> leaves<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 <code>install</code> 函数中有两部分功能，第一部分是注册快捷键，第二部分是响应键盘输入事件并触发快捷键动作。</p>\n<h3 id="注册快捷键" tabindex="-1"><a class="header-anchor" href="#注册快捷键" aria-hidden="true">#</a> 注册快捷键</h3>\n<p>因为代码较短，我们逐行说明。</p>\n<p>首先，通过 <code>expandHotkeyToEdges</code> 函数解析元素的 <code>data-hotkey</code> 属性，获得设置的快捷键列表。快捷键的设置规则在前面功能描述中已经说明。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">expandHotkeyToEdges</span><span class="token punctuation">(</span>hotkey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> hotkey<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>edge <span class="token operator">=></span> edge<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>之后通过这行代码实现了快捷键注册。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">const</span> leaves <span class="token operator">=</span> hotkeys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>h <span class="token operator">=></span> <span class="token punctuation">(</span>hotkeyRadixTrie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token keyword">as</span> Leaf<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后一行实则是一个缓存，方便在 <code>uninstall</code> 函数中删除已经添加的快捷键，不赘述了。</p>\n<p>因此，整个注册过程核心就是 <code>hotkeyRadixTrie</code>，<code>hotkeyRadixTrie</code> 是一棵前缀树，在系统启动时就已经初始化。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">const</span> hotkeyRadixTrie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RadixTrie<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p>所谓前缀树，就是 N 叉树的一种特殊形式。通常来说，一个前缀树是用来存储字符串的。前缀树的每一个节点代表一个字符串（前缀）。每一个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的原始字符串，以及通往该子节点路径上所有的字符组成的。\n<img src="/code-reading/hotkey/trie-tree-c.png" alt="前缀树"></p>\n</blockquote>\n<p>在 <code>@github/hotkey</code> 中，有两个类一起实现了前缀树的功能，<code>RadixTrie</code> 和 <code>Leaf</code>。</p>\n<p><code>Leaf</code> 类，顾名思义就是树的叶子节点，其中保存着注册了快捷键的元素。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  parent<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\n  children<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>trie<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> trie\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 如果叶子节点保存的所有元素都已经删除，则从前缀树中删除这个叶子节点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在叶子节点中添加一个元素</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>RadixTrie</code> 类实现了前缀树的主体功能，<code>RadixTrie</code> 的功能实现其实是树中的一个非叶子节点，它的子节点可以是一个 <code>Leaf</code> 节点，也可以是另一个 <code>RadixTrie</code> 节点。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  parent<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n  children<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>trie<span class="token operator">?</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> trie <span class="token operator">||</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">get</span><span class="token punctuation">(</span>edge<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>edge<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">insert</span><span class="token punctuation">(</span>edges<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> currentNode<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edges<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> edge <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token keyword">let</span> nextNode<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> currentNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span>\n      <span class="token comment">// If we\'re at the end of this set of edges:</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> edges<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果末端节点是 RadixTrie 节点，则删除这个节点，并用 Leaf 节点替代</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextNode <span class="token keyword">instanceof</span> <span class="token class-name">RadixTrie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          currentNode<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">)</span>\n          nextNode <span class="token operator">=</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          nextNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span>\n          currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">=</span> nextNode\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> nextNode\n        <span class="token comment">// We\'re not at the end of this set of edges:</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前快捷键序列还没有结束，如果节点是一个 Leaf 节点，则删除这个节点，并用 RadixTrie 节点替代</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextNode <span class="token keyword">instanceof</span> <span class="token class-name">Leaf</span><span class="token punctuation">)</span> nextNode <span class="token operator">=</span> <span class="token keyword">null</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          nextNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RadixTrie</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span>\n          currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">=</span> nextNode\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      currentNode <span class="token operator">=</span> nextNode\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> currentNode\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>我们可以看到，<code>RadixTrie</code> 的 <code>insert</code> 方法会根据前面 <code>expandHotkeyToEdges</code> 方法获取到的快捷键列表，在当前 <code>RadixTrie</code> 节点上动态的添加新的 <code>RadixTrie</code> 或者 <code>Leaf</code> 节点。在添加过程中，如果之前已经有相同序列的快捷键添加，则会覆盖之前的快捷键设置。</p>\n<p><code>insert</code> 方法返回一个 <code>Leaf</code> 节点，在前面的获取快捷键列表然后批量调用 <code>insert</code> 方法之后，都会调用返回的 <code>Leaf</code> 节点的 <code>add</code> 方法将这个元素添加到叶子节点中去。</p>\n<h3 id="响应键盘输入事件" tabindex="-1"><a class="header-anchor" href="#响应键盘输入事件" aria-hidden="true">#</a> 响应键盘输入事件</h3>\n<p>有了前缀树以后，响应键盘输入事件就是根据输入的键值遍历前缀树了。功能在 <code>keyDownHandler</code> 函数中。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">keyDownHandler</span><span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFormField</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span>ownerDocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-hotkey-scope=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>resetTriePositionTimer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>resetTriePositionTimer<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  resetTriePositionTimer <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resetTriePosition<span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// If the user presses a hotkey that doesn\'t exist in the Trie,</span>\n  <span class="token comment">// they\'ve pressed a wrong key-combo and we should reset the flow</span>\n  <span class="token keyword">const</span> newTriePosition <span class="token operator">=</span> <span class="token punctuation">(</span>currentTriePosition <span class="token keyword">as</span> RadixTrie<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">eventToHotkeyString</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newTriePosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resetTriePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  currentTriePosition <span class="token operator">=</span> newTriePosition\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newTriePosition <span class="token keyword">instanceof</span> <span class="token class-name">Leaf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> shouldFire <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token keyword">const</span> elementToFire <span class="token operator">=</span> newTriePosition<span class="token punctuation">.</span>children<span class="token punctuation">[</span>newTriePosition<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> hotkeyScope <span class="token operator">=</span> elementToFire<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'data-hotkey-scope\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFormField</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>id <span class="token operator">!==</span> elementToFire<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'data-hotkey-scope\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        shouldFire <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hotkeyScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      shouldFire <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldFire<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fireDeterminedAction</span><span class="token punctuation">(</span>elementToFire<span class="token punctuation">)</span>\n      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">resetTriePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>这段代码可以分成三个部分来看。</p>\n<p>第一部分是一些校验逻辑，比如接收到的事件已经被 <code>preventDefault</code> 了，或者触发事件的元素类型错误。对于表单元素，还有一些特殊的校验逻辑。</p>\n<p>第二部分是恢复逻辑。因为用户输入是逐个按键输入的，因此 <code>keydown</code> 事件也是逐次触发的。因此，我们需要一个全局指针来遍历前缀树。这个指针一开始是指向根节点 <code>hotkeyRadixTrie</code> 的。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">let</span> currentTriePosition<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span> <span class="token operator">=</span> hotkeyRadixTrie\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当用户停止输入之后，不管有没有命中快捷键，我们需要将这个指针回拨到根节点的位置。这个就是恢复逻辑的功能。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">resetTriePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resetTriePositionTimer <span class="token operator">=</span> <span class="token keyword">null</span>\n  currentTriePosition <span class="token operator">=</span> hotkeyRadixTrie\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第三部分就是响应快捷键的核心逻辑。</p>\n<p>首先会通过 <code>eventToHotkeyString</code> 函数将事件键值翻译为快捷键，是的键值与前缀树中保存的一致。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">hotkey</span><span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> elideShift <span class="token operator">=</span> event<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'Key\'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>shiftKey <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> event<span class="token punctuation">.</span>key\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>ctrlKey <span class="token operator">?</span> <span class="token string">\'Control+\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>altKey <span class="token operator">?</span> <span class="token string">\'Alt+\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>metaKey <span class="token operator">?</span> <span class="token string">\'Meta+\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n    event<span class="token punctuation">.</span>shiftKey <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>elideShift <span class="token operator">?</span> <span class="token string">\'Shift+\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>之后，在当前节点指针 <code>currentTriePosition</code> 根据新获取的键值获取下一个树节点。如果下一个节点为空，说明未命中快捷键，执行恢复逻辑并返回。</p>\n<p>如果找到了下一个节点，则将当前节点指针 <code>currentTriePosition</code> 往下移一个节点。如果找到的这个新节点是一个 <code>Leaf</code> 节点，则获取这个叶子节点中保存的元素，并在这个元素上执行 <code>fireDeterminedAction</code> 动作。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fireDeterminedAction</span><span class="token punctuation">(</span>el<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFormField</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>fireDeterminedAction</code> 执行的动作就是，如果这个元素是一个表单元素，则让这个元素获取焦点，否则触发点击事件。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-28",deps:[],hoistedTags:[],links:[],pathInferred:"/code-reading/hotkey.html",pathLocale:"/",permalink:null,slug:"hotkey",filePath:"/Users/bingooo/workspace/everfind/website/docs/code-reading/hotkey.md",filePathRelative:"code-reading/hotkey.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/hotkey.html.vue",componentFilePathRelative:"pages/code-reading/hotkey.html.vue",componentFileChunkName:"v-3f63723d",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/hotkey.html.js",dataFilePathRelative:"pages/code-reading/hotkey.html.js",dataFileChunkName:"v-3f63723d",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/code-reading/hotkey.html",htmlFilePathRelative:"code-reading/hotkey.html"},{key:"v-90dad13a",path:"/code-reading/matrix-rain.html",title:"从 matrix-rain 中学习命令行控制方法",lang:"zh-CN",frontmatter:{title:"从 matrix-rain 中学习命令行控制方法",date:"2021-09-14T00:00:00.000Z",description:"通过 matrix-rain 来看如何在命令行中绘制页面。",keywords:["matrix-rain","命令行","ANSI escape code","ANSI转义代码"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"控制字符和控制序列",slug:"控制字符和控制序列",children:[]},{level:2,title:"矩阵渲染",slug:"矩阵渲染",children:[]}],content:"\n相信大家都对黑客帝国电影里的矩阵雨印象非常深刻，就是下面这个效果。\n\n![矩阵雨](/code-reading/console-control/matrix-c.gif)\n\n效果非常酷炫，我看了一下相关实现库的代码，也非常简单，核心就是用好命令行的控制字符，这里分享一下。\n\n在 [matrix-rain](https://github.com/nojvek/matrix-rain) 的源代码中，总共只有两个文件，`ansi.js` 和 `index.js`，非常小巧。\n\n## 控制字符和控制序列\n\n`ansi.js` 中定义了一些命令行的操作方法，也就是对控制字符做了一些方法封装，代码如下：\n\n```js\nconst ctlEsc = `\\x1b[`;\nconst ansi = {\n  reset: () => `${ctlEsc}c`,\n  clearScreen: () => `${ctlEsc}2J`,\n  cursorHome: () => `${ctlEsc}H`,\n  cursorPos: (row, col) => `${ctlEsc}${row};${col}H`,\n  cursorVisible: () => `${ctlEsc}?25h`,\n  cursorInvisible: () => `${ctlEsc}?25l`,\n  useAltBuffer: () => `${ctlEsc}?47h`,\n  useNormalBuffer: () => `${ctlEsc}?47l`,\n  underline: () => `${ctlEsc}4m`,\n  off: () => `${ctlEsc}0m`,\n  bold: () => `${ctlEsc}1m`,\n  color: c => `${ctlEsc}${c};1m`,\n\n  colors: {\n    fgRgb: (r, g, b) => `${ctlEsc}38;2;${r};${g};${b}m`,\n    bgRgb: (r, g, b) => `${ctlEsc}48;2;${r};${g};${b}m`,\n    fgBlack: () => ansi.color(`30`),\n    fgRed: () => ansi.color(`31`),\n    fgGreen: () => ansi.color(`32`),\n    fgYellow: () => ansi.color(`33`),\n    fgBlue: () => ansi.color(`34`),\n    fgMagenta: () => ansi.color(`35`),\n    fgCyan: () => ansi.color(`36`),\n    fgWhite: () => ansi.color(`37`),\n    bgBlack: () => ansi.color(`40`),\n    bgRed: () => ansi.color(`41`),\n    bgGreen: () => ansi.color(`42`),\n    bgYellow: () => ansi.color(`43`),\n    bgBlue: () => ansi.color(`44`),\n    bgMagenta: () => ansi.color(`45`),\n    bgCyan: () => ansi.color(`46`),\n    bgWhite: () => ansi.color(`47`),\n  },\n};\n\nmodule.exports = ansi;\n```\n\n这里面 `ansi` 对象上的每一个方法不做过多解释了。我们看到，每个方法都是返回一个奇怪的字符串，通过这些字符串可以改变命令行的显示效果。\n\n这些字符串其实是一个个控制字符组成的控制序列。那什么是控制字符呢？我们应该都知道 ASC 字符集，这个字符集里面除了定义了一些可见字符以外，还有很多不可见的字符，就是控制字符。这些控制字符可以控制打印机、命令行等设备的显示和动作。\n\n有两个控制字符集，分别是 CO 字符集和 C1 字符集。C0 字符集是 `0x00` 到 `0x1F` 这两个十六进制数范围内的字符，而 C1 字符集是 `0x80` 到 `0x9F` 这两个十六进制数范围内的字符。C0 和 C1 字符集内的字符和对应的功能可以在[这里](https://en.wikipedia.org/wiki/C0_and_C1_control_codes)查到，我们不做详细描述了。\n\n上面代码中，`\\x1b[` 其实是一个组合，`\\x1b` 定义了 `ESC` 键，后跟 `[` 表示这是一个[控制序列导入器（Control Sequence Introducer，CSI）](https://en.wikipedia.org/wiki/Control_Sequence_Introducer)。在 `\\x1b[` 后面的所有字符都会被命令行解析为控制字符。\n\n常用的控制序列有这些：\n\n|序列|功能|\n|:---|:---|\n|CSI n A|向上移动 n（默认为 1） 个单元|\n|CSI n A|向下移动 n（默认为 1） 个单元|\n|CSI n C|向前移动 n（默认为 1） 个单元|\n|CSI n D|向后移动 n（默认为 1） 个单元|\n|CSI n E|将光标移动到 n（默认为 1） 行的下一行行首|\n|CSI n F|将光标移动到 n（默认为 1） 行的前一行行首|\n|CSI n G|将光标移动到当前行的第 n（默认为 1）列|\n|<nowrap>CSI n ; m H</nowrap>|移动光标到指定位置，第 n 行，第 m 列。n 和 m 默认为 1，即 CSI ;5H 与 CSI 1;5H 等同。|\n|CSI n J|清空屏幕。如果 n 为 0（或不指定），则从光标位置开始清空到屏幕末尾；如果 n 为 1，则从光标位置清空到屏幕开头；如果 n 为 2，则清空整个屏幕；如果 n 为 3，则不仅清空整个屏幕，同时还清空滚动缓存。|\n|CSI n K|清空行，如果 n 为 0（或不指定），则从光标位置清空到行尾；如果 n 为 1，则从光标位置清空到行头；如果 n 为 2，则清空整行，光标位置不变。|\n|CSI n S|向上滚动 n （默认为 1）行|\n|CSI n T|向下滚动 n （默认为 1）行|\n|<nowrap>CSI n ; m f</nowrap>|与 `CSI n ; m H` 功能相同|\n|CSI n m|设置显示效果，如 `CSI 1 m` 表示设置粗体，`CSI 4 m` 为添加下划线。|\n\n我们可以通过 `CSI n m` 控制序列来控制显示效果，在设置一种显示以后，后续字符都会沿用这种效果，直到我们改变了显示效果。可以通过 `CSI 0 m` 来清楚显示效果。常见的显示效果可以在[SGR (Select Graphic Rendition) parameters](https://en.wikipedia.org/wiki/ANSI_escape_code#SGR) 查到，这里受篇幅限制就不做赘述了。\n\n\n上面的代码中，还定义了一些颜色，我们看到颜色的定义都是一些数字，其实每一个数字都对应一种颜色，这里列一下常见的颜色。\n\n|前景色|背景色|名称|前景色|背景色|名称|\n|---|---|---|---|---|---|\n|30|40|黑色|90|100|亮黑色|\n|31|41|红色|91|101|亮红色|\n|32|42|绿色|92|102|亮绿色|\n|33|43|黄色|93|103|亮黄色|\n|34|44|蓝色|94|104|亮蓝色|\n|35|45|品红色（Magenta）|95|105|亮品红色（Magenta）|\n|36|46|青色（Cyan）|96|106|亮青色（Cyan）|\n|37|47|白色|97|107|亮白色|\n\n上面的代码中，使用了 `CSI n;1m` 的形式来定义颜色，其实是两种效果的，一个是具体颜色值，一个是加粗，一些命令行实现中会使用加粗效果来定义亮色。比如，如果直接定义 `CSI 32 m` 可能最终展示的是暗绿色，我们改成 `CSI 32;1m` 则将显示亮绿色。\n\n颜色支持多种格式，上面的是 [3-bit 和 4-bit](https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit) 格式，同时还有 [8-bit](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) 和 [24-bit](https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit)。代码中也有使用样例，这里不再赘述了。\n\n## 矩阵渲染\n\n在 matrix-rain 的代码中，`index.js` 里的核心功能是 `MatrixRain` 这个类：\n\n```js\nclass MatrixRain {\n  constructor(opts) {\n    this.transpose = opts.direction === `h`;\n    this.color = opts.color;\n    this.charRange = opts.charRange;\n    this.maxSpeed = 20;\n    this.colDroplets = [];\n    this.numCols = 0;\n    this.numRows = 0;\n\n    // handle reading from file\n    if (opts.filePath) {\n      if (!fs.existsSync(opts.filePath)) {\n        throw new Error(`${opts.filePath} doesn't exist`);\n      }\n      this.fileChars = fs.readFileSync(opts.filePath, `utf-8`).trim().split(``);\n      this.filePos = 0;\n      this.charRange = `file`;\n    }\n  }\n\n  generateChars(len, charRange) {\n    // by default charRange == ascii\n    let chars = new Array(len);\n\n    if (charRange === `ascii`) {\n      for (let i = 0; i < len; i++) {\n        chars[i] = String.fromCharCode(rand(0x21, 0x7E));\n      }\n    } else if (charRange === `braille`) {\n      for (let i = 0; i < len; i++) {\n        chars[i] = String.fromCharCode(rand(0x2840, 0x28ff));\n      }\n    } else if (charRange === `katakana`) {\n      for (let i = 0; i < len; i++) {\n        chars[i] = String.fromCharCode(rand(0x30a0, 0x30ff));\n      }\n    } else if (charRange === `emoji`) {\n      // emojis are two character widths, so use a prefix\n      const emojiPrefix = String.fromCharCode(0xd83d);\n      for (let i = 0; i < len; i++) {\n        chars[i] = emojiPrefix + String.fromCharCode(rand(0xde01, 0xde4a));\n      }\n    } else if (charRange === `file`) {\n      for (let i = 0; i < len; i++, this.filePos++) {\n        this.filePos = this.filePos < this.fileChars.length ? this.filePos : 0;\n        chars[i] = this.fileChars[this.filePos];\n      }\n    }\n\n    return chars;\n  }\n\n  makeDroplet(col) {\n    return {\n      col,\n      alive: 0,\n      curRow: rand(0, this.numRows),\n      height: rand(this.numRows / 2, this.numRows),\n      speed: rand(1, this.maxSpeed),\n      chars: this.generateChars(this.numRows, this.charRange),\n    };\n  }\n\n  resizeDroplets() {\n    [this.numCols, this.numRows] = process.stdout.getWindowSize();\n\n    // transpose for direction\n    if (this.transpose) {\n      [this.numCols, this.numRows] = [this.numRows, this.numCols];\n    }\n\n    // Create droplets per column\n    // add/remove droplets to match column size\n    if (this.numCols > this.colDroplets.length) {\n      for (let col = this.colDroplets.length; col < this.numCols; ++col) {\n        // make two droplets per row that start in random positions\n        this.colDroplets.push([this.makeDroplet(col), this.makeDroplet(col)]);\n      }\n    } else {\n      this.colDroplets.splice(this.numCols, this.colDroplets.length - this.numCols);\n    }\n  }\n\n  writeAt(row, col, str, color) {\n    // Only output if in viewport\n    if (row >=0 && row < this.numRows && col >=0 && col < this.numCols) {\n      const pos = this.transpose ? ansi.cursorPos(col, row) : ansi.cursorPos(row, col);\n      write(`${pos}${color || ``}${str || ``}`);\n    }\n  }\n\n  renderFrame() {\n    const ansiColor = ansi.colors[`fg${this.color.charAt(0).toUpperCase()}${this.color.substr(1)}`]();\n\n    for (const droplets of this.colDroplets) {\n      for (const droplet of droplets) {\n        const {curRow, col: curCol, height} = droplet;\n        droplet.alive++;\n\n        if (droplet.alive % droplet.speed === 0) {\n          this.writeAt(curRow - 1, curCol, droplet.chars[curRow - 1], ansiColor);\n          this.writeAt(curRow, curCol, droplet.chars[curRow], ansi.colors.fgWhite());\n          this.writeAt(curRow - height, curCol, ` `);\n          droplet.curRow++;\n        }\n\n        if (curRow - height > this.numRows) {\n          // reset droplet\n          Object.assign(droplet, this.makeDroplet(droplet.col), {curRow: 0});\n        }\n      }\n    }\n\n    flush();\n  }\n}\n```\n\n还有几个工具方法：\n\n```js\n// Simple string stream buffer + stdout flush at once\nlet outBuffer = [];\nfunction write(chars) {\n  return outBuffer.push(chars);\n}\n\nfunction flush() {\n  process.stdout.write(outBuffer.join(``));\n  return outBuffer = [];\n}\n\nfunction rand(start, end) {\n  return start + Math.floor(Math.random() * (end - start));\n}\n```\n\nmatrix-rain 的启动代码如下：\n\n```js\nconst args = argParser.parseArgs();\nconst matrixRain = new MatrixRain(args);\n\nfunction start() {\n  if (!process.stdout.isTTY) {\n    console.error(`Error: Output is not a text terminal`);\n    process.exit(1);\n  }\n\n  // clear terminal and use alt buffer\n  process.stdin.setRawMode(true);\n  write(ansi.useAltBuffer());\n  write(ansi.cursorInvisible());\n  write(ansi.colors.bgBlack());\n  write(ansi.colors.fgBlack());\n  write(ansi.clearScreen());\n  flush();\n  matrixRain.resizeDroplets();\n}\n\nfunction stop() {\n  write(ansi.cursorVisible());\n  write(ansi.clearScreen());\n  write(ansi.cursorHome());\n  write(ansi.useNormalBuffer());\n  flush();\n  process.exit();\n}\n\nprocess.on(`SIGINT`, () => stop());\nprocess.stdin.on(`data`, () => stop());\nprocess.stdout.on(`resize`, () => matrixRain.resizeDroplets());\nsetInterval(() => matrixRain.renderFrame(), 16); // 60FPS\n\nstart();\n```\n\n首先初始化一个 `MatrixRain` 类，然后调用 `start` 方法。`start` 方法中通过 `MatrixRain` 的 `resizeDroplets` 方法来初始化要显示的内容。\n\n`MatrixRain` 类实例中管理着一个 `colDroplets` 数组，保存这每一列的雨滴。在 `resizeDroplets` 中我们可以看到，每一列有两个雨滴。\n\n在启动代码中我们还可以看到，每隔 16 毫秒会调用一次 `renderFrame` 方法来绘制页面。而 `renderFrame` 方法中，会遍历每一个 `colDroplet` 中的每一个雨滴。由于每一个雨滴的初始位置和速度都是随机的，通过 `droplet.alive` 和 `droplet.speed` 的比值来确定每一次渲染的时候是否更新这个雨滴位置，从而达到每个雨滴的下落参差不齐的效果。当雨滴已经移出屏幕可视范围后会被重置。\n\n每一次渲染，都是通过 `write` 函数向全局的缓存中写入数据，之后通过 `flush` 函数一把更新。\n",contentRendered:'<p>相信大家都对黑客帝国电影里的矩阵雨印象非常深刻，就是下面这个效果。</p>\n<p><img src="/code-reading/console-control/matrix-c.gif" alt="矩阵雨"></p>\n<p>效果非常酷炫，我看了一下相关实现库的代码，也非常简单，核心就是用好命令行的控制字符，这里分享一下。</p>\n<p>在 <a href="https://github.com/nojvek/matrix-rain" target="_blank" rel="noopener noreferrer">matrix-rain<OutboundLink/></a> 的源代码中，总共只有两个文件，<code>ansi.js</code> 和 <code>index.js</code>，非常小巧。</p>\n<h2 id="控制字符和控制序列" tabindex="-1"><a class="header-anchor" href="#控制字符和控制序列" aria-hidden="true">#</a> 控制字符和控制序列</h2>\n<p><code>ansi.js</code> 中定义了一些命令行的操作方法，也就是对控制字符做了一些方法封装，代码如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> ctlEsc <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ansi <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">clearScreen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">2J</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorHome</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">H</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorPos</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> col</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>row<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>col<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">H</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorVisible</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?25h</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorInvisible</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?25l</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">useAltBuffer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?47h</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">useNormalBuffer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?47l</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">underline</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">4m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">off</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">bold</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">1m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">color</span><span class="token operator">:</span> <span class="token parameter">c</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;1m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n\n  colors<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">fgRgb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">38;2;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgRgb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">48;2;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgBlack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">30</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgRed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">31</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgGreen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">32</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgYellow</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">33</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgBlue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">34</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgMagenta</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">35</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgCyan</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">36</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgWhite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">37</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgBlack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">40</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgRed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">41</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgGreen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">42</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgYellow</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">43</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgBlue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">44</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgMagenta</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">45</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgCyan</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">46</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgWhite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">47</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> ansi<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>这里面 <code>ansi</code> 对象上的每一个方法不做过多解释了。我们看到，每个方法都是返回一个奇怪的字符串，通过这些字符串可以改变命令行的显示效果。</p>\n<p>这些字符串其实是一个个控制字符组成的控制序列。那什么是控制字符呢？我们应该都知道 ASC 字符集，这个字符集里面除了定义了一些可见字符以外，还有很多不可见的字符，就是控制字符。这些控制字符可以控制打印机、命令行等设备的显示和动作。</p>\n<p>有两个控制字符集，分别是 CO 字符集和 C1 字符集。C0 字符集是 <code>0x00</code> 到 <code>0x1F</code> 这两个十六进制数范围内的字符，而 C1 字符集是 <code>0x80</code> 到 <code>0x9F</code> 这两个十六进制数范围内的字符。C0 和 C1 字符集内的字符和对应的功能可以在<a href="https://en.wikipedia.org/wiki/C0_and_C1_control_codes" target="_blank" rel="noopener noreferrer">这里<OutboundLink/></a>查到，我们不做详细描述了。</p>\n<p>上面代码中，<code>\\x1b[</code> 其实是一个组合，<code>\\x1b</code> 定义了 <code>ESC</code> 键，后跟 <code>[</code> 表示这是一个<a href="https://en.wikipedia.org/wiki/Control_Sequence_Introducer" target="_blank" rel="noopener noreferrer">控制序列导入器（Control Sequence Introducer，CSI）<OutboundLink/></a>。在 <code>\\x1b[</code> 后面的所有字符都会被命令行解析为控制字符。</p>\n<p>常用的控制序列有这些：</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">序列</th>\n<th style="text-align:left">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">CSI n A</td>\n<td style="text-align:left">向上移动 n（默认为 1） 个单元</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n A</td>\n<td style="text-align:left">向下移动 n（默认为 1） 个单元</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n C</td>\n<td style="text-align:left">向前移动 n（默认为 1） 个单元</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n D</td>\n<td style="text-align:left">向后移动 n（默认为 1） 个单元</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n E</td>\n<td style="text-align:left">将光标移动到 n（默认为 1） 行的下一行行首</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n F</td>\n<td style="text-align:left">将光标移动到 n（默认为 1） 行的前一行行首</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n G</td>\n<td style="text-align:left">将光标移动到当前行的第 n（默认为 1）列</td>\n</tr>\n<tr>\n<td style="text-align:left"><nowrap>CSI n ; m H</nowrap></td>\n<td style="text-align:left">移动光标到指定位置，第 n 行，第 m 列。n 和 m 默认为 1，即 CSI ;5H 与 CSI 1;5H 等同。</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n J</td>\n<td style="text-align:left">清空屏幕。如果 n 为 0（或不指定），则从光标位置开始清空到屏幕末尾；如果 n 为 1，则从光标位置清空到屏幕开头；如果 n 为 2，则清空整个屏幕；如果 n 为 3，则不仅清空整个屏幕，同时还清空滚动缓存。</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n K</td>\n<td style="text-align:left">清空行，如果 n 为 0（或不指定），则从光标位置清空到行尾；如果 n 为 1，则从光标位置清空到行头；如果 n 为 2，则清空整行，光标位置不变。</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n S</td>\n<td style="text-align:left">向上滚动 n （默认为 1）行</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n T</td>\n<td style="text-align:left">向下滚动 n （默认为 1）行</td>\n</tr>\n<tr>\n<td style="text-align:left"><nowrap>CSI n ; m f</nowrap></td>\n<td style="text-align:left">与 <code>CSI n ; m H</code> 功能相同</td>\n</tr>\n<tr>\n<td style="text-align:left">CSI n m</td>\n<td style="text-align:left">设置显示效果，如 <code>CSI 1 m</code> 表示设置粗体，<code>CSI 4 m</code> 为添加下划线。</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以通过 <code>CSI n m</code> 控制序列来控制显示效果，在设置一种显示以后，后续字符都会沿用这种效果，直到我们改变了显示效果。可以通过 <code>CSI 0 m</code> 来清楚显示效果。常见的显示效果可以在<a href="https://en.wikipedia.org/wiki/ANSI_escape_code#SGR" target="_blank" rel="noopener noreferrer">SGR (Select Graphic Rendition) parameters<OutboundLink/></a> 查到，这里受篇幅限制就不做赘述了。</p>\n<p>上面的代码中，还定义了一些颜色，我们看到颜色的定义都是一些数字，其实每一个数字都对应一种颜色，这里列一下常见的颜色。</p>\n<table>\n<thead>\n<tr>\n<th>前景色</th>\n<th>背景色</th>\n<th>名称</th>\n<th>前景色</th>\n<th>背景色</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>30</td>\n<td>40</td>\n<td>黑色</td>\n<td>90</td>\n<td>100</td>\n<td>亮黑色</td>\n</tr>\n<tr>\n<td>31</td>\n<td>41</td>\n<td>红色</td>\n<td>91</td>\n<td>101</td>\n<td>亮红色</td>\n</tr>\n<tr>\n<td>32</td>\n<td>42</td>\n<td>绿色</td>\n<td>92</td>\n<td>102</td>\n<td>亮绿色</td>\n</tr>\n<tr>\n<td>33</td>\n<td>43</td>\n<td>黄色</td>\n<td>93</td>\n<td>103</td>\n<td>亮黄色</td>\n</tr>\n<tr>\n<td>34</td>\n<td>44</td>\n<td>蓝色</td>\n<td>94</td>\n<td>104</td>\n<td>亮蓝色</td>\n</tr>\n<tr>\n<td>35</td>\n<td>45</td>\n<td>品红色（Magenta）</td>\n<td>95</td>\n<td>105</td>\n<td>亮品红色（Magenta）</td>\n</tr>\n<tr>\n<td>36</td>\n<td>46</td>\n<td>青色（Cyan）</td>\n<td>96</td>\n<td>106</td>\n<td>亮青色（Cyan）</td>\n</tr>\n<tr>\n<td>37</td>\n<td>47</td>\n<td>白色</td>\n<td>97</td>\n<td>107</td>\n<td>亮白色</td>\n</tr>\n</tbody>\n</table>\n<p>上面的代码中，使用了 <code>CSI n;1m</code> 的形式来定义颜色，其实是两种效果的，一个是具体颜色值，一个是加粗，一些命令行实现中会使用加粗效果来定义亮色。比如，如果直接定义 <code>CSI 32 m</code> 可能最终展示的是暗绿色，我们改成 <code>CSI 32;1m</code> 则将显示亮绿色。</p>\n<p>颜色支持多种格式，上面的是 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit" target="_blank" rel="noopener noreferrer">3-bit 和 4-bit<OutboundLink/></a> 格式，同时还有 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit" target="_blank" rel="noopener noreferrer">8-bit<OutboundLink/></a> 和 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit" target="_blank" rel="noopener noreferrer">24-bit<OutboundLink/></a>。代码中也有使用样例，这里不再赘述了。</p>\n<h2 id="矩阵渲染" tabindex="-1"><a class="header-anchor" href="#矩阵渲染" aria-hidden="true">#</a> 矩阵渲染</h2>\n<p>在 matrix-rain 的代码中，<code>index.js</code> 里的核心功能是 <code>MatrixRain</code> 这个类：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MatrixRain</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>transpose <span class="token operator">=</span> opts<span class="token punctuation">.</span>direction <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">h</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> opts<span class="token punctuation">.</span>color<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>charRange <span class="token operator">=</span> opts<span class="token punctuation">.</span>charRange<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>numCols <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>numRows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// handle reading from file</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opts<span class="token punctuation">.</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> doesn\'t exist</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>fileChars <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>filePath<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">utf-8</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>charRange <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">generateChars</span><span class="token punctuation">(</span><span class="token parameter">len<span class="token punctuation">,</span> charRange</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// by default charRange == ascii</span>\n    <span class="token keyword">let</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ascii</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">braille</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0x2840</span><span class="token punctuation">,</span> <span class="token number">0x28ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">katakana</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0x30a0</span><span class="token punctuation">,</span> <span class="token number">0x30ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">emoji</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// emojis are two character widths, so use a prefix</span>\n      <span class="token keyword">const</span> emojiPrefix <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">0xd83d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> emojiPrefix <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0xde01</span><span class="token punctuation">,</span> <span class="token number">0xde4a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChars<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChars<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>filePos<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> chars<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">makeDroplet</span><span class="token punctuation">(</span><span class="token parameter">col</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      col<span class="token punctuation">,</span>\n      alive<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      curRow<span class="token operator">:</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      height<span class="token operator">:</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numRows <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      speed<span class="token operator">:</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      chars<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateChars</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charRange<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">resizeDroplets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">]</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">getWindowSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// transpose for direction</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transpose<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Create droplets per column</span>\n    <span class="token comment">// add/remove droplets to match column size</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> col <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// make two droplets per row that start in random positions</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeDroplet</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeDroplet</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">writeAt</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> str<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Only output if in viewport</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows <span class="token operator">&amp;&amp;</span> col <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transpose <span class="token operator">?</span> ansi<span class="token punctuation">.</span><span class="token function">cursorPos</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token operator">:</span> ansi<span class="token punctuation">.</span><span class="token function">cursorPos</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">renderFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ansiColor <span class="token operator">=</span> ansi<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fg</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> droplets <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> droplet <span class="token keyword">of</span> droplets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>curRow<span class="token punctuation">,</span> col<span class="token operator">:</span> curCol<span class="token punctuation">,</span> height<span class="token punctuation">}</span> <span class="token operator">=</span> droplet<span class="token punctuation">;</span>\n        droplet<span class="token punctuation">.</span>alive<span class="token operator">++</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>droplet<span class="token punctuation">.</span>alive <span class="token operator">%</span> droplet<span class="token punctuation">.</span>speed <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeAt</span><span class="token punctuation">(</span>curRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> curCol<span class="token punctuation">,</span> droplet<span class="token punctuation">.</span>chars<span class="token punctuation">[</span>curRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ansiColor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeAt</span><span class="token punctuation">(</span>curRow<span class="token punctuation">,</span> curCol<span class="token punctuation">,</span> droplet<span class="token punctuation">.</span>chars<span class="token punctuation">[</span>curRow<span class="token punctuation">]</span><span class="token punctuation">,</span> ansi<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">fgWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeAt</span><span class="token punctuation">(</span>curRow <span class="token operator">-</span> height<span class="token punctuation">,</span> curCol<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          droplet<span class="token punctuation">.</span>curRow<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>curRow <span class="token operator">-</span> height <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// reset droplet</span>\n          Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>droplet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeDroplet</span><span class="token punctuation">(</span>droplet<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>curRow<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br></div></div><p>还有几个工具方法：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// Simple string stream buffer + stdout flush at once</span>\n<span class="token keyword">let</span> outBuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">chars</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> outBuffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outBuffer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> outBuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>matrix-rain 的启动代码如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> args <span class="token operator">=</span> argParser<span class="token punctuation">.</span><span class="token function">parseArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> matrixRain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatrixRain</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>isTTY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: Output is not a text terminal</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// clear terminal and use alt buffer</span>\n  process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">setRawMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">useAltBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">cursorInvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">bgBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">fgBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  matrixRain<span class="token punctuation">.</span><span class="token function">resizeDroplets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">cursorVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">cursorHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">useNormalBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nprocess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SIGINT</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nprocess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nprocess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> matrixRain<span class="token punctuation">.</span><span class="token function">resizeDroplets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> matrixRain<span class="token punctuation">.</span><span class="token function">renderFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60FPS</span>\n\n<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>首先初始化一个 <code>MatrixRain</code> 类，然后调用 <code>start</code> 方法。<code>start</code> 方法中通过 <code>MatrixRain</code> 的 <code>resizeDroplets</code> 方法来初始化要显示的内容。</p>\n<p><code>MatrixRain</code> 类实例中管理着一个 <code>colDroplets</code> 数组，保存这每一列的雨滴。在 <code>resizeDroplets</code> 中我们可以看到，每一列有两个雨滴。</p>\n<p>在启动代码中我们还可以看到，每隔 16 毫秒会调用一次 <code>renderFrame</code> 方法来绘制页面。而 <code>renderFrame</code> 方法中，会遍历每一个 <code>colDroplet</code> 中的每一个雨滴。由于每一个雨滴的初始位置和速度都是随机的，通过 <code>droplet.alive</code> 和 <code>droplet.speed</code> 的比值来确定每一次渲染的时候是否更新这个雨滴位置，从而达到每个雨滴的下落参差不齐的效果。当雨滴已经移出屏幕可视范围后会被重置。</p>\n<p>每一次渲染，都是通过 <code>write</code> 函数向全局的缓存中写入数据，之后通过 <code>flush</code> 函数一把更新。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-14",deps:[],hoistedTags:[],links:[],pathInferred:"/code-reading/matrix-rain.html",pathLocale:"/",permalink:null,slug:"matrix-rain",filePath:"/Users/bingooo/workspace/everfind/website/docs/code-reading/matrix-rain.md",filePathRelative:"code-reading/matrix-rain.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/matrix-rain.html.vue",componentFilePathRelative:"pages/code-reading/matrix-rain.html.vue",componentFileChunkName:"v-90dad13a",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/matrix-rain.html.js",dataFilePathRelative:"pages/code-reading/matrix-rain.html.js",dataFileChunkName:"v-90dad13a",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/code-reading/matrix-rain.html",htmlFilePathRelative:"code-reading/matrix-rain.html"},{key:"v-35eef6b0",path:"/code-reading/dataloader/",title:"服务端批量请求管理神器 -- Dataloader 源码解读",lang:"zh-CN",frontmatter:{title:"服务端批量请求管理神器 -- Dataloader 源码解读",description:"DataLoader 可用作应用程序数据获取层的一部分，通过批处理和缓存为各种远程数据源（例如数据库或 Web 服务）提供简化且一致的 API。",sidebar:!1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],content:'\n[Dataloader](https://github.com/graphql/dataloader) 最初是为了给服务端在从各种不同的远程数据源（比如数据库、其他服务接口等）获取数据的时候，提供一个简化且一致的 API 而开发。目前广泛应用在 [GraphQL](https://github.com/graphql/graphql-js) 服务中。当然，Dataloader 不仅仅可以在 GraphQL 服务中使用，也可以在其他任何服务场景中。\n\nDataloader 有两大核心特性：批处理和缓存。我们会分别来看这两大核心特性的功能，以及 Dataloader 是如何实现这些特性的。\n\n<ArticleList :noTag="true"></ArticleList>\n',contentRendered:'<p><a href="https://github.com/graphql/dataloader" target="_blank" rel="noopener noreferrer">Dataloader<OutboundLink/></a> 最初是为了给服务端在从各种不同的远程数据源（比如数据库、其他服务接口等）获取数据的时候，提供一个简化且一致的 API 而开发。目前广泛应用在 <a href="https://github.com/graphql/graphql-js" target="_blank" rel="noopener noreferrer">GraphQL<OutboundLink/></a> 服务中。当然，Dataloader 不仅仅可以在 GraphQL 服务中使用，也可以在其他任何服务场景中。</p>\n<p>Dataloader 有两大核心特性：批处理和缓存。我们会分别来看这两大核心特性的功能，以及 Dataloader 是如何实现这些特性的。</p>\n<ArticleList :noTag="true"></ArticleList>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/code-reading/dataloader/",pathLocale:"/",permalink:null,slug:"README",filePath:"/Users/bingooo/workspace/everfind/website/docs/code-reading/dataloader/README.md",filePathRelative:"code-reading/dataloader/README.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/dataloader/index.html.vue",componentFilePathRelative:"pages/code-reading/dataloader/index.html.vue",componentFileChunkName:"v-35eef6b0",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/dataloader/index.html.js",dataFilePathRelative:"pages/code-reading/dataloader/index.html.js",dataFileChunkName:"v-35eef6b0",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/code-reading/dataloader/index.html",htmlFilePathRelative:"code-reading/dataloader/index.html"},{key:"v-20084bba",path:"/code-reading/react/",title:"React 源码解读",lang:"zh-CN",frontmatter:{title:"React 源码解读",description:"React 是目前主流的两大框架之一，学习 React 源码不仅可以增进对 React 的理解，加深对 React 的掌握，还能学习优秀框架的设计思路。",sidebar:!1,onTop:!0},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],content:'\n[React](https://github.com/facebook/react) React 是目前主流的两大框架之一，学习 React 源码可以增进对 React 的理解，加深对 React 的掌握，同时，通过阅读源码，还能学习优秀框架的设计思路，扩宽架构视野。\n\n本系列是阅读 React 源码过程中的文章记录，有对 React 源码的分析解读，也有自己的思考感悟。\n\n> 本系列基于 React 源代码 [v16.13.1](https://github.com/facebook/react/tree/v16.13.1) 版本。\n\n<ArticleList :noTag="true"></ArticleList>\n',contentRendered:'<p><a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">React<OutboundLink/></a> React 是目前主流的两大框架之一，学习 React 源码可以增进对 React 的理解，加深对 React 的掌握，同时，通过阅读源码，还能学习优秀框架的设计思路，扩宽架构视野。</p>\n<p>本系列是阅读 React 源码过程中的文章记录，有对 React 源码的分析解读，也有自己的思考感悟。</p>\n<blockquote>\n<p>本系列基于 React 源代码 <a href="https://github.com/facebook/react/tree/v16.13.1" target="_blank" rel="noopener noreferrer">v16.13.1<OutboundLink/></a> 版本。</p>\n</blockquote>\n<ArticleList :noTag="true"></ArticleList>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/code-reading/react/",pathLocale:"/",permalink:null,slug:"README",filePath:"/Users/bingooo/workspace/everfind/website/docs/code-reading/react/README.md",filePathRelative:"code-reading/react/README.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/react/index.html.vue",componentFilePathRelative:"pages/code-reading/react/index.html.vue",componentFileChunkName:"v-20084bba",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/code-reading/react/index.html.js",dataFilePathRelative:"pages/code-reading/react/index.html.js",dataFileChunkName:"v-20084bba",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/code-reading/react/index.html",htmlFilePathRelative:"code-reading/react/index.html"}]}},8254:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6252);const p=(0,t.Wm)("div",{class:"custom-container tip"},[(0,t.Wm)("p",{class:"custom-container-title"},"TIP"),(0,t.Wm)("p",null,"站在巨人的肩膀上，看得更远。")],-1),e=(0,t.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),o={render:function(n,s){const a=(0,t.up)("ArticleList");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,(0,t.Wm)(a,{noTag:!0}),e],64)}}}}]);