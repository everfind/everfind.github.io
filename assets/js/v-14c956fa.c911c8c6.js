"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8436],{375:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-14c956fa",path:"/solutions/graphql/client.html",title:"在 React 项目中使用 GraphQL 查询数据",lang:"zh-CN",frontmatter:{title:"在 React 项目中使用 GraphQL 查询数据",description:"介绍在 React 中如何通过 GraphQL、代码自动生成工具查询数据",keywords:["GraphQL","GraphQL Code Generator"],date:"2021-07-16T00:00:00.000Z",key:5,tags:["实践"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"初始化项目",slug:"初始化项目",children:[{level:3,title:"初始化和安装依赖",slug:"初始化和安装依赖",children:[]},{level:3,title:"配置文件",slug:"配置文件",children:[]}]},{level:2,title:"第一个查询",slug:"第一个查询",children:[{level:3,title:"自动化生成查询代码",slug:"自动化生成查询代码",children:[]},{level:3,title:"使用 ApolloClient",slug:"使用-apolloclient",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"solutions/graphql/client.md"}},2480:(n,s,a)=>{a.r(s),a.d(s,{default:()=>H});var p=a(6252);const e=(0,p.Uk)("本文介绍如何在 React 项目中使用 GraphQL 查询，同时配合 "),t={href:"https://npmjs.org/package/@graphql-codegen/cli",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("@graphql-codegen/cli"),l=(0,p.Uk)(" 代码自动生成工具提高开发效率。"),c=(0,p.Wm)("h2",{id:"初始化项目",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#初始化项目","aria-hidden":"true"},"#"),(0,p.Uk)(" 初始化项目")],-1),r=(0,p.Wm)("h3",{id:"初始化和安装依赖",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#初始化和安装依赖","aria-hidden":"true"},"#"),(0,p.Uk)(" 初始化和安装依赖")],-1),u=(0,p.Uk)("我们使用 "),i={href:"https://www.npmjs.com/package/create-react-app",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("create-react-app"),d=(0,p.Uk)(" 来初始化前端项目，使用官方的 "),b={href:"https://www.npmjs.com/package/cra-template-typescript",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("typescript"),g=(0,p.Uk)(" 模板。"),h=(0,p.Uk)("假设我们的项目名称是 "),y={href:"https://github.com/everfind/bff-graphql-client",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("bff-graphql-client"),v=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> create react-app bff-graphql-client --template typescript\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>等待几分钟后，项目初始化完成。</p><p>现在我们安装 GraphQL 的包。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> graphql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),f=(0,p.Uk)("由于 "),w={href:"https://www.npmjs.com/package/graphql",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("graphql"),G=(0,p.Uk)(" 这个包使用起来非常繁琐，我们通过 @graphql-codegen/cli 来自动生成这些类型代码，我们只需要编写查询的 "),Q=(0,p.Wm)("code",null,"Query",-1),A=(0,p.Uk)(" 即可。"),C=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> -D @graphql-codegen/cli\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们使用 Apollo 客户端来实现查询，同时添加一些 typescript 插件来生成 typescript 代码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> -D @graphql-codegen/typescript @graphql-codegen/typescript-operations @graphql-codegen/typescript-react-apollo\n\n<span class="token function">yarn</span> <span class="token function">add</span> @apollo/client\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><p>安装完依赖包以后，我们通过 GraphQL Code Generator 的指引来生成配置文件，GraphQL Code Generator 会根据这个配置文件来生成代码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> graphql-codegen init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>根据命令行提示，我们生成配置文件。</p><p><img src="/solutions/graphql/codegen-c.png" alt="codegen config"></p><p>在生成的配置如下：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">overwrite</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n<span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:3000/graphql&quot;</span> <span class="token comment"># graphql 服务的地址</span>\n<span class="token key atrule">documents</span><span class="token punctuation">:</span> <span class="token string">&quot;src/**/*.graphql&quot;</span> <span class="token comment"># 查找项目中所有已 .graphql 结尾的文件，来生成代码</span>\n<span class="token key atrule">generates</span><span class="token punctuation">:</span>\n  <span class="token key atrule">src/generated/graphql.tsx</span><span class="token punctuation">:</span> <span class="token comment"># 代码输出地址</span>\n    <span class="token key atrule">plugins</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;typescript&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;typescript-operations&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;typescript-react-apollo&quot;</span>\n  <span class="token key atrule">./graphql.schema.json</span><span class="token punctuation">:</span>\n    <span class="token key atrule">plugins</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;introspection&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>因为我们要使用 Apollo 的客户端，同时使用 React Hook，因此需要对配置做一些修改：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">overwrite</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n<span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:3000/graphql&quot;</span>\n<span class="token key atrule">documents</span><span class="token punctuation">:</span> <span class="token string">&quot;src/**/*.graphql&quot;</span>\n<span class="token key atrule">generates</span><span class="token punctuation">:</span>\n  <span class="token key atrule">src/generated/graphql.tsx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">plugins</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;typescript&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;typescript-operations&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;typescript-react-apollo&quot;</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">noComponents</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n      <span class="token key atrule">noNamespaces</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n      <span class="token key atrule">skipTypename</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n      <span class="token key atrule">withHooks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 使用 React Hook</span>\n      <span class="token key atrule">withComponent</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n      <span class="token key atrule">withHOC</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n      <span class="token key atrule">apolloReactHooksImportFrom</span><span class="token punctuation">:</span> <span class="token string">&quot;@apollo/client&quot;</span> <span class="token comment"># 使用 Apollo Client</span>\n      <span class="token key atrule">apolloReactCommonImportFrom</span><span class="token punctuation">:</span> <span class="token string">&quot;@apollo/client&quot;</span>\n  <span class="token key atrule">./graphql.schema.json</span><span class="token punctuation">:</span>\n    <span class="token key atrule">plugins</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;introspection&quot;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',12),W=(0,p.Uk)("相关配置的功能说明可以在"),j={href:"https://www.graphql-code-generator.com/docs/plugins/typescript-react-apollo",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("这里"),R=(0,p.Uk)("找到，就不一一赘述了，这里只标出来比较关键的两个配置。"),U=(0,p.uE)('<h2 id="第一个查询" tabindex="-1"><a class="header-anchor" href="#第一个查询" aria-hidden="true">#</a> 第一个查询</h2><p>完成配置以后，我们现在来尝试查一下在上一篇文章中定义的商品信息。</p><h3 id="自动化生成查询代码" tabindex="-1"><a class="header-anchor" href="#自动化生成查询代码" aria-hidden="true">#</a> 自动化生成查询代码</h3><p>先启动 GraphQL 服务，打开 playground 看看系统内有哪些模型可查。在上一篇文章中，我们定义了商品模型、订单模型。我们先来查一下商品模型。</p><p>我们先在 <code>src</code> 目录下新建一个 <code>graphql</code> 目录，用来存在所有的 <code>.graphql</code> 文件。</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token definition-query function">Goods</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">:</span> <span class="token class-name">GoodsParam</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token property-query">goodsData</span><span class="token punctuation">(</span><span class="token attr-name">param</span><span class="token punctuation">:</span> <span class="token variable">$param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token property">goodsId</span>\n    <span class="token property">goodsName</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>将上面的内容保存在 <code>src/graphql/goods.graphl</code> 中。运行 <code>yarn codegen</code>，我们看到命令行显示运行成功，查看 <code>src/generated/graphql.tsx</code> 中生成了很多代码。</p><p><img src="/solutions/graphql/codegen-output-c.png" alt="codegen output"></p><p>我们在生成的代码中看到了这两个函数，我们会用他们来查询商品信息：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useGoodsQuery</span><span class="token punctuation">(</span>baseOptions<span class="token operator">:</span> ApolloReactHooks<span class="token punctuation">.</span>QueryHookOptions<span class="token operator">&lt;</span>GoodsQuery<span class="token punctuation">,</span> GoodsQueryVariables<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span> <span class="token operator">...</span>baseOptions<span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ApolloReactHooks<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">useQuery</span><span class="token generic class-name"><span class="token operator">&lt;</span>GoodsQuery<span class="token punctuation">,</span> GoodsQueryVariables<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>GoodsDocument<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useGoodsLazyQuery</span><span class="token punctuation">(</span>baseOptions<span class="token operator">?</span><span class="token operator">:</span> ApolloReactHooks<span class="token punctuation">.</span>LazyQueryHookOptions<span class="token operator">&lt;</span>GoodsQuery<span class="token punctuation">,</span> GoodsQueryVariables<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span> <span class="token operator">...</span>baseOptions<span class="token punctuation">}</span>\n          <span class="token keyword">return</span> ApolloReactHooks<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">useLazyQuery</span><span class="token generic class-name"><span class="token operator">&lt;</span>GoodsQuery<span class="token punctuation">,</span> GoodsQueryVariables<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>GoodsDocument<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p><code>useGoodsQuery</code> 是立即查询，<code>useGoodsLazyQuery</code> 会返回一个函数，调用这个函数才会触发查询。详细信息可以查看这两函数的签名。</p></blockquote><p>每次修改 <code>.graphql</code> 文件都执行一次 <code>yarn codegen</code> 是非常麻烦的。我们来开启 <code>@graphql-codegen/cli</code> 的 <code>watch</code> 模式，来实现自动化生成。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;codegen&quot;</span><span class="token operator">:</span> <span class="token string">&quot;graphql-codegen --config codegen.yml --watch&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时再执行 <code>yarn codegen</code>，控制台显示：</p><p><img src="/solutions/graphql/codegen-watch-c.png" alt="codegen watch"></p><h3 id="使用-apolloclient" tabindex="-1"><a class="header-anchor" href="#使用-apolloclient" aria-hidden="true">#</a> 使用 ApolloClient</h3><p>先在 <code>src/index.tsx</code> 中完成 ApolloClient 的初始化和配置。</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ApolloClient<span class="token punctuation">,</span> ApolloProvider<span class="token punctuation">,</span> HttpLink<span class="token punctuation">,</span> InMemoryCache <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@apollo/client&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> apolloClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  link<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HttpLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    uri<span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000/graphql&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  cache<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  defaultOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    query<span class="token operator">:</span> <span class="token punctuation">{</span>\n      errorPolicy<span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>\n      fetchPolicy<span class="token operator">:</span> <span class="token string">&quot;network-only&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    watchQuery<span class="token operator">:</span> <span class="token punctuation">{</span>\n      errorPolicy<span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>\n      fetchPolicy<span class="token operator">:</span> <span class="token string">&quot;network-only&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ApolloProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>apolloClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ApolloProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>配置完成后，稍微改造下 <code>App.tsx</code>，使用 <code>useGoodsQuery</code> 查询数据，并将数据展示出来：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useGoodsQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./generated/graphql&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGoodsQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    variables<span class="token operator">:</span> <span class="token punctuation">{</span>\n      param<span class="token operator">:</span> <span class="token punctuation">{</span>\n        goodsId<span class="token operator">:</span> <span class="token string">&quot;g-00001&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading data...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token operator">?.</span>goodsData<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>此时运行 <code>yarn start</code>，我们可以在浏览器中看到输出的商品信息。</p><p>我们可以看到页面先显示 <code>loading data...</code> 然后显示查到的商品信息：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;__typename&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GoodsData&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;goodsId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;g-0001&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;goodsName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;商品名称&quot;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>至此，我们就实现了在 React 项目中使用 GraphQL 查询数据。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍如何在 React 项目中使用 GraphQL 查询数据。</p><p>通过 <code>@graphql-codegen/cli</code> 自动化生成代码，提高开发效率。文中展示了如何编写配置文件来启用 React Hook。</p><p>通过 <code>--watch</code> 参数来开启 <code>@graphql-codegen/cli</code> 的监听模式，实现 <code>.graphql</code> 变动自动化生成代码。</p><p>同时，我们使用 Apollo Client 来实现 GraphQL 查询，并展示了如何配置 Apollo Client。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',30),H={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[e,(0,p.Wm)("a",t,[o,(0,p.Wm)(a)]),l]),c,r,(0,p.Wm)("p",null,[u,(0,p.Wm)("a",i,[k,(0,p.Wm)(a)]),d,(0,p.Wm)("a",b,[m,(0,p.Wm)(a)]),g]),(0,p.Wm)("p",null,[h,(0,p.Wm)("a",y,[q,(0,p.Wm)(a)])]),v,(0,p.Wm)("p",null,[f,(0,p.Wm)("a",w,[x,(0,p.Wm)(a)]),G,Q,A]),C,(0,p.Wm)("p",null,[W,(0,p.Wm)("a",j,[L,(0,p.Wm)(a)]),R]),U],64)}}}}]);