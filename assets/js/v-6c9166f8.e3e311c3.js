"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[2225],{9726:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-6c9166f8",path:"/courses/python/control-flow.html",title:"逻辑判断与循环",lang:"zh-CN",frontmatter:{title:"逻辑判断与循环",description:"Python 中的逻辑判断、分支条件、循环处理等。",keywords:["Python"],date:"2021-09-08T00:00:00.000Z",key:2},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"if 语句",slug:"if-语句",children:[]},{level:2,title:"for 语句",slug:"for-语句",children:[]},{level:2,title:"while 语句",slug:"while-语句",children:[]},{level:2,title:"break 、continue 和循环中的 else 语句",slug:"break-、continue-和循环中的-else-语句",children:[]},{level:2,title:"pass 语句",slug:"pass-语句",children:[]},{level:2,title:"逻辑判断和优先级",slug:"逻辑判断和优先级",children:[]}],filePathRelative:"courses/python/control-flow.md"}},5835:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const p=(0,e.uE)('<h2 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句" aria-hidden="true">#</a> <code>if</code> 语句</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&#39;Negative&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&#39;Zero&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. else:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&#39;Positive&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中，<code>elif</code> 就是 <code>else if</code> 的含义。</p><h2 id="for-语句" tabindex="-1"><a class="header-anchor" href="#for-语句" aria-hidden="true">#</a> <code>for</code> 语句</h2><p>不像其他语言，Python 中的 <code>for</code> 循环只能针对具备迭代能力（iterable）的类型（比如列表、字符串等）进行循环。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span>, <span class="token string">&#39;window&#39;</span>, <span class="token string">&#39;defenestrate&#39;</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token for-or-select variable">w</span> <span class="token keyword">in</span> words:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>w, len<span class="token punctuation">(</span>w<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.\n<span class="token function">cat</span> <span class="token number">3</span>\nwindow <span class="token number">6</span>\ndefenestrate <span class="token number">12</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于字典类型，我们可以通过 <code>ittems()</code> 直接访问其键值对。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&gt;&gt;&gt; knights = {&#39;gallahad&#39;: &#39;the pure&#39;, &#39;robin&#39;: &#39;the brave&#39;}\n&gt;&gt;&gt; for k, v in knights.items():\n...     print(k, v)\n...\ngallahad the pure\nrobin the brave\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',8),t=(0,e.Uk)("如果要在循环中使用一个"),o={href:"https://docs.python.org/3/library/stdtypes.html#typesseq",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("序列"),l=(0,e.Uk)("（列表、字符串等）中的位置索引，可以使用 "),r=(0,e.Wm)("code",null,"enumerate()",-1),i=(0,e.Uk)("。"),u=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i, <span class="token function">v</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;tic&#39;</span>, <span class="token string">&#39;tac&#39;</span>, <span class="token string">&#39;toe&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>i, <span class="token function">v</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token number">0</span> tic\n<span class="token number">1</span> <span class="token function">tac</span>\n<span class="token number">2</span> toe\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过 <code>zip()</code> 同时循环两个序列，最短的序列结束时循环终止。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> questions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span>, <span class="token string">&#39;quest&#39;</span>, <span class="token string">&#39;favorite color&#39;</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;lancelot&#39;</span>, <span class="token string">&#39;the holy grail&#39;</span>, <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> q, a <span class="token keyword">in</span> zip<span class="token punctuation">(</span>questions, answers<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&#39;What is your {0}?  It is {1}.&#39;</span>.format<span class="token punctuation">(</span>q, a<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句" aria-hidden="true">#</a> <code>while</code> 语句</h2><p>只要 <code>while</code> 语句中的表达式为 <code>True</code>，循环就会一直持续下去。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> x <span class="token operator">&gt;</span> <span class="token number">1</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     x <span class="token operator">=</span> x - <span class="token number">1</span>\n<span class="token punctuation">..</span>.\n<span class="token number">3</span>\n<span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="break-、continue-和循环中的-else-语句" tabindex="-1"><a class="header-anchor" href="#break-、continue-和循环中的-else-语句" aria-hidden="true">#</a> <code>break</code> 、<code>continue</code> 和循环中的 <code>else</code> 语句</h2><p>与其他语言（如 C 语言）相同，<code>break</code> 语句用于跳出当前循环，<code>continue</code> 语句用于进入下一次循环逻辑。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">10</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span>, n<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.         <span class="token keyword">if</span> n % x <span class="token operator">==</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.             print<span class="token punctuation">(</span>n, <span class="token string">&#39;等于&#39;</span>, x, <span class="token string">&#39;*&#39;</span>, n//x<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.             <span class="token builtin class-name">break</span>\n<span class="token punctuation">..</span>.     else:\n<span class="token punctuation">..</span>.         print<span class="token punctuation">(</span>n, <span class="token string">&#39;是个素数&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token number">2</span> 是个素数\n<span class="token number">3</span> 是个素数\n<span class="token number">4</span> 等于 <span class="token number">2</span> * <span class="token number">2</span>\n<span class="token number">5</span> 是个素数\n<span class="token number">6</span> 等于 <span class="token number">2</span> * <span class="token number">3</span>\n<span class="token number">7</span> 是个素数\n<span class="token number">8</span> 等于 <span class="token number">2</span> * <span class="token number">4</span>\n<span class="token number">9</span> 等于 <span class="token number">3</span> * <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注意，循环中的 <code>else</code> 分支只有在循环结束且不是 <code>break</code> 退出的时候才会执行。<code>else</code> 既可以与 <code>for</code> 一起使用，也可以与 <code>while</code> 一起使用。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token for-or-select variable">num</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token keyword">if</span> num % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.         print<span class="token punctuation">(</span><span class="token string">&quot;偶数&quot;</span>, num<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.         <span class="token builtin class-name">continue</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;奇数&quot;</span>, num<span class="token punctuation">)</span>\n偶数 <span class="token number">2</span>\n奇数 <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="pass-语句" tabindex="-1"><a class="header-anchor" href="#pass-语句" aria-hidden="true">#</a> <code>pass</code> 语句</h2><p><code>pass</code> 语句什么也不做，可以用来定义一个空类或者空函数。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> class MyEmptyClass:\n<span class="token punctuation">..</span>.     pass\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def initlog<span class="token punctuation">(</span>*args<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     pass   <span class="token comment"># 后续会实现</span>\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="逻辑判断和优先级" tabindex="-1"><a class="header-anchor" href="#逻辑判断和优先级" aria-hidden="true">#</a> 逻辑判断和优先级</h2><p>比较运算符 <code>in</code> 和 <code>not in</code> 可以判断一个值是否在序列中。比较运算符 <code>is</code> 和 <code>is not</code> 可以判断两个对象是否是同一个对象。所有的比较运算符优先级相同，但是都比数值运算符优先级低。</p><p>运算符可以级联，比如 <code>a &lt; b == c</code> 表示 <code>a</code> 小于 <code>b</code> 同时 <code>b</code> 等于 <code>c</code>。</p><p>可以使用布尔运算符 <code>and</code> 和 <code>or</code> 组合比较，并且比较（或任何其他布尔表达式）的结果可以用 <code>not</code> 否定。布尔运算符的优先级比比较运算符低，在布尔运算符中，<code>not</code> 的优先级最好，<code>or</code> 的优先级最低。因此， <code>A and not B or C</code> 与 <code>(A and (not B)) or C</code> 等同。</p><p><code>and</code> 和 <code>or</code> 同时也是短路求值运算符，从左到右依次求值，当满足结果时就中断求值。即如果 <code>A</code> 和 <code>C</code> 都是 <code>True</code> 但是 <code>B</code> 是 <code>False</code>，那么 <code>A and B and C</code> 的值为 <code>False</code>，不管 <code>C</code> 的值是什么。</p><p>我们可以将比较结果赋值给一个变量：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> string1, string2, string3 <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>, <span class="token string">&#39;string1&#39;</span>, <span class="token string">&#39;string2&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> non_null <span class="token operator">=</span> string1 or string2 or string3\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> non_null\n<span class="token string">&#39;string1&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 Python 中，我们还可以对序列进行比较。这种比较使用字典顺序：首先比较前两项，如果它们不同，则决定比较的结果；如果它们相等，则比较接下来的两个项目，依此类推，直到用完任一序列。如果要比较的两个项目本身是相同类型的序列，则递归地进行字典序比较。如果两个序列的所有项比较相等，则认为这两个序列相等。如果一个序列是另一个的初始子序列，则较短的序列是较小（较小）的序列。字符串的字典顺序使用 Unicode 代码点编号来对单个字符进行排序。</p><p>相同类型序列之间比较的一些示例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>              <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>              <span class="token operator">&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token string">&#39;ABC&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;C&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;Pascal&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;Python&#39;</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">)</span>           <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span>                 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, -1<span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>             <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1.0</span>, <span class="token number">2.0</span>, <span class="token number">3.0</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span>, <span class="token string">&#39;ab&#39;</span><span class="token punctuation">))</span>   <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span>, <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>, <span class="token number">4</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>请注意，在 Python 中如果对象具有适当的比较方法，则使用 <code>&lt;</code> 或 <code>&gt;</code> 比较不同类型的对象也是合法的。如果对象没有定义比较方法，则会抛出 <code>TypeError</code> 错误。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',27),k={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",o,[c,(0,e.Wm)(a)]),l,r,i]),u],64)}}}}]);