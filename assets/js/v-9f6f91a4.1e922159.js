"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[857],{2070:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-9f6f91a4",path:"/courses/architecture-of-react-app/structure.html",title:"项目结构设计",lang:"zh-CN",frontmatter:{title:"项目结构设计",description:"良好的目录结构设计可以在保证代码功能模块清晰的同时提供很好的扩展性，给项目带来长久的生命力。",keywords:["React","架构","目录结构"],date:"2021-08-10T00:00:00.000Z",key:2},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"项目目录结构",slug:"项目目录结构",children:[]},{level:2,title:"功能模块目录结构",slug:"功能模块目录结构",children:[]}],filePathRelative:"courses/architecture-of-react-app/structure.md"}},4110:(n,s,e)=>{e.r(s),e.d(s,{default:()=>p});const a=(0,e(6252).uE)('<p>良好的目录结构设计可以在保证代码功能模块清晰的同时提供很好的扩展性，给项目带来长久的生命力。</p><h2 id="项目目录结构" tabindex="-1"><a class="header-anchor" href="#项目目录结构" aria-hidden="true">#</a> 项目目录结构</h2><p>通常来说，整个项目的代码都在 <code>src</code> 目录下。我们建议 <code>src</code> 目录组织如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>src\n|\n+-- assets          # 图片字体等静态资源\n|\n+-- components      # 全应用共享的公共组件\n|\n+-- config          # 全局配置、环境变量等。在这里导出，应用中其他代码通过导入获取。\n|\n+-- context         # 所有的全局 context\n|\n+-- features        # 功能模块目录，也可以叫 pages\n|\n+-- hooks           # 全应用共享的公共 hooks\n|\n+-- lib             # 导出预处理过的公共库，比如添加了 interceptor 的 axios 实例。\n|\n+-- routes          # 路由配置\n|\n+-- test            # 测试代码\n|\n+-- types           # 整个应用共用的 typescript 类型定义\n|\n+-- utils           # 整个应用共享的 utils 函数\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="功能模块目录结构" tabindex="-1"><a class="header-anchor" href="#功能模块目录结构" aria-hidden="true">#</a> 功能模块目录结构</h2><p>为了保证能以最简单、最具可维护性的方式扩展应用，我们应该尽可能将代码约束在 <code>features</code> 目录中。每个 <code>feature</code> 目录中应该仅仅包含这个功能特有的代码，避免功能特有的代码与其他公共代码混合在一起。维护一个功能模块的代码比维护一个偏平的大目录更加简单。</p><p>一个 <code>feature</code> 目录的结构如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>src/features/awesome-feature\n|\n+-- api         # 导出与这个功能相关的所有 API 请求\n|\n+-- components  # 这个功能内的公共组件，其他地方不能使用\n|\n+-- hooks       # 这个功能内使用的 hooks，其他地方不能使用\n|\n+-- routes      # 功能内的路由配置\n|\n+-- types       # 功能内的 typescript 类型定义\n|\n+-- utils       # 功能内使用的 utils 函数\n|\n+-- index.ts    # 功能入口点，同时也可以在这里导出任何可以被其他地方使用的代码\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>feature</code> 目录下的 <code>index.ts</code> 应该导出所有这个功能模块可以对外提供的 API。</p><p>比如我们可以在其他模块这样导入 <code>awesome-feature</code> 内的 <code>AwesomeComponent</code>，</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>AwesomeComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/features/awesome-feature&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>但是不能像下面这样导入 <code>AwesomeComponent</code>。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>AwesomeComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/features/awesome-feature/components/AwesomeComponent&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>ESLint 提供了一个配置可以帮助我们禁止上面这种直接导入方式。配置如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;no-restricted-imports&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n            patterns<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@/features/*/*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    <span class="token operator">...</span>rest <span class="token keyword">of</span> the configuration\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',16),p={render:function(n,s){return a}}}}]);