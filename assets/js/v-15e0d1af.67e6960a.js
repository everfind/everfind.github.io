"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7050],{3226:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-15e0d1af",path:"/posts/2021/06/24/solid.html",title:"SOLID 原则",lang:"zh-CN",frontmatter:{title:"SOLID 原则",description:"软件设计原则，solid 原则",keywords:["solid"],date:"2021-06-24T00:00:00.000Z",permalinkPattern:"posts/:year/:month/:day/:slug.html",tags:["通用知识"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"单一职责原则（Single Responsibility Principle）",slug:"单一职责原则-single-responsibility-principle",children:[]},{level:2,title:"开闭原则（Open/Closed Principle）",slug:"开闭原则-open-closed-principle",children:[]},{level:2,title:"里氏替换原则（Liskov Substitution Principle）",slug:"里氏替换原则-liskov-substitution-principle",children:[]},{level:2,title:"接口隔离原则（Interface Segregation Principle）",slug:"接口隔离原则-interface-segregation-principle",children:[]},{level:2,title:"依赖倒置原则（Dependency Inversion Principle）",slug:"依赖倒置原则-dependency-inversion-principle",children:[]},{level:2,title:"小结",slug:"小结",children:[]},{level:2,title:"参考文献",slug:"参考文献",children:[]}],filePathRelative:"posts/solid.md"}},3382:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(6252);const e=(0,p.uE)('<p>SOLID 原则是五个面向对象程序设计基本原则的首字母简写，应用 SOLID 原则可以帮助我们开发出更容易维护、更灵活的软件。从而，在软件规模逐渐变大的时候，降低软件的复杂度，节省开发维护成本。</p><p>SOLID 原则由如下五个原则组成：</p><ul><li>单一职责原则（Single Responsibility）</li><li>开闭原则（Open/Closed 原则）</li><li>里氏替换原则（Liskov Substitution）</li><li>接口隔离原则（Interface Segregation）</li><li>依赖倒置原则（Dependency Inversion）</li></ul><p>看名字有些原则可能不太好理解，下面我们通过一些代码示例来逐一说明。</p><h2 id="单一职责原则-single-responsibility-principle" tabindex="-1"><a class="header-anchor" href="#单一职责原则-single-responsibility-principle" aria-hidden="true">#</a> 单一职责原则（Single Responsibility Principle）</h2><p>通过名字就可以知道，这个原则的含义是一个类应该只有一种职责。换句话说，我们只能有一个原因来改变这个类。</p><p>应用了单一职责的类，有如下几个优点：</p><ul><li>易测试。只有单一职责的类需要的测试 case 非常少，非常容易测试。</li><li>低耦合。一个类的功能越少，需要的外部依赖越少。</li><li>易管理。功能单一的类比功能复杂的类更容易进行组织。</li></ul><p>举个例子，我们有一个 Book 类：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> author<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个类中，我们保存了书名、作者和书的文本三个字段。</p><p>现在我们添加一些操作文本的函数。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> author<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  <span class="token function">replaceWordInText</span><span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">isWordInText</span><span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>现在假如说我们要把书的内容输出到控制台，我们可以给 Book 类加一个 print 方法：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>    <span class="token comment">// ....</span>\n    <span class="token function">printTextToConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 输出内容函数实现</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个时候，新添加的方法就破坏了单一职责原则。</p><p>我们应该再定义一个类，BookPrinter 来专门输出书的内容：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">BookPrinter</span> <span class="token punctuation">{</span>\n  <span class="token function">printTextToConsole</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//输出到控制台</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">printTextToAnotherMedium</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 输出到其他媒体类型</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过 BookPrinter 类，我们不断实现了输出书的内容到控制台的功能，我们还可以支持将书的内容输出到其他媒体类型。不管是输出到邮件、日志还是什么其他地方，我们都有一个单独的类来处理这个问题。</p><h2 id="开闭原则-open-closed-principle" tabindex="-1"><a class="header-anchor" href="#开闭原则-open-closed-principle" aria-hidden="true">#</a> 开闭原则（Open/Closed Principle）</h2><p>开闭原则可以描述为”对扩展开放，对修改关闭“。也就是说，一个类只应该对扩展开放，对修改应该是关闭的。</p><p>我们通过一个例子来说明。假设我们有一个生产电脑的类：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MacOSComputer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">WindowsComputer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>\n  computerTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;macos&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;windows&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token function">createComputer</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&quot;macos&quot;</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MacOSComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&quot;windows&quot;</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>现在，假如我们需要创建一个 linux 系统的电脑，我们应该怎么办呢？最直接的办法是修改 ComputerFactory 这个类，来支持新电脑的创建。但是这么做我们可能会影响到其他两种类型电脑的创建。结合开闭原则，我们可以做一些改造。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>\n  <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MacOSFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>\n  <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MacOSComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">WindowsFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>\n  <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这个时候，如果我们新增一个 Linux 类型的电脑，就非常的方便。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">LinuxComputer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">LinuxFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>\n  <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinuxComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="里氏替换原则-liskov-substitution-principle" tabindex="-1"><a class="header-anchor" href="#里氏替换原则-liskov-substitution-principle" aria-hidden="true">#</a> 里氏替换原则（Liskov Substitution Principle）</h2><p>里氏替换原则则简单的说，就是如果类 A 是类 B 的子类，那么我们可以在系统内将 B 替换成 A，且不改变软件行为。</p><p>我们还是通过例子来说明。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">turnOnEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">accelerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们定义了一个 Car 接口，提供了一些函数需要实现类来实现。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MotorCar</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> engine<span class="token operator">:</span> Engine<span class="token punctuation">;</span>\n\n  <span class="token function">turnOnEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">accelerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>假如现在需要实现一个电动车：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">turnOnEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;No engine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">accelerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这时候，如果我们将新实现的电动车放到系统中的话，就会改变系统的行为，导致出错。</p><p>我们需要重新定义一个没有引擎的 Car 接口：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">accelerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="接口隔离原则-interface-segregation-principle" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-interface-segregation-principle" aria-hidden="true">#</a> 接口隔离原则（Interface Segregation Principle）</h2><p>接口隔离原则要求我们将大的接口拆分成小的接口，这样可以保证实现类能聚焦在它需要关心的接口上面。</p><p>我们以动物饲养员为例。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BearKeeper</span> <span class="token punctuation">{</span>\n  <span class="token function">washTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">feedTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">petTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假如现在有一个熊饲养员只关心 <code>washTheBear</code> 和 <code>petTheBear</code>，那么在现在的接口设计中，还需要被迫实现 <code>petTheBear</code>。</p><p>我们可以把这个大的接口进行拆分。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BearCleaner</span> <span class="token punctuation">{</span>\n  <span class="token function">washTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">BearFeeder</span> <span class="token punctuation">{</span>\n  <span class="token function">feedTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">BearPetter</span> <span class="token punctuation">{</span>\n  <span class="token function">petTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>那么这时候不同的熊饲养员就可以自由的实现关心的接口了。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">BearCarer</span> <span class="token keyword">implements</span> <span class="token class-name">BearCleaner</span><span class="token punctuation">,</span> BearFeeder <span class="token punctuation">{</span>\n  <span class="token function">washTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">feedTheBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>在前面单一职责的例子中，我们还可以将 BookPrinter 进行拆分。</p></blockquote><h2 id="依赖倒置原则-dependency-inversion-principle" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dependency-inversion-principle" aria-hidden="true">#</a> 依赖倒置原则（Dependency Inversion Principle）</h2><p>依赖倒置原则主要用于模块间的解耦。通常说，应用了依赖倒置原则的设计，高层模块将不会再直接依赖低层模块，而是依赖于抽象。</p><p>举个例子。我们有一个 Computer 类：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> keyboard<span class="token operator">:</span> StandardKeyboard<span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>keyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 Computer 的构造函数中，我们将 StandardKeyboard 类和 Computer 类耦合在了一起。现在加入我们要新增一种键盘，那 Computer 的构造函数将会难以处理。</p><p>使用依赖倒置的方法，我们可以抽象出一个 Keyboard 接口来进行解耦：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Keyboard</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> keyboard<span class="token operator">:</span> Keyboard<span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>keyboard<span class="token operator">:</span> Keyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>keyboard <span class="token operator">=</span> keyboard<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这时候重新实现 StandardKeyboard 类：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">StandardKeyboard</span> <span class="token keyword">implements</span> <span class="token class-name">Keyboard</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>重构后的代码，实现了 StandardKeyboard 和 Computer 的解耦，我们可以根据需要自由实现 Keyboard 接口。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>SOLID 原则是面向对象程序设计中非常经典的设计原则，同时也非常简单。理解和掌握这些原则，不仅对我们日常的开发维护工作帮助很大，也能提高自身的软件设计能力。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',61),t={href:"https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("Design Principles and Design Patterns"),o=(0,p.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),l={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",t,[c,(0,p.Wm)(a)])])]),o],64)}}}}]);