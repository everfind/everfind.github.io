"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8542],{5692:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-e7123a86",path:"/courses/webpack/dynamic-loading.html",title:"动态加载（Dynamic Loading）",lang:"zh-CN",frontmatter:{title:"动态加载（Dynamic Loading）",description:"介绍 Webpack 中如何动态加载（Dynamic Loading）",keywords:["Webpack"],date:"2021-01-30T00:00:00.000Z",key:28},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"通过 require.context 来动态加载",slug:"通过-require-context-来动态加载",children:[]},{level:2,title:"import 中的动态路径",slug:"import-中的动态路径",children:[]},{level:2,title:"组合多个 require.context",slug:"组合多个-require-context",children:[]},{level:2,title:"处理运行时的动态路径",slug:"处理运行时的动态路径",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/dynamic-loading.md"}},4192:(n,s,a)=>{a.r(s),a.d(s,{default:()=>D});var e=a(6252);const t=(0,e.Uk)("我们在 "),p=(0,e.Uk)("Code Spliting"),o=(0,e.Uk)(" 一章中介绍了一些动态加载的技术。本章，我们介绍一种更加灵活的动态加载技术，"),c=(0,e.Wm)("code",null,"require.context",-1),l=(0,e.Uk)("。"),r=(0,e.Wm)("h2",{id:"通过-require-context-来动态加载",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#通过-require-context-来动态加载","aria-hidden":"true"},"#"),(0,e.Uk)(" 通过 "),(0,e.Wm)("code",null,"require.context"),(0,e.Uk)(" 来动态加载")],-1),i={href:"https://webpack.js.org/api/module-methods/#requirecontext",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("require.context"),k=(0,e.Uk)(" 提供了一种通用的代码分割形式。"),d=(0,e.uE)('<p>假设我们使用 Webpack 来构建一个静态网站。网站内容都在 <code>./pages/</code> 目录下，以 Markdown 形式保存。每个 Markdown 文件都有一个 YAML frontmatter 来定义元数据。我们可以通过如下方式来加载 Markdown 文件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 通过 `yaml-frontmatter-loader` and `json-loader` 来处理文件。</span>\n<span class="token comment">// `yaml-frontmatter-loader` 将文件中的 frontmatter 和文件内容解析出来，</span>\n<span class="token comment">// `json-loader` 再将其转换成 JSON 结构</span>\n<span class="token comment">// 在这个过程中，Markdown 不会被处理。</span>\n<span class="token keyword">const</span> req <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;json-loader!yaml-frontmatter-loader!./pages&#39;</span><span class="token punctuation">,</span>\n  <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 递归加载文件</span>\n  <span class="token operator">/</span><span class="token operator">^</span>\\<span class="token punctuation">.</span>\\<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\.md$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 匹配 `.md` 结尾的文件</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>require.context</code> 返回一个函数，我们使用这个函数来加载文件。<code>require.context</code> 会创建一个模块，有自己的模块 id，同时提供一个 <code>.keys()</code> 方法，返回模块的内容（文件列表）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>req<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;./demo.md&quot;, &quot;./another-demo.md&quot;]</span>\nreq<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// 42</span>\n\n<span class="token comment">// {title: &quot;Demo&quot;, body: &quot;# Demo page\\nDemo content\\n\\n&quot;}</span>\n<span class="token keyword">const</span> demoPage <span class="token operator">=</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&#39;./demo.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',4),m=(0,e.Uk)("如果与 TypeScript 一起使用，要确保安装了 "),b={href:"https://www.npmjs.com/package/@types/webpack-env",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("@types/webpack-env"),x=(0,e.Uk)("，否则 "),h=(0,e.Wm)("code",null,"require.context",-1),f=(0,e.Uk)(" 无法工作。"),y=(0,e.uE)('<h2 id="import-中的动态路径" tabindex="-1"><a class="header-anchor" href="#import-中的动态路径" aria-hidden="true">#</a> <code>import</code> 中的动态路径</h2><p>当我们给 <code>import</code> 的路径信息是一个动态路径的时候，Webpack 会内部创建一个 context.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token string">&quot;fi&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translations/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>require</code> 在遇到动态路径的处理方式与 <code>import</code> 相同。比如 <code>require(</code>assets/modals/${imageSrc}.js<code>);</code>，将会创建一个 context，并解析到一个 <code>imageSrc</code> 的文件。</p><blockquote><p>在使用动态加载的时候，建议明确指定文件后缀，这样可以减小 context 的大小，同时提高构建性能。</p></blockquote><h2 id="组合多个-require-context" tabindex="-1"><a class="header-anchor" href="#组合多个-require-context" aria-hidden="true">#</a> 组合多个 <code>require.context</code></h2><p>我们可以将多个独立的 <code>require.context</code> 合并成一个。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> concat<span class="token punctuation">,</span> uniq <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">combineContexts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>contexts</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">webpackContext</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Find the first match and execute</span>\n    <span class="token keyword">const</span> matches <span class="token operator">=</span> contexts\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  webpackContext<span class="token punctuation">.</span><span class="token function-variable function">keys</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token function">uniq</span><span class="token punctuation">(</span>\n      <span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n        <span class="token keyword">null</span><span class="token punctuation">,</span>\n        contexts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> webpackContext<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="处理运行时的动态路径" tabindex="-1"><a class="header-anchor" href="#处理运行时的动态路径" aria-hidden="true">#</a> 处理运行时的动态路径</h2>',9),q=(0,e.Uk)("Webpack 的动态加载还是要基于静态分析依赖关系的。如果动态加载的模块在其他地方，比如是一个网络文件，那么 Webpack 将无法完成动态加载。我们需要借助于其他工具，比如 "),w={href:"https://www.npmjs.com/package/scriptjs",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("script.js"),j=(0,e.Uk)(" 或者 "),W={href:"https://www.npmjs.com/package/little-loader",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("little-loader"),C=(0,e.Uk)("。"),_=(0,e.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>当我们需要大量文件的时候，<code>require.context</code> 会是一个非常有用的特性。</p><p>动态 <code>import</code> 会在内部调用 <code>require.context</code>。</p><p><code>require.context</code> 仅适用于文件系统，如果要加载网络文件等形式的文件，需要借助于其他工具。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',5),D={render:function(n,s){const a=(0,e.up)("RouterLink"),D=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("p",null,[t,(0,e.Wm)(a,{to:"/courses/webpack/code-split.html"},{default:(0,e.w5)((()=>[p])),_:1}),o,c,l]),r,(0,e.Wm)("p",null,[(0,e.Wm)("a",i,[u,(0,e.Wm)(D)]),k]),d,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[m,(0,e.Wm)("a",b,[g,(0,e.Wm)(D)]),x,h,f])]),y,(0,e.Wm)("p",null,[q,(0,e.Wm)("a",w,[v,(0,e.Wm)(D)]),j,(0,e.Wm)("a",W,[U,(0,e.Wm)(D)]),C]),_],64)}}}}]);