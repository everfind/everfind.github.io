"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4241],{7645:(e,r,t)=>{t.r(r),t.d(r,{data:()=>a});const a={key:"v-20c9f927",path:"/courses/architecture-of-react-app/error-handling.html",title:"错误处理",lang:"zh-CN",frontmatter:{title:"错误处理",description:"应用在运行过程中难免会遇到错误。好的错误处理机制即可以帮助我们优化在应用出错时的用户体验，又可以帮助我们跟踪解决错误。",keywords:["React","架构","错误处理"],date:"2021-08-12T00:00:00.000Z",key:10},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"API 错误",slug:"api-错误",children:[]},{level:2,title:"应用运行错误",slug:"应用运行错误",children:[]},{level:2,title:"错误跟踪",slug:"错误跟踪",children:[]}],filePathRelative:"courses/architecture-of-react-app/error-handling.md"}},5930:(e,r,t)=>{t.r(r),t.d(r,{default:()=>v});var a=t(6252);const n=(0,a.Wm)("h2",{id:"api-错误",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#api-错误","aria-hidden":"true"},"#"),(0,a.Uk)(" API 错误")],-1),i=(0,a.Wm)("p",null,"在应用运行过程中，经常会遇到 API 报错。因此，我们需要在请求 API 中的时候启用一个拦截器来处理错误，然后提示用户是什么导致了错误。",-1),l={href:"https://github.com/everfind/bulletproof-react/blob/master/src/lib/axios.ts",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("这里是使用拦截器并提示用户的样例"),p=(0,a.Wm)("h2",{id:"应用运行错误",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#应用运行错误","aria-hidden":"true"},"#"),(0,a.Uk)(" 应用运行错误")],-1),c=(0,a.Uk)("在 React 的组件树中，我们要使用 "),s={href:"https://reactjs.org/docs/error-boundaries.html#gatsby-focus-wrapper",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("Error Boundaries"),h=(0,a.Uk)(" 来处理错误。"),u=(0,a.Wm)("p",null,"常规的做法是在全局加一个 Error Boundary，当应用出错的时候可以处理。但是这么做有一个问题，就是即使一个很细节的地方出错了，整个应用都不能使用了。因此，我们建议对应用的各个部分分别使用 Error Boundary，这样可以保证一个地方出错了，其他功能还可以正常使用。",-1),m={href:"https://github.com/everfind/bulletproof-react/blob/master/src/context/index.tsx",target:"_blank",rel:"noopener noreferrer"},g=(0,a.Uk)("这里是 Error Boundary 的样例"),y=(0,a.Wm)("h2",{id:"错误跟踪",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#错误跟踪","aria-hidden":"true"},"#"),(0,a.Uk)(" 错误跟踪")],-1),f=(0,a.Uk)("我们需要跟踪应用中出现的任何错误。这方面可以使用 "),x={href:"https://sentry.io/",target:"_blank",rel:"noopener noreferrer"},b=(0,a.Uk)("Sentry"),k=(0,a.Uk)(" 这款工具。它可以上报应用运行过程中的任何错误，同时还将浏览器、操作系统信息等也一起上传。如果我们在 Sentry 控制台上传了源代码的 Source Map，我们可以定位到错误发生在源代码的哪一行。"),W=(0,a.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),v={render:function(e,r){const t=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[n,i,(0,a.Wm)("p",null,[(0,a.Wm)("a",l,[o,(0,a.Wm)(t)])]),p,(0,a.Wm)("p",null,[c,(0,a.Wm)("a",s,[d,(0,a.Wm)(t)]),h]),u,(0,a.Wm)("p",null,[(0,a.Wm)("a",m,[g,(0,a.Wm)(t)])]),y,(0,a.Wm)("p",null,[f,(0,a.Wm)("a",x,[b,(0,a.Wm)(t)]),k]),W],64)}}}}]);