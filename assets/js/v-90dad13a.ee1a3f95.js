"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[1706],{331:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-90dad13a",path:"/code-reading/matrix-rain.html",title:"从 matrix-rain 中学习命令行控制方法",lang:"zh-CN",frontmatter:{title:"从 matrix-rain 中学习命令行控制方法",date:"2021-09-14T00:00:00.000Z",description:"通过 matrix-rain 来看如何在命令行中绘制页面。",keywords:["matrix-rain","命令行","ANSI escape code","ANSI转义代码"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"控制字符和控制序列",slug:"控制字符和控制序列",children:[]},{level:2,title:"矩阵渲染",slug:"矩阵渲染",children:[]}],filePathRelative:"code-reading/matrix-rain.md"}},4749:(n,s,a)=>{a.r(s),a.d(s,{default:()=>jn});var t=a(6252);const p=(0,t.Wm)("p",null,"相信大家都对黑客帝国电影里的矩阵雨印象非常深刻，就是下面这个效果。",-1),o=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:"/code-reading/console-control/matrix-c.gif",alt:"矩阵雨"})],-1),e=(0,t.Wm)("p",null,"效果非常酷炫，我看了一下相关实现库的代码，也非常简单，核心就是用好命令行的控制字符，这里分享一下。",-1),c=(0,t.Uk)("在 "),l={href:"https://github.com/nojvek/matrix-rain",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("matrix-rain"),i=(0,t.Uk)(" 的源代码中，总共只有两个文件，"),r=(0,t.Wm)("code",null,"ansi.js",-1),k=(0,t.Uk)(" 和 "),m=(0,t.Wm)("code",null,"index.js",-1),b=(0,t.Uk)("，非常小巧。"),d=(0,t.uE)('<h2 id="控制字符和控制序列" tabindex="-1"><a class="header-anchor" href="#控制字符和控制序列" aria-hidden="true">#</a> 控制字符和控制序列</h2><p><code>ansi.js</code> 中定义了一些命令行的操作方法，也就是对控制字符做了一些方法封装，代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ctlEsc <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ansi <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">clearScreen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">2J</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorHome</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">H</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorPos</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> col</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>row<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>col<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">H</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorVisible</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?25h</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">cursorInvisible</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?25l</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">useAltBuffer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?47h</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">useNormalBuffer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?47l</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">underline</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">4m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">off</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">bold</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">1m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function-variable function">color</span><span class="token operator">:</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;1m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n\n  colors<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">fgRgb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">38;2;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgRgb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctlEsc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">48;2;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgBlack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">30</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgRed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">31</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgGreen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">32</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgYellow</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">33</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgBlue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">34</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgMagenta</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">35</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgCyan</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">36</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fgWhite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">37</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgBlack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">40</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgRed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">41</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgGreen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">42</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgYellow</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">43</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgBlue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">44</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgMagenta</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">45</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgCyan</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">46</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">bgWhite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ansi<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">47</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> ansi<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>这里面 <code>ansi</code> 对象上的每一个方法不做过多解释了。我们看到，每个方法都是返回一个奇怪的字符串，通过这些字符串可以改变命令行的显示效果。</p><p>这些字符串其实是一个个控制字符组成的控制序列。那什么是控制字符呢？我们应该都知道 ASC 字符集，这个字符集里面除了定义了一些可见字符以外，还有很多不可见的字符，就是控制字符。这些控制字符可以控制打印机、命令行等设备的显示和动作。</p>',5),g=(0,t.Uk)("有两个控制字符集，分别是 CO 字符集和 C1 字符集。C0 字符集是 "),f=(0,t.Wm)("code",null,"0x00",-1),w=(0,t.Uk)(" 到 "),h=(0,t.Wm)("code",null,"0x1F",-1),y=(0,t.Uk)(" 这两个十六进制数范围内的字符，而 C1 字符集是 "),x=(0,t.Wm)("code",null,"0x80",-1),W=(0,t.Uk)(" 到 "),C=(0,t.Wm)("code",null,"0x9F",-1),v=(0,t.Uk)(" 这两个十六进制数范围内的字符。C0 和 C1 字符集内的字符和对应的功能可以在"),S={href:"https://en.wikipedia.org/wiki/C0_and_C1_control_codes",target:"_blank",rel:"noopener noreferrer"},R=(0,t.Uk)("这里"),U=(0,t.Uk)("查到，我们不做详细描述了。"),I=(0,t.Uk)("上面代码中，"),j=(0,t.Wm)("code",null,"\\x1b[",-1),$=(0,t.Uk)(" 其实是一个组合，"),_=(0,t.Wm)("code",null,"\\x1b",-1),E=(0,t.Uk)(" 定义了 "),D=(0,t.Wm)("code",null,"ESC",-1),A=(0,t.Uk)(" 键，后跟 "),P=(0,t.Wm)("code",null,"[",-1),B=(0,t.Uk)(" 表示这是一个"),M={href:"https://en.wikipedia.org/wiki/Control_Sequence_Introducer",target:"_blank",rel:"noopener noreferrer"},N=(0,t.Uk)("控制序列导入器（Control Sequence Introducer，CSI）"),z=(0,t.Uk)("。在 "),F=(0,t.Wm)("code",null,"\\x1b[",-1),H=(0,t.Uk)(" 后面的所有字符都会被命令行解析为控制字符。"),G=(0,t.Wm)("p",null,"常用的控制序列有这些：",-1),O=(0,t.Wm)("thead",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("th",{style:{"text-align":"left"}},"序列"),(0,t.Wm)("th",{style:{"text-align":"left"}},"功能")])],-1),T=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n A"),(0,t.Wm)("td",{style:{"text-align":"left"}},"向上移动 n（默认为 1） 个单元")],-1),q=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n A"),(0,t.Wm)("td",{style:{"text-align":"left"}},"向下移动 n（默认为 1） 个单元")],-1),Y=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n C"),(0,t.Wm)("td",{style:{"text-align":"left"}},"向前移动 n（默认为 1） 个单元")],-1),J=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n D"),(0,t.Wm)("td",{style:{"text-align":"left"}},"向后移动 n（默认为 1） 个单元")],-1),V=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n E"),(0,t.Wm)("td",{style:{"text-align":"left"}},"将光标移动到 n（默认为 1） 行的下一行行首")],-1),K=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n F"),(0,t.Wm)("td",{style:{"text-align":"left"}},"将光标移动到 n（默认为 1） 行的前一行行首")],-1),L=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n G"),(0,t.Wm)("td",{style:{"text-align":"left"}},"将光标移动到当前行的第 n（默认为 1）列")],-1),Z={style:{"text-align":"left"}},Q=(0,t.Uk)("CSI n ; m H"),X=(0,t.Wm)("td",{style:{"text-align":"left"}},"移动光标到指定位置，第 n 行，第 m 列。n 和 m 默认为 1，即 CSI ;5H 与 CSI 1;5H 等同。",-1),nn=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n J"),(0,t.Wm)("td",{style:{"text-align":"left"}},"清空屏幕。如果 n 为 0（或不指定），则从光标位置开始清空到屏幕末尾；如果 n 为 1，则从光标位置清空到屏幕开头；如果 n 为 2，则清空整个屏幕；如果 n 为 3，则不仅清空整个屏幕，同时还清空滚动缓存。")],-1),sn=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n K"),(0,t.Wm)("td",{style:{"text-align":"left"}},"清空行，如果 n 为 0（或不指定），则从光标位置清空到行尾；如果 n 为 1，则从光标位置清空到行头；如果 n 为 2，则清空整行，光标位置不变。")],-1),an=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n S"),(0,t.Wm)("td",{style:{"text-align":"left"}},"向上滚动 n （默认为 1）行")],-1),tn=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n T"),(0,t.Wm)("td",{style:{"text-align":"left"}},"向下滚动 n （默认为 1）行")],-1),pn={style:{"text-align":"left"}},on=(0,t.Uk)("CSI n ; m f"),en=(0,t.Wm)("td",{style:{"text-align":"left"}},[(0,t.Uk)("与 "),(0,t.Wm)("code",null,"CSI n ; m H"),(0,t.Uk)(" 功能相同")],-1),cn=(0,t.Wm)("tr",null,[(0,t.Wm)("td",{style:{"text-align":"left"}},"CSI n m"),(0,t.Wm)("td",{style:{"text-align":"left"}},[(0,t.Uk)("设置显示效果，如 "),(0,t.Wm)("code",null,"CSI 1 m"),(0,t.Uk)(" 表示设置粗体，"),(0,t.Wm)("code",null,"CSI 4 m"),(0,t.Uk)(" 为添加下划线。")])],-1),ln=(0,t.Uk)("我们可以通过 "),un=(0,t.Wm)("code",null,"CSI n m",-1),rn=(0,t.Uk)(" 控制序列来控制显示效果，在设置一种显示以后，后续字符都会沿用这种效果，直到我们改变了显示效果。可以通过 "),kn=(0,t.Wm)("code",null,"CSI 0 m",-1),mn=(0,t.Uk)(" 来清楚显示效果。常见的显示效果可以在"),bn={href:"https://en.wikipedia.org/wiki/ANSI_escape_code#SGR",target:"_blank",rel:"noopener noreferrer"},dn=(0,t.Uk)("SGR (Select Graphic Rendition) parameters"),gn=(0,t.Uk)(" 查到，这里受篇幅限制就不做赘述了。"),fn=(0,t.uE)("<p>上面的代码中，还定义了一些颜色，我们看到颜色的定义都是一些数字，其实每一个数字都对应一种颜色，这里列一下常见的颜色。</p><table><thead><tr><th>前景色</th><th>背景色</th><th>名称</th><th>前景色</th><th>背景色</th><th>名称</th></tr></thead><tbody><tr><td>30</td><td>40</td><td>黑色</td><td>90</td><td>100</td><td>亮黑色</td></tr><tr><td>31</td><td>41</td><td>红色</td><td>91</td><td>101</td><td>亮红色</td></tr><tr><td>32</td><td>42</td><td>绿色</td><td>92</td><td>102</td><td>亮绿色</td></tr><tr><td>33</td><td>43</td><td>黄色</td><td>93</td><td>103</td><td>亮黄色</td></tr><tr><td>34</td><td>44</td><td>蓝色</td><td>94</td><td>104</td><td>亮蓝色</td></tr><tr><td>35</td><td>45</td><td>品红色（Magenta）</td><td>95</td><td>105</td><td>亮品红色（Magenta）</td></tr><tr><td>36</td><td>46</td><td>青色（Cyan）</td><td>96</td><td>106</td><td>亮青色（Cyan）</td></tr><tr><td>37</td><td>47</td><td>白色</td><td>97</td><td>107</td><td>亮白色</td></tr></tbody></table><p>上面的代码中，使用了 <code>CSI n;1m</code> 的形式来定义颜色，其实是两种效果的，一个是具体颜色值，一个是加粗，一些命令行实现中会使用加粗效果来定义亮色。比如，如果直接定义 <code>CSI 32 m</code> 可能最终展示的是暗绿色，我们改成 <code>CSI 32;1m</code> 则将显示亮绿色。</p>",3),wn=(0,t.Uk)("颜色支持多种格式，上面的是 "),hn={href:"https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit",target:"_blank",rel:"noopener noreferrer"},yn=(0,t.Uk)("3-bit 和 4-bit"),xn=(0,t.Uk)(" 格式，同时还有 "),Wn={href:"https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit",target:"_blank",rel:"noopener noreferrer"},Cn=(0,t.Uk)("8-bit"),vn=(0,t.Uk)(" 和 "),Sn={href:"https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit",target:"_blank",rel:"noopener noreferrer"},Rn=(0,t.Uk)("24-bit"),Un=(0,t.Uk)("。代码中也有使用样例，这里不再赘述了。"),In=(0,t.uE)('<h2 id="矩阵渲染" tabindex="-1"><a class="header-anchor" href="#矩阵渲染" aria-hidden="true">#</a> 矩阵渲染</h2><p>在 matrix-rain 的代码中，<code>index.js</code> 里的核心功能是 <code>MatrixRain</code> 这个类：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MatrixRain</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>transpose <span class="token operator">=</span> opts<span class="token punctuation">.</span>direction <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">h</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> opts<span class="token punctuation">.</span>color<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>charRange <span class="token operator">=</span> opts<span class="token punctuation">.</span>charRange<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>numCols <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>numRows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// handle reading from file</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opts<span class="token punctuation">.</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> doesn&#39;t exist</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>fileChars <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>filePath<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">utf-8</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>charRange <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">generateChars</span><span class="token punctuation">(</span><span class="token parameter">len<span class="token punctuation">,</span> charRange</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// by default charRange == ascii</span>\n    <span class="token keyword">let</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ascii</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">braille</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0x2840</span><span class="token punctuation">,</span> <span class="token number">0x28ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">katakana</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0x30a0</span><span class="token punctuation">,</span> <span class="token number">0x30ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">emoji</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// emojis are two character widths, so use a prefix</span>\n      <span class="token keyword">const</span> emojiPrefix <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">0xd83d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> emojiPrefix <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0xde01</span><span class="token punctuation">,</span> <span class="token number">0xde4a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charRange <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChars<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChars<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>filePos<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> chars<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">makeDroplet</span><span class="token punctuation">(</span><span class="token parameter">col</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      col<span class="token punctuation">,</span>\n      alive<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      curRow<span class="token operator">:</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      height<span class="token operator">:</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numRows <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      speed<span class="token operator">:</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      chars<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateChars</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charRange<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">resizeDroplets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">]</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">getWindowSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// transpose for direction</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transpose<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Create droplets per column</span>\n    <span class="token comment">// add/remove droplets to match column size</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> col <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// make two droplets per row that start in random positions</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeDroplet</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeDroplet</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">writeAt</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> str<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Only output if in viewport</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows <span class="token operator">&amp;&amp;</span> col <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numCols<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transpose <span class="token operator">?</span> ansi<span class="token punctuation">.</span><span class="token function">cursorPos</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token operator">:</span> ansi<span class="token punctuation">.</span><span class="token function">cursorPos</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">renderFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ansiColor <span class="token operator">=</span> ansi<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fg</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> droplets <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colDroplets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> droplet <span class="token keyword">of</span> droplets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>curRow<span class="token punctuation">,</span> col<span class="token operator">:</span> curCol<span class="token punctuation">,</span> height<span class="token punctuation">}</span> <span class="token operator">=</span> droplet<span class="token punctuation">;</span>\n        droplet<span class="token punctuation">.</span>alive<span class="token operator">++</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>droplet<span class="token punctuation">.</span>alive <span class="token operator">%</span> droplet<span class="token punctuation">.</span>speed <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeAt</span><span class="token punctuation">(</span>curRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> curCol<span class="token punctuation">,</span> droplet<span class="token punctuation">.</span>chars<span class="token punctuation">[</span>curRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ansiColor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeAt</span><span class="token punctuation">(</span>curRow<span class="token punctuation">,</span> curCol<span class="token punctuation">,</span> droplet<span class="token punctuation">.</span>chars<span class="token punctuation">[</span>curRow<span class="token punctuation">]</span><span class="token punctuation">,</span> ansi<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">fgWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeAt</span><span class="token punctuation">(</span>curRow <span class="token operator">-</span> height<span class="token punctuation">,</span> curCol<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          droplet<span class="token punctuation">.</span>curRow<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>curRow <span class="token operator">-</span> height <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// reset droplet</span>\n          Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>droplet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeDroplet</span><span class="token punctuation">(</span>droplet<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>curRow<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br></div></div><p>还有几个工具方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Simple string stream buffer + stdout flush at once</span>\n<span class="token keyword">let</span> outBuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">chars</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> outBuffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outBuffer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> outBuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>matrix-rain 的启动代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> args <span class="token operator">=</span> argParser<span class="token punctuation">.</span><span class="token function">parseArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> matrixRain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatrixRain</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>isTTY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: Output is not a text terminal</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// clear terminal and use alt buffer</span>\n  process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">setRawMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">useAltBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">cursorInvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">bgBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">fgBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  matrixRain<span class="token punctuation">.</span><span class="token function">resizeDroplets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">cursorVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">cursorHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>ansi<span class="token punctuation">.</span><span class="token function">useNormalBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nprocess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SIGINT</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nprocess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nprocess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> matrixRain<span class="token punctuation">.</span><span class="token function">resizeDroplets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> matrixRain<span class="token punctuation">.</span><span class="token function">renderFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60FPS</span>\n\n<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>首先初始化一个 <code>MatrixRain</code> 类，然后调用 <code>start</code> 方法。<code>start</code> 方法中通过 <code>MatrixRain</code> 的 <code>resizeDroplets</code> 方法来初始化要显示的内容。</p><p><code>MatrixRain</code> 类实例中管理着一个 <code>colDroplets</code> 数组，保存这每一列的雨滴。在 <code>resizeDroplets</code> 中我们可以看到，每一列有两个雨滴。</p><p>在启动代码中我们还可以看到，每隔 16 毫秒会调用一次 <code>renderFrame</code> 方法来绘制页面。而 <code>renderFrame</code> 方法中，会遍历每一个 <code>colDroplet</code> 中的每一个雨滴。由于每一个雨滴的初始位置和速度都是随机的，通过 <code>droplet.alive</code> 和 <code>droplet.speed</code> 的比值来确定每一次渲染的时候是否更新这个雨滴位置，从而达到每个雨滴的下落参差不齐的效果。当雨滴已经移出屏幕可视范围后会被重置。</p><p>每一次渲染，都是通过 <code>write</code> 函数向全局的缓存中写入数据，之后通过 <code>flush</code> 函数一把更新。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',12),jn={render:function(n,s){const a=(0,t.up)("OutboundLink"),jn=(0,t.up)("nowrap");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,o,e,(0,t.Wm)("p",null,[c,(0,t.Wm)("a",l,[u,(0,t.Wm)(a)]),i,r,k,m,b]),d,(0,t.Wm)("p",null,[g,f,w,h,y,x,W,C,v,(0,t.Wm)("a",S,[R,(0,t.Wm)(a)]),U]),(0,t.Wm)("p",null,[I,j,$,_,E,D,A,P,B,(0,t.Wm)("a",M,[N,(0,t.Wm)(a)]),z,F,H]),G,(0,t.Wm)("table",null,[O,(0,t.Wm)("tbody",null,[T,q,Y,J,V,K,L,(0,t.Wm)("tr",null,[(0,t.Wm)("td",Z,[(0,t.Wm)(jn,null,{default:(0,t.w5)((()=>[Q])),_:1})]),X]),nn,sn,an,tn,(0,t.Wm)("tr",null,[(0,t.Wm)("td",pn,[(0,t.Wm)(jn,null,{default:(0,t.w5)((()=>[on])),_:1})]),en]),cn])]),(0,t.Wm)("p",null,[ln,un,rn,kn,mn,(0,t.Wm)("a",bn,[dn,(0,t.Wm)(a)]),gn]),fn,(0,t.Wm)("p",null,[wn,(0,t.Wm)("a",hn,[yn,(0,t.Wm)(a)]),xn,(0,t.Wm)("a",Wn,[Cn,(0,t.Wm)(a)]),vn,(0,t.Wm)("a",Sn,[Rn,(0,t.Wm)(a)]),Un]),In],64)}}}}]);