"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6973],{7888:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-5227281b",path:"/courses/webpack/load-js.html",title:"加载 JavaScript",lang:"zh-CN",frontmatter:{title:"加载 JavaScript",description:"介绍 Webpack 中如何处理 JS 文件",keywords:["Webpack"],date:"2021-01-14T00:00:00.000Z",key:12},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"在 Webpack 中使用 Babel",slug:"在-webpack-中使用-babel",children:[]},{level:2,title:"使用 Polyfill",slug:"使用-polyfill",children:[]},{level:2,title:"关于 Babel 的一些小提示",slug:"关于-babel-的一些小提示",children:[]},{level:2,title:"Babel 的一些插件",slug:"babel-的一些插件",children:[]},{level:2,title:"针对不同浏览器输出不同的构建结果",slug:"针对不同浏览器输出不同的构建结果",children:[]},{level:2,title:"使用 TypeScript",slug:"使用-typescript",children:[]},{level:2,title:"使用 TypeScript 来编写 Webpack 配置文件",slug:"使用-typescript-来编写-webpack-配置文件",children:[]},{level:2,title:"WebAssembly",slug:"webassembly",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/load-js.md"}},6962:(n,s,a)=>{a.r(s),a.d(s,{default:()=>ps});var e=a(6252);const p=(0,e.uE)('<p>Webpack 默认支持 ES2015 的模块定义，但是在进行代码转换的时候，像 <code>const</code> 这样的语法并不会被转换。这样的话，在一些老旧浏览器中就会产生很多问题。</p><p>为了能更好的理解 Webpack 的默认输出，我们将 Webpack 的 <code>mode</code> 参数设置为 <code>none</code>, 然后观察一下构建输出：</p><p><strong>dist/main.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token doc-comment comment">/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) =&gt; <span class="token punctuation">{</span>\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n<span class="token comment">/* harmony export */</span>   <span class="token string">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> __WEBPACK_DEFAULT_EXPORT__\n<span class="token comment">/* harmony export */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* harmony default export */</span> <span class="token keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;rounded bg-red-100 border max-w-md m-4 p-4&quot;</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',4),t=(0,e.Uk)("为了解决上面的语法转换的问题，我们可以借助于 "),o={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("Babel"),c=(0,e.Uk)(". Babel 是一个 JavaScript 语法转译器，支持 ES2015 以及更新版本的各种特性。"),r=(0,e.Wm)("h2",{id:"在-webpack-中使用-babel",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#在-webpack-中使用-babel","aria-hidden":"true"},"#"),(0,e.Uk)(" 在 Webpack 中使用 Babel")],-1),u=(0,e.Uk)("在 Webpack 中，我们可以通过 "),i={href:"https://www.npmjs.com/package/babel-loader",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("babel-loader"),b=(0,e.Uk)(" 来使用 Babel。"),m=(0,e.uE)('<p>首先安装 babel-loader.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> babel-loader @babel/core --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">APP_SOURCE</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">loadJavaScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">loadJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>设置完 babel-loader 的配置以后，我们还需要添加一个 babel 的配置，我们把配置放在 <code>.babelrc</code> 里面。</p>',7),d=(0,e.Uk)("通常情况下，我们至少需要安装 "),g={href:"https://www.npmjs.com/package/@babel/preset-env",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("@babel/preset-env"),w=(0,e.Uk)(". 这个包是 Babel 的一个插件预置包，它通过 "),_=(0,e.Wm)("code",null,"browserslist",-1),W=(0,e.Uk)(" 中的定义来加载需要的插件。"),f=(0,e.uE)('<blockquote><p>browserslist 我们在前面已经讲过，这里不再赘述。</p></blockquote><p>安装预置包，</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> @babel/preset-env --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>.babelrc</strong> 定义如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  &quot;presets&quot;: [[&quot;@babel/preset-env&quot;, { &quot;modules&quot;: false }]]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这时候执行 <code>npm run build -- --mode none</code>，然后查看 <code>dist/main.js</code> 的内容，你会发现，当 <code>.browserslistrc</code> 内的定义变化的时候，<code>dist/main.js</code> 也会发生变化.</p><p>我们将 <code>.browserslistrc</code> 中的定义修改为只包含 IE8，则输出的 <code>dist/main.js</code> 内容为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token doc-comment comment">/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) =&gt; <span class="token punctuation">{</span>\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n<span class="token comment">/* harmony export */</span>   <span class="token string">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> __WEBPACK_DEFAULT_EXPORT__\n<span class="token comment">/* harmony export */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* harmony default export */</span> <span class="token keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> text <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;rounded bg-red-100 border max-w-md m-4 p-4&quot;</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>对比前面的 <code>dist/main.js</code> 输出，我们可以看到函数的语法发生了变化。</p><h2 id="使用-polyfill" tabindex="-1"><a class="header-anchor" href="#使用-polyfill" aria-hidden="true">#</a> 使用 Polyfill</h2>',10),v=(0,e.Wm)("code",null,"@babel/preset-env",-1),y=(0,e.Uk)(" 可以针对一些老旧浏览器填补语法功能的缺失。要使用这个功能，需要开启 "),x=(0,e.Wm)("code",null,"useBuiltIns",-1),U=(0,e.Uk)(" 参数并安装 "),q={href:"https://www.npmjs.com/package/core-js",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("core-js"),E=(0,e.Uk)(".如果代码中使用了 "),S=(0,e.Wm)("code",null,"async",-1),B=(0,e.Uk)(" 函数，那么还需要安装 "),T={href:"https://www.npmjs.com/package/regenerator-runtime",target:"_blank",rel:"noopener noreferrer"},C=(0,e.Uk)("regenerator-runtime"),P=(0,e.Uk)(" 这个包。"),A=(0,e.Wm)("p",null,[(0,e.Uk)("除非我们使用 "),(0,e.Wm)("code",null,"useBuiltIns: 'usage'"),(0,e.Uk)(" 来配置 "),(0,e.Wm)("code",null,"@babel/preset-env"),(0,e.Uk)(", 否则我们需要在代码中显示的引入 "),(0,e.Wm)("code",null,"core-js"),(0,e.Uk)(" 或者在 Webpack 的 entry 中配置，"),(0,e.Wm)("code",null,'app: ["core-js", "./src"]'),(0,e.Uk)("。")],-1),O=(0,e.Uk)("注意，core-js 会污染全局变量，比如 Promise. 对于一个三方库开发者来说，引入 core-js 会引发许多问题。Babel 有一个插件 "),J={href:"https://babeljs.io/docs/plugins/transform-runtime/",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Uk)("@babel/plugin-transform-runtime"),L=(0,e.Uk)(" 可以很好的解决这个问题。"),I=(0,e.Wm)("h2",{id:"关于-babel-的一些小提示",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#关于-babel-的一些小提示","aria-hidden":"true"},"#"),(0,e.Uk)(" 关于 Babel 的一些小提示")],-1),N=(0,e.Wm)("code",null,".babelrc",-1),H=(0,e.Uk)(" 还有很多其他的选项可以使用，可以参考"),F={href:"https://babeljs.io/docs/en/options",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("官网说明"),K=(0,e.Uk)("。"),X=(0,e.Wm)("code",null,".babelrc",-1),M=(0,e.Uk)(" 支持 "),z={href:"https://www.npmjs.com/package/json5",target:"_blank",rel:"noopener noreferrer"},V=(0,e.Uk)("JSON5"),$=(0,e.Uk)(" 格式，也就是可以在 "),Y=(0,e.Wm)("code",null,".babelrc",-1),Z=(0,e.Uk)(" 中添加注释、使用单引号字符串等。"),G=(0,e.Wm)("p",null,"有时候如果你要使用一些新特性或者实验性的特性，如果项目是一个长期迭代的项目，那么注释是非常必要的。",-1),Q=(0,e.Wm)("h2",{id:"babel-的一些插件",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#babel-的一些插件","aria-hidden":"true"},"#"),(0,e.Uk)(" Babel 的一些插件")],-1),nn=(0,e.Wm)("p",null,"Babel 有很多插件可以使用。",-1),sn={href:"https://www.npmjs.com/package/babel-plugin-import",target:"_blank",rel:"noopener noreferrer"},an=(0,e.Uk)("babel-plugin-import"),en=(0,e.Uk)(" 可以重写模块的导入语法。比如在代码中可以直接写 "),pn=(0,e.Wm)("code",null,'import { Button } from "antd";',-1),tn=(0,e.Uk)("，而不是现实的使用 "),on=(0,e.Wm)("code",null,"Button",-1),ln=(0,e.Uk)(" 模块的路径。"),cn={href:"https://www.npmjs.com/package/babel-plugin-transform-react-remove-prop-types",target:"_blank",rel:"noopener noreferrer"},rn=(0,e.Uk)("babel-plugin-transform-react-remove-prop-types"),un=(0,e.Uk)(" 会在 production 构建中删除 "),kn=(0,e.Wm)("code",null,"propType",-1),bn=(0,e.Uk)(" 相关的代码。"),mn=(0,e.Uk)("在 NodeJS 中，我们可以通过 "),dn={href:"https://www.npmjs.com/package/babel-register",target:"_blank",rel:"noopener noreferrer"},gn=(0,e.Uk)("babel-register"),hn=(0,e.Uk)(" 或者 "),wn={href:"https://www.npmjs.com/package/babel-cli",target:"_blank",rel:"noopener noreferrer"},_n=(0,e.Uk)("babel-cli"),Wn=(0,e.Uk)(" 来使用 Babel。"),fn=(0,e.uE)('<h2 id="针对不同浏览器输出不同的构建结果" tabindex="-1"><a class="header-anchor" href="#针对不同浏览器输出不同的构建结果" aria-hidden="true">#</a> 针对不同浏览器输出不同的构建结果</h2><p>为了更好的利用现代浏览器对一些语法的支持，同时支持老旧浏览器，我们需要构建两份输出，然后在启动代码中根据浏览器加载不同的构建结果。这样的话，在现代浏览器中，加载的代码体积更小，同时解析时间也更短。</p><p>我们可以像下面这样，在 HTML 中使用不同的构建结果。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- 支持 ES module 语法的加载这个文件 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.mjs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 老浏览器加载这个文件 (同时支持 module 语法的浏览器知道不去加载这个文件（nomodule）). --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.es5.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们可以通过下面的方式配置 Webpack 输出两份构建结果。</p><p><strong>.browserslistrc</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 支持老的 IE\n[legacy]\nIE 8\n\n# 新浏览器，可以根据需要自行决定\n[modern]\n&gt; 1% # Browser usage over 1%\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 记住在生产构建中设置 &quot;mode&quot;: &quot;production&quot;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;prod:legacy&quot;</span><span class="token operator">:</span>\n      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BROWSERSLIST_ENV</span> <span class="token operator">=</span> <span class="token string">&quot;legacy&quot;</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;prod:modern&quot;</span><span class="token operator">:</span>\n      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BROWSERSLIST_ENV</span> <span class="token operator">=</span> <span class="token string">&quot;modern&quot;</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Trying to use an unknown mode, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>package.json</strong></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wp --mode prod:legacy &amp;&amp; wp --mode prod:modern&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',11),vn=(0,e.Uk)("上面的两次 Webpack 构建是串行执行，我们可以通过 "),yn={href:"https://www.npmjs.com/package/concurrently",target:"_blank",rel:"noopener noreferrer"},xn=(0,e.Uk)("concurrently"),Un=(0,e.Uk)(" 并行支持 Webpack 构建。"),qn=(0,e.Wm)("h2",{id:"使用-typescript",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#使用-typescript","aria-hidden":"true"},"#"),(0,e.Uk)(" 使用 TypeScript")],-1),jn=(0,e.Wm)("p",null,"微软的 TypeScript 是一门编译型语言，使用模式与 Babel 类似。TypeScript 除了有 JavaScript 能力以外，还有类型定义。",-1),En=(0,e.Uk)("在 Webpack 中，我们可以通过 "),Sn={href:"https://www.npmjs.com/package/ts-loader",target:"_blank",rel:"noopener noreferrer"},Bn=(0,e.Uk)("ts-loader"),Tn=(0,e.Uk)(" 来使用 TypeScript。在使用 ts-loader 的时候，我们可以仅仅使用它的代码编译功能，把类型检查能力通过编辑器来实现，或者通过 "),Cn={href:"https://www.npmjs.com/package/fork-ts-checker-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},Pn=(0,e.Uk)("fork-ts-checker-webpack-plugin"),An=(0,e.Uk)(" 这个插件在另一个进程中实现。"),On=(0,e.Uk)("我们也可以通过 "),Jn={href:"https://www.npmjs.com/package/@babel/plugin-transform-typescript",target:"_blank",rel:"noopener noreferrer"},Rn=(0,e.Uk)("@babel/plugin-transform-typescript"),Ln=(0,e.Uk)(" 来使用 TypeScript。"),In=(0,e.uE)('<blockquote><p>Webpack 5 已经默认支持了 TypeScript。在使用 Webpack 5 的时候要确保项目中不要安装 <code>@types/webpack</code> 这个包，因为会有冲突。</p></blockquote><p>有时候项目中的 TypeScript 配置有多个，比如使用 <code>extends</code> 属性 <code>&quot;extends&quot;: &quot;./tsconfig.common&quot;</code> 配置了多个配置，这时候，我们可以通过 ts-loader 的 <code>configFile</code> 来指定一个具体配置文件。</p><h2 id="使用-typescript-来编写-webpack-配置文件" tabindex="-1"><a class="header-anchor" href="#使用-typescript-来编写-webpack-配置文件" aria-hidden="true">#</a> 使用 TypeScript 来编写 Webpack 配置文件</h2><p>如果项目中使用 TypeScript，那么 Webpack 的配置文件也可以使用 TypeScript 来编写，webpack.config.ts。 Webpack 会自动检测和执行这个配置文件。</p>',4),Nn=(0,e.Uk)("要让 TypeScript 编辑的配置文件能够正确执行，我们需要安装 "),Hn={href:"https://www.npmjs.com/package/ts-node",target:"_blank",rel:"noopener noreferrer"},Fn=(0,e.Uk)("ts-node"),Dn=(0,e.Uk)(" 和 "),Kn={href:"https://www.npmjs.com/package/ts-node-dev",target:"_blank",rel:"noopener noreferrer"},Xn=(0,e.Uk)("ts-node-dev"),Mn=(0,e.Uk)(" 这两个包，因为 Webpack 需要这两个包来执行配置文件。"),zn=(0,e.uE)('<p>默认情况下，在 Webpack watc 模式或者 webpack-dev-server 中，编译错误会导致构建失败。为了避免这个问题，我们可以使用下面的配置：</p><p><strong>tsconfig.json</strong></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;ts-node&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;logError&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">&quot;transpileOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>logError</code> 非常重要，因为没有这个选项的话，ts-node 在遇到错误的时候会直接退出。<code>transpileOnly</code> 只编译，不做类型检查。因为很多时候编辑器已经可以帮助我们做了类型检查。</p><h2 id="webassembly" tabindex="-1"><a class="header-anchor" href="#webassembly" aria-hidden="true">#</a> WebAssembly</h2>',5),Vn={href:"https://developer.mozilla.org/en-US/docs/WebAssembly",target:"_blank",rel:"noopener noreferrer"},$n=(0,e.Uk)("WebAssembly"),Yn=(0,e.Uk)(" 让开发者在浏览器上运行一些非 JavaScript 代码，比如 C++。"),Zn={href:"https://github.com/webpack/webpack/tree/master/examples/wasm-simple",target:"_blank",rel:"noopener noreferrer"},Gn=(0,e.Uk)("wasm-simple"),Qn=(0,e.Uk)(" 和 "),ns={href:"https://github.com/webpack/webpack/tree/master/examples/wasm-complex",target:"_blank",rel:"noopener noreferrer"},ss=(0,e.Uk)("wasm-complex"),as=(0,e.Uk)(" 是两个官方示例。"),es=(0,e.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webpack 默认支持 JavaScript，Babel 工具可以帮助我们根据不同浏览器定制构建输出。</p><p>Babel 给我们提供了针对不同浏览器定制转换代码的能力。@babel/preset-env 可以根据 <code>.browserslistrc</code> 的定义决定哪些特性要编译，需要使用哪些 polyfill.</p><p>借助于 Babel，我们可以使用还处在试验阶段的语言特性。Babel 有很多 preset 和 插件来定制使用。</p><p>我们可以根据不同环境定制不同的 Babel 能力。我们需要在不同环境中确保使用正确的 preset 和插件。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',6),ps={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",o,[l,(0,e.Wm)(a)]),c]),r,(0,e.Wm)("p",null,[u,(0,e.Wm)("a",i,[k,(0,e.Wm)(a)]),b]),m,(0,e.Wm)("p",null,[d,(0,e.Wm)("a",g,[h,(0,e.Wm)(a)]),w,_,W]),f,(0,e.Wm)("p",null,[v,y,x,U,(0,e.Wm)("a",q,[j,(0,e.Wm)(a)]),E,S,B,(0,e.Wm)("a",T,[C,(0,e.Wm)(a)]),P]),A,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[O,(0,e.Wm)("a",J,[R,(0,e.Wm)(a)]),L])]),I,(0,e.Wm)("p",null,[N,H,(0,e.Wm)("a",F,[D,(0,e.Wm)(a)]),K,X,M,(0,e.Wm)("a",z,[V,(0,e.Wm)(a)]),$,Y,Z]),G,Q,nn,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",sn,[an,(0,e.Wm)(a)]),en,pn,tn,on,ln]),(0,e.Wm)("li",null,[(0,e.Wm)("a",cn,[rn,(0,e.Wm)(a)]),un,kn,bn])]),(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[mn,(0,e.Wm)("a",dn,[gn,(0,e.Wm)(a)]),hn,(0,e.Wm)("a",wn,[_n,(0,e.Wm)(a)]),Wn])]),fn,(0,e.Wm)("p",null,[vn,(0,e.Wm)("a",yn,[xn,(0,e.Wm)(a)]),Un]),qn,jn,(0,e.Wm)("p",null,[En,(0,e.Wm)("a",Sn,[Bn,(0,e.Wm)(a)]),Tn,(0,e.Wm)("a",Cn,[Pn,(0,e.Wm)(a)]),An]),(0,e.Wm)("p",null,[On,(0,e.Wm)("a",Jn,[Rn,(0,e.Wm)(a)]),Ln]),In,(0,e.Wm)("p",null,[Nn,(0,e.Wm)("a",Hn,[Fn,(0,e.Wm)(a)]),Dn,(0,e.Wm)("a",Kn,[Xn,(0,e.Wm)(a)]),Mn]),zn,(0,e.Wm)("p",null,[(0,e.Wm)("a",Vn,[$n,(0,e.Wm)(a)]),Yn]),(0,e.Wm)("p",null,[(0,e.Wm)("a",Zn,[Gn,(0,e.Wm)(a)]),Qn,(0,e.Wm)("a",ns,[ss,(0,e.Wm)(a)]),as]),es],64)}}}}]);