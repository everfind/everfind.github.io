"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[5918],{7429:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-61a8505c",path:"/courses/webpack/",title:"Webpack 学习笔记",lang:"zh-CN",frontmatter:{title:"Webpack 学习笔记",description:"Webpack 是现行主流的构建工具，在前端开发工作中扮演着不可或缺的角色。本系列会从零开始，根据不同的使用场景设置相应的配置，最终完成应用构建。",sidebar:!1,date:"2021-01-02T00:00:00.000Z"},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],filePathRelative:"courses/webpack/README.md",articleList:[{key:"v-ca1d5524",path:"/courses/webpack/3rd-lib.html",title:"处理第三方包",lang:"zh-CN",frontmatter:{title:"处理第三方包",description:"介绍 Webpack 中如何处理第三方包",keywords:["Webpack"],date:"2021-02-03T00:00:00.000Z",key:32},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"resolve.alias",slug:"resolve-alias",children:[]},{level:2,title:"resolve.modules",slug:"resolve-modules",children:[]},{level:2,title:"resolve.extensions",slug:"resolve-extensions",children:[]},{level:2,title:"resolve.plugins",slug:"resolve-plugins",children:[]},{level:2,title:"不处理某些包",slug:"不处理某些包",children:[]},{level:2,title:"处理全局变量",slug:"处理全局变量",children:[{level:3,title:"注入全局变量",slug:"注入全局变量",children:[]}]},{level:2,title:"解析全局变量",slug:"解析全局变量",children:[]},{level:2,title:"暴露全局变量",slug:"暴露全局变量",children:[]},{level:2,title:"删除未使用的模块",slug:"删除未使用的模块",children:[]},{level:2,title:"处理预构建的包",slug:"处理预构建的包",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n有些时候，一些 npm 包并没有按照规范的方式打包，或者本身 npm 包比较老旧，这时候我们需要修改一些配置，使得 Webpack 正确的处理这些包。\n\n## resolve.alias\n\n有些 npm 包不怎么规范，`package.json` 中 `main` 字段没有指向正确的文件。或者我们想让 Webpack 加载其他版本的构建结果。此时我们需要通过 `resolve.alias` 来重新指定模块路径。\n\n```js\nconst config = {\n  resolve: {\n    alias: {\n      demo: path.resolve(__dirname, 'node_modules/demo/dist/demo.js'),\n    },\n  },\n};\n```\n\n上面的配置告诉 Webpack 当遇到 `demo` 开头的模块时，使用指定的路径来寻找。我们还可以将 `demo` 配置成一个正则来匹配。\n\n比如，我们可以通过 `resolve.alias` 来加载 React 已经构建好的 `.min.js` 版本，放弃一些 `propTypes` 校验，来减小构建大小。\n\n> 在 loader 中，我们可以通过 `resolveLoader.alias` 实现同样的效果。\n\n## resolve.modules\n\n我们可以通过 `resolve.modules` 来修改 Webpack 查找模块的地址。比如，默认情况下，Webpack 只会在 `node_modules` 目录下查找模块，我们通过如下配置\n\n```js\nconst config = { resolve: { modules: ['demo', 'node_modules'] } };\n```\n\n使得 Webpack 优先从 `demo` 目录下查找，找不到再去 `node_modules` 目录下查找模块。\n\n在大项目中，如果我们想自定义查找模块的地址，这个配置项非常有用。\n\n## resolve.extensions\n\n默认情况下，Webpack 只会解析 `.js`，`.json` 和 `.mjs` 文件，我们可以通过 `resolve.extensions` 来修改。\n\n```js\nconst config = { resolve: { extensions: ['.js', '.jsx'] } };\n```\n\n这个例子使得 Webpack 可以解析 `.jsx` 文件。\n\n## resolve.plugins\n\n默认情况下，Webpack 会使用目录下的 `index` 文件来作为模块的返回，`resolve.plugins` 可以帮助我们对这一行为进行定制。[directory-named-webpack-plugin](https://www.npmjs.com/package/directory-named-webpack-plugin) 就是一个很好的例子，通过这个插件，我们可以将 `import foo from \"./foo\";` 变成 `import foo from \"./foo/foo.js\";`。\n\n> [babel-plugin-module-resolver](https://www.npmjs.com/package/babel-plugin-module-resolver) 这个插件功能类似，只是为 Babel 提供服务。\n\n## 不处理某些包\n\n一些第三方包，比如 JQuery 通常都是通过 CDN 部署，页面直接引用即可。因此，在 Webpack 配置中我们需要将这一类的包标识为 `external`。\n\n```js\nconst config = { externals: { jquery: 'jquery' } };\n```\n\n有些时候我们为了防止 CDN 出现问题，我们还需要做一些防备手段，当从 CDN 加载失败以后，可以从本服务器进行加载。\n\n```html\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"><\/script>\n<script>\n  window.jQuery ||\n    document.write('<script src=\"js/jquery-3.1.1.min.js\"><\\/script>');\n<\/script>\n```\n\n> 从 Webpack 5 开始，支持设置 [externalsType](https://webpack.js.org/configuration/externals/#externalstype) 字段，来自定义加载模块的方式。比如设置为 `\"promise\"`，则会异步加载，设置为 `\"import\"` 则会使用 `import()` 的方式加载。我们还可以针对每一个包做自定义，比如我们可以配置异步加载 JQuery， `[\"jquery\", \"promise\"]`。\n\n## 处理全局变量\n\n有一些包会使用全局变量，比如 JQuery 中会使用 `$`。Webpack 提供了一些处理这些全局变量的方法。\n\n### 注入全局变量\n\n[imports-loader](https://www.npmjs.com/package/imports-loader) 可以帮助我们将全局变量注入到我们的模块中。在下面的例子中，Webpack 会为每一个模块都注入 `import $ from 'jquery';`。\n\n```js\nconst config = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        loader: 'imports-loader',\n        options: {\n          imports: ['default jquery $'],\n        },\n      },\n    ],\n  },\n};\n```\n\n## 解析全局变量\n\nWebapck 的 `ProvidePlugin` 插件可以帮助 Webpack 正确的处理模块中的全局变量。\n\n```js\nconst config = {\n  plugins: [new webpack.ProvidePlugin({ $: 'jquery' })],\n};\n```\n\n## 暴露全局变量\n\n有时候我们需要将模块内的一些变量暴露到全局中给其他模块使用。[expose-loader](https://www.npmjs.com/package/expose-loader) 可以实现这个功能。\n\n```js\nconst config = {\n  test: require.resolve('react'),\n  loader: 'expose-loader',\n  options: {\n    exposes: ['React'],\n  },\n};\n```\n\n> 如果你需要在暴露全局变量的时候执行一些逻辑，则可以使用 [script-loader](https://www.npmjs.com/package/script-loader)。\n\n## 删除未使用的模块\n\n有些模块会携带很多我们不需要的信息。比如 `moment` 这个包，会带有很多 `locale` 文件，这会增加我们的构建大小。我们可以使用 Webpack 的`IgnorePlugin` 这个插件来忽略这些文件。\n\n```js\nconst config = {\n  plugins: [\n    new webpack.IgnorePlugin({\n      resourceRegExp: /^\\.\\/locale$/,\n      contextRegExp: /moment$/,\n    }),\n  ],\n};\n```\n\n如果需要加载某一个特殊的 `locale` 文件，则可以使用 `ContextReplacementPlugin` 插件。\n\n```js\nconst config = {\n  plugins: [\n    new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /de|fi/),\n  ],\n};\n```\n\n## 处理预构建的包\n\nWebpack 在处理一些依赖包的时候，如果使用了预构建（已经构建完毕并压缩过等）的版本，则会报下面这样的错误。\n\n```\nWARNING in ../~/jasmine-promises/dist/jasmine-promises.js\nCritical dependencies:\n1:113-120 This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\n @ ../~/jasmine-promises/dist/jasmine-promises.js 1:113-120\n```\n\n通常情况下，我们有两种方法处理。一种是将解析包的路径指向包的源代码版本。另一种是使用 `module.noParse` 来跳过处理这个包。\n\n```js\nconst config = {\n  module: { noParse: /node_modules\\/demo\\/index.js/ },\n};\n```\n\n## 总结\n\n我们在构建的时候可能会碰到各种各样因为依赖包导致的构建问题。Webpack 提供了一些处理这些依赖包的方法，我们可以根据需要使用。\n\n通过 Webpack 我们还可以使用其他包中的全局变量，也可以将自己模块内的信息以全局变量的形式暴露出去。\n",contentRendered:'<p>有些时候，一些 npm 包并没有按照规范的方式打包，或者本身 npm 包比较老旧，这时候我们需要修改一些配置，使得 Webpack 正确的处理这些包。</p>\n<h2 id="resolve-alias" tabindex="-1"><a class="header-anchor" href="#resolve-alias" aria-hidden="true">#</a> resolve.alias</h2>\n<p>有些 npm 包不怎么规范，<code>package.json</code> 中 <code>main</code> 字段没有指向正确的文件。或者我们想让 Webpack 加载其他版本的构建结果。此时我们需要通过 <code>resolve.alias</code> 来重新指定模块路径。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      demo<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'node_modules/demo/dist/demo.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的配置告诉 Webpack 当遇到 <code>demo</code> 开头的模块时，使用指定的路径来寻找。我们还可以将 <code>demo</code> 配置成一个正则来匹配。</p>\n<p>比如，我们可以通过 <code>resolve.alias</code> 来加载 React 已经构建好的 <code>.min.js</code> 版本，放弃一些 <code>propTypes</code> 校验，来减小构建大小。</p>\n<blockquote>\n<p>在 loader 中，我们可以通过 <code>resolveLoader.alias</code> 实现同样的效果。</p>\n</blockquote>\n<h2 id="resolve-modules" tabindex="-1"><a class="header-anchor" href="#resolve-modules" aria-hidden="true">#</a> resolve.modules</h2>\n<p>我们可以通过 <code>resolve.modules</code> 来修改 Webpack 查找模块的地址。比如，默认情况下，Webpack 只会在 <code>node_modules</code> 目录下查找模块，我们通过如下配置</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> resolve<span class="token operator">:</span> <span class="token punctuation">{</span> modules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token string">\'node_modules\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使得 Webpack 优先从 <code>demo</code> 目录下查找，找不到再去 <code>node_modules</code> 目录下查找模块。</p>\n<p>在大项目中，如果我们想自定义查找模块的地址，这个配置项非常有用。</p>\n<h2 id="resolve-extensions" tabindex="-1"><a class="header-anchor" href="#resolve-extensions" aria-hidden="true">#</a> resolve.extensions</h2>\n<p>默认情况下，Webpack 只会解析 <code>.js</code>，<code>.json</code> 和 <code>.mjs</code> 文件，我们可以通过 <code>resolve.extensions</code> 来修改。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> resolve<span class="token operator">:</span> <span class="token punctuation">{</span> extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.jsx\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这个例子使得 Webpack 可以解析 <code>.jsx</code> 文件。</p>\n<h2 id="resolve-plugins" tabindex="-1"><a class="header-anchor" href="#resolve-plugins" aria-hidden="true">#</a> resolve.plugins</h2>\n<p>默认情况下，Webpack 会使用目录下的 <code>index</code> 文件来作为模块的返回，<code>resolve.plugins</code> 可以帮助我们对这一行为进行定制。<a href="https://www.npmjs.com/package/directory-named-webpack-plugin" target="_blank" rel="noopener noreferrer">directory-named-webpack-plugin<OutboundLink/></a> 就是一个很好的例子，通过这个插件，我们可以将 <code>import foo from &quot;./foo&quot;;</code> 变成 <code>import foo from &quot;./foo/foo.js&quot;;</code>。</p>\n<blockquote>\n<p><a href="https://www.npmjs.com/package/babel-plugin-module-resolver" target="_blank" rel="noopener noreferrer">babel-plugin-module-resolver<OutboundLink/></a> 这个插件功能类似，只是为 Babel 提供服务。</p>\n</blockquote>\n<h2 id="不处理某些包" tabindex="-1"><a class="header-anchor" href="#不处理某些包" aria-hidden="true">#</a> 不处理某些包</h2>\n<p>一些第三方包，比如 JQuery 通常都是通过 CDN 部署，页面直接引用即可。因此，在 Webpack 配置中我们需要将这一类的包标识为 <code>external</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> externals<span class="token operator">:</span> <span class="token punctuation">{</span> jquery<span class="token operator">:</span> <span class="token string">\'jquery\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>有些时候我们为了防止 CDN 出现问题，我们还需要做一些防备手段，当从 CDN 加载失败以后，可以从本服务器进行加载。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  window<span class="token punctuation">.</span>jQuery <span class="token operator">||</span>\n    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">\'&lt;script src="js/jquery-3.1.1.min.js">&lt;\\/script>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote>\n<p>从 Webpack 5 开始，支持设置 <a href="https://webpack.js.org/configuration/externals/#externalstype" target="_blank" rel="noopener noreferrer">externalsType<OutboundLink/></a> 字段，来自定义加载模块的方式。比如设置为 <code>&quot;promise&quot;</code>，则会异步加载，设置为 <code>&quot;import&quot;</code> 则会使用 <code>import()</code> 的方式加载。我们还可以针对每一个包做自定义，比如我们可以配置异步加载 JQuery， <code>[&quot;jquery&quot;, &quot;promise&quot;]</code>。</p>\n</blockquote>\n<h2 id="处理全局变量" tabindex="-1"><a class="header-anchor" href="#处理全局变量" aria-hidden="true">#</a> 处理全局变量</h2>\n<p>有一些包会使用全局变量，比如 JQuery 中会使用 <code>$</code>。Webpack 提供了一些处理这些全局变量的方法。</p>\n<h3 id="注入全局变量" tabindex="-1"><a class="header-anchor" href="#注入全局变量" aria-hidden="true">#</a> 注入全局变量</h3>\n<p><a href="https://www.npmjs.com/package/imports-loader" target="_blank" rel="noopener noreferrer">imports-loader<OutboundLink/></a> 可以帮助我们将全局变量注入到我们的模块中。在下面的例子中，Webpack 会为每一个模块都注入 <code>import $ from \'jquery\';</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">\'imports-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'default jquery $\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="解析全局变量" tabindex="-1"><a class="header-anchor" href="#解析全局变量" aria-hidden="true">#</a> 解析全局变量</h2>\n<p>Webapck 的 <code>ProvidePlugin</code> 插件可以帮助 Webpack 正确的处理模块中的全局变量。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> $<span class="token operator">:</span> <span class="token string">\'jquery\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="暴露全局变量" tabindex="-1"><a class="header-anchor" href="#暴露全局变量" aria-hidden="true">#</a> 暴露全局变量</h2>\n<p>有时候我们需要将模块内的一些变量暴露到全局中给其他模块使用。<a href="https://www.npmjs.com/package/expose-loader" target="_blank" rel="noopener noreferrer">expose-loader<OutboundLink/></a> 可以实现这个功能。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'react\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  loader<span class="token operator">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> <span class="token punctuation">{</span>\n    exposes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'React\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote>\n<p>如果你需要在暴露全局变量的时候执行一些逻辑，则可以使用 <a href="https://www.npmjs.com/package/script-loader" target="_blank" rel="noopener noreferrer">script-loader<OutboundLink/></a>。</p>\n</blockquote>\n<h2 id="删除未使用的模块" tabindex="-1"><a class="header-anchor" href="#删除未使用的模块" aria-hidden="true">#</a> 删除未使用的模块</h2>\n<p>有些模块会携带很多我们不需要的信息。比如 <code>moment</code> 这个包，会带有很多 <code>locale</code> 文件，这会增加我们的构建大小。我们可以使用 Webpack 的<code>IgnorePlugin</code> 这个插件来忽略这些文件。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      resourceRegExp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      contextRegExp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果需要加载某一个特殊的 <code>locale</code> 文件，则可以使用 <code>ContextReplacementPlugin</code> 插件。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment[\\/\\\\]locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">de|fi</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="处理预构建的包" tabindex="-1"><a class="header-anchor" href="#处理预构建的包" aria-hidden="true">#</a> 处理预构建的包</h2>\n<p>Webpack 在处理一些依赖包的时候，如果使用了预构建（已经构建完毕并压缩过等）的版本，则会报下面这样的错误。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>WARNING in ../~/jasmine-promises/dist/jasmine-promises.js\nCritical dependencies:\n1:113-120 This seems to be a pre-built javascript file. Though this is possible, it\'s not recommended. Try to require the original source to get better results.\n @ ../~/jasmine-promises/dist/jasmine-promises.js 1:113-120\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通常情况下，我们有两种方法处理。一种是将解析包的路径指向包的源代码版本。另一种是使用 <code>module.noParse</code> 来跳过处理这个包。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span> noParse<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules\\/demo\\/index.js</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>我们在构建的时候可能会碰到各种各样因为依赖包导致的构建问题。Webpack 提供了一些处理这些依赖包的方法，我们可以根据需要使用。</p>\n<p>通过 Webpack 我们还可以使用其他包中的全局变量，也可以将自己模块内的信息以全局变量的形式暴露出去。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-02-03",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/3rd-lib.html",pathLocale:"/",permalink:null,slug:"3rd-lib",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/3rd-lib.md",filePathRelative:"courses/webpack/3rd-lib.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/3rd-lib.html.vue",componentFilePathRelative:"pages/courses/webpack/3rd-lib.html.vue",componentFileChunkName:"v-ca1d5524",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/3rd-lib.html.js",dataFilePathRelative:"pages/courses/webpack/3rd-lib.html.js",dataFileChunkName:"v-ca1d5524",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/3rd-lib.html",htmlFilePathRelative:"courses/webpack/3rd-lib.html"},{key:"v-1f085a99",path:"/courses/webpack/autoprefixer.html",title:"给样式自动添加浏览器前缀",lang:"zh-CN",frontmatter:{title:"给样式自动添加浏览器前缀",description:"介绍 Webpack 如何给样式自动添加浏览器前缀",keywords:["Webpack"],date:"2021-01-10T00:00:00.000Z",key:8},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"设置自动添加前缀",slug:"设置自动添加前缀",children:[]},{level:2,title:"定义需要支持的浏览器列表",slug:"定义需要支持的浏览器列表",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n由于浏览器的原因，很多样式在不同浏览器上都会有一些特殊前缀。我们可以通过 PostCSS 和 [autoprefixer](https://www.npmjs.com/package/autoprefixer) 插件来实现自动添加前缀. autoprefixer 利用了 [Can I Use](https://caniuse.com/) 这个服务来获取各种样式规则对应的前缀信息。\n\n## 设置自动添加前缀\n\n安装 postcss-loader 和 autoprefixer，\n\n```bash\nnpm add postcss-loader autoprefixer --develop\n```\n\n添加配置：\n\n**webpack.parts.js**\n\n```js\nexports.autoprefix = () => ({\n  loader: 'postcss-loader',\n  options: {\n    postcssOptions: { plugins: [require('autoprefixer')()] },\n  },\n});\n```\n\n**webpack.config.js**\n\n```js\n// const cssLoaders = [parts.tailwind()]\nconst cssLoaders = [parts.autoprefix(), parts.tailwind()];\n```\n\n## 定义需要支持的浏览器列表\n\nautoprefixer 需要一个 [browserslist](https://www.npmjs.com/package/browserslist) 定义来知道需要支持哪些浏览器。\n\n在项目中添加一个 `.browserslistrc` 文件，autoprefixer 会读取这个文件。\n\n**.browserslistrc**\n\n```\n> 1% # Browser usage over 1%\nLast 2 versions # Or last two versions\nIE 8 # Or IE 8\n```\n\n现在执行构建，`npm run build`, 查看构建输出结果，我们可以看到样式类已经支持了一些老旧浏览器了。\n\n> 我们可以通过 [Stylelint](http://stylelint.io/) 来给样式文件添加 lint 规则。设置方式与 autoprefixer 相同。\n\n## 总结\n\n自动添加前缀极大的简化了我们的样式开发工作，我们可以通过 `.browserslistrc` 文件来指定需要支持的浏览器。\n\n我们通过 autoprefixer 这个 PostCSS 插件来实现自动添加前缀。\n\n通过 `.browserslistrc` 来指定需要支持的浏览器版本。\n\n`.browserslistrc` 是一个标准文件，除了 autoprefixer 以外，很多其他工具也支持通过这个文件读取支持的浏览器信息。\n",contentRendered:'<p>由于浏览器的原因，很多样式在不同浏览器上都会有一些特殊前缀。我们可以通过 PostCSS 和 <a href="https://www.npmjs.com/package/autoprefixer" target="_blank" rel="noopener noreferrer">autoprefixer<OutboundLink/></a> 插件来实现自动添加前缀. autoprefixer 利用了 <a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer">Can I Use<OutboundLink/></a> 这个服务来获取各种样式规则对应的前缀信息。</p>\n<h2 id="设置自动添加前缀" tabindex="-1"><a class="header-anchor" href="#设置自动添加前缀" aria-hidden="true">#</a> 设置自动添加前缀</h2>\n<p>安装 postcss-loader 和 autoprefixer，</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> postcss-loader autoprefixer --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加配置：</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">autoprefix</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  loader<span class="token operator">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> <span class="token punctuation">{</span>\n    postcssOptions<span class="token operator">:</span> <span class="token punctuation">{</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'autoprefixer\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// const cssLoaders = [parts.tailwind()]</span>\n<span class="token keyword">const</span> cssLoaders <span class="token operator">=</span> <span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">autoprefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parts<span class="token punctuation">.</span><span class="token function">tailwind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="定义需要支持的浏览器列表" tabindex="-1"><a class="header-anchor" href="#定义需要支持的浏览器列表" aria-hidden="true">#</a> 定义需要支持的浏览器列表</h2>\n<p>autoprefixer 需要一个 <a href="https://www.npmjs.com/package/browserslist" target="_blank" rel="noopener noreferrer">browserslist<OutboundLink/></a> 定义来知道需要支持哪些浏览器。</p>\n<p>在项目中添加一个 <code>.browserslistrc</code> 文件，autoprefixer 会读取这个文件。</p>\n<p><strong>.browserslistrc</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>> 1% # Browser usage over 1%\nLast 2 versions # Or last two versions\nIE 8 # Or IE 8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在执行构建，<code>npm run build</code>, 查看构建输出结果，我们可以看到样式类已经支持了一些老旧浏览器了。</p>\n<blockquote>\n<p>我们可以通过 <a href="http://stylelint.io/" target="_blank" rel="noopener noreferrer">Stylelint<OutboundLink/></a> 来给样式文件添加 lint 规则。设置方式与 autoprefixer 相同。</p>\n</blockquote>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>自动添加前缀极大的简化了我们的样式开发工作，我们可以通过 <code>.browserslistrc</code> 文件来指定需要支持的浏览器。</p>\n<p>我们通过 autoprefixer 这个 PostCSS 插件来实现自动添加前缀。</p>\n<p>通过 <code>.browserslistrc</code> 来指定需要支持的浏览器版本。</p>\n<p><code>.browserslistrc</code> 是一个标准文件，除了 autoprefixer 以外，很多其他工具也支持通过这个文件读取支持的浏览器信息。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-10",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/autoprefixer.html",pathLocale:"/",permalink:null,slug:"autoprefixer",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/autoprefixer.md",filePathRelative:"courses/webpack/autoprefixer.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/autoprefixer.html.vue",componentFilePathRelative:"pages/courses/webpack/autoprefixer.html.vue",componentFileChunkName:"v-1f085a99",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/autoprefixer.html.js",dataFilePathRelative:"pages/courses/webpack/autoprefixer.html.js",dataFileChunkName:"v-1f085a99",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/autoprefixer.html",htmlFilePathRelative:"courses/webpack/autoprefixer.html"},{key:"v-eff086d2",path:"/courses/webpack/build-analyse.html",title:"构建数据分析",lang:"zh-CN",frontmatter:{title:"构建数据分析",description:"介绍 Webpack 中如何分析构建数据",keywords:["Webpack"],date:"2021-01-24T00:00:00.000Z",key:22},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"配置 Webpack",slug:"配置-webpack",children:[]},{level:2,title:"Node API",slug:"node-api",children:[]},{level:2,title:"设置性能预估参数",slug:"设置性能预估参数",children:[]},{level:2,title:"依赖分析",slug:"依赖分析",children:[]},{level:2,title:"组成分析",slug:"组成分析",children:[]},{level:2,title:"处理输出信息的插件",slug:"处理输出信息的插件",children:[]},{level:2,title:"分析未被使用的文件",slug:"分析未被使用的文件",children:[]},{level:2,title:"重复模块分析",slug:"重复模块分析",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n通过分析 Webpack 构建过程中的一些统计数据，我们可以更清楚地了解 Webpack 的一些细节。在这些数据中，我们可以看到构建输出的 bundle 的组成部分，项目中哪些模块是可以被删除的，哪些模块是重复的等信息。\n\n## 配置 Webpack\n\n我们可以指定 `--json` 参数来让 Webpack 输出构建过程中的统计数据。\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"build:stats\": \"wp --mode production --json > stats.json\"\n  }\n}\n```\n\n此时执行 `npm run build:stats`，在构建完成后，我们可以在项目的根目录下发现 `stats.json` 这个文件。这个文件里面就包含了 Webpack 构建过程中的统计数据，我们可以通过一些工具来分析这些数据。\n\n> 如果想要捕捉与时间相关的数据的话，需要在 Webpack 配置中设置 `profile` 为 `true`。[0x](https://www.npmjs.com/package/0x) 这个库可以生成一张 Webpack 构建过程的火焰图来分析哪个阶段比较耗时。\n\n## Node API\n\nWebpack 的构建数据也可以通过 Node API 搜集，因为在构建数据中可能存在一些错误，我们需要对这些错误做一些处理，代码如下：\n\n```js\nconst webpack = require('webpack');\nconst config = require('./webpack.config.js')('production');\n\nwebpack(config, (err, stats) => {\n  if (err) {\n    return console.error(err);\n  }\n\n  if (stats.hasErrors()) {\n    return console.error(stats.toString('errors-only'));\n  }\n\n  console.log(stats);\n});\n```\n\n如果我们想对构建数据做进一步的处理，Node API 是一个非常合适的方式。\n\n> 如果我们想将 `stats` 的数据以 JSON 格式输出，则可以使用 `stats.toJson()`，`stats.toJson('verbose')` 会输出更多的信息。\n\n我们也可以通过一些插件来处理这些数据，比如 [webpack-stats-plugin](https://www.npmjs.com/package/webpack-stats-plugin).通过这个插件，我们可以对输出数据做一些处理，比如选择性的输出某一些特定数据。\n\n[webpack-bundle-tracker](https://www.npmjs.com/package/webpack-bundle-tracker) 可以在 Webpack 还在构建时就搜集一些数据，具体可以参考插件文档。\n\n## 设置性能预估参数\n\n在 Webpack 中，我们可以通过设置一些预估参数来限制输出 bundle 的大小。\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  ...{\n    performance: {\n      hints: 'warning', // \"error\" or false 也是可选值\n      maxEntrypointSize: 50000, // 单位为字节, 默认 250k\n      maxAssetSize: 100000, // 单位为字节\n    },\n  },\n]);\n```\n\n如果项目构建输出超过了限制，我们可以看到类似下面的信息：\n\n```\nWARNING in entrypoint size limit: The following entrypoint(s) combined asset size exceeds the recommended limit (48.8 KiB). This can impact web performance.\nEntrypoints:\n  main (131 KiB)\n      runtime.41f8.js\n      vendor.1622.js\n      main.aca1.css\n      main.eddd.js\n```\n\n在 CI 中，我们可以设置 `hints: \"error\"` 来使得当输出大小超过限制时直接构建失败。\n\n## 依赖分析\n\n我们可以可视化的展示各个模块间的依赖关系。下面很多插件都可以完成这个功能。\n\n- [官方提供的分析工具](https://github.com/webpack/analyse)\n- [webpack-deps-tree](https://restrry.github.io/webpack-deps-tree/static/) 展示了 项目的模块图，我们可以清晰的看到各模块间的依赖关系。\n- [circular-dependency-plugin](https://www.npmjs.com/package/circular-dependency-plugin) 可以看到项目中是否有循环依赖。\n- [dependency-cruiser](https://www.npmjs.com/package/dependency-cruiser) 可以不依赖与构建工具来分析各模块的依赖关系。\n- [madge](https://www.npmjs.com/package/madge) 同样是一个不依赖构建工具的依赖关系分析工具。\n\n## 组成分析\n\n饼图、树图等可视化工具可帮助我们清晰的看到 Bundle 的组成。\n\n![饼图](/courses/webpack/pie-c.png)\n\n[webpack-visualizer](https://chrisbateman.github.io/webpack-visualizer/) 通过饼图的形式展示了 bundle 是由哪些模块组成的，各个模块的大小等。[webpack-chart/](https://alexkuz.github.io/webpack-chart/) 也实现了同样的功能。\n\n![树图](/courses/webpack/tree-c.png)\n\n[webpack-bundle-analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer) 会生成一张可缩放的树图，如上图所示。\n\n[webpack-bundle-size-analyzer](https://www.npmjs.com/package/webpack-bundle-size-analyzer) 可以输出构建数据各种资源的大小。比如:\n\n```\n$ webpack-bundle-size-analyzer stats.json\nreact: 93.99 KB (74.9%)\npurecss: 15.56 KB (12.4%)\nstyle-loader: 6.99 KB (5.57%)\nfbjs: 5.02 KB (4.00%)\nobject-assign: 1.95 KB (1.55%)\ncss-loader: 1.47 KB (1.17%)\n<self>: 572 B (0.445%)\n```\n\n## 处理输出信息的插件\n\n有很多插件可以处理 Webpack 的输出信息，使得更易读、更方便。\n\n- [webpackbar](https://www.npmjs.com/package/webpackbar) 可以被用来跟踪 Webpack 的构建进度。\n- `webpack.ProgressPlugin` 是内置的展示构建进度的插件。\n- [webpack-dashboard](https://www.npmjs.com/package/webpack-dashboard) 可以基于 Webpack 的输出在命令行展示一个看板信息。\n\n## 分析未被使用的文件\n\n[unused-webpack-plugin](https://www.npmjs.com/package/unused-webpack-plugin) 可以分析出项目中哪些模块是未被使用的。[remnants](https://www.npmjs.com/package/remnants) 同样可以分析未被使用的模块，同时它可以脱离于 Webpack 独立使用。\n\n## 重复模块分析\n\n有很多插件可以分析出项目中的重复模块。\n\n- [inspectpack](https://www.npmjs.com/package/inspectpack) 既可以通过插件的形式与 Webpack 一起使用，又可以在命令行直接使用。\n- [find-duplicate-dependencies](https://www.npmjs.com/package/find-duplicate-dependencies) 可以找出项目中重复依赖的 npm 包。\n- [depcheck](https://www.npmjs.com/package/depcheck) 更进一步，还会找出项目中未被使用的依赖和使用了但是没有安装的依赖。\n\n## 总结\n\n我们可以将 Webpack 构建数据输出到一个 JSON 文件中。这些构建数据包含了 bundle 的组成以及构建时间等信息。\n\n有很多工具可以分析这个构建数据，我们可以可视化的查看 bundle 的组成等信息。\n\n我们可以通过设置性能预估参数来控制输出的 bundle 大小，从而优化性能。\n\n了解 bundle 的组成可以帮助我们优化 bundle 的大小。\n",contentRendered:'<p>通过分析 Webpack 构建过程中的一些统计数据，我们可以更清楚地了解 Webpack 的一些细节。在这些数据中，我们可以看到构建输出的 bundle 的组成部分，项目中哪些模块是可以被删除的，哪些模块是重复的等信息。</p>\n<h2 id="配置-webpack" tabindex="-1"><a class="header-anchor" href="#配置-webpack" aria-hidden="true">#</a> 配置 Webpack</h2>\n<p>我们可以指定 <code>--json</code> 参数来让 Webpack 输出构建过程中的统计数据。</p>\n<p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build:stats"</span><span class="token operator">:</span> <span class="token string">"wp --mode production --json > stats.json"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行 <code>npm run build:stats</code>，在构建完成后，我们可以在项目的根目录下发现 <code>stats.json</code> 这个文件。这个文件里面就包含了 Webpack 构建过程中的统计数据，我们可以通过一些工具来分析这些数据。</p>\n<blockquote>\n<p>如果想要捕捉与时间相关的数据的话，需要在 Webpack 配置中设置 <code>profile</code> 为 <code>true</code>。<a href="https://www.npmjs.com/package/0x" target="_blank" rel="noopener noreferrer">0x<OutboundLink/></a> 这个库可以生成一张 Webpack 构建过程的火焰图来分析哪个阶段比较耗时。</p>\n</blockquote>\n<h2 id="node-api" tabindex="-1"><a class="header-anchor" href="#node-api" aria-hidden="true">#</a> Node API</h2>\n<p>Webpack 的构建数据也可以通过 Node API 搜集，因为在构建数据中可能存在一些错误，我们需要对这些错误做一些处理，代码如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">\'production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">\'errors-only\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果我们想对构建数据做进一步的处理，Node API 是一个非常合适的方式。</p>\n<blockquote>\n<p>如果我们想将 <code>stats</code> 的数据以 JSON 格式输出，则可以使用 <code>stats.toJson()</code>，<code>stats.toJson(\'verbose\')</code> 会输出更多的信息。</p>\n</blockquote>\n<p>我们也可以通过一些插件来处理这些数据，比如 <a href="https://www.npmjs.com/package/webpack-stats-plugin" target="_blank" rel="noopener noreferrer">webpack-stats-plugin<OutboundLink/></a>.通过这个插件，我们可以对输出数据做一些处理，比如选择性的输出某一些特定数据。</p>\n<p><a href="https://www.npmjs.com/package/webpack-bundle-tracker" target="_blank" rel="noopener noreferrer">webpack-bundle-tracker<OutboundLink/></a> 可以在 Webpack 还在构建时就搜集一些数据，具体可以参考插件文档。</p>\n<h2 id="设置性能预估参数" tabindex="-1"><a class="header-anchor" href="#设置性能预估参数" aria-hidden="true">#</a> 设置性能预估参数</h2>\n<p>在 Webpack 中，我们可以通过设置一些预估参数来限制输出 bundle 的大小。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token punctuation">{</span>\n    performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n      hints<span class="token operator">:</span> <span class="token string">\'warning\'</span><span class="token punctuation">,</span> <span class="token comment">// "error" or false 也是可选值</span>\n      maxEntrypointSize<span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token comment">// 单位为字节, 默认 250k</span>\n      maxAssetSize<span class="token operator">:</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token comment">// 单位为字节</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果项目构建输出超过了限制，我们可以看到类似下面的信息：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>WARNING in entrypoint size limit: The following entrypoint(s) combined asset size exceeds the recommended limit (48.8 KiB). This can impact web performance.\nEntrypoints:\n  main (131 KiB)\n      runtime.41f8.js\n      vendor.1622.js\n      main.aca1.css\n      main.eddd.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 CI 中，我们可以设置 <code>hints: &quot;error&quot;</code> 来使得当输出大小超过限制时直接构建失败。</p>\n<h2 id="依赖分析" tabindex="-1"><a class="header-anchor" href="#依赖分析" aria-hidden="true">#</a> 依赖分析</h2>\n<p>我们可以可视化的展示各个模块间的依赖关系。下面很多插件都可以完成这个功能。</p>\n<ul>\n<li><a href="https://github.com/webpack/analyse" target="_blank" rel="noopener noreferrer">官方提供的分析工具<OutboundLink/></a></li>\n<li><a href="https://restrry.github.io/webpack-deps-tree/static/" target="_blank" rel="noopener noreferrer">webpack-deps-tree<OutboundLink/></a> 展示了 项目的模块图，我们可以清晰的看到各模块间的依赖关系。</li>\n<li><a href="https://www.npmjs.com/package/circular-dependency-plugin" target="_blank" rel="noopener noreferrer">circular-dependency-plugin<OutboundLink/></a> 可以看到项目中是否有循环依赖。</li>\n<li><a href="https://www.npmjs.com/package/dependency-cruiser" target="_blank" rel="noopener noreferrer">dependency-cruiser<OutboundLink/></a> 可以不依赖与构建工具来分析各模块的依赖关系。</li>\n<li><a href="https://www.npmjs.com/package/madge" target="_blank" rel="noopener noreferrer">madge<OutboundLink/></a> 同样是一个不依赖构建工具的依赖关系分析工具。</li>\n</ul>\n<h2 id="组成分析" tabindex="-1"><a class="header-anchor" href="#组成分析" aria-hidden="true">#</a> 组成分析</h2>\n<p>饼图、树图等可视化工具可帮助我们清晰的看到 Bundle 的组成。</p>\n<p><img src="/courses/webpack/pie-c.png" alt="饼图"></p>\n<p><a href="https://chrisbateman.github.io/webpack-visualizer/" target="_blank" rel="noopener noreferrer">webpack-visualizer<OutboundLink/></a> 通过饼图的形式展示了 bundle 是由哪些模块组成的，各个模块的大小等。<a href="https://alexkuz.github.io/webpack-chart/" target="_blank" rel="noopener noreferrer">webpack-chart/<OutboundLink/></a> 也实现了同样的功能。</p>\n<p><img src="/courses/webpack/tree-c.png" alt="树图"></p>\n<p><a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer">webpack-bundle-analyzer<OutboundLink/></a> 会生成一张可缩放的树图，如上图所示。</p>\n<p><a href="https://www.npmjs.com/package/webpack-bundle-size-analyzer" target="_blank" rel="noopener noreferrer">webpack-bundle-size-analyzer<OutboundLink/></a> 可以输出构建数据各种资源的大小。比如:</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>$ webpack-bundle-size-analyzer stats.json\nreact: 93.99 KB (74.9%)\npurecss: 15.56 KB (12.4%)\nstyle-loader: 6.99 KB (5.57%)\nfbjs: 5.02 KB (4.00%)\nobject-assign: 1.95 KB (1.55%)\ncss-loader: 1.47 KB (1.17%)\n&lt;self>: 572 B (0.445%)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="处理输出信息的插件" tabindex="-1"><a class="header-anchor" href="#处理输出信息的插件" aria-hidden="true">#</a> 处理输出信息的插件</h2>\n<p>有很多插件可以处理 Webpack 的输出信息，使得更易读、更方便。</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/webpackbar" target="_blank" rel="noopener noreferrer">webpackbar<OutboundLink/></a> 可以被用来跟踪 Webpack 的构建进度。</li>\n<li><code>webpack.ProgressPlugin</code> 是内置的展示构建进度的插件。</li>\n<li><a href="https://www.npmjs.com/package/webpack-dashboard" target="_blank" rel="noopener noreferrer">webpack-dashboard<OutboundLink/></a> 可以基于 Webpack 的输出在命令行展示一个看板信息。</li>\n</ul>\n<h2 id="分析未被使用的文件" tabindex="-1"><a class="header-anchor" href="#分析未被使用的文件" aria-hidden="true">#</a> 分析未被使用的文件</h2>\n<p><a href="https://www.npmjs.com/package/unused-webpack-plugin" target="_blank" rel="noopener noreferrer">unused-webpack-plugin<OutboundLink/></a> 可以分析出项目中哪些模块是未被使用的。<a href="https://www.npmjs.com/package/remnants" target="_blank" rel="noopener noreferrer">remnants<OutboundLink/></a> 同样可以分析未被使用的模块，同时它可以脱离于 Webpack 独立使用。</p>\n<h2 id="重复模块分析" tabindex="-1"><a class="header-anchor" href="#重复模块分析" aria-hidden="true">#</a> 重复模块分析</h2>\n<p>有很多插件可以分析出项目中的重复模块。</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/inspectpack" target="_blank" rel="noopener noreferrer">inspectpack<OutboundLink/></a> 既可以通过插件的形式与 Webpack 一起使用，又可以在命令行直接使用。</li>\n<li><a href="https://www.npmjs.com/package/find-duplicate-dependencies" target="_blank" rel="noopener noreferrer">find-duplicate-dependencies<OutboundLink/></a> 可以找出项目中重复依赖的 npm 包。</li>\n<li><a href="https://www.npmjs.com/package/depcheck" target="_blank" rel="noopener noreferrer">depcheck<OutboundLink/></a> 更进一步，还会找出项目中未被使用的依赖和使用了但是没有安装的依赖。</li>\n</ul>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>我们可以将 Webpack 构建数据输出到一个 JSON 文件中。这些构建数据包含了 bundle 的组成以及构建时间等信息。</p>\n<p>有很多工具可以分析这个构建数据，我们可以可视化的查看 bundle 的组成等信息。</p>\n<p>我们可以通过设置性能预估参数来控制输出的 bundle 大小，从而优化性能。</p>\n<p>了解 bundle 的组成可以帮助我们优化 bundle 的大小。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-24",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/build-analyse.html",pathLocale:"/",permalink:null,slug:"build-analyse",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/build-analyse.md",filePathRelative:"courses/webpack/build-analyse.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/build-analyse.html.vue",componentFilePathRelative:"pages/courses/webpack/build-analyse.html.vue",componentFileChunkName:"v-eff086d2",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/build-analyse.html.js",dataFilePathRelative:"pages/courses/webpack/build-analyse.html.js",dataFileChunkName:"v-eff086d2",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/build-analyse.html",htmlFilePathRelative:"courses/webpack/build-analyse.html"},{key:"v-5dfbc298",path:"/courses/webpack/bundle-split.html",title:"Bundle Spliting",lang:"zh-CN",frontmatter:{title:"Bundle Spliting",description:"介绍 Webpack 中如何进行代码分割",keywords:["Webpack"],date:"2021-01-17T00:00:00.000Z",key:15},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加 vendor bundle",slug:"添加-vendor-bundle",children:[]},{level:2,title:"定制分割输出",slug:"定制分割输出",children:[]},{level:2,title:"分割、合并代码块",slug:"分割、合并代码块",children:[]},{level:2,title:"在入口处的 Bundle Spliting",slug:"在入口处的-bundle-spliting",children:[]},{level:2,title:"Webpack 中的代码块（Chunk）类型",slug:"webpack-中的代码块-chunk-类型",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n除了代码分割（Code Spliting）以外，Webpack 还提供了另一种优化代码加载的方式，那就是构建输出分割（Bundle Spliting）。我们通常见到的 Bundle Spliting 的例子是将所有的三方库代码都打包到一个叫 vendor 的 bundle 中。\n\n通过 Bundle Spliting，我们可以实现当应用代码发生变化的时候，浏览器只加载应用代码，应用依赖的三方库代码依然使用缓存。三方库代码发生变化同理。\n\n举个例子来说明，假如在使用 Bundle Spliting 之前，应用构建输出文件为 main.js(100 kb)。使用 Bundle Spliting 之后，应用构建输出为 app.js(10 kb), vender.js(90 kb)。这时候，当应用代码 app.js 发生变化以后，浏览器只需要加载 10 kb 代码就可以了。\n\n> 为了配合浏览器缓存，我们需要给文件都加上 hash 值，后面章节会详细讨论。\n\nBundle Splting 通过 `optimization.splitChunks.cacheGroups` 来实现。\n\n我们在 demo 项目中加入 React.\n\n```bash\nnpm add react react-dom\n```\n\n在项目中引入 React。\n\n**src/index.js**\n\n```js\nimport \"react\";\nimport \"react-dom\";\n...\n```\n\n此时执行 `npm run build`, 输出结果如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 127 KiB\n    asset main.js 127 KiB [emitted] [minimized] (name: main) 2 related assets\n    asset 958.js 183 bytes [compared for emit] [minimized] 1 related asset\n  asset main.css 7.94 KiB [compared for emit] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  Entrypoint main 135 KiB (179 KiB) = main.css 7.94 KiB main.js 127 KiB 1 auxiliary asset\n  runtime modules 6.71 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 13865 ms\n```\n\n可以看到，main.js 有 127 kb。现在来优化一下。\n\n## 添加 `vendor` bundle\n\n在 Webpack 4 之前，我们使用 `CommonsChunkPlugin` 来实现 Bundle Spliting。Webpack 4 以后，Webpack 默认支持了 Bundle Spliting，只需要添加一些配置即可。\n\n我们将 node_modules 下的代码都打包到 vendor bundle 中去。\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  ...{ optimization: { splitChunks: { chunks: 'all' } } },\n]);\n```\n\n此时，再执行 `npm run build`, 观察下输出结果。\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by status 128 KiB [emitted]\n    asset 935.js 125 KiB [emitted] [minimized] (id hint: vendors) 2 related assets\n    asset main.js 3.28 KiB [emitted] [minimized] (name: main) 1 related asset\n    asset index.html 259 bytes [emitted]\n  assets by status 8.12 KiB [compared for emit]\n    asset main.css 7.94 KiB [compared for emit] (name: main)\n    asset 958.js 183 bytes [compared for emit] [minimized] 1 related asset\n  Entrypoint main 136 KiB (181 KiB) = 935.js 125 KiB main.css 7.94 KiB main.js 3.28 KiB 2 auxiliary assets\n  runtime modules 7.81 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 13200 ms\n```\n\nmain.js 大小变成了 3.28 kb。此时，应用的 bundle 与下图类似。\n\n![Bundle Spliting](/courses/webpack/bundle-split-c.png)\n\n## 定制分割输出\n\n上面的配置可以重写如下，我们针对 node_modules 下的文件，使用更加细粒度的控制。\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  ...{\n    optimization: {\n      splitChunks: {\n        cacheGroups: {\n          commons: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            name: 'vendor',\n            chunks: 'initial',\n          },\n        },\n      },\n    },\n  },\n]);\n```\n\n> `initial` 对使用了 code spliting 的模块不生效，而 `all` 可以。\n\n从 Webpack 5 开始，我们可以基于资源类型做更多的自定义配置。\n\n```js\nconst config = {\n  optimization: {\n    splitChunks: {\n      // css/mini-extra is injected by mini-css-extract-plugin\n      minSize: { javascript: 20000, 'css/mini-extra': 10000 },\n    },\n  },\n};\n```\n\n## 分割、合并代码块\n\nWebpack 通过如下两个插件来控制最终输出的代码。\n\n- `AggressiveSplittingPlugin` 可以分割出更多更小的代码块。这个插件非常适合 HTTP/2.\n- `AggressiveMergingPlugin` 恰恰相反，会将小的代码块合并成大的代码块。\n\n下面是两个插件的配置样例\n\n```js\nconst config = {\n  plugins: [\n    new webpack.optimize.AggressiveSplittingPlugin({\n      minSize: 10000,\n      maxSize: 30000,\n    }),\n  ],\n};\n\nconst config = {\n  plugins: [\n    new AggressiveMergingPlugin({\n      minSizeReduce: 2,\n      moveToParents: true,\n    }),\n  ],\n};\n```\n\n每一个插件都有一个思考平衡点，因为如果代码块分割的越多越小，我们缓存的效果越差，同时请求也越多。\n\n`webpack.optimize` 包含了 `LimitChunkCountPlugin` 和 `MinChunkSizePlugin`，提供了针对代码块大小的更进一步的控制。\n\n## 在入口处的 Bundle Spliting\n\n从 Webpack 5 开始，我们可以在入口处（entry）使用 Bundle Spliting。\n\n```js\nconst config = {\n  entry: {\n    app: {\n      import: path.join(__dirname, 'src', 'index.js'),\n      dependOn: 'vendor',\n    },\n    vendor: ['react', 'react-dom'],\n  },\n};\n```\n\n使用了这个配置，我们可以去除 `optimization.splitChunks` 的配置了，输出效果一样。\n\n> 注意，在于 `webpack-plugin-serve` 一同使用的时候，我们需要在 `app.import` 中加入 `webpack-plugin-serve/client`。\n\n## Webpack 中的代码块（Chunk）类型\n\n在上面的例子中，我们使用了多种代码块类型。Webpack 中主要有三种代码块：\n\n- Entry Chunk， 包含 Webpack 的运行时和需要加载的模块信息表。\n- Normal chunk，不包含 Webpack 运行时，相反，这些代码块通常通过一个包装函数（比如 JSONP）动态加载。\n- Initial chunk，是只在应用初始加载的时候加载的代码块，Initial chunk 是 Normal chunk.\n\n作为用户，我们不需要严格知道每种类型的确切含义，但是要知道 Entry chunk 和 Normal chunk 的区别。\n\n## 总结\n\n我们可以通过 `optimization.splitChunks.cacheGroups` 来定义分割形式。在生产构建中，Webpack 会默认使用。\n\nvendor bundle 包含了所有来自于三方包的代码。\n\nWebpack 的一些插件提供了更细粒度的 Bundle Spliting 控制。比如 `AggressiveSplittingPlugin` 和 `AggressiveMergingPlugin`。\n\nWebpack 内部实现依赖了三种代码块类型：Entry chunk, Normal chunk 和 Initial chunk.\n",contentRendered:'<p>除了代码分割（Code Spliting）以外，Webpack 还提供了另一种优化代码加载的方式，那就是构建输出分割（Bundle Spliting）。我们通常见到的 Bundle Spliting 的例子是将所有的三方库代码都打包到一个叫 vendor 的 bundle 中。</p>\n<p>通过 Bundle Spliting，我们可以实现当应用代码发生变化的时候，浏览器只加载应用代码，应用依赖的三方库代码依然使用缓存。三方库代码发生变化同理。</p>\n<p>举个例子来说明，假如在使用 Bundle Spliting 之前，应用构建输出文件为 main.js(100 kb)。使用 Bundle Spliting 之后，应用构建输出为 app.js(10 kb), vender.js(90 kb)。这时候，当应用代码 app.js 发生变化以后，浏览器只需要加载 10 kb 代码就可以了。</p>\n<blockquote>\n<p>为了配合浏览器缓存，我们需要给文件都加上 hash 值，后面章节会详细讨论。</p>\n</blockquote>\n<p>Bundle Splting 通过 <code>optimization.splitChunks.cacheGroups</code> 来实现。</p>\n<p>我们在 demo 项目中加入 React.</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> react react-dom\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在项目中引入 React。</p>\n<p><strong>src/index.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时执行 <code>npm run build</code>, 输出结果如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 127 KiB\n    asset main.js 127 KiB [emitted] [minimized] (name: main) 2 related assets\n    asset 958.js 183 bytes [compared for emit] [minimized] 1 related asset\n  asset main.css 7.94 KiB [compared for emit] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  Entrypoint main 135 KiB (179 KiB) = main.css 7.94 KiB main.js 127 KiB 1 auxiliary asset\n  runtime modules 6.71 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 13865 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>可以看到，main.js 有 127 kb。现在来优化一下。</p>\n<h2 id="添加-vendor-bundle" tabindex="-1"><a class="header-anchor" href="#添加-vendor-bundle" aria-hidden="true">#</a> 添加 <code>vendor</code> bundle</h2>\n<p>在 Webpack 4 之前，我们使用 <code>CommonsChunkPlugin</code> 来实现 Bundle Spliting。Webpack 4 以后，Webpack 默认支持了 Bundle Spliting，只需要添加一些配置即可。</p>\n<p>我们将 node_modules 下的代码都打包到 vendor bundle 中去。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token punctuation">{</span> optimization<span class="token operator">:</span> <span class="token punctuation">{</span> splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span> chunks<span class="token operator">:</span> <span class="token string">\'all\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时，再执行 <code>npm run build</code>, 观察下输出结果。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by status 128 KiB [emitted]\n    asset 935.js 125 KiB [emitted] [minimized] (id hint: vendors) 2 related assets\n    asset main.js 3.28 KiB [emitted] [minimized] (name: main) 1 related asset\n    asset index.html 259 bytes [emitted]\n  assets by status 8.12 KiB [compared for emit]\n    asset main.css 7.94 KiB [compared for emit] (name: main)\n    asset 958.js 183 bytes [compared for emit] [minimized] 1 related asset\n  Entrypoint main 136 KiB (181 KiB) = 935.js 125 KiB main.css 7.94 KiB main.js 3.28 KiB 2 auxiliary assets\n  runtime modules 7.81 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 13200 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>main.js 大小变成了 3.28 kb。此时，应用的 bundle 与下图类似。</p>\n<p><img src="/courses/webpack/bundle-split-c.png" alt="Bundle Spliting"></p>\n<h2 id="定制分割输出" tabindex="-1"><a class="header-anchor" href="#定制分割输出" aria-hidden="true">#</a> 定制分割输出</h2>\n<p>上面的配置可以重写如下，我们针对 node_modules 下的文件，使用更加细粒度的控制。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token punctuation">{</span>\n    optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n      splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n        cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n          commons<span class="token operator">:</span> <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">\'vendor\'</span><span class="token punctuation">,</span>\n            chunks<span class="token operator">:</span> <span class="token string">\'initial\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote>\n<p><code>initial</code> 对使用了 code spliting 的模块不生效，而 <code>all</code> 可以。</p>\n</blockquote>\n<p>从 Webpack 5 开始，我们可以基于资源类型做更多的自定义配置。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// css/mini-extra is injected by mini-css-extract-plugin</span>\n      minSize<span class="token operator">:</span> <span class="token punctuation">{</span> javascript<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token string">\'css/mini-extra\'</span><span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="分割、合并代码块" tabindex="-1"><a class="header-anchor" href="#分割、合并代码块" aria-hidden="true">#</a> 分割、合并代码块</h2>\n<p>Webpack 通过如下两个插件来控制最终输出的代码。</p>\n<ul>\n<li><code>AggressiveSplittingPlugin</code> 可以分割出更多更小的代码块。这个插件非常适合 HTTP/2.</li>\n<li><code>AggressiveMergingPlugin</code> 恰恰相反，会将小的代码块合并成大的代码块。</li>\n</ul>\n<p>下面是两个插件的配置样例</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>AggressiveSplittingPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      minSize<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n      maxSize<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">AggressiveMergingPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      minSizeReduce<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      moveToParents<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>每一个插件都有一个思考平衡点，因为如果代码块分割的越多越小，我们缓存的效果越差，同时请求也越多。</p>\n<p><code>webpack.optimize</code> 包含了 <code>LimitChunkCountPlugin</code> 和 <code>MinChunkSizePlugin</code>，提供了针对代码块大小的更进一步的控制。</p>\n<h2 id="在入口处的-bundle-spliting" tabindex="-1"><a class="header-anchor" href="#在入口处的-bundle-spliting" aria-hidden="true">#</a> 在入口处的 Bundle Spliting</h2>\n<p>从 Webpack 5 开始，我们可以在入口处（entry）使用 Bundle Spliting。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'index.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      dependOn<span class="token operator">:</span> <span class="token string">\'vendor\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    vendor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>使用了这个配置，我们可以去除 <code>optimization.splitChunks</code> 的配置了，输出效果一样。</p>\n<blockquote>\n<p>注意，在于 <code>webpack-plugin-serve</code> 一同使用的时候，我们需要在 <code>app.import</code> 中加入 <code>webpack-plugin-serve/client</code>。</p>\n</blockquote>\n<h2 id="webpack-中的代码块-chunk-类型" tabindex="-1"><a class="header-anchor" href="#webpack-中的代码块-chunk-类型" aria-hidden="true">#</a> Webpack 中的代码块（Chunk）类型</h2>\n<p>在上面的例子中，我们使用了多种代码块类型。Webpack 中主要有三种代码块：</p>\n<ul>\n<li>Entry Chunk， 包含 Webpack 的运行时和需要加载的模块信息表。</li>\n<li>Normal chunk，不包含 Webpack 运行时，相反，这些代码块通常通过一个包装函数（比如 JSONP）动态加载。</li>\n<li>Initial chunk，是只在应用初始加载的时候加载的代码块，Initial chunk 是 Normal chunk.</li>\n</ul>\n<p>作为用户，我们不需要严格知道每种类型的确切含义，但是要知道 Entry chunk 和 Normal chunk 的区别。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>我们可以通过 <code>optimization.splitChunks.cacheGroups</code> 来定义分割形式。在生产构建中，Webpack 会默认使用。</p>\n<p>vendor bundle 包含了所有来自于三方包的代码。</p>\n<p>Webpack 的一些插件提供了更细粒度的 Bundle Spliting 控制。比如 <code>AggressiveSplittingPlugin</code> 和 <code>AggressiveMergingPlugin</code>。</p>\n<p>Webpack 内部实现依赖了三种代码块类型：Entry chunk, Normal chunk 和 Initial chunk.</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-17",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/bundle-split.html",pathLocale:"/",permalink:null,slug:"bundle-split",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/bundle-split.md",filePathRelative:"courses/webpack/bundle-split.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/bundle-split.html.vue",componentFilePathRelative:"pages/courses/webpack/bundle-split.html.vue",componentFileChunkName:"v-5dfbc298",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/bundle-split.html.js",dataFilePathRelative:"pages/courses/webpack/bundle-split.html.js",dataFileChunkName:"v-5dfbc298",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/bundle-split.html",htmlFilePathRelative:"courses/webpack/bundle-split.html"},{key:"v-2c473dfe",path:"/courses/webpack/clean-build.html",title:"清理构建目录",lang:"zh-CN",frontmatter:{title:"清理构建目录",description:"介绍 Webpack 中如何清理构建目录",keywords:["Webpack"],date:"2021-01-18T00:00:00.000Z",key:16},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"如何清理构建目录",slug:"如何清理构建目录",children:[]},{level:2,title:"给输出文件添加版本说明",slug:"给输出文件添加版本说明",children:[]},{level:2,title:"拷贝文件",slug:"拷贝文件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\nWebpack 每一次构建都会将结果输出到指定目录，如过不清理输出目录的话，目录下的文件会越来越多、越来越乱。因此，我们需要在每次构建之前，先清理构建目录。\n\n## 如何清理构建目录\n\n通常又两种做法，一种是直接在 `npm scripts` 中通过 `rm -rf ./build && webpack` 或者 `rimraf ./build && webpack` 的方式来直接清理目录，另一种是通过 `clean-webpack-plugin` 插件来实现。\n\n安装 [clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin) 插件\n\n```bash\nnpm add clean-webpack-plugin --develop\n```\n\n添加到配置中：\n\n**webpack.parts.js**\n\n```js\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nexports.clean = () => ({ plugins: [new CleanWebpackPlugin()] });\n```\n\n**webpack.config.js**\n\n```js\nconst path = require(\"path\");\n\nconst commonConfig = merge([\n  { output: { path: path.resolve(process.cwd(), \"dist\") } },\n  parts.clean(),\n  ...\n]);\n```\n\n这样配置一次，每次构建之前，Webpack 都会先清空构建输出目录。\n\n## 给输出文件添加版本说明\n\n给构建输出的文件添加当次构建的版本号可以极大的方便问题定位。[webpack.BannerPlugin](https://webpack.js.org/plugins/banner-plugin/) 可以实现这个功能，与 [git-revision-webpack-plugin](https://www.npmjs.com/package/git-revision-webpack-plugin) 插件结合使用的时候，我们可以在输出文件中添加注释。\n\n安装依赖包：\n\n```bash\nnpm add git-revision-webpack-plugin --develop\n```\n\n**webpack.parts.js**\n\n```js\nconst webpack = require('webpack');\nconst GitRevisionPlugin = require('git-revision-webpack-plugin');\n\nexports.attachRevision = () => ({\n  plugins: [\n    new webpack.BannerPlugin({\n      banner: new GitRevisionPlugin().version(),\n    }),\n  ],\n});\n```\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([...parts.attachRevision()]);\n```\n\n执行 `npm run build`， 我们可以看到输出目录中，以 `.LICENSE.txt` 结尾的文件，文件开头都有类似于 `/*! 0b5bb05 */` 或 `/*! v1.7.0-9-g5f82fe8 */` 的注释。文件开头的注释可以定制，我们可以通过 `webpack.DefinePlugin` 来实现。\n\n## 拷贝文件\n\n我们可以通过 Webpack 将一些文件在不打包处理的情况下直接拷贝到输出目录中。在 Webpack 中可以使用 [copy-webpack-plugin](https://www.npmjs.com/package/copy-webpack-plugin) 这个插件。\n\n除了 Webpack 插件，也可以使用 [cpy-cli](https://www.npmjs.com/package/cpy-cli) 这个命令行工具。\n\n## 总结\n\nWebpack 中的很多插件都是在完成一个独立的任务，此时 Webpack 更像是一个任务执行器。当然，我们也可以借助去其他工具完成这些任务。\n\n通常可以在构建输出中添加当次构建的版本号，方便问题定位。\n",contentRendered:'<p>Webpack 每一次构建都会将结果输出到指定目录，如过不清理输出目录的话，目录下的文件会越来越多、越来越乱。因此，我们需要在每次构建之前，先清理构建目录。</p>\n<h2 id="如何清理构建目录" tabindex="-1"><a class="header-anchor" href="#如何清理构建目录" aria-hidden="true">#</a> 如何清理构建目录</h2>\n<p>通常又两种做法，一种是直接在 <code>npm scripts</code> 中通过 <code>rm -rf ./build &amp;&amp; webpack</code> 或者 <code>rimraf ./build &amp;&amp; webpack</code> 的方式来直接清理目录，另一种是通过 <code>clean-webpack-plugin</code> 插件来实现。</p>\n<p>安装 <a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noopener noreferrer">clean-webpack-plugin<OutboundLink/></a> 插件</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> clean-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加到配置中：</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'clean-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">clean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> output<span class="token operator">:</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样配置一次，每次构建之前，Webpack 都会先清空构建输出目录。</p>\n<h2 id="给输出文件添加版本说明" tabindex="-1"><a class="header-anchor" href="#给输出文件添加版本说明" aria-hidden="true">#</a> 给输出文件添加版本说明</h2>\n<p>给构建输出的文件添加当次构建的版本号可以极大的方便问题定位。<a href="https://webpack.js.org/plugins/banner-plugin/" target="_blank" rel="noopener noreferrer">webpack.BannerPlugin<OutboundLink/></a> 可以实现这个功能，与 <a href="https://www.npmjs.com/package/git-revision-webpack-plugin" target="_blank" rel="noopener noreferrer">git-revision-webpack-plugin<OutboundLink/></a> 插件结合使用的时候，我们可以在输出文件中添加注释。</p>\n<p>安装依赖包：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> git-revision-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> GitRevisionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'git-revision-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">attachRevision</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      banner<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">GitRevisionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">attachRevision</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>执行 <code>npm run build</code>， 我们可以看到输出目录中，以 <code>.LICENSE.txt</code> 结尾的文件，文件开头都有类似于 <code>/*! 0b5bb05 */</code> 或 <code>/*! v1.7.0-9-g5f82fe8 */</code> 的注释。文件开头的注释可以定制，我们可以通过 <code>webpack.DefinePlugin</code> 来实现。</p>\n<h2 id="拷贝文件" tabindex="-1"><a class="header-anchor" href="#拷贝文件" aria-hidden="true">#</a> 拷贝文件</h2>\n<p>我们可以通过 Webpack 将一些文件在不打包处理的情况下直接拷贝到输出目录中。在 Webpack 中可以使用 <a href="https://www.npmjs.com/package/copy-webpack-plugin" target="_blank" rel="noopener noreferrer">copy-webpack-plugin<OutboundLink/></a> 这个插件。</p>\n<p>除了 Webpack 插件，也可以使用 <a href="https://www.npmjs.com/package/cpy-cli" target="_blank" rel="noopener noreferrer">cpy-cli<OutboundLink/></a> 这个命令行工具。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 中的很多插件都是在完成一个独立的任务，此时 Webpack 更像是一个任务执行器。当然，我们也可以借助去其他工具完成这些任务。</p>\n<p>通常可以在构建输出中添加当次构建的版本号，方便问题定位。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-18",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/clean-build.html",pathLocale:"/",permalink:null,slug:"clean-build",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/clean-build.md",filePathRelative:"courses/webpack/clean-build.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/clean-build.html.vue",componentFilePathRelative:"pages/courses/webpack/clean-build.html.vue",componentFileChunkName:"v-2c473dfe",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/clean-build.html.js",dataFilePathRelative:"pages/courses/webpack/clean-build.html.js",dataFileChunkName:"v-2c473dfe",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/clean-build.html",htmlFilePathRelative:"courses/webpack/clean-build.html"},{key:"v-206db3ae",path:"/courses/webpack/code-compress.html",title:"代码压缩",lang:"zh-CN",frontmatter:{title:"代码压缩",description:"介绍 Webpack 中如何进行代码压缩",keywords:["Webpack"],date:"2021-01-19T00:00:00.000Z",key:17},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"压缩（minify）JavaScript",slug:"压缩-minify-javascript",children:[]},{level:2,title:"提高代码执行性能",slug:"提高代码执行性能",children:[]},{level:2,title:"压缩 HTML",slug:"压缩-html",children:[]},{level:2,title:"压缩 CSS",slug:"压缩-css",children:[]},{level:2,title:"压缩输出的 Bundle",slug:"压缩输出的-bundle",children:[]},{level:2,title:"混淆（Obfuscating）输出",slug:"混淆-obfuscating-输出",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n自从 Webpack 4 开始，生产环境构建默认使用 [terser](https://www.npmjs.com/package/terser) 来压缩（minify）代码。本章来介绍下 Webpack 压缩代码的工作机制。\n\n## 压缩（minify）JavaScript\n\n这里说的压缩指的是缩小代码量，在不改变代码语义的情况下，重写代码。举个例子，比如将长的变量名重命名为短的变量名，将永远不可能到达的分支（`if(false)`）删除。\n\n在 Webpack 中，我们可以通过 `optimization.minimize` 和 `optimization.minimizer` 这两个配置项来定制代码压缩过程。\n\nWebpack 默认使用 [terser-webpack-plugin](https://www.npmjs.com/package/terser-webpack-plugin) 这个插件来压缩代码，我们来尝试修改压缩逻辑。\n\n```bash\nnpm add terser-webpack-plugin --develop\n```\n\n**webpack.parts.js**\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin');\n\nexports.minifyJavaScript = () => ({\n  optimization: { minimizer: [new TerserPlugin()] },\n});\n```\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n\n  parts.minifyJavaScript(),\n\n  ...\n]);\n```\n\n现在执行 `npm run build` 可以看到构建输出与之前相同。\n\n> 可以通过 `terserOptions` 参数来自定义压缩过程，具体可以参考插件文档。\n\n## 提高代码执行性能\n\n作为代码压缩的补充，我们可以借助一些技术手段来提高代码执行性能。比如 scope hoisting。\n\n从 Webpack 4 开始，在生产模式中默认启用 scope hoisting. 在构建过程中，Webpack 会将所有模块都放在一个作用域中，避免了为每一个模块都生成一个闭包。scope hoisting 会降低编译速度，但是换来的是代码执行性能的提升。\n\n## 压缩 HTML\n\n如果我们通过 [html-loader](https://www.npmjs.com/package/html-loader) 来处理 HTML 模板的话，可以使用 [posthtml](https://www.npmjs.com/package/posthtml) 和 [posthtml-loader](https://www.npmjs.com/package/posthtml-loader) 来对 HTML 进行预处理，然后通过 [posthtml-minifier](https://www.npmjs.com/package/posthtml-minifier) 来压缩 HTML，同时 [posthtml-minify-classnames](https://www.npmjs.com/package/posthtml-minify-classnames) 可以缩小 HTML 中样式类名称的长度。\n\n## 压缩 CSS\n\n可以使用 [css-minimizer-webpack-plugin](https://www.npmjs.com/package/css-minimizer-webpack-plugin) 这个插件来压缩 CSS。`MiniCssExtractPlugin` 插件只会简单的合并文本，当项目中有相同样式类的时候，会产生重复代码，css-minimizer-webpack-plugin 可以解决这个问题。css-minimizer-webpack-plugin 这个插件的底层基于 [cssnano](http://cssnano.co/) 实现。\n\n首先安装依赖包\n\n```bash\nnpm add css-minimizer-webpack-plugin --develop\n```\n\n**webpack.parts.js**\n\n```js\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n\nexports.minifyCSS = ({ options }) => ({\n  optimization: {\n    minimizer: [new CssMinimizerPlugin({ minimizerOptions: options })],\n  },\n});\n```\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  parts.minifyJavaScript(),\n  parts.minifyCSS({ options: { preset: [\"default\"] } }),\n  ...\n]);\n```\n\n此时执行 `npm run build`, 可以看到输出的 css 文件变小了。\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 129 KiB\n    asset 935.js 126 KiB [emitted] [minimized] (id hint: vendors) 2 related assets\n    asset main.js 3.28 KiB [emitted] [minimized] (name: main) 1 related asset\n    asset 958.js 183 bytes [emitted] [minimized] 1 related asset\n  asset main.css 1.37 KiB [emitted] [minimized] (name: main)\n  asset index.html 259 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = 935.js 126 KiB main.css 1.37 KiB main.js 3.28 KiB 2 auxiliary assets\n  runtime modules 7.81 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 18304 ms\n```\n\n## 压缩输出的 Bundle\n\n可以通过 gzip 或者 brotli 等压缩结束进一步压缩输出的文件大小。压缩后的代码会增加在浏览器端的解析时间，但是可以大大减少网络带宽占用。\n\n在 Webpack 可以使用 [compression-webpack-plugin](https://www.npmjs.com/package/compression-webpack-plugin) 这个插件来压缩代码。\n\n## 混淆（Obfuscating）输出\n\n[obfuscator-loader](https://github.com/javascript-obfuscator/obfuscator-loader) 可以用来对代码进行混淆，是的代码在浏览器端不可读。\n\n## 总结\n\n代码压缩（minify） 可以用一种安全的转换方法来缩小代码量。\n\nWebpack 在生产模式中，默认使用 Terser 来压缩代码。\n\n除了压缩 JavaScript，我们还可以通过一些插件和 loader 来压缩 CSS 和 HTML。\n",contentRendered:'<p>自从 Webpack 4 开始，生产环境构建默认使用 <a href="https://www.npmjs.com/package/terser" target="_blank" rel="noopener noreferrer">terser<OutboundLink/></a> 来压缩（minify）代码。本章来介绍下 Webpack 压缩代码的工作机制。</p>\n<h2 id="压缩-minify-javascript" tabindex="-1"><a class="header-anchor" href="#压缩-minify-javascript" aria-hidden="true">#</a> 压缩（minify）JavaScript</h2>\n<p>这里说的压缩指的是缩小代码量，在不改变代码语义的情况下，重写代码。举个例子，比如将长的变量名重命名为短的变量名，将永远不可能到达的分支（<code>if(false)</code>）删除。</p>\n<p>在 Webpack 中，我们可以通过 <code>optimization.minimize</code> 和 <code>optimization.minimizer</code> 这两个配置项来定制代码压缩过程。</p>\n<p>Webpack 默认使用 <a href="https://www.npmjs.com/package/terser-webpack-plugin" target="_blank" rel="noopener noreferrer">terser-webpack-plugin<OutboundLink/></a> 这个插件来压缩代码，我们来尝试修改压缩逻辑。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> terser-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'terser-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">minifyJavaScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span> minimizer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n\n  parts<span class="token punctuation">.</span><span class="token function">minifyJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在执行 <code>npm run build</code> 可以看到构建输出与之前相同。</p>\n<blockquote>\n<p>可以通过 <code>terserOptions</code> 参数来自定义压缩过程，具体可以参考插件文档。</p>\n</blockquote>\n<h2 id="提高代码执行性能" tabindex="-1"><a class="header-anchor" href="#提高代码执行性能" aria-hidden="true">#</a> 提高代码执行性能</h2>\n<p>作为代码压缩的补充，我们可以借助一些技术手段来提高代码执行性能。比如 scope hoisting。</p>\n<p>从 Webpack 4 开始，在生产模式中默认启用 scope hoisting. 在构建过程中，Webpack 会将所有模块都放在一个作用域中，避免了为每一个模块都生成一个闭包。scope hoisting 会降低编译速度，但是换来的是代码执行性能的提升。</p>\n<h2 id="压缩-html" tabindex="-1"><a class="header-anchor" href="#压缩-html" aria-hidden="true">#</a> 压缩 HTML</h2>\n<p>如果我们通过 <a href="https://www.npmjs.com/package/html-loader" target="_blank" rel="noopener noreferrer">html-loader<OutboundLink/></a> 来处理 HTML 模板的话，可以使用 <a href="https://www.npmjs.com/package/posthtml" target="_blank" rel="noopener noreferrer">posthtml<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/posthtml-loader" target="_blank" rel="noopener noreferrer">posthtml-loader<OutboundLink/></a> 来对 HTML 进行预处理，然后通过 <a href="https://www.npmjs.com/package/posthtml-minifier" target="_blank" rel="noopener noreferrer">posthtml-minifier<OutboundLink/></a> 来压缩 HTML，同时 <a href="https://www.npmjs.com/package/posthtml-minify-classnames" target="_blank" rel="noopener noreferrer">posthtml-minify-classnames<OutboundLink/></a> 可以缩小 HTML 中样式类名称的长度。</p>\n<h2 id="压缩-css" tabindex="-1"><a class="header-anchor" href="#压缩-css" aria-hidden="true">#</a> 压缩 CSS</h2>\n<p>可以使用 <a href="https://www.npmjs.com/package/css-minimizer-webpack-plugin" target="_blank" rel="noopener noreferrer">css-minimizer-webpack-plugin<OutboundLink/></a> 这个插件来压缩 CSS。<code>MiniCssExtractPlugin</code> 插件只会简单的合并文本，当项目中有相同样式类的时候，会产生重复代码，css-minimizer-webpack-plugin 可以解决这个问题。css-minimizer-webpack-plugin 这个插件的底层基于 <a href="http://cssnano.co/" target="_blank" rel="noopener noreferrer">cssnano<OutboundLink/></a> 实现。</p>\n<p>首先安装依赖包</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> css-minimizer-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'css-minimizer-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">minifyCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> options <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> minimizerOptions<span class="token operator">:</span> options <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  parts<span class="token punctuation">.</span><span class="token function">minifyJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">minifyCSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> preset<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行 <code>npm run build</code>, 可以看到输出的 css 文件变小了。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 129 KiB\n    asset 935.js 126 KiB [emitted] [minimized] (id hint: vendors) 2 related assets\n    asset main.js 3.28 KiB [emitted] [minimized] (name: main) 1 related asset\n    asset 958.js 183 bytes [emitted] [minimized] 1 related asset\n  asset main.css 1.37 KiB [emitted] [minimized] (name: main)\n  asset index.html 259 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = 935.js 126 KiB main.css 1.37 KiB main.js 3.28 KiB 2 auxiliary assets\n  runtime modules 7.81 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 18304 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="压缩输出的-bundle" tabindex="-1"><a class="header-anchor" href="#压缩输出的-bundle" aria-hidden="true">#</a> 压缩输出的 Bundle</h2>\n<p>可以通过 gzip 或者 brotli 等压缩结束进一步压缩输出的文件大小。压缩后的代码会增加在浏览器端的解析时间，但是可以大大减少网络带宽占用。</p>\n<p>在 Webpack 可以使用 <a href="https://www.npmjs.com/package/compression-webpack-plugin" target="_blank" rel="noopener noreferrer">compression-webpack-plugin<OutboundLink/></a> 这个插件来压缩代码。</p>\n<h2 id="混淆-obfuscating-输出" tabindex="-1"><a class="header-anchor" href="#混淆-obfuscating-输出" aria-hidden="true">#</a> 混淆（Obfuscating）输出</h2>\n<p><a href="https://github.com/javascript-obfuscator/obfuscator-loader" target="_blank" rel="noopener noreferrer">obfuscator-loader<OutboundLink/></a> 可以用来对代码进行混淆，是的代码在浏览器端不可读。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>代码压缩（minify） 可以用一种安全的转换方法来缩小代码量。</p>\n<p>Webpack 在生产模式中，默认使用 Terser 来压缩代码。</p>\n<p>除了压缩 JavaScript，我们还可以通过一些插件和 loader 来压缩 CSS 和 HTML。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-19",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/code-compress.html",pathLocale:"/",permalink:null,slug:"code-compress",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/code-compress.md",filePathRelative:"courses/webpack/code-compress.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/code-compress.html.vue",componentFilePathRelative:"pages/courses/webpack/code-compress.html.vue",componentFileChunkName:"v-206db3ae",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/code-compress.html.js",dataFilePathRelative:"pages/courses/webpack/code-compress.html.js",dataFileChunkName:"v-206db3ae",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/code-compress.html",htmlFilePathRelative:"courses/webpack/code-compress.html"},{key:"v-18f707cd",path:"/courses/webpack/code-split.html",title:"Code Spliting",lang:"zh-CN",frontmatter:{title:"Code Spliting",description:"介绍 Webpack 中如何进行代码分割",keywords:["Webpack"],date:"2021-01-16T00:00:00.000Z",key:14},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"如何实现代码分割",slug:"如何实现代码分割",children:[]},{level:2,title:"在运行时控制代码分割",slug:"在运行时控制代码分割",children:[]},{level:2,title:"React 中的代码分割",slug:"react-中的代码分割",children:[]},{level:2,title:"禁用代码分割",slug:"禁用代码分割",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n随着功能的不断迭代，Web 应用变得越来越大，这也导致网页的加载时间越来越长，用户体验越来越差。 Webpack 的代码分割能力（Code Spliting）可以实现应用代码的按需加载，减少应用首次加载的代码量，提升加载速度。\n\n通过代码分割，我们可以在用户进入到一个新页面的时候加载代码，也可以在用户点击某一个按钮的时候加载代码，甚至可以猜测用户下一步要做的事情而提前加载代码。\n\n代码分割的核心目的就是通过在应用中设置多个分割点（split point）来实现按需加载。在分割的文件中还可以再创建分割点，不断分割下去。 整个应用就是构建在这些分割模块之上。\n\n![code-split](/courses/webpack/code-split-c.png)\n\n## 如何实现代码分割\n\nWebpack 提供了两种实现代码分割的方式：动态 `import` 和 `require.ensure`。其中 `require.ensure` 已经不在提倡使用。\n\n动态 `import` 通过 Promise 来实现：\n\n```js\nimport(/* webpackChunkName: \"optional-name\" */ \"./module\").then(\n  module => {...}\n).catch(\n  error => {...}\n);\n```\n\n在上面的例子中，我们看到一行 `webpackChunkName` 注释，这是 Webpack 提供的额外的配置选项，`webpackChunkName` 重新命名了分割出来的模块名称。相同 `webpackChunkName` 的分割模块将会被合并到一个文件中。除了 `webpackChunkName` 以外，Webpack 还提供了 `webpackMode`、`webpackPrefetch` 和 `webpackPrefetch` 等选项来自定义模块什么时候被加载以及浏览器如何来加载模块。在服务端渲染（server-side rendering, ssr）中，我们还可以设置 `weak` 参数。这样避免加载额外的模块。\n\n> prefetch 告诉浏览器该资源在不久的将来会被使用，而 preload 告诉浏览器该资源在当前页面下需要使用。通过这些信息，浏览器可以知道需要加载哪些资源。\n\n> `webpackChunkName` 同时还支持 `[index]` 和 `[request]` 这两个占位符来自定义分割出来的模块名称。\n\n我们可以并行加载多个模块，比如：\n\n```js\nPromise.all([import('lunr'), import('../search_index.json')]).then(\n  ([lunr, search]) => {\n    return {\n      index: lunr.Index.load(search.index),\n      lines: search.lines,\n    };\n  }\n);\n```\n\n下面我们在我们的项目中使用代码分割。\n\n**src/lazy.js**\n\n```js\nexport default 'Hello from lazy';\n```\n\n我们在点击按钮的时候加载这个模块，来修改按钮的文案。\n\n**src/component.js**\n\n```js\nexport default (text = 'Hello world') => {\n  const element = document.createElement('div');\n\n  element.className = 'rounded bg-red-100 border max-w-md m-4 p-4';\n  element.innerHTML = text;\n  element.onclick = () =>\n    import('./lazy')\n      .then((lazy) => {\n        element.textContent = lazy.default;\n      })\n      .catch((err) => console.error(err));\n\n  return element;\n};\n```\n\n此时，执行 `npm start`，然后点击按钮，我们可以看到按钮的文案发生了变化。\n\n再执行 `npm run build`, 我们观察下输出结果：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by chunk 10.8 KiB (name: main)\n    asset main.css 7.94 KiB [emitted] (name: main)\n    asset main.js 2.91 KiB [emitted] [minimized] (name: main) 1 related asset\n  asset index.html 229 bytes [compared for emit]\n  asset 958.js 183 bytes [emitted] [minimized] 1 related asset\n  Entrypoint main 10.8 KiB (5.61 KiB) = main.css 7.94 KiB main.js 2.91 KiB 1 auxiliary asset\n  runtime modules 6.71 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 597 bytes (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 564 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n    ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 9113 ms\n```\n\n`958.js` 就是分割点，如果我们要自定义文件名称，则可以通过 `output.chunkFilename` 来设置文件名称。比如设置为 `\"chunk.[id].js\"` 可以在输出的文件名称前面加一个 `chunk`。\n\n## 在运行时控制代码分割\n\n特别是在具有第三方依赖项和高级部署设置的复杂环境中，您可能希望控制从何处加载拆分代码。[webpack-require-from](https://www.npmjs.com/package/webpack-require-from) 可以解决这个问题，这个包可以重写 import 的路径。\n\n## React 中的代码分割\n\nReact 的[官方文档](https://reactjs.org/docs/code-splitting.html)中详细说明了代码分割的相关 API。其中最重要的就是 `React.lazy` 和 `React.Suspense`。[@loadable/component](https://www.npmjs.com/package/@loadable/component) 对这两个 API 做了封装。\n\n## 禁用代码分割\n\n有时候我们不需要代码分割，比如 SSR，这个时候可以通过如下设置来禁用代码分割：\n\n```js\nconst config = {\n  plugins: [new webpack.optimize.LimitChunkCountPlugin({ maxChunks: 1 })],\n};\n```\n\n## 总结\n\n代码分割可以加速页面的首次加载性能，提升用户使用体验。\n\n代码分割需要我们自主决定分割点。通常我们通过路由来分割，有时候也会根据某一个特性功能被使用到的时候来创建分割点。\n\n我们可以通过指定相同的名称来将多个分割出来的模块打包到同一个文件中。\n\n在现代框架中，比如 React，提供了一些 API 来支持代码分割，我们可以将这些 API 做一些封装，让使用体验更加友好。\n",contentRendered:'<p>随着功能的不断迭代，Web 应用变得越来越大，这也导致网页的加载时间越来越长，用户体验越来越差。 Webpack 的代码分割能力（Code Spliting）可以实现应用代码的按需加载，减少应用首次加载的代码量，提升加载速度。</p>\n<p>通过代码分割，我们可以在用户进入到一个新页面的时候加载代码，也可以在用户点击某一个按钮的时候加载代码，甚至可以猜测用户下一步要做的事情而提前加载代码。</p>\n<p>代码分割的核心目的就是通过在应用中设置多个分割点（split point）来实现按需加载。在分割的文件中还可以再创建分割点，不断分割下去。 整个应用就是构建在这些分割模块之上。</p>\n<p><img src="/courses/webpack/code-split-c.png" alt="code-split"></p>\n<h2 id="如何实现代码分割" tabindex="-1"><a class="header-anchor" href="#如何实现代码分割" aria-hidden="true">#</a> 如何实现代码分割</h2>\n<p>Webpack 提供了两种实现代码分割的方式：动态 <code>import</code> 和 <code>require.ensure</code>。其中 <code>require.ensure</code> 已经不在提倡使用。</p>\n<p>动态 <code>import</code> 通过 Promise 来实现：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "optional-name" */</span> <span class="token string">"./module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token parameter">module</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>\n  <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面的例子中，我们看到一行 <code>webpackChunkName</code> 注释，这是 Webpack 提供的额外的配置选项，<code>webpackChunkName</code> 重新命名了分割出来的模块名称。相同 <code>webpackChunkName</code> 的分割模块将会被合并到一个文件中。除了 <code>webpackChunkName</code> 以外，Webpack 还提供了 <code>webpackMode</code>、<code>webpackPrefetch</code> 和 <code>webpackPrefetch</code> 等选项来自定义模块什么时候被加载以及浏览器如何来加载模块。在服务端渲染（server-side rendering, ssr）中，我们还可以设置 <code>weak</code> 参数。这样避免加载额外的模块。</p>\n<blockquote>\n<p>prefetch 告诉浏览器该资源在不久的将来会被使用，而 preload 告诉浏览器该资源在当前页面下需要使用。通过这些信息，浏览器可以知道需要加载哪些资源。</p>\n</blockquote>\n<blockquote>\n<p><code>webpackChunkName</code> 同时还支持 <code>[index]</code> 和 <code>[request]</code> 这两个占位符来自定义分割出来的模块名称。</p>\n</blockquote>\n<p>我们可以并行加载多个模块，比如：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'lunr\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'../search_index.json\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>lunr<span class="token punctuation">,</span> search<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      index<span class="token operator">:</span> lunr<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      lines<span class="token operator">:</span> search<span class="token punctuation">.</span>lines<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>下面我们在我们的项目中使用代码分割。</p>\n<p><strong>src/lazy.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">\'Hello from lazy\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们在点击按钮的时候加载这个模块，来修改按钮的文案。</p>\n<p><strong>src/component.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">\'Hello world\'</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">\'rounded bg-red-100 border max-w-md m-4 p-4\'</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./lazy\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lazy</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> lazy<span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>此时，执行 <code>npm start</code>，然后点击按钮，我们可以看到按钮的文案发生了变化。</p>\n<p>再执行 <code>npm run build</code>, 我们观察下输出结果：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by chunk 10.8 KiB (name: main)\n    asset main.css 7.94 KiB [emitted] (name: main)\n    asset main.js 2.91 KiB [emitted] [minimized] (name: main) 1 related asset\n  asset index.html 229 bytes [compared for emit]\n  asset 958.js 183 bytes [emitted] [minimized] 1 related asset\n  Entrypoint main 10.8 KiB (5.61 KiB) = main.css 7.94 KiB main.js 2.91 KiB 1 auxiliary asset\n  runtime modules 6.71 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 597 bytes (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 564 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n    ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 9113 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>958.js</code> 就是分割点，如果我们要自定义文件名称，则可以通过 <code>output.chunkFilename</code> 来设置文件名称。比如设置为 <code>&quot;chunk.[id].js&quot;</code> 可以在输出的文件名称前面加一个 <code>chunk</code>。</p>\n<h2 id="在运行时控制代码分割" tabindex="-1"><a class="header-anchor" href="#在运行时控制代码分割" aria-hidden="true">#</a> 在运行时控制代码分割</h2>\n<p>特别是在具有第三方依赖项和高级部署设置的复杂环境中，您可能希望控制从何处加载拆分代码。<a href="https://www.npmjs.com/package/webpack-require-from" target="_blank" rel="noopener noreferrer">webpack-require-from<OutboundLink/></a> 可以解决这个问题，这个包可以重写 import 的路径。</p>\n<h2 id="react-中的代码分割" tabindex="-1"><a class="header-anchor" href="#react-中的代码分割" aria-hidden="true">#</a> React 中的代码分割</h2>\n<p>React 的<a href="https://reactjs.org/docs/code-splitting.html" target="_blank" rel="noopener noreferrer">官方文档<OutboundLink/></a>中详细说明了代码分割的相关 API。其中最重要的就是 <code>React.lazy</code> 和 <code>React.Suspense</code>。<a href="https://www.npmjs.com/package/@loadable/component" target="_blank" rel="noopener noreferrer">@loadable/component<OutboundLink/></a> 对这两个 API 做了封装。</p>\n<h2 id="禁用代码分割" tabindex="-1"><a class="header-anchor" href="#禁用代码分割" aria-hidden="true">#</a> 禁用代码分割</h2>\n<p>有时候我们不需要代码分割，比如 SSR，这个时候可以通过如下设置来禁用代码分割：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>LimitChunkCountPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> maxChunks<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>代码分割可以加速页面的首次加载性能，提升用户使用体验。</p>\n<p>代码分割需要我们自主决定分割点。通常我们通过路由来分割，有时候也会根据某一个特性功能被使用到的时候来创建分割点。</p>\n<p>我们可以通过指定相同的名称来将多个分割出来的模块打包到同一个文件中。</p>\n<p>在现代框架中，比如 React，提供了一些 API 来支持代码分割，我们可以将这些 API 做一些封装，让使用体验更加友好。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-16",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/code-split.html",pathLocale:"/",permalink:null,slug:"code-split",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/code-split.md",filePathRelative:"courses/webpack/code-split.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/code-split.html.vue",componentFilePathRelative:"pages/courses/webpack/code-split.html.vue",componentFileChunkName:"v-18f707cd",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/code-split.html.js",dataFilePathRelative:"pages/courses/webpack/code-split.html.js",dataFileChunkName:"v-18f707cd",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/code-split.html",htmlFilePathRelative:"courses/webpack/code-split.html"},{key:"v-d53e79bc",path:"/courses/webpack/deployment.html",title:"部署应用",lang:"zh-CN",frontmatter:{title:"部署应用",description:"介绍 Webpack 中如何部署应用",keywords:["Webpack"],date:"2021-02-02T00:00:00.000Z",key:31},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"部署到 Github Pages",slug:"部署到-github-pages",children:[]},{level:2,title:"部署到其他环境",slug:"部署到其他环境",children:[]},{level:2,title:"动态修改 output.publicPath",slug:"动态修改-output-publicpath",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\nWebpack 可以与一些插件配合，将构建好的应用部署到各种环境中。\n\n## 部署到 Github Pages\n\nGitHub Pages 是一个非常流行的静态网站托管平台。[gh-pages](https://www.npmjs.com/package/gh-pages) 这个工具可以帮助我们快速的将静态网站部署到 GitHub Pages 上。\n\n我们先安装 gh-pages\n\n```bash\nnpm add gh-pages --develop\n```\n\n**package.json**\n\n```json\n{\n  "scripts": {\n    "deploy": "gh-pages -d dist"\n  }\n}\n```\n\nGitHub Pages 对于托管的静态网站有一些规则约定，我们需要修改 `output.publicPath`，是的能正确的加载静态资源。如果不设置 `publicPath` 的话，默认会从网站根目录加载静态资源。\n\n`publicPath` 可以帮助我们控制应用从哪里加载静态资源。如果我们将静态资源都托管在 CDN 上，则 `publicPath` 应该调整为 CDN 上资源的存放地址。\n\n在我们的例子中，我们设置如下：\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  {\n    output: {\n      // publicPath: "/",\n      // 将 publicPath 修改为项目名称\n      publicPath: "/webpack-demo/",\n\n    },\n  },\n  ...\n]);\n```\n\n执行 `npm run build` 和 `npm run deploy` 之后，我们就将项目的 `/dist` 目录部署到了 GitHub Pages 上，通过 `https://<name>.github.io/<project>` 就可以访问到我们的静态站点内容。\n\n## 部署到其他环境\n\n除了使用工具部署应用，我们还可以借助于 Webpack 来部署。\n\n- [webpack-deploy](https://www.npmjs.com/package/webpack-deploy) 是一个部署工具集合，本身可以脱离 Webpack 独立使用。\n- [webpack-s3-plugin](https://www.npmjs.com/package/webpack-s3-plugin) 将资源部署到 Amazon。\n- [ssh-webpack-plugin](https://www.npmjs.com/package/ssh-webpack-plugin) 通过 SSH 协议来部署资源。\n\n## 动态修改 `output.publicPath`\n\n有些时候，`output.publicPath` 我们无法预先确定，也就无法写在配置文件里。我们可以通过下面的方法在应用代码中指定。\n\n1. 在应用的入口添加 `__webpack_public_path__ = window.myDynamicPublicPath;`，在合适的时候给这个变量赋值。\n2. 将 Webpack 配置中的 `output.publicPath` 删除。\n3. 如果使用了 ESLint，那么需要添加全局变量声明，避免静态检查错误。`globals.__webpack_public_path__: true`。\n\n当构建的时候， Webpack 会使用 `__webpack_public_path__` 来加载模块。\n\n## 总结\n\n尽管 Webpack 不是一个部署工具，但通过一些插件，Webpack 可以实现部署的功能。\n\n我们可以动态的修改 `output.publicPath` 配置来在非编译期确定静态资源的地址。这个方法内部是基于 `__webpack_public_path__` 这个全局变量来实现的。\n',contentRendered:'<p>Webpack 可以与一些插件配合，将构建好的应用部署到各种环境中。</p>\n<h2 id="部署到-github-pages" tabindex="-1"><a class="header-anchor" href="#部署到-github-pages" aria-hidden="true">#</a> 部署到 Github Pages</h2>\n<p>GitHub Pages 是一个非常流行的静态网站托管平台。<a href="https://www.npmjs.com/package/gh-pages" target="_blank" rel="noopener noreferrer">gh-pages<OutboundLink/></a> 这个工具可以帮助我们快速的将静态网站部署到 GitHub Pages 上。</p>\n<p>我们先安装 gh-pages</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> gh-pages --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"gh-pages -d dist"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>GitHub Pages 对于托管的静态网站有一些规则约定，我们需要修改 <code>output.publicPath</code>，是的能正确的加载静态资源。如果不设置 <code>publicPath</code> 的话，默认会从网站根目录加载静态资源。</p>\n<p><code>publicPath</code> 可以帮助我们控制应用从哪里加载静态资源。如果我们将静态资源都托管在 CDN 上，则 <code>publicPath</code> 应该调整为 CDN 上资源的存放地址。</p>\n<p>在我们的例子中，我们设置如下：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// publicPath: "/",</span>\n      <span class="token comment">// 将 publicPath 修改为项目名称</span>\n      publicPath<span class="token operator">:</span> <span class="token string">"/webpack-demo/"</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>npm run build</code> 和 <code>npm run deploy</code> 之后，我们就将项目的 <code>/dist</code> 目录部署到了 GitHub Pages 上，通过 <code>https://&lt;name&gt;.github.io/&lt;project&gt;</code> 就可以访问到我们的静态站点内容。</p>\n<h2 id="部署到其他环境" tabindex="-1"><a class="header-anchor" href="#部署到其他环境" aria-hidden="true">#</a> 部署到其他环境</h2>\n<p>除了使用工具部署应用，我们还可以借助于 Webpack 来部署。</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/webpack-deploy" target="_blank" rel="noopener noreferrer">webpack-deploy<OutboundLink/></a> 是一个部署工具集合，本身可以脱离 Webpack 独立使用。</li>\n<li><a href="https://www.npmjs.com/package/webpack-s3-plugin" target="_blank" rel="noopener noreferrer">webpack-s3-plugin<OutboundLink/></a> 将资源部署到 Amazon。</li>\n<li><a href="https://www.npmjs.com/package/ssh-webpack-plugin" target="_blank" rel="noopener noreferrer">ssh-webpack-plugin<OutboundLink/></a> 通过 SSH 协议来部署资源。</li>\n</ul>\n<h2 id="动态修改-output-publicpath" tabindex="-1"><a class="header-anchor" href="#动态修改-output-publicpath" aria-hidden="true">#</a> 动态修改 <code>output.publicPath</code></h2>\n<p>有些时候，<code>output.publicPath</code> 我们无法预先确定，也就无法写在配置文件里。我们可以通过下面的方法在应用代码中指定。</p>\n<ol>\n<li>在应用的入口添加 <code>__webpack_public_path__ = window.myDynamicPublicPath;</code>，在合适的时候给这个变量赋值。</li>\n<li>将 Webpack 配置中的 <code>output.publicPath</code> 删除。</li>\n<li>如果使用了 ESLint，那么需要添加全局变量声明，避免静态检查错误。<code>globals.__webpack_public_path__: true</code>。</li>\n</ol>\n<p>当构建的时候， Webpack 会使用 <code>__webpack_public_path__</code> 来加载模块。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>尽管 Webpack 不是一个部署工具，但通过一些插件，Webpack 可以实现部署的功能。</p>\n<p>我们可以动态的修改 <code>output.publicPath</code> 配置来在非编译期确定静态资源的地址。这个方法内部是基于 <code>__webpack_public_path__</code> 这个全局变量来实现的。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-02-02",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/deployment.html",pathLocale:"/",permalink:null,slug:"deployment",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/deployment.md",filePathRelative:"courses/webpack/deployment.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/deployment.html.vue",componentFilePathRelative:"pages/courses/webpack/deployment.html.vue",componentFileChunkName:"v-d53e79bc",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/deployment.html.js",dataFilePathRelative:"pages/courses/webpack/deployment.html.js",dataFileChunkName:"v-d53e79bc",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/deployment.html",htmlFilePathRelative:"courses/webpack/deployment.html"},{key:"v-71598bac",path:"/courses/webpack/dev-server.html",title:"使用开发服务器",lang:"zh-CN",frontmatter:{title:"使用开发服务器",description:"如何使用开发服务器来提升开发效率",keywords:["Webpack"],date:"2021-01-05T00:00:00.000Z",key:3},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Webpack 的 watch 模式",slug:"webpack-的-watch-模式",children:[]},{level:2,title:"Webpack-dev-server",slug:"webpack-dev-server",children:[]},{level:2,title:"Webpack-plugin-serve",slug:"webpack-plugin-serve",children:[]},{level:2,title:"通过网络访问开发服务器",slug:"通过网络访问开发服务器",children:[]},{level:2,title:"轮询文件",slug:"轮询文件",children:[]},{level:2,title:"自动重启开发服务器",slug:"自动重启开发服务器",children:[]},{level:2,title:"监控 Webpack 模块依赖图以外的文件",slug:"监控-webpack-模块依赖图以外的文件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n在开发前端应用的时候，我们需要不停的在刷新浏览器来查看最新的编译效果。本篇介绍在 Webpack 中如何实现自动刷新。\n\n## Webpack 的 watch 模式\n\n在 `watch` 模式下，每当项目中的文件发生变化，Webpack 都会重新编译输出新的内容。我们可以在配置文件中设置 `watch` 的值为 `true` 或者在命令行工具中指定 `--watch` 参数来开启 `watch` 模式。\n\n开启 `watch` 模式可以解决文件发生变化之后 Webpack 自动编译的问题，但是如果做到自动刷新浏览器呢？\n\n## Webpack-dev-server\n\n[Webpack-dev-server](https://www.npmjs.com/package/webpack-dev-server) 是官方维护的开发服务器，它的输出结果保存在内存中，也就是说构建出来的 bundle 不会输出到文件中。在使用 Webpack-dev-server 的时候，如下选项需要额外关注：\n\n1. [devServer.historyApiFallback](https://webpack.js.org/configuration/dev-server/#devserverhistoryapifallback) 如果应用中使用了基于 HTML5 History API 的路由，那么需要设置 `devServer.historyApiFallback`\n2. [devServer.contentBase](https://webpack.js.org/configuration/dev-server/#devservercontentbase) 可以通过 `devServer.contentBase` 来指定 index.html 的位置，如果最终使用的应用的 index.html 不是 webpack 自动生成的，那么需要通过 `contentBase` 来指定 index.html 的位置。`contentBase` 的值可以为一个路径，也可以为一个路径的数组，默认值是项目根路径。\n3. [devServer.proxy](https://webpack.js.org/configuration/dev-server/#devserverproxy) 有时候我们需要直接在页面上访问其他服务的接口，这时就需要设置代理。代理默认是不启用的。\n4. [devServer.headers](https://webpack.js.org/configuration/dev-server/#devserverheaders-) 给页面的请求添加一些自定义响应头\n\n## Webpack-plugin-serve\n\n[Webpack-plugin-serve](https://www.npmjs.com/package/webpack-plugin-serve) 是一个第三方插件，将更新浏览器的逻辑封装在了 webpack 插件里。WPS 底层基于 webpack 的 `watch` 模式，并基于此实现了 HMR 等特性。\n\nWPS 同时支持 webpack 的多编译器模式，只需要指定一组配置即可。\n\n默认情况下，WPS 的编译结果输出到文件系统中。通过 [webpack-plugin-ramdisk](https://www.npmjs.com/package/webpack-plugin-ramdisk), 还可以将编译输出到 RAM 中，相较于输出到文件系统来说性能更好。\n\n安装 webpack-plugin-serve\n\n```bash\nnpm add webpack-plugin-serve --develop\n```\n\n我们需要配置一下 WPS 来让 webpack 使用。配置如下：\n\n```js\nconst { mode } = require(\'webpack-nano/argv\');\nconst { MiniHtmlWebpackPlugin } = require(\'mini-html-webpack-plugin\');\nconst { WebpackPluginServe } = require(\'webpack-plugin-serve\');\n\nmodule.exports = {\n  watch: mode === \'development\',\n  entry: [\'./src\', \'webpack-plugin-serve/client\'],\n  mode,\n  plugins: [\n    new MiniHtmlWebpackPlugin({ context: { title: \'Demo\' } }),\n    new WebpackPluginServe({\n      port: process.env.PORT || 8080,\n      static: \'./dist\',\n      liveReload: true,\n      waitForBuild: true,\n    }),\n  ],\n};\n```\n\n添加 npm scripts：\n\n```json\n{\n  "scripts": {\n    "start": "wp --mode development"\n  }\n}\n```\n\n此时执行构建命令，`npm run start` 可以看到命令行输出如下：\n\n```\n⬡ webpack: Watching Files\n⬡ wps: Server Listening on: http://[::]:8080\n\n\n⬡ webpack: asset main.js 86.8 KiB [emitted] (name: main)\n  asset index.html 190 bytes [compared for emit]\n  runtime modules 25.5 KiB 12 modules\n  cacheable modules 35.3 KiB\n    modules by path ./node_modules/ 33.4 KiB\n      modules by path ./node_modules/webpack-plugin-serve/lib/client/ 24.1 KiB 8 modules\n      ./node_modules/webpack-plugin-serve/client.js 1.05 KiB [built] [code generated]\n      ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 6.67 KiB [built] [code generated]\n      ./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\n    modules by path ./src/ 1.88 KiB\n      modules by path ./src/*.js 248 bytes\n        ./src/index.js 99 bytes [built] [code generated]\n        ./src/component.js 149 bytes [built] [code generated]\n      modules by path ./src/*.css 1.64 KiB\n        ./src/main.css 1.32 KiB [built] [code generated]\n        ./node_modules/css-loader/dist/cjs.js!./src/main.css 332 bytes [built] [code generated]\n  0 (webpack 5.11.1) compiled successfully in 508 ms\n```\n\n浏览器输出结果为：\n\n![HelloWorld](/courses/webpack/helloworld-c.png)\n\n这时候，如果修改了源代码，我们可以看到命令行输出会有变化，同时浏览器也会自动更新。\n\n## 通过网络访问开发服务器\n\n有时候我们需要别的机器也可以访问我们本地的开发服务器，这时候，我们需要告诉开发服务器本机的 IP。在类 Unix 机器上可以通过 `ifconfig | grep inet` 方式获取，在 windows 机器上，可以通过 `ipconfig` 获取。之后通过 `HOST=<ip 地址> ./node_modules/.bin/wp` 的方式启动开发服务器。\n\n## 轮询文件\n\nWebpack 的文件 watch 模式在一些系统上不能不生效，比如老旧的 windows 或 Ubuntu。此时需要开启文件轮询功能，`webpack.config.js` 配置如下：\n\n```js\nmodule.exports = {\n  watchOptions: {\n    aggregateTimeout: 300, // 延迟第一次 rebuild 300 毫秒\n    poll: 1000, // 轮询间隔，单位毫秒\n    ignored: /node_modules/, // 忽略目录，减少 CPU 消耗\n  },\n};\n```\n\n## 自动重启开发服务器\n\n在项目初期，需要经常修改 `webpack.config.js`，就需要不断的重启开发服务器。我们可以通过 [nodemon](https://www.npmjs.com/package/nodemon) 来实现 webpack 配置变更重启开发服务器的能力。\n\n安装 nodemon：\n\n```bash\nnpm add nodemon --develop\n```\n\n添加 npm scripts：\n\n```json\n{\n  "scripts": {\n    "watch": "nodemon --watch webpack.*.js --exec \\"npm start\\"",\n    "start": "wp --mode development"\n  }\n}\n```\n\n## 监控 Webpack 模块依赖图以外的文件\n\n默认情况下，Webpack 只会监控项目直接依赖的模块文件。如果我们需要监控一些其他的文件，比如在使用 mini-html-webapck-pulgin 的时候，我们需要指定模板文件，来实现模板变更页面刷新的目的，这时，可以通过 [webpack-add-dependency-plugin](https://www.npmjs.com/package/webpack-add-dependency-plugin) 来解决问题。\n\n## 总结\n\nWDS 和 WPS 让 webpack 对开发过程更友好。\n\n1. Webpack 的 `watch` 模式可以实现代码变更实时输出编译结果。\n2. WPS 和 WDS 实现了代码变更刷新浏览器的功能，同时都支持 HMR。\n3. 在某些系统上，webpack 的 `watch` 模式可能无法起作用，需要启用轮询模式。\n4. WDS 可以通过中间件的形式与已有 node 服务集成。\n5. WPS 和 WDS 除了自动刷新浏览器和 HMR 以外，还有很多其他功能，比如代理。\n',contentRendered:'<p>在开发前端应用的时候，我们需要不停的在刷新浏览器来查看最新的编译效果。本篇介绍在 Webpack 中如何实现自动刷新。</p>\n<h2 id="webpack-的-watch-模式" tabindex="-1"><a class="header-anchor" href="#webpack-的-watch-模式" aria-hidden="true">#</a> Webpack 的 watch 模式</h2>\n<p>在 <code>watch</code> 模式下，每当项目中的文件发生变化，Webpack 都会重新编译输出新的内容。我们可以在配置文件中设置 <code>watch</code> 的值为 <code>true</code> 或者在命令行工具中指定 <code>--watch</code> 参数来开启 <code>watch</code> 模式。</p>\n<p>开启 <code>watch</code> 模式可以解决文件发生变化之后 Webpack 自动编译的问题，但是如果做到自动刷新浏览器呢？</p>\n<h2 id="webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server" aria-hidden="true">#</a> Webpack-dev-server</h2>\n<p><a href="https://www.npmjs.com/package/webpack-dev-server" target="_blank" rel="noopener noreferrer">Webpack-dev-server<OutboundLink/></a> 是官方维护的开发服务器，它的输出结果保存在内存中，也就是说构建出来的 bundle 不会输出到文件中。在使用 Webpack-dev-server 的时候，如下选项需要额外关注：</p>\n<ol>\n<li><a href="https://webpack.js.org/configuration/dev-server/#devserverhistoryapifallback" target="_blank" rel="noopener noreferrer">devServer.historyApiFallback<OutboundLink/></a> 如果应用中使用了基于 HTML5 History API 的路由，那么需要设置 <code>devServer.historyApiFallback</code></li>\n<li><a href="https://webpack.js.org/configuration/dev-server/#devservercontentbase" target="_blank" rel="noopener noreferrer">devServer.contentBase<OutboundLink/></a> 可以通过 <code>devServer.contentBase</code> 来指定 index.html 的位置，如果最终使用的应用的 index.html 不是 webpack 自动生成的，那么需要通过 <code>contentBase</code> 来指定 index.html 的位置。<code>contentBase</code> 的值可以为一个路径，也可以为一个路径的数组，默认值是项目根路径。</li>\n<li><a href="https://webpack.js.org/configuration/dev-server/#devserverproxy" target="_blank" rel="noopener noreferrer">devServer.proxy<OutboundLink/></a> 有时候我们需要直接在页面上访问其他服务的接口，这时就需要设置代理。代理默认是不启用的。</li>\n<li><a href="https://webpack.js.org/configuration/dev-server/#devserverheaders-" target="_blank" rel="noopener noreferrer">devServer.headers<OutboundLink/></a> 给页面的请求添加一些自定义响应头</li>\n</ol>\n<h2 id="webpack-plugin-serve" tabindex="-1"><a class="header-anchor" href="#webpack-plugin-serve" aria-hidden="true">#</a> Webpack-plugin-serve</h2>\n<p><a href="https://www.npmjs.com/package/webpack-plugin-serve" target="_blank" rel="noopener noreferrer">Webpack-plugin-serve<OutboundLink/></a> 是一个第三方插件，将更新浏览器的逻辑封装在了 webpack 插件里。WPS 底层基于 webpack 的 <code>watch</code> 模式，并基于此实现了 HMR 等特性。</p>\n<p>WPS 同时支持 webpack 的多编译器模式，只需要指定一组配置即可。</p>\n<p>默认情况下，WPS 的编译结果输出到文件系统中。通过 <a href="https://www.npmjs.com/package/webpack-plugin-ramdisk" target="_blank" rel="noopener noreferrer">webpack-plugin-ramdisk<OutboundLink/></a>, 还可以将编译输出到 RAM 中，相较于输出到文件系统来说性能更好。</p>\n<p>安装 webpack-plugin-serve</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> webpack-plugin-serve --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们需要配置一下 WPS 来让 webpack 使用。配置如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-nano/argv\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> MiniHtmlWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> WebpackPluginServe <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-plugin-serve\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  watch<span class="token operator">:</span> mode <span class="token operator">===</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack-plugin-serve/client\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  mode<span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MiniHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">\'Demo\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">WebpackPluginServe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      port<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span><span class="token punctuation">,</span>\n      <span class="token keyword">static</span><span class="token operator">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n      liveReload<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      waitForBuild<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>添加 npm scripts：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"wp --mode development"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行构建命令，<code>npm run start</code> 可以看到命令行输出如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Watching Files\n⬡ wps: Server Listening on: http://[::]:8080\n\n\n⬡ webpack: asset main.js 86.8 KiB [emitted] (name: main)\n  asset index.html 190 bytes [compared for emit]\n  runtime modules 25.5 KiB 12 modules\n  cacheable modules 35.3 KiB\n    modules by path ./node_modules/ 33.4 KiB\n      modules by path ./node_modules/webpack-plugin-serve/lib/client/ 24.1 KiB 8 modules\n      ./node_modules/webpack-plugin-serve/client.js 1.05 KiB [built] [code generated]\n      ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js 6.67 KiB [built] [code generated]\n      ./node_modules/css-loader/dist/runtime/api.js 1.57 KiB [built] [code generated]\n    modules by path ./src/ 1.88 KiB\n      modules by path ./src/*.js 248 bytes\n        ./src/index.js 99 bytes [built] [code generated]\n        ./src/component.js 149 bytes [built] [code generated]\n      modules by path ./src/*.css 1.64 KiB\n        ./src/main.css 1.32 KiB [built] [code generated]\n        ./node_modules/css-loader/dist/cjs.js!./src/main.css 332 bytes [built] [code generated]\n  0 (webpack 5.11.1) compiled successfully in 508 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>浏览器输出结果为：</p>\n<p><img src="/courses/webpack/helloworld-c.png" alt="HelloWorld"></p>\n<p>这时候，如果修改了源代码，我们可以看到命令行输出会有变化，同时浏览器也会自动更新。</p>\n<h2 id="通过网络访问开发服务器" tabindex="-1"><a class="header-anchor" href="#通过网络访问开发服务器" aria-hidden="true">#</a> 通过网络访问开发服务器</h2>\n<p>有时候我们需要别的机器也可以访问我们本地的开发服务器，这时候，我们需要告诉开发服务器本机的 IP。在类 Unix 机器上可以通过 <code>ifconfig | grep inet</code> 方式获取，在 windows 机器上，可以通过 <code>ipconfig</code> 获取。之后通过 <code>HOST=&lt;ip 地址&gt; ./node_modules/.bin/wp</code> 的方式启动开发服务器。</p>\n<h2 id="轮询文件" tabindex="-1"><a class="header-anchor" href="#轮询文件" aria-hidden="true">#</a> 轮询文件</h2>\n<p>Webpack 的文件 watch 模式在一些系统上不能不生效，比如老旧的 windows 或 Ubuntu。此时需要开启文件轮询功能，<code>webpack.config.js</code> 配置如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    aggregateTimeout<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token comment">// 延迟第一次 rebuild 300 毫秒</span>\n    poll<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 轮询间隔，单位毫秒</span>\n    ignored<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 忽略目录，减少 CPU 消耗</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="自动重启开发服务器" tabindex="-1"><a class="header-anchor" href="#自动重启开发服务器" aria-hidden="true">#</a> 自动重启开发服务器</h2>\n<p>在项目初期，需要经常修改 <code>webpack.config.js</code>，就需要不断的重启开发服务器。我们可以通过 <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noopener noreferrer">nodemon<OutboundLink/></a> 来实现 webpack 配置变更重启开发服务器的能力。</p>\n<p>安装 nodemon：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> nodemon --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加 npm scripts：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"watch"</span><span class="token operator">:</span> <span class="token string">"nodemon --watch webpack.*.js --exec \\"npm start\\""</span><span class="token punctuation">,</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"wp --mode development"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="监控-webpack-模块依赖图以外的文件" tabindex="-1"><a class="header-anchor" href="#监控-webpack-模块依赖图以外的文件" aria-hidden="true">#</a> 监控 Webpack 模块依赖图以外的文件</h2>\n<p>默认情况下，Webpack 只会监控项目直接依赖的模块文件。如果我们需要监控一些其他的文件，比如在使用 mini-html-webapck-pulgin 的时候，我们需要指定模板文件，来实现模板变更页面刷新的目的，这时，可以通过 <a href="https://www.npmjs.com/package/webpack-add-dependency-plugin" target="_blank" rel="noopener noreferrer">webpack-add-dependency-plugin<OutboundLink/></a> 来解决问题。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>WDS 和 WPS 让 webpack 对开发过程更友好。</p>\n<ol>\n<li>Webpack 的 <code>watch</code> 模式可以实现代码变更实时输出编译结果。</li>\n<li>WPS 和 WDS 实现了代码变更刷新浏览器的功能，同时都支持 HMR。</li>\n<li>在某些系统上，webpack 的 <code>watch</code> 模式可能无法起作用，需要启用轮询模式。</li>\n<li>WDS 可以通过中间件的形式与已有 node 服务集成。</li>\n<li>WPS 和 WDS 除了自动刷新浏览器和 HMR 以外，还有很多其他功能，比如代理。</li>\n</ol>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-05",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/dev-server.html",pathLocale:"/",permalink:null,slug:"dev-server",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/dev-server.md",filePathRelative:"courses/webpack/dev-server.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/dev-server.html.vue",componentFilePathRelative:"pages/courses/webpack/dev-server.html.vue",componentFileChunkName:"v-71598bac",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/dev-server.html.js",dataFilePathRelative:"pages/courses/webpack/dev-server.html.js",dataFileChunkName:"v-71598bac",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/dev-server.html",htmlFilePathRelative:"courses/webpack/dev-server.html"},{key:"v-e7123a86",path:"/courses/webpack/dynamic-loading.html",title:"动态加载（Dynamic Loading）",lang:"zh-CN",frontmatter:{title:"动态加载（Dynamic Loading）",description:"介绍 Webpack 中如何动态加载（Dynamic Loading）",keywords:["Webpack"],date:"2021-01-30T00:00:00.000Z",key:28},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"通过 require.context 来动态加载",slug:"通过-require-context-来动态加载",children:[]},{level:2,title:"import 中的动态路径",slug:"import-中的动态路径",children:[]},{level:2,title:"组合多个 require.context",slug:"组合多个-require-context",children:[]},{level:2,title:"处理运行时的动态路径",slug:"处理运行时的动态路径",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n我们在 [Code Spliting](./code-split.md) 一章中介绍了一些动态加载的技术。本章，我们介绍一种更加灵活的动态加载技术，`require.context`。\n\n## 通过 `require.context` 来动态加载\n\n[require.context](https://webpack.js.org/api/module-methods/#requirecontext) 提供了一种通用的代码分割形式。\n\n假设我们使用 Webpack 来构建一个静态网站。网站内容都在 `./pages/` 目录下，以 Markdown 形式保存。每个 Markdown 文件都有一个 YAML frontmatter 来定义元数据。我们可以通过如下方式来加载 Markdown 文件。\n\n```js\n// 通过 `yaml-frontmatter-loader` and `json-loader` 来处理文件。\n// `yaml-frontmatter-loader` 将文件中的 frontmatter 和文件内容解析出来，\n// `json-loader` 再将其转换成 JSON 结构\n// 在这个过程中，Markdown 不会被处理。\nconst req = require.context(\n  \'json-loader!yaml-frontmatter-loader!./pages\',\n  true, // 递归加载文件\n  /^\\.\\/.*\\.md$/ // 匹配 `.md` 结尾的文件\n);\n```\n\n`require.context` 返回一个函数，我们使用这个函数来加载文件。`require.context` 会创建一个模块，有自己的模块 id，同时提供一个 `.keys()` 方法，返回模块的内容（文件列表）。\n\n```js\nreq.keys(); // ["./demo.md", "./another-demo.md"]\nreq.id; // 42\n\n// {title: "Demo", body: "# Demo page\\nDemo content\\n\\n"}\nconst demoPage = req(\'./demo.md\');\n```\n\n> 如果与 TypeScript 一起使用，要确保安装了 [@types/webpack-env](https://www.npmjs.com/package/@types/webpack-env)，否则 `require.context` 无法工作。\n\n## `import` 中的动态路径\n\n当我们给 `import` 的路径信息是一个动态路径的时候，Webpack 会内部创建一个 context.\n\n```js\nconst target = "fi";\n\nimport(`translations/${target}.json`).then(...).catch(...);\n```\n\n`require` 在遇到动态路径的处理方式与 `import` 相同。比如 `require(`assets/modals/\\${imageSrc}.js`);`，将会创建一个 context，并解析到一个 `imageSrc` 的文件。\n\n> 在使用动态加载的时候，建议明确指定文件后缀，这样可以减小 context 的大小，同时提高构建性能。\n\n## 组合多个 `require.context`\n\n我们可以将多个独立的 `require.context` 合并成一个。\n\n```js\nconst { concat, uniq } = require(\'lodash\');\n\nconst combineContexts = (...contexts) => {\n  function webpackContext(req) {\n    // Find the first match and execute\n    const matches = contexts\n      .map((context) => context.keys().indexOf(req) >= 0 && context)\n      .filter((a) => a);\n\n    return matches[0] && matches[0](req);\n  }\n  webpackContext.keys = () =>\n    uniq(\n      concat.apply(\n        null,\n        contexts.map((context) => context.keys())\n      )\n    );\n  return webpackContext;\n};\n```\n\n## 处理运行时的动态路径\n\nWebpack 的动态加载还是要基于静态分析依赖关系的。如果动态加载的模块在其他地方，比如是一个网络文件，那么 Webpack 将无法完成动态加载。我们需要借助于其他工具，比如 [script.js](https://www.npmjs.com/package/scriptjs) 或者 [little-loader](https://www.npmjs.com/package/little-loader)。\n\n## 总结\n\n当我们需要大量文件的时候，`require.context` 会是一个非常有用的特性。\n\n动态 `import` 会在内部调用 `require.context`。\n\n`require.context` 仅适用于文件系统，如果要加载网络文件等形式的文件，需要借助于其他工具。\n',contentRendered:'<p>我们在 <RouterLink to="/courses/webpack/code-split.html">Code Spliting</RouterLink> 一章中介绍了一些动态加载的技术。本章，我们介绍一种更加灵活的动态加载技术，<code>require.context</code>。</p>\n<h2 id="通过-require-context-来动态加载" tabindex="-1"><a class="header-anchor" href="#通过-require-context-来动态加载" aria-hidden="true">#</a> 通过 <code>require.context</code> 来动态加载</h2>\n<p><a href="https://webpack.js.org/api/module-methods/#requirecontext" target="_blank" rel="noopener noreferrer">require.context<OutboundLink/></a> 提供了一种通用的代码分割形式。</p>\n<p>假设我们使用 Webpack 来构建一个静态网站。网站内容都在 <code>./pages/</code> 目录下，以 Markdown 形式保存。每个 Markdown 文件都有一个 YAML frontmatter 来定义元数据。我们可以通过如下方式来加载 Markdown 文件。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 通过 `yaml-frontmatter-loader` and `json-loader` 来处理文件。</span>\n<span class="token comment">// `yaml-frontmatter-loader` 将文件中的 frontmatter 和文件内容解析出来，</span>\n<span class="token comment">// `json-loader` 再将其转换成 JSON 结构</span>\n<span class="token comment">// 在这个过程中，Markdown 不会被处理。</span>\n<span class="token keyword">const</span> req <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>\n  <span class="token string">\'json-loader!yaml-frontmatter-loader!./pages\'</span><span class="token punctuation">,</span>\n  <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 递归加载文件</span>\n  <span class="token operator">/</span><span class="token operator">^</span>\\<span class="token punctuation">.</span>\\<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\.md$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 匹配 `.md` 结尾的文件</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>require.context</code> 返回一个函数，我们使用这个函数来加载文件。<code>require.context</code> 会创建一个模块，有自己的模块 id，同时提供一个 <code>.keys()</code> 方法，返回模块的内容（文件列表）。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>req<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["./demo.md", "./another-demo.md"]</span>\nreq<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// 42</span>\n\n<span class="token comment">// {title: "Demo", body: "# Demo page\\nDemo content\\n\\n"}</span>\n<span class="token keyword">const</span> demoPage <span class="token operator">=</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token string">\'./demo.md\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote>\n<p>如果与 TypeScript 一起使用，要确保安装了 <a href="https://www.npmjs.com/package/@types/webpack-env" target="_blank" rel="noopener noreferrer">@types/webpack-env<OutboundLink/></a>，否则 <code>require.context</code> 无法工作。</p>\n</blockquote>\n<h2 id="import-中的动态路径" tabindex="-1"><a class="header-anchor" href="#import-中的动态路径" aria-hidden="true">#</a> <code>import</code> 中的动态路径</h2>\n<p>当我们给 <code>import</code> 的路径信息是一个动态路径的时候，Webpack 会内部创建一个 context.</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token string">"fi"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translations/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>require</code> 在遇到动态路径的处理方式与 <code>import</code> 相同。比如 <code>require(</code>assets/modals/${imageSrc}.js<code>);</code>，将会创建一个 context，并解析到一个 <code>imageSrc</code> 的文件。</p>\n<blockquote>\n<p>在使用动态加载的时候，建议明确指定文件后缀，这样可以减小 context 的大小，同时提高构建性能。</p>\n</blockquote>\n<h2 id="组合多个-require-context" tabindex="-1"><a class="header-anchor" href="#组合多个-require-context" aria-hidden="true">#</a> 组合多个 <code>require.context</code></h2>\n<p>我们可以将多个独立的 <code>require.context</code> 合并成一个。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> concat<span class="token punctuation">,</span> uniq <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">combineContexts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>contexts</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">webpackContext</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Find the first match and execute</span>\n    <span class="token keyword">const</span> matches <span class="token operator">=</span> contexts\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=></span> context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  webpackContext<span class="token punctuation">.</span><span class="token function-variable function">keys</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token function">uniq</span><span class="token punctuation">(</span>\n      <span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n        <span class="token keyword">null</span><span class="token punctuation">,</span>\n        contexts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=></span> context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> webpackContext<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="处理运行时的动态路径" tabindex="-1"><a class="header-anchor" href="#处理运行时的动态路径" aria-hidden="true">#</a> 处理运行时的动态路径</h2>\n<p>Webpack 的动态加载还是要基于静态分析依赖关系的。如果动态加载的模块在其他地方，比如是一个网络文件，那么 Webpack 将无法完成动态加载。我们需要借助于其他工具，比如 <a href="https://www.npmjs.com/package/scriptjs" target="_blank" rel="noopener noreferrer">script.js<OutboundLink/></a> 或者 <a href="https://www.npmjs.com/package/little-loader" target="_blank" rel="noopener noreferrer">little-loader<OutboundLink/></a>。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>当我们需要大量文件的时候，<code>require.context</code> 会是一个非常有用的特性。</p>\n<p>动态 <code>import</code> 会在内部调用 <code>require.context</code>。</p>\n<p><code>require.context</code> 仅适用于文件系统，如果要加载网络文件等形式的文件，需要借助于其他工具。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-30",deps:[],hoistedTags:[],links:[{raw:"./code-split.md",relative:"courses/webpack/code-split.md",absolute:"/courses/webpack/code-split.md"}],pathInferred:"/courses/webpack/dynamic-loading.html",pathLocale:"/",permalink:null,slug:"dynamic-loading",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/dynamic-loading.md",filePathRelative:"courses/webpack/dynamic-loading.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/dynamic-loading.html.vue",componentFilePathRelative:"pages/courses/webpack/dynamic-loading.html.vue",componentFileChunkName:"v-e7123a86",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/dynamic-loading.html.js",dataFilePathRelative:"pages/courses/webpack/dynamic-loading.html.js",dataFileChunkName:"v-e7123a86",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/dynamic-loading.html",htmlFilePathRelative:"courses/webpack/dynamic-loading.html"},{key:"v-106129de",path:"/courses/webpack/env.html",title:"环境变量",lang:"zh-CN",frontmatter:{title:"环境变量",description:"介绍 Webpack 中的环境变量",keywords:["Webpack"],date:"2021-01-21T00:00:00.000Z",key:19},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"DefinePlugin 的基础用法",slug:"defineplugin-的基础用法",children:[]},{level:2,title:"设置 process .env.NODE_ENV",slug:"设置-process-env-node-env",children:[]},{level:2,title:"根据环境变量加载不同的模块",slug:"根据环境变量加载不同的模块",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n有些时候我们希望某些代码只在特定环境中能够执行。前面讲到，代码压缩工具会将死代码（`if(false)`）删除，因此，我们可以基于这个特性，通过 `DefinePlugin` 定义一些环境变量，来将类似\n\n```\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"Hello during development\");\n}\n```\n\n这样的代码转换成 `if(true)` 或者 `if(false)` 的形式。\n\n从 Webpack 4 开始，`process.env.NODE_ENV` 默认根据 `mode` 参数设置，但是仅限于 Webpack 内部。如果想要将 `process.env.NODE_ENV` 传给给其他工具，则需要在 Webpack 外或者在 Webpack 配置文件中定义。\n\n> 除了使用 `process.env.NODE_ENV`, 我们还可以通过 `webpack.EnvironmentPlugin([\"NODE_ENV\"])` 读取环境变量，底层基于 `DefinePlugin`。\n\n> [dotenv-webpack](https://www.npmjs.com/package/dotenv-webpack) 从一个 `.env` 文件中读取配置，然后内部使用 `DefinePlugin` 来定义环境变量。\n\n## `DefinePlugin` 的基础用法\n\n有下面这段代码：\n\n```js\nvar foo;\nif (foo === 'bar') console.log('bar'); // Not free\nif (bar === 'bar') console.log('bar'); // Free\n```\n\n如果将 `bar` 替换成字符串 `\"foobar\"`，则代码如下：\n\n```js\nvar foo;\nif (foo === 'bar') console.log('bar'); // Not free\nif ('foobar' === 'bar') console.log('bar');\n```\n\n在进行代码压缩的时候，通过代码分析，上面的代码与下面这段等价：\n\n```js\nvar foo;\nif (foo === 'bar') console.log('bar'); // Not free\nif (false) console.log('bar');\n```\n\n则最终生成代码为：\n\n```js\nvar foo;\nif (foo === 'bar') console.log('bar'); // Not free\n```\n\n基于条件的删除代码是 `DefinePlugin` 的核心能力。代码压缩器会分析代码，并将无用代码完全删除。\n\n> 在 Babel 中，[babel-plugin-transform-define](https://www.npmjs.com/package/babel-plugin-transform-define) 有着同样的功能。\n\n## 设置 `process .env.NODE_ENV`\n\n因为 Webpack 是直接替换变量文本，因此在定义环境变量值的时候，我们需要 `JSON.stringify` 一下。此时，环境变量的值为 `\"demo\"`，然后 Webpack 会逐个替换找到的文本。\n\n**webpack.parts.js**\n\n```js\nexports.setFreeVariable = (key, value) => {\n  const env = {};\n  env[key] = JSON.stringify(value);\n\n  return {\n    plugins: [new webpack.DefinePlugin(env)],\n  };\n};\n```\n\n**webpack.config.js**\n\n```js\nconst commonConfig = merge([\n  ...parts.setFreeVariable('HELLO', 'hello from config'),\n]);\n```\n\n在应用代码中：\n\n**src/component.js**\n\n```js\n\n// export default (text = \"Hello world\") => {\nexport default (text = HELLO) => {\n  const element = document.createElement(\"div\");\n  ...\n};\n```\n\n此时运行代码，可以看到按钮的文案发生了变化。\n\n## 根据环境变量加载不同的模块\n\n我们可以借助于 `DefinePlugin` 来有条件的加载某些模块。比如有如下代码：\n\n```\n.\n└── store\n    ├── index.js\n    ├── store.dev.js\n    └── store.prod.js\n```\n\n在 `index.js` 中：\n\n```js\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./store.prod');\n} else {\n  module.exports = require('./store.dev');\n}\n```\n\n此时，我们通过 `DefinePlugin` 定义 `NODE_ENV` 来加载不同的模块。值得注意的是，这里只能使用 CommonJS 模块语法，因为 ES2015 不支持动态导入模块。\n\n## 总结\n\nWebpack 可以通过 `DefinePlugin` 和 `EnvironmentPlugin` 来定义环境变量。`EnvironmentPlugin` 同时还会将系统环境变量也添加进来。\n\n`DefinePlugin` 会基于 Webpack 的分析进行自由变量替换。在 Babel 中也有类似的功能。\n\n一些代码压缩工具会将死代码删除，因此我们可以借助于 `DefinePlugin` 来生成死代码，从而将这些代码从构建输出结果中删除。\n\n`DefinePlugin` 还可以被应用在模块级别，通过一个包装函数，我们可以有条件的决定使用哪个模块。\n",contentRendered:'<p>有些时候我们希望某些代码只在特定环境中能够执行。前面讲到，代码压缩工具会将死代码（<code>if(false)</code>）删除，因此，我们可以基于这个特性，通过 <code>DefinePlugin</code> 定义一些环境变量，来将类似</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>if (process.env.NODE_ENV === "development") {\n  console.log("Hello during development");\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样的代码转换成 <code>if(true)</code> 或者 <code>if(false)</code> 的形式。</p>\n<p>从 Webpack 4 开始，<code>process.env.NODE_ENV</code> 默认根据 <code>mode</code> 参数设置，但是仅限于 Webpack 内部。如果想要将 <code>process.env.NODE_ENV</code> 传给给其他工具，则需要在 Webpack 外或者在 Webpack 配置文件中定义。</p>\n<blockquote>\n<p>除了使用 <code>process.env.NODE_ENV</code>, 我们还可以通过 <code>webpack.EnvironmentPlugin([&quot;NODE_ENV&quot;])</code> 读取环境变量，底层基于 <code>DefinePlugin</code>。</p>\n</blockquote>\n<blockquote>\n<p><a href="https://www.npmjs.com/package/dotenv-webpack" target="_blank" rel="noopener noreferrer">dotenv-webpack<OutboundLink/></a> 从一个 <code>.env</code> 文件中读取配置，然后内部使用 <code>DefinePlugin</code> 来定义环境变量。</p>\n</blockquote>\n<h2 id="defineplugin-的基础用法" tabindex="-1"><a class="header-anchor" href="#defineplugin-的基础用法" aria-hidden="true">#</a> <code>DefinePlugin</code> 的基础用法</h2>\n<p>有下面这段代码：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>bar <span class="token operator">===</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Free</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果将 <code>bar</code> 替换成字符串 <code>&quot;foobar&quot;</code>，则代码如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'foobar\'</span> <span class="token operator">===</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在进行代码压缩的时候，通过代码分析，上面的代码与下面这段等价：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>则最终生成代码为：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>基于条件的删除代码是 <code>DefinePlugin</code> 的核心能力。代码压缩器会分析代码，并将无用代码完全删除。</p>\n<blockquote>\n<p>在 Babel 中，<a href="https://www.npmjs.com/package/babel-plugin-transform-define" target="_blank" rel="noopener noreferrer">babel-plugin-transform-define<OutboundLink/></a> 有着同样的功能。</p>\n</blockquote>\n<h2 id="设置-process-env-node-env" tabindex="-1"><a class="header-anchor" href="#设置-process-env-node-env" aria-hidden="true">#</a> 设置 <code>process .env.NODE_ENV</code></h2>\n<p>因为 Webpack 是直接替换变量文本，因此在定义环境变量值的时候，我们需要 <code>JSON.stringify</code> 一下。此时，环境变量的值为 <code>&quot;demo&quot;</code>，然后 Webpack 会逐个替换找到的文本。</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">setFreeVariable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  env<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">setFreeVariable</span><span class="token punctuation">(</span><span class="token string">\'HELLO\'</span><span class="token punctuation">,</span> <span class="token string">\'hello from config\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在应用代码中：</p>\n<p><strong>src/component.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>\n<span class="token comment">// export default (text = "Hello world") => {</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">text <span class="token operator">=</span> <span class="token constant">HELLO</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时运行代码，可以看到按钮的文案发生了变化。</p>\n<h2 id="根据环境变量加载不同的模块" tabindex="-1"><a class="header-anchor" href="#根据环境变量加载不同的模块" aria-hidden="true">#</a> 根据环境变量加载不同的模块</h2>\n<p>我们可以借助于 <code>DefinePlugin</code> 来有条件的加载某些模块。比如有如下代码：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>.\n└── store\n    ├── index.js\n    ├── store.dev.js\n    └── store.prod.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 <code>index.js</code> 中：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./store.prod\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./store.dev\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时，我们通过 <code>DefinePlugin</code> 定义 <code>NODE_ENV</code> 来加载不同的模块。值得注意的是，这里只能使用 CommonJS 模块语法，因为 ES2015 不支持动态导入模块。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 可以通过 <code>DefinePlugin</code> 和 <code>EnvironmentPlugin</code> 来定义环境变量。<code>EnvironmentPlugin</code> 同时还会将系统环境变量也添加进来。</p>\n<p><code>DefinePlugin</code> 会基于 Webpack 的分析进行自由变量替换。在 Babel 中也有类似的功能。</p>\n<p>一些代码压缩工具会将死代码删除，因此我们可以借助于 <code>DefinePlugin</code> 来生成死代码，从而将这些代码从构建输出结果中删除。</p>\n<p><code>DefinePlugin</code> 还可以被应用在模块级别，通过一个包装函数，我们可以有条件的决定使用哪个模块。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-21",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/env.html",pathLocale:"/",permalink:null,slug:"env",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/env.md",filePathRelative:"courses/webpack/env.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/env.html.vue",componentFilePathRelative:"pages/courses/webpack/env.html.vue",componentFileChunkName:"v-106129de",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/env.html.js",dataFilePathRelative:"pages/courses/webpack/env.html.js",dataFileChunkName:"v-106129de",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/env.html",htmlFilePathRelative:"courses/webpack/env.html"},{key:"v-2e1ba6c6",path:"/courses/webpack/export-css.html",title:"导出样式文件",lang:"zh-CN",frontmatter:{title:"导出样式文件",description:"介绍 Webpack 如何导出样式文件",keywords:["Webpack"],date:"2021-01-08T00:00:00.000Z",key:6},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"mini-css-extract-plugin",slug:"mini-css-extract-plugin",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n默认情况下，css 会被打包到 JavaScript 中，在生产环境这么做有一些问题，比如会导致页面闪动。因为浏览器需要加载完 js 以后才能加载样式，此时已有的 html 只能使用浏览器的默认样式。\n\n我们需要将 css 导出到单独的文件中。通过 [mini-css-extract-plugin](https://www.npmjs.com/package/mini-css-extract-plugin) 插件我们可以实现将 css 导出到单独的 css bundle 中。mini-css-extract-plugin 插件还可以将多个 css 文件合并成一个 css 文件。出于这个原因，mini-css-extract-plugin 实际上会有一个 loader 来处理导出过程，然后将导出的内容通过插件保存为 css 文件。\n\n## mini-css-extract-plugin\n\n安装 mini-css-extract-plugin 插件：\n\n```bash\nnpm add mini-css-extract-plugin --develop\n```\n\nmini-css-extract-plugin 包含有一个 loader `MiniCssExtractPlugin.loader`，这个 loader 负责将最终 css 内容导出，然后插件基于导出的内容处理，最终生成 css 文件。\n\n**webpack.parts.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nexports.extractCSS = ({ options = {}, loaders = [] } = {}) => {\n  return {\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            { loader: MiniCssExtractPlugin.loader, options },\n            'css-loader',\n          ].concat(loaders),\n          sideEffects: true, // 如果构建结果作为一个 npm 包使用时建设设置\n        },\n      ],\n    },\n    plugins: [\n      new MiniCssExtractPlugin({\n        filename: '[name].css',\n      }),\n    ],\n  };\n};\n```\n\n`[name]` 占位符使用了导入 css 文件的那个 entry 的名字，如果需要将 css 生成到目录，则可以将路径也放到 `filename` 配置项里，比如 `filename: \"styles/[name].css\"`。\n\n更新 **webpack.config.js**\n\n```js\nconst commonConfig = merge([\n  ...// parts.loadCSS(),\n  parts.extractCSS(),\n]);\n```\n\n执行 `npm run build`，输出结果如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: asset index.html 229 bytes [compared for emit]\n  asset main.js 136 bytes [compared for emit] [minimized] (name: main)\n  asset main.css 33 bytes [compared for emit] (name: main)\n  Entrypoint main 169 bytes = main.css 33 bytes main.js 136 bytes\n  orphan modules 199 bytes [orphan] 2 modules\n  code generated modules 298 bytes (javascript) 32 bytes (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 298 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./src/main.css 32 bytes [code generated]\n  webpack 5.11.1 compiled successfully in 572 ms\n```\n\ncss 被打包到单独的文件中，避免了闪屏问题。\n\n默认情况下，我们需要在应用入口引入 css 文件，换句话说需要在 js 文件中引入 css。如果不想在 js 文件引用 css 的话，则可以通过 webpack entry 和 [glob](https://www.npmjs.com/package/glob) 的形式实现 css 的加载。示例如下：\n\n```js\nconst glob = require('glob');\n\nconst commonConfig = merge([\n  {\n    entry: { style: glob.sync('./src/**/*.css') }, // 需要手动保证 css 的顺序\n  },\n]);\n```\n\n## 总结\n\n通过使用 MiniCssExtractPlugin 插件可以解决闪屏问题，同时也优化了浏览器资源加载性能。\n\n如果不想在 JavaScript 中引入 css 文件，则可以通过 webpack entry 的形式加载 css，但是要额外 css 的引用顺序。\n",contentRendered:'<p>默认情况下，css 会被打包到 JavaScript 中，在生产环境这么做有一些问题，比如会导致页面闪动。因为浏览器需要加载完 js 以后才能加载样式，此时已有的 html 只能使用浏览器的默认样式。</p>\n<p>我们需要将 css 导出到单独的文件中。通过 <a href="https://www.npmjs.com/package/mini-css-extract-plugin" target="_blank" rel="noopener noreferrer">mini-css-extract-plugin<OutboundLink/></a> 插件我们可以实现将 css 导出到单独的 css bundle 中。mini-css-extract-plugin 插件还可以将多个 css 文件合并成一个 css 文件。出于这个原因，mini-css-extract-plugin 实际上会有一个 loader 来处理导出过程，然后将导出的内容通过插件保存为 css 文件。</p>\n<h2 id="mini-css-extract-plugin" tabindex="-1"><a class="header-anchor" href="#mini-css-extract-plugin" aria-hidden="true">#</a> mini-css-extract-plugin</h2>\n<p>安装 mini-css-extract-plugin 插件：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> mini-css-extract-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>mini-css-extract-plugin 包含有一个 loader <code>MiniCssExtractPlugin.loader</code>，这个 loader 负责将最终 css 内容导出，然后插件基于导出的内容处理，最终生成 css 文件。</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-css-extract-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">extractCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span> loader<span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          sideEffects<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 如果构建结果作为一个 npm 包使用时建设设置</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        filename<span class="token operator">:</span> <span class="token string">\'[name].css\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><code>[name]</code> 占位符使用了导入 css 文件的那个 entry 的名字，如果需要将 css 生成到目录，则可以将路径也放到 <code>filename</code> 配置项里，比如 <code>filename: &quot;styles/[name].css&quot;</code>。</p>\n<p>更新 <strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token comment">// parts.loadCSS(),</span>\n  parts<span class="token punctuation">.</span><span class="token function">extractCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>执行 <code>npm run build</code>，输出结果如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset index.html 229 bytes [compared for emit]\n  asset main.js 136 bytes [compared for emit] [minimized] (name: main)\n  asset main.css 33 bytes [compared for emit] (name: main)\n  Entrypoint main 169 bytes = main.css 33 bytes main.js 136 bytes\n  orphan modules 199 bytes [orphan] 2 modules\n  code generated modules 298 bytes (javascript) 32 bytes (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 298 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./src/main.css 32 bytes [code generated]\n  webpack 5.11.1 compiled successfully in 572 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>css 被打包到单独的文件中，避免了闪屏问题。</p>\n<p>默认情况下，我们需要在应用入口引入 css 文件，换句话说需要在 js 文件中引入 css。如果不想在 js 文件引用 css 的话，则可以通过 webpack entry 和 <a href="https://www.npmjs.com/package/glob" target="_blank" rel="noopener noreferrer">glob<OutboundLink/></a> 的形式实现 css 的加载。示例如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'glob\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">\'./src/**/*.css\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 需要手动保证 css 的顺序</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>通过使用 MiniCssExtractPlugin 插件可以解决闪屏问题，同时也优化了浏览器资源加载性能。</p>\n<p>如果不想在 JavaScript 中引入 css 文件，则可以通过 webpack entry 的形式加载 css，但是要额外 css 的引用顺序。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-08",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/export-css.html",pathLocale:"/",permalink:null,slug:"export-css",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/export-css.md",filePathRelative:"courses/webpack/export-css.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/export-css.html.vue",componentFilePathRelative:"pages/courses/webpack/export-css.html.vue",componentFileChunkName:"v-2e1ba6c6",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/export-css.html.js",dataFilePathRelative:"pages/courses/webpack/export-css.html.js",dataFileChunkName:"v-2e1ba6c6",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/export-css.html",htmlFilePathRelative:"courses/webpack/export-css.html"},{key:"v-042365c5",path:"/courses/webpack/extend-loader.html",title:"通过 loader 来扩展 Webpack",lang:"zh-CN",frontmatter:{title:"通过 loader 来扩展 Webpack",description:"介绍 Webpack 中如何开发自定义 loader",keywords:["Webpack"],date:"2021-02-04T00:00:00.000Z",key:33},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"借助于 loader-runner 来单独运行一个 loader",slug:"借助于-loader-runner-来单独运行一个-loader",children:[]},{level:2,title:"实现一个异步 loader",slug:"实现一个异步-loader",children:[]},{level:2,title:"只返回输出结果",slug:"只返回输出结果",children:[]},{level:2,title:"写文件",slug:"写文件",children:[]},{level:2,title:"给 loader 传递参数",slug:"给-loader-传递参数",children:[]},{level:2,title:"在 Webpack 中使用自定义 loader",slug:"在-webpack-中使用自定义-loader",children:[]},{level:2,title:"loader 的执行过程",slug:"loader-的执行过程",children:[]},{level:2,title:"在 loader 中使用缓存",slug:"在-loader-中使用缓存",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\nLoader 是 Webpack 中非常重要的组成部分，前面章节中已经介绍了很多 loader 的用法。本章对 loader 的细节做一些详细说明。\n\n## 借助于 loader-runner 来单独运行一个 loader\n\n我们可以通过 [loader-runner](https://www.npmjs.com/package/loader-runner) 实现不借助于 Webpack 直接运行一个 loader。首先安装 loader-runner.\n\n```bash\nnpm add loader-runner --develop\n```\n\n我们先写一个简单的 loader，这个 loader 将输入的文本重复一遍再输出。\n\n**loaders/demo-loader.js**\n\n```js\nmodule.exports = (input) => input + input;\n```\n\n我们在项目根目录下准备一个 `demo.txt` 文件，里面写入一些文本。\n\n现在，我们来运行 loader-runner。\n\n**run-loader.js**\n\n```js\nconst fs = require('fs');\nconst path = require('path');\nconst { runLoaders } = require('loader-runner');\n\nrunLoaders(\n  {\n    resource: './demo.txt',\n    loaders: [path.resolve(__dirname, './loaders/demo-loader')],\n    readResource: fs.readFile.bind(fs),\n  },\n  (err, result) => (err ? console.error(err) : console.log(result))\n);\n```\n\n此时，执行 `node ./run-loader.js`，可以看到输出内容为：\n\n```\n{\n  result: [ 'foobar\\nfoobar\\n' ],\n  resourceBuffer: <Buffer 66 6f 6f 62 61 72 0a>,\n  cacheable: true,\n  fileDependencies: [ './demo.txt' ],\n  contextDependencies: [],\n  missingDependencies: []\n}\n```\n\n我们可以看到输出的文本内容和一些元数据信息。\n\n> 如果我们的 loader 是安装在项目本地，我们可以直接通过 loader 的名字来查找 loader，`loaders: [\"babel-loader\"]`。\n\n## 实现一个异步 loader\n\n上面的例子中，我们同步实现了一些功能，但是在某些情况下，我们需要进行一些异步处理，这时候，我们可以借助于 Webpack 提供的异步 API `this.async()`。函数返回一个回调函数，与 NodeJS 的回调函数签名一致。\n\n**loaders/demo-loader.js**\n\n```js\nmodule.exports = function (input) {\n  const callback = this.async();\n\n  callback(null, input + input);\n};\n```\n\n> 注意，我们使用的 `this`，因此无法使用箭头函数。\n\n此时，执行 `node ./run-loader.js`，我们看到同样的输出内容。\n\n如果我们需要抛出错误，则可以这么实现。\n\n**loaders/demo-loader.js**\n\n```js\nmodule.exports = function (input) {\n  const callback = this.async();\n\n  callback(new Error('Demo error'));\n};\n```\n\n此时，运行结果将会是一个错误信息。\n\n## 只返回输出结果\n\n我们可以在 loader 中只返回代码，比如\n\n**loaders/demo-loader.js**\n\n```js\nmodule.exports = () => 'foobar';\n```\n\n这种做法在需要动态生成代码的时候将会非常有用。\n\n## 写文件\n\n像 file-loader 之类的 loader 会输出文件。Webpack 提供了 `this.emitFile` API。因为 loader-runner 没有实现这个 API，因此我们需要 mock 掉。\n\n**run-loader.js**\n\n```js\nrunLoaders(\n  {\n    resource: './demo.txt',\n    loaders: [path.resolve(__dirname, './loaders/demo-loader')],\n\n    context: { emitFile: () => {} },\n\n    readResource: fs.readFile.bind(fs),\n  },\n  (err, result) => (err ? console.error(err) : console.log(result))\n);\n```\n\n作为一个处理资源的 loader，核心任务就是输出资源内容和文件路径。\n\n我们可以借助于 [loader-utils](https://www.npmjs.com/package/loader-utils) 来对文件名做一些定制处理。\n\n```bash\nnpm add loader-utils --develop\n```\n\n**loaders/demo-loader.js**\n\n```js\nconst loaderUtils = require('loader-utils');\n\nmodule.exports = function (content) {\n  const url = loaderUtils.interpolateName(this, '[hash].[ext]', {\n    content,\n  });\n\n  this.emitFile(url, content);\n\n  const path = `__webpack_public_path__ + ${JSON.stringify(url)};`;\n\n  return `export default ${path}`;\n};\n```\n\nWebpack 还提供了 `this.emitWarning(<string>)` 和 `this.emitError(<string>)` 方法，我们同样需要在 loader-runder 中 mock。\n\n> loader-utils 包含了许多实用方法。比如 `loaderUtils.parseQuery(this.resourceQuery)` 可以处理传递给 loader 的查询参数。\n\n下一步就是如何将文件名传递给下一个 loader。\n\n## 给 loader 传递参数\n\n我们简单的调整一下：\n\n**run-loader.js**\n\n```js\nconst fs = require('fs');\nconst path = require('path');\nconst { runLoaders } = require('loader-runner');\n\nrunLoaders(\n  {\n    resource: './demo.txt',\n\n    //    loaders: [path.resolve(__dirname, \"./loaders/demo-loader\")],\n\n    loaders: [\n      {\n        loader: path.resolve(__dirname, './loaders/demo-loader'),\n        options: {\n          name: 'demo.[ext]',\n        },\n      },\n    ],\n\n    context: {\n      emitFile: () => {},\n    },\n    readResource: fs.readFile.bind(fs),\n  },\n  (err, result) => (err ? console.error(err) : console.log(result))\n);\n```\n\n在 demo loader 中可以使用这个 `name` 参数。\n\n**loaders/demo-loader.js**\n\n```js\nconst loaderUtils = require(\"loader-utils\");\n\nmodule.exports = function(content) {\n\n // const url = loaderUtils.interpolateName(this, \"[hash].[ext]\", {\n //   content,\n // });\n\n  const { name } = loaderUtils.getOptions(this);\n  const url = loaderUtils.interpolateName(this, name, { content });\n\n  ...\n};\n```\n\n执行 `node ./run-loader.js`，可以看到输出如下：\n\n```\n{\n  result: [ 'export default __webpack_public_path__ + \"demo.txt\";' ],\n  resourceBuffer: <Buffer 66 6f 6f 62 61 72 0a>,\n  cacheable: true,\n  fileDependencies: [ './demo.txt' ],\n  contextDependencies: [],\n  missingDependencies: []\n}\n```\n\n> 我们可以在使用参数之前对参数进行一些校验，这是可以使用 [schema-utils](https://www.npmjs.com/package/schema-utils)。\n\n## 在 Webpack 中使用自定义 loader\n\n**src/component.js**\n\n```js\nimport '!../loaders/demo-loader?name=foo!./main.css';\n```\n\n上面的使用方式非常繁琐，我们可以在 webpack 的配置文件中给 loader 定义一个别名，\n\n**webpack.config.js**\n\n```js\nconst commonConfig = merge([\n  {\n    resolveLoader: {\n      alias: {\n        \"demo-loader\": path.resolve(\n          __dirname,\n          \"loaders/demo-loader.js\"\n        ),\n      },\n    },\n  },\n  ...\n]);\n```\n\n这时候，我们可以这样引用这个 loader\n\n```js\n// import \"!../loaders/demo-loader?name=foo!./main.css\";\nimport '!demo-loader?name=foo!./main.css';\n```\n\n我们也可以通过 Webpack 的`rule` 来引用 loader。\n\n## loader 的执行过程\n\n![23ffe365f20592287b5b0ef2ef282684.png](/courses/webpack/extend-loader-c.png)\nwebpack 中 loader 的执行过程。\n\n像浏览器中的事件一样，Webpack 中 loader 的执行过程也分两个阶段。我们可以在 pitch 的过程中做一些定制处理逻辑。Webpack 会从左到右解析 loader，然后从右到左执行。\n\n我们可以定义一个 pitch-loader 来定制 loader 的解析过程，我们设置可以终止 loader 的解析。\n\n**loaders/pitch-loader.js**\n\n```js\nconst loaderUtils = require('loader-utils');\n\nmodule.exports = function (input) {\n  return input + loaderUtils.getOptions(this).text;\n};\nmodule.exports.pitch = function (remaining, preceding, input) {\n  console.log(`Remaining: ${remaining}, preceding: ${preceding}\nInput: ${JSON.stringify(input, null, 2)}\n  `);\n\n  return 'pitched';\n};\n```\n\n> 每个 loader 都可以提供一个 `pitch` 函数给 Webpack 调用，在 `pitch` 函数里做一些定制处理。\n\n修改 run-loader，如下\n\n**run-loader.js**\n\n```js\nrunLoaders(\n  {\n    resource: \"./demo.txt\",\n    loaders: [\n      ...\n      path.resolve(__dirname, \"./loaders/pitch-loader\"),\n    ],\n    ...\n  },\n  (err, result) => (err ? console.error(err) : console.log(result))\n);\n```\n\n执行 `node ./run-loader.js` 可以看到输出的一些定制处理信息。\n\n## 在 loader 中使用缓存\n\n默认情况下 Webpack 都会开启 loader 的缓存，除非我们通过 `this.cacheable(false)` 来禁用。我们可以通过下面的代码来了解 loader 的缓存是如何工作的。\n\n```js\nconst cache = new Map();\n\nmodule.exports = function (content) {\n  // Calls only once for given resourcePath\n  const callbacks = cache.get(this.resourcePath);\n  callbacks.forEach((callback) => callback(null, content));\n  cache.set(this.resourcePath, content);\n\n  return content;\n};\nmodule.exports.pitch = function () {\n  if (cache.has(this.resourcePath)) {\n    const item = cache.get(this.resourcePath);\n\n    if (item instanceof Array) {\n      item.push(this.async()); // 加载到缓存中\n    } else {\n      return item; // 命中缓存\n    }\n  } else {\n    cache.set(this.resourcePath, []); // 未命中缓存\n  }\n};\n```\n\npitch loader 可以被用来添加一些额外的元数据信息。本例中，在 pitch 阶段，构建缓存，然后在执行阶段使用缓存。\n\n## 总结\n\nloader-runner 可以帮助我们理解 loader 是如何工作的。\n\n在 Webpack 中，loader 既可以是同步的，也可以是异步的。Webpack 提供了 `this.async()` 来实现异步 loader。\n\n我们可以通过 loader 实现动态生成代码。\n\n可以使用 loader-utils 来处理参数，同时使用 schema-utils 来对参数进行校验。\n\n在本地开发的时候，我们可以借助于 `resolveLoader.alias` 的形式避免不必要的路径引用。\n\nloader 的 pitch 阶段可以方便我们添加一些元数据和做 loader 的解决做一些定制化操作。\n",contentRendered:'<p>Loader 是 Webpack 中非常重要的组成部分，前面章节中已经介绍了很多 loader 的用法。本章对 loader 的细节做一些详细说明。</p>\n<h2 id="借助于-loader-runner-来单独运行一个-loader" tabindex="-1"><a class="header-anchor" href="#借助于-loader-runner-来单独运行一个-loader" aria-hidden="true">#</a> 借助于 loader-runner 来单独运行一个 loader</h2>\n<p>我们可以通过 <a href="https://www.npmjs.com/package/loader-runner" target="_blank" rel="noopener noreferrer">loader-runner<OutboundLink/></a> 实现不借助于 Webpack 直接运行一个 loader。首先安装 loader-runner.</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> loader-runner --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们先写一个简单的 loader，这个 loader 将输入的文本重复一遍再输出。</p>\n<p><strong>loaders/demo-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> input <span class="token operator">+</span> input<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们在项目根目录下准备一个 <code>demo.txt</code> 文件，里面写入一些文本。</p>\n<p>现在，我们来运行 loader-runner。</p>\n<p><strong>run-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> runLoaders <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'loader-runner\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">\'./demo.txt\'</span><span class="token punctuation">,</span>\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./loaders/demo-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    readResource<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>此时，执行 <code>node ./run-loader.js</code>，可以看到输出内容为：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{\n  result: [ \'foobar\\nfoobar\\n\' ],\n  resourceBuffer: &lt;Buffer 66 6f 6f 62 61 72 0a>,\n  cacheable: true,\n  fileDependencies: [ \'./demo.txt\' ],\n  contextDependencies: [],\n  missingDependencies: []\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以看到输出的文本内容和一些元数据信息。</p>\n<blockquote>\n<p>如果我们的 loader 是安装在项目本地，我们可以直接通过 loader 的名字来查找 loader，<code>loaders: [&quot;babel-loader&quot;]</code>。</p>\n</blockquote>\n<h2 id="实现一个异步-loader" tabindex="-1"><a class="header-anchor" href="#实现一个异步-loader" aria-hidden="true">#</a> 实现一个异步 loader</h2>\n<p>上面的例子中，我们同步实现了一些功能，但是在某些情况下，我们需要进行一些异步处理，这时候，我们可以借助于 Webpack 提供的异步 API <code>this.async()</code>。函数返回一个回调函数，与 NodeJS 的回调函数签名一致。</p>\n<p><strong>loaders/demo-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> input <span class="token operator">+</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote>\n<p>注意，我们使用的 <code>this</code>，因此无法使用箭头函数。</p>\n</blockquote>\n<p>此时，执行 <code>node ./run-loader.js</code>，我们看到同样的输出内容。</p>\n<p>如果我们需要抛出错误，则可以这么实现。</p>\n<p><strong>loaders/demo-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Demo error\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时，运行结果将会是一个错误信息。</p>\n<h2 id="只返回输出结果" tabindex="-1"><a class="header-anchor" href="#只返回输出结果" aria-hidden="true">#</a> 只返回输出结果</h2>\n<p>我们可以在 loader 中只返回代码，比如</p>\n<p><strong>loaders/demo-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'foobar\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这种做法在需要动态生成代码的时候将会非常有用。</p>\n<h2 id="写文件" tabindex="-1"><a class="header-anchor" href="#写文件" aria-hidden="true">#</a> 写文件</h2>\n<p>像 file-loader 之类的 loader 会输出文件。Webpack 提供了 <code>this.emitFile</code> API。因为 loader-runner 没有实现这个 API，因此我们需要 mock 掉。</p>\n<p><strong>run-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">\'./demo.txt\'</span><span class="token punctuation">,</span>\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./loaders/demo-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    context<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">emitFile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    readResource<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>作为一个处理资源的 loader，核心任务就是输出资源内容和文件路径。</p>\n<p>我们可以借助于 <a href="https://www.npmjs.com/package/loader-utils" target="_blank" rel="noopener noreferrer">loader-utils<OutboundLink/></a> 来对文件名做一些定制处理。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> loader-utils --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>loaders/demo-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'loader-utils\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">interpolateName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">\'[hash].[ext]\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    content<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">__webpack_public_path__ + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Webpack 还提供了 <code>this.emitWarning(&lt;string&gt;)</code> 和 <code>this.emitError(&lt;string&gt;)</code> 方法，我们同样需要在 loader-runder 中 mock。</p>\n<blockquote>\n<p>loader-utils 包含了许多实用方法。比如 <code>loaderUtils.parseQuery(this.resourceQuery)</code> 可以处理传递给 loader 的查询参数。</p>\n</blockquote>\n<p>下一步就是如何将文件名传递给下一个 loader。</p>\n<h2 id="给-loader-传递参数" tabindex="-1"><a class="header-anchor" href="#给-loader-传递参数" aria-hidden="true">#</a> 给 loader 传递参数</h2>\n<p>我们简单的调整一下：</p>\n<p><strong>run-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> runLoaders <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'loader-runner\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">\'./demo.txt\'</span><span class="token punctuation">,</span>\n\n    <span class="token comment">//    loaders: [path.resolve(__dirname, "./loaders/demo-loader")],</span>\n\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./loaders/demo-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">\'demo.[ext]\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    context<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">emitFile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    readResource<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在 demo loader 中可以使用这个 <code>name</code> 参数。</p>\n<p><strong>loaders/demo-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-utils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n <span class="token comment">// const url = loaderUtils.interpolateName(this, "[hash].[ext]", {</span>\n <span class="token comment">//   content,</span>\n <span class="token comment">// });</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">interpolateName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>执行 <code>node ./run-loader.js</code>，可以看到输出如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{\n  result: [ \'export default __webpack_public_path__ + "demo.txt";\' ],\n  resourceBuffer: &lt;Buffer 66 6f 6f 62 61 72 0a>,\n  cacheable: true,\n  fileDependencies: [ \'./demo.txt\' ],\n  contextDependencies: [],\n  missingDependencies: []\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote>\n<p>我们可以在使用参数之前对参数进行一些校验，这是可以使用 <a href="https://www.npmjs.com/package/schema-utils" target="_blank" rel="noopener noreferrer">schema-utils<OutboundLink/></a>。</p>\n</blockquote>\n<h2 id="在-webpack-中使用自定义-loader" tabindex="-1"><a class="header-anchor" href="#在-webpack-中使用自定义-loader" aria-hidden="true">#</a> 在 Webpack 中使用自定义 loader</h2>\n<p><strong>src/component.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">\'!../loaders/demo-loader?name=foo!./main.css\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面的使用方式非常繁琐，我们可以在 webpack 的配置文件中给 loader 定义一个别名，</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    resolveLoader<span class="token operator">:</span> <span class="token punctuation">{</span>\n      alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"demo-loader"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n          __dirname<span class="token punctuation">,</span>\n          <span class="token string">"loaders/demo-loader.js"</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这时候，我们可以这样引用这个 loader</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// import "!../loaders/demo-loader?name=foo!./main.css";</span>\n<span class="token keyword">import</span> <span class="token string">\'!demo-loader?name=foo!./main.css\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们也可以通过 Webpack 的<code>rule</code> 来引用 loader。</p>\n<h2 id="loader-的执行过程" tabindex="-1"><a class="header-anchor" href="#loader-的执行过程" aria-hidden="true">#</a> loader 的执行过程</h2>\n<p><img src="/courses/webpack/extend-loader-c.png" alt="23ffe365f20592287b5b0ef2ef282684.png">\nwebpack 中 loader 的执行过程。</p>\n<p>像浏览器中的事件一样，Webpack 中 loader 的执行过程也分两个阶段。我们可以在 pitch 的过程中做一些定制处理逻辑。Webpack 会从左到右解析 loader，然后从右到左执行。</p>\n<p>我们可以定义一个 pitch-loader 来定制 loader 的解析过程，我们设置可以终止 loader 的解析。</p>\n<p><strong>loaders/pitch-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'loader-utils\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> input <span class="token operator">+</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">remaining<span class="token punctuation">,</span> preceding<span class="token punctuation">,</span> input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Remaining: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>remaining<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, preceding: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>preceding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\nInput: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token string">\'pitched\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote>\n<p>每个 loader 都可以提供一个 <code>pitch</code> 函数给 Webpack 调用，在 <code>pitch</code> 函数里做一些定制处理。</p>\n</blockquote>\n<p>修改 run-loader，如下</p>\n<p><strong>run-loader.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">"./demo.txt"</span><span class="token punctuation">,</span>\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>\n      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./loaders/pitch-loader"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>node ./run-loader.js</code> 可以看到输出的一些定制处理信息。</p>\n<h2 id="在-loader-中使用缓存" tabindex="-1"><a class="header-anchor" href="#在-loader-中使用缓存" aria-hidden="true">#</a> 在 loader 中使用缓存</h2>\n<p>默认情况下 Webpack 都会开启 loader 的缓存，除非我们通过 <code>this.cacheable(false)</code> 来禁用。我们可以通过下面的代码来了解 loader 的缓存是如何工作的。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Calls only once for given resourcePath</span>\n  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> item <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载到缓存中</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> item<span class="token punctuation">;</span> <span class="token comment">// 命中缓存</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 未命中缓存</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>pitch loader 可以被用来添加一些额外的元数据信息。本例中，在 pitch 阶段，构建缓存，然后在执行阶段使用缓存。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>loader-runner 可以帮助我们理解 loader 是如何工作的。</p>\n<p>在 Webpack 中，loader 既可以是同步的，也可以是异步的。Webpack 提供了 <code>this.async()</code> 来实现异步 loader。</p>\n<p>我们可以通过 loader 实现动态生成代码。</p>\n<p>可以使用 loader-utils 来处理参数，同时使用 schema-utils 来对参数进行校验。</p>\n<p>在本地开发的时候，我们可以借助于 <code>resolveLoader.alias</code> 的形式避免不必要的路径引用。</p>\n<p>loader 的 pitch 阶段可以方便我们添加一些元数据和做 loader 的解决做一些定制化操作。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-02-04",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/extend-loader.html",pathLocale:"/",permalink:null,slug:"extend-loader",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/extend-loader.md",filePathRelative:"courses/webpack/extend-loader.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/extend-loader.html.vue",componentFilePathRelative:"pages/courses/webpack/extend-loader.html.vue",componentFileChunkName:"v-042365c5",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/extend-loader.html.js",dataFilePathRelative:"pages/courses/webpack/extend-loader.html.js",dataFileChunkName:"v-042365c5",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/extend-loader.html",htmlFilePathRelative:"courses/webpack/extend-loader.html"},{key:"v-149b9aa5",path:"/courses/webpack/extend-plugin.html",title:"通过插件来扩展 Webpack",lang:"zh-CN",frontmatter:{title:"通过插件来扩展 Webpack",description:"介绍 Webpack 中如何开发自定义插件",keywords:["Webpack"],date:"2021-02-05T00:00:00.000Z",key:34},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Webpack 插件的基本定义",slug:"webpack-插件的基本定义",children:[]},{level:2,title:"设置插件的开发环境",slug:"设置插件的开发环境",children:[]},{level:2,title:"实现插件的功能",slug:"实现插件的功能",children:[]},{level:2,title:"给插件传递参数",slug:"给插件传递参数",children:[]},{level:2,title:"编译器和编译信息",slug:"编译器和编译信息",children:[]},{level:2,title:"通过编译信息输出文件",slug:"通过编译信息输出文件",children:[]},{level:2,title:"处理 warning 和 error",slug:"处理-warning-和-error",children:[]},{level:2,title:"插件中还可以有插件",slug:"插件中还可以有插件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n与 loader 相比，插件可以更加灵活的扩展 Webpack 的功能。借助于插件机制，我们可以访问到 Webpack 的编译器和编译过程，通过各种钩子，我们可以方便的处理各种定制逻辑。Webpack 本身就是一个插件的集合，这些插件都按照 [tapable](https://www.npmjs.com/package/tapable) 插件接口规范实现。\n\n与 loader 不同，我们没有脱离于 Webpack 运行插件的方法，在插件的开发过程中，我们始终需要通过 Webpack 来运行插件。\n\n## Webpack 插件的基本定义\n\n一个 Webpack 插件必须要定义一个 `apply(compiler)` 函数，同时在构造函数中接受一个 `options` 参数。我们可以通过 [schema-utils](https://www.npmjs.com/package/schema-utils) 来对参数做一些校验。\n\n当我们将插件集成到 Webpack 配置中后，Webpack 会调用插件的构造函数初始化插件，之后调用 `apply(compiler)` 函数。`compiler` 对象提供了 Webpack 的一些插件 API，提供也提供了非常多的钩子。这些钩子可以在[官方文档](https://webpack.js.org/api/plugins/compiler/) 中查到。\n\n## 设置插件的开发环境\n\n为了更方便的开发插件，通常我们会在插件之上套一个壳子。在这个壳子中获取插件的输出，做一些断言等处理。我们可以借助于 [memfs](https://www.npmjs.com/package/memfs) 和 `compiler.outputFileSystem` 来处理插件中的文件系统输出。\n\n先安装 memfs.\n\n```bash\nnpm add memfs --develop\n```\n\n现在实现一个壳子。\n\n**plugins/test.js**\n\n```js\nconst webpack = require('webpack');\nconst { createFsFromVolume, Volume } = require('memfs');\n\n// The compiler helper accepts filenames should be in the output\n// so it's possible to assert the output easily.\nfunction compile(config, filenames = []) {\n  return new Promise((resolve, reject) => {\n    const compiler = webpack(config);\n    compiler.outputFileSystem = createFsFromVolume(new Volume());\n    const memfs = compiler.outputFileSystem;\n\n    compiler.run((err, stats) => {\n      if (err) {\n        return reject(err);\n      }\n\n      // Now only errors are captured from stats.\n      // It's possible to capture more to assert.\n      if (stats.hasErrors()) {\n        return reject(stats.toString('errors-only'));\n      }\n\n      const ret = {};\n      filenames.forEach((filename) => {\n        // 假设 Webpack 输出在 ./dist.\n        ret[filename] = memfs.readFileSync(`./dist/${filename}`, {\n          encoding: 'utf-8',\n        });\n      });\n      return resolve(ret);\n    });\n  });\n}\n\nasync function test() {\n  console.log(\n    await compile({\n      entry: './test-entry.js',\n    })\n  );\n}\n\ntest();\n```\n\n添加测试文件。\n\n**plugins/test-entry.js**\n\n```js\nconsole.log('hello from entry');\n```\n\n## 实现插件的功能\n\n插件的核心要处理两件事情，一是提供一个 apply 函数，二是处理构造参数。\n\n**plugins/demo-plugin.js**\n\n```js\nmodule.exports = class DemoPlugin {\n  apply() {\n    console.log('applying');\n  }\n};\n```\n\n现在测试一下这个插件，我们修改一下 `plugins/test.js` 的代码。\n\n**plugins/test.js**\n\n```js\n...\n\nconst DemoPlugin = require(\"./demo-plugin\");\n\n...\n\nasync function test() {\n  console.log(\n    await compile({\n      entry: \"./test-entry.js\",\n      plugins: [new DemoPlugin()],\n    })\n  );\n}\n```\n\n这时候执行 `node ./test.js`，我们可以看到控制台输出了 `applying` 这条信息。\n\n## 给插件传递参数\n\n我们通过构造函数给插件传递参数。\n\n**plugins/demo-plugin.js**\n\n```js\nmodule.exports = class DemoPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply() {\n    console.log('apply', this.options);\n  }\n};\n```\n\n添加一些参数。\n\n**plugins/test.js**\n\n```js\nasync function test() {\n  console.log(\n    await compile({\n      entry: './test-entry.js',\n      plugins: [new DemoPlugin({ name: 'demo' })],\n    })\n  );\n}\n```\n\n此时再执行 `node ./test.js`，可以看到 `apply { name: 'demo' }` 的输出。\n\n## 编译器和编译信息\n\n`apply` 接受一个 `compiler` 参数。\n\n**plugins/demo-plugin.js**\n\n```js\nmodule.exports = class DemoPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    console.log(compiler);\n  }\n};\n```\n\n通过 Webpack 的[插件文档](https://webpack.js.org/api/plugins/)，我们可以看到编译器提供了很多钩子，每一个钩子都与一个编译阶段对应。比如我们需要输出文件，我们可以监听 `emit` 事件获取文件内容。\n\n修改插件代码，监听 `compilation` 事件。\n\n**plugins/demo-plugin.js**\n\n```js\nmodule.exports = class DemoPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap('DemoPlugin', (compilation) =>\n      console.log(compilation)\n    );\n  }\n};\n```\n\n此时执行 `node ./test.js` 我们可以看到输出了非常多的信息。这个编译信息里包含了 Webpack 整个的依赖图信息。我们可以通过 `compilation` 访问 `entry`，`chunk`，`module` 等。\n\n## 通过编译信息输出文件\n\n`compilation` 上的 `assets` 可以用来输出一些资源文件。我们需要借助于 [webpack-sources](https://www.npmjs.com/package/webpack-sources) 这个文件抽象工具来实现。从 Webpack 5 开始，webpack-sources 已经被默认集成到了 webpack 中。\n\n我们通过 `webpack-sources` 的 `RawSource` 来输出文件。\n\n**plugins/demo-plugin.js**\n\n```js\nconst { sources, Compilation } = require('webpack');\n\nmodule.exports = class DemoPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    const pluginName = 'DemoPlugin';\n    const { name } = this.options;\n\n    compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {\n      compilation.hooks.processAssets.tap(\n        {\n          name: pluginName,\n          // See lib/Compilation.js in webpack for more\n          stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,\n        },\n        () => compilation.emitAsset(name, new sources.RawSource('hello', true))\n      );\n    });\n  }\n};\n```\n\n为了确保文件已经输出，我们调整下 `test.js` 的代码。\n\n**plugins/test.js**\n\n```js\nasync function test() {\n  console.log(\n    await compile(\n      {\n        entry: './test-entry.js',\n        plugins: [new DemoPlugin({ name: 'demo' })],\n      },\n      ['demo']\n    )\n  );\n}\n```\n\n执行 `node ./test.js`，可以看到控制台输出 `{ demo: 'hello' }`。\n\n## 处理 warning 和 error\n\n我们可以通过 `throw new Error(\"Message\")` 的方式来终止插件的运行。如果我们希望将告警信息或者错误信息提示给用户，我们可以通过 `compilation.warnings` 和 `compilation.errors` 来实现。\n\n```js\ncompilation.warnings.push('warning');\ncompilation.errors.push('error');\n```\n\nWebpack 还提供了记录日志的 API。\n\n```js\nconst logger = compiler.getInfrastructureLogger('Demo Plugin');\nlogger.log('hello from compiler');\n```\n\n这个日志 API 与普通的 `console.error`、`console.warning` 等相似，可以通过[官方的日志文档](https://webpack.js.org/api/logging/)了解详细信息。\n\n## 插件中还可以有插件\n\n插件还可以提供自己的钩子函数。[html-webpack-plugin](https://www.npmjs.com/package/html-webpack-plugin) 就是一个很好的例子。\n\n## 总结\n\n插件可以截断 Webpack 的执行过程，做一些定制处理逻辑。虽然 loader 也可以实现类似的能力，但是插件比 loader 更加的灵活。\n\n插件可以和 loader 结合使用，比如 `MiniCssExtractPlugin`。\n\n插件可以访问 Webpack 的 `compiler` 和 `compilation`。这两个对象都提供了丰富的钩子函数以供调用。\n\n插件可以输出新的资源文件，也可以将已有的资源文件处理后重新输出。\n\n插件可以有自己的插件体系，`HtmlWebpackPlugin` 就是一个很好的例子。\n",contentRendered:'<p>与 loader 相比，插件可以更加灵活的扩展 Webpack 的功能。借助于插件机制，我们可以访问到 Webpack 的编译器和编译过程，通过各种钩子，我们可以方便的处理各种定制逻辑。Webpack 本身就是一个插件的集合，这些插件都按照 <a href="https://www.npmjs.com/package/tapable" target="_blank" rel="noopener noreferrer">tapable<OutboundLink/></a> 插件接口规范实现。</p>\n<p>与 loader 不同，我们没有脱离于 Webpack 运行插件的方法，在插件的开发过程中，我们始终需要通过 Webpack 来运行插件。</p>\n<h2 id="webpack-插件的基本定义" tabindex="-1"><a class="header-anchor" href="#webpack-插件的基本定义" aria-hidden="true">#</a> Webpack 插件的基本定义</h2>\n<p>一个 Webpack 插件必须要定义一个 <code>apply(compiler)</code> 函数，同时在构造函数中接受一个 <code>options</code> 参数。我们可以通过 <a href="https://www.npmjs.com/package/schema-utils" target="_blank" rel="noopener noreferrer">schema-utils<OutboundLink/></a> 来对参数做一些校验。</p>\n<p>当我们将插件集成到 Webpack 配置中后，Webpack 会调用插件的构造函数初始化插件，之后调用 <code>apply(compiler)</code> 函数。<code>compiler</code> 对象提供了 Webpack 的一些插件 API，提供也提供了非常多的钩子。这些钩子可以在<a href="https://webpack.js.org/api/plugins/compiler/" target="_blank" rel="noopener noreferrer">官方文档<OutboundLink/></a> 中查到。</p>\n<h2 id="设置插件的开发环境" tabindex="-1"><a class="header-anchor" href="#设置插件的开发环境" aria-hidden="true">#</a> 设置插件的开发环境</h2>\n<p>为了更方便的开发插件，通常我们会在插件之上套一个壳子。在这个壳子中获取插件的输出，做一些断言等处理。我们可以借助于 <a href="https://www.npmjs.com/package/memfs" target="_blank" rel="noopener noreferrer">memfs<OutboundLink/></a> 和 <code>compiler.outputFileSystem</code> 来处理插件中的文件系统输出。</p>\n<p>先安装 memfs.</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> memfs --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>现在实现一个壳子。</p>\n<p><strong>plugins/test.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createFsFromVolume<span class="token punctuation">,</span> Volume <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'memfs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// The compiler helper accepts filenames should be in the output</span>\n<span class="token comment">// so it\'s possible to assert the output easily.</span>\n<span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> filenames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> <span class="token function">createFsFromVolume</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> memfs <span class="token operator">=</span> compiler<span class="token punctuation">.</span>outputFileSystem<span class="token punctuation">;</span>\n\n    compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Now only errors are captured from stats.</span>\n      <span class="token comment">// It\'s possible to capture more to assert.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">\'errors-only\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      filenames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">// 假设 Webpack 输出在 ./dist.</span>\n        ret<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> memfs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          encoding<span class="token operator">:</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token string">\'./test-entry.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>添加测试文件。</p>\n<p><strong>plugins/test-entry.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'hello from entry\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="实现插件的功能" tabindex="-1"><a class="header-anchor" href="#实现插件的功能" aria-hidden="true">#</a> 实现插件的功能</h2>\n<p>插件的核心要处理两件事情，一是提供一个 apply 函数，二是处理构造参数。</p>\n<p><strong>plugins/demo-plugin.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'applying\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在测试一下这个插件，我们修改一下 <code>plugins/test.js</code> 的代码。</p>\n<p><strong>plugins/test.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">...</span>\n\n<span class="token keyword">const</span> DemoPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./demo-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token string">"./test-entry.js"</span><span class="token punctuation">,</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DemoPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这时候执行 <code>node ./test.js</code>，我们可以看到控制台输出了 <code>applying</code> 这条信息。</p>\n<h2 id="给插件传递参数" tabindex="-1"><a class="header-anchor" href="#给插件传递参数" aria-hidden="true">#</a> 给插件传递参数</h2>\n<p>我们通过构造函数给插件传递参数。</p>\n<p><strong>plugins/demo-plugin.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'apply\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>添加一些参数。</p>\n<p><strong>plugins/test.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token string">\'./test-entry.js\'</span><span class="token punctuation">,</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DemoPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">\'demo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>此时再执行 <code>node ./test.js</code>，可以看到 <code>apply { name: \'demo\' }</code> 的输出。</p>\n<h2 id="编译器和编译信息" tabindex="-1"><a class="header-anchor" href="#编译器和编译信息" aria-hidden="true">#</a> 编译器和编译信息</h2>\n<p><code>apply</code> 接受一个 <code>compiler</code> 参数。</p>\n<p><strong>plugins/demo-plugin.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过 Webpack 的<a href="https://webpack.js.org/api/plugins/" target="_blank" rel="noopener noreferrer">插件文档<OutboundLink/></a>，我们可以看到编译器提供了很多钩子，每一个钩子都与一个编译阶段对应。比如我们需要输出文件，我们可以监听 <code>emit</code> 事件获取文件内容。</p>\n<p>修改插件代码，监听 <code>compilation</code> 事件。</p>\n<p><strong>plugins/demo-plugin.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'DemoPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此时执行 <code>node ./test.js</code> 我们可以看到输出了非常多的信息。这个编译信息里包含了 Webpack 整个的依赖图信息。我们可以通过 <code>compilation</code> 访问 <code>entry</code>，<code>chunk</code>，<code>module</code> 等。</p>\n<h2 id="通过编译信息输出文件" tabindex="-1"><a class="header-anchor" href="#通过编译信息输出文件" aria-hidden="true">#</a> 通过编译信息输出文件</h2>\n<p><code>compilation</code> 上的 <code>assets</code> 可以用来输出一些资源文件。我们需要借助于 <a href="https://www.npmjs.com/package/webpack-sources" target="_blank" rel="noopener noreferrer">webpack-sources<OutboundLink/></a> 这个文件抽象工具来实现。从 Webpack 5 开始，webpack-sources 已经被默认集成到了 webpack 中。</p>\n<p>我们通过 <code>webpack-sources</code> 的 <code>RawSource</code> 来输出文件。</p>\n<p><strong>plugins/demo-plugin.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> sources<span class="token punctuation">,</span> Compilation <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">\'DemoPlugin\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">;</span>\n\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>processAssets<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> pluginName<span class="token punctuation">,</span>\n          <span class="token comment">// See lib/Compilation.js in webpack for more</span>\n          stage<span class="token operator">:</span> Compilation<span class="token punctuation">.</span><span class="token constant">PROCESS_ASSETS_STAGE_ADDITIONAL</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> compilation<span class="token punctuation">.</span><span class="token function">emitAsset</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">sources<span class="token punctuation">.</span>RawSource</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>为了确保文件已经输出，我们调整下 <code>test.js</code> 的代码。</p>\n<p><strong>plugins/test.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span>\n        entry<span class="token operator">:</span> <span class="token string">\'./test-entry.js\'</span><span class="token punctuation">,</span>\n        plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DemoPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">\'demo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span><span class="token string">\'demo\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>node ./test.js</code>，可以看到控制台输出 <code>{ demo: \'hello\' }</code>。</p>\n<h2 id="处理-warning-和-error" tabindex="-1"><a class="header-anchor" href="#处理-warning-和-error" aria-hidden="true">#</a> 处理 warning 和 error</h2>\n<p>我们可以通过 <code>throw new Error(&quot;Message&quot;)</code> 的方式来终止插件的运行。如果我们希望将告警信息或者错误信息提示给用户，我们可以通过 <code>compilation.warnings</code> 和 <code>compilation.errors</code> 来实现。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>compilation<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'warning\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncompilation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Webpack 还提供了记录日志的 API。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> logger <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getInfrastructureLogger</span><span class="token punctuation">(</span><span class="token string">\'Demo Plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'hello from compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个日志 API 与普通的 <code>console.error</code>、<code>console.warning</code> 等相似，可以通过<a href="https://webpack.js.org/api/logging/" target="_blank" rel="noopener noreferrer">官方的日志文档<OutboundLink/></a>了解详细信息。</p>\n<h2 id="插件中还可以有插件" tabindex="-1"><a class="header-anchor" href="#插件中还可以有插件" aria-hidden="true">#</a> 插件中还可以有插件</h2>\n<p>插件还可以提供自己的钩子函数。<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="noopener noreferrer">html-webpack-plugin<OutboundLink/></a> 就是一个很好的例子。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>插件可以截断 Webpack 的执行过程，做一些定制处理逻辑。虽然 loader 也可以实现类似的能力，但是插件比 loader 更加的灵活。</p>\n<p>插件可以和 loader 结合使用，比如 <code>MiniCssExtractPlugin</code>。</p>\n<p>插件可以访问 Webpack 的 <code>compiler</code> 和 <code>compilation</code>。这两个对象都提供了丰富的钩子函数以供调用。</p>\n<p>插件可以输出新的资源文件，也可以将已有的资源文件处理后重新输出。</p>\n<p>插件可以有自己的插件体系，<code>HtmlWebpackPlugin</code> 就是一个很好的例子。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-02-05",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/extend-plugin.html",pathLocale:"/",permalink:null,slug:"extend-plugin",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/extend-plugin.md",filePathRelative:"courses/webpack/extend-plugin.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/extend-plugin.html.vue",componentFilePathRelative:"pages/courses/webpack/extend-plugin.html.vue",componentFileChunkName:"v-149b9aa5",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/extend-plugin.html.js",dataFilePathRelative:"pages/courses/webpack/extend-plugin.html.js",dataFileChunkName:"v-149b9aa5",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/extend-plugin.html",htmlFilePathRelative:"courses/webpack/extend-plugin.html"},{key:"v-3412e5cc",path:"/courses/webpack/file-hash.html",title:"给文件名添加 hash 值",lang:"zh-CN",frontmatter:{title:"给文件名添加 hash 值",description:"介绍 Webpack 中如何给文件名添加 hash 值",keywords:["Webpack"],date:"2021-01-22T00:00:00.000Z",key:20},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"占位符（placeholder）",slug:"占位符-placeholder",children:[]},{level:2,title:"使用占位符",slug:"使用占位符",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n如果每次构建输出的文件名称是一样的，会给在客户端做长缓存带来很大的麻烦。因此，我们需要在输出的文件名中添加一些 hash 值，使得每次构建输出的文件名称是不一样的。\n\n> 从 Webpack 5 开始，Webpack 开始使用固定的方式来决定输出的文件名，我们可以通过 `optimization.moduleIds` 和 `optimization.chunkIds` 这两个字段进行控制。\n\n## 占位符（placeholder）\n\nWebpack 提供了一些占位符：\n\n- `[id]` 返回 chunk id\n- `[path]` 返回文件路径\n- `[name]` 返回文件名\n- `[ext]` 返回文件扩展名\n- `[fullhash]` 返回本次构建的 hash，如果本次构建过程中有任何一部分发生变化，这个 hash 也会变化\n- `[chunkhash]` 返回每一个 entry chunk 的 hash。Webpack 配置定义的每一个 entry 都有一个自己的 hash，当 entry 中任何一部分发生变化，这个 hash 也会发生变化。`[chunkhash]` 比 `[fullhash]` 粒度更细一点。\n- `[contenthash]` 返回模块内容的 hash。从 Webpack 5 开始，这个 hash 值被默认使用在生产模式构建中。\n\n假设有如下配置：\n\n```js\nconst config = {\n  output: {\n    path: PATHS.build,\n    filename: \'[name].[contenthash].js\',\n  },\n};\n```\n\nWebpack 构建输出的文件名为：\n\n```\nmain.d587bbd6e38337f5accd.js\nvendor.dc746a5db4ed650296e1.js\n```\n\n此时，如果文件内容发生变化，则 `[contenthash]` 也会相应的变化，此时，浏览器缓存就会失效，浏览器就会重新发起一个请求来加载变化了的文件。即，如果仅仅只要 `main.js` 发生了变化，那么浏览器只会重新请求加载 `main.js`。\n\n我们还可以将 hash 值加载请求参数中，比如 `main.js?d587bbd6e38337f5accd`, 这样的话，输出文件名不变，通过查询参数的变化来使缓存失效。\n\n## 使用占位符\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  {\n    output: {\n      chunkFilename: "[name].[contenthash].js",\n      filename: "[name].[contenthash].js",\n      assetModuleFilename: "[name].[contenthash][ext][query]",\n    },\n  },\n  ...\n]);\n```\n\n同时，我们还要给 css 也加上 hash。\n\n**webpack.parts.js**\n\n```js\nexports.extractCSS = ({ options = {}, loaders = [] } = {}) => {\n  return {\n    ...\n    plugins: [\n      new MiniCssExtractPlugin({\n    //    filename: "[name].css",\n        filename: "[name].[contenthash].css",\n      }),\n    ],\n  };\n};\n```\n\n执行 `npm run build`，可以看到输出如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 129 KiB\n    asset 935.a25ff4285adcf5d835fd.js 126 KiB [emitted] [immutable] [minimized] (id hint: vendors) 2 related assets\n    asset main.fdae79f138a0e0cd6a30.js 3.38 KiB [emitted] [immutable] [minimized] (name: main) 1 related asset\n    asset 958.1752e720e564a63a9d5f.js 204 bytes [emitted] [immutable] [minimized] 1 related asset\n  asset main.dd02bdb46b234aa6a450.css 1.37 KiB [emitted] [immutable] [minimized] (name: main)\n  asset index.html 322 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = 935.a25ff4285adcf5d835fd.js 126 KiB main.dd02bdb46b234aa6a450.css 1.37 KiB main.fdae79f138a0e0cd6a30.js 3.38 KiB 2 auxiliary assets\n  runtime modules 7.92 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 18695 ms\n```\n\n现在尝试编辑 `main.css`，可以发现构建输出的文件名发生了变化。\n\n## 总结\n\nWebpack 提供的占位符可以帮助我们给输出文件名添加额外信息。\n\n在这些占位符中，最有价值的是 `[name]`, `[contenthash]` 和 `[ext]`。 `[contenthash]` 基于文件内容生成 hash 值。\n\n如果要导出 css 文件，即用了 `MiniCssExtractPlugin`，那么也需要在 css 文件名中使用 `[contenthash]`。\n',contentRendered:'<p>如果每次构建输出的文件名称是一样的，会给在客户端做长缓存带来很大的麻烦。因此，我们需要在输出的文件名中添加一些 hash 值，使得每次构建输出的文件名称是不一样的。</p>\n<blockquote>\n<p>从 Webpack 5 开始，Webpack 开始使用固定的方式来决定输出的文件名，我们可以通过 <code>optimization.moduleIds</code> 和 <code>optimization.chunkIds</code> 这两个字段进行控制。</p>\n</blockquote>\n<h2 id="占位符-placeholder" tabindex="-1"><a class="header-anchor" href="#占位符-placeholder" aria-hidden="true">#</a> 占位符（placeholder）</h2>\n<p>Webpack 提供了一些占位符：</p>\n<ul>\n<li><code>[id]</code> 返回 chunk id</li>\n<li><code>[path]</code> 返回文件路径</li>\n<li><code>[name]</code> 返回文件名</li>\n<li><code>[ext]</code> 返回文件扩展名</li>\n<li><code>[fullhash]</code> 返回本次构建的 hash，如果本次构建过程中有任何一部分发生变化，这个 hash 也会变化</li>\n<li><code>[chunkhash]</code> 返回每一个 entry chunk 的 hash。Webpack 配置定义的每一个 entry 都有一个自己的 hash，当 entry 中任何一部分发生变化，这个 hash 也会发生变化。<code>[chunkhash]</code> 比 <code>[fullhash]</code> 粒度更细一点。</li>\n<li><code>[contenthash]</code> 返回模块内容的 hash。从 Webpack 5 开始，这个 hash 值被默认使用在生产模式构建中。</li>\n</ul>\n<p>假设有如下配置：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token constant">PATHS</span><span class="token punctuation">.</span>build<span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].[contenthash].js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Webpack 构建输出的文件名为：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>main.d587bbd6e38337f5accd.js\nvendor.dc746a5db4ed650296e1.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此时，如果文件内容发生变化，则 <code>[contenthash]</code> 也会相应的变化，此时，浏览器缓存就会失效，浏览器就会重新发起一个请求来加载变化了的文件。即，如果仅仅只要 <code>main.js</code> 发生了变化，那么浏览器只会重新请求加载 <code>main.js</code>。</p>\n<p>我们还可以将 hash 值加载请求参数中，比如 <code>main.js?d587bbd6e38337f5accd</code>, 这样的话，输出文件名不变，通过查询参数的变化来使缓存失效。</p>\n<h2 id="使用占位符" tabindex="-1"><a class="header-anchor" href="#使用占位符" aria-hidden="true">#</a> 使用占位符</h2>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      chunkFilename<span class="token operator">:</span> <span class="token string">"[name].[contenthash].js"</span><span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token string">"[name].[contenthash].js"</span><span class="token punctuation">,</span>\n      assetModuleFilename<span class="token operator">:</span> <span class="token string">"[name].[contenthash][ext][query]"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>同时，我们还要给 css 也加上 hash。</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">extractCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//    filename: "[name].css",</span>\n        filename<span class="token operator">:</span> <span class="token string">"[name].[contenthash].css"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>npm run build</code>，可以看到输出如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 129 KiB\n    asset 935.a25ff4285adcf5d835fd.js 126 KiB [emitted] [immutable] [minimized] (id hint: vendors) 2 related assets\n    asset main.fdae79f138a0e0cd6a30.js 3.38 KiB [emitted] [immutable] [minimized] (name: main) 1 related asset\n    asset 958.1752e720e564a63a9d5f.js 204 bytes [emitted] [immutable] [minimized] 1 related asset\n  asset main.dd02bdb46b234aa6a450.css 1.37 KiB [emitted] [immutable] [minimized] (name: main)\n  asset index.html 322 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = 935.a25ff4285adcf5d835fd.js 126 KiB main.dd02bdb46b234aa6a450.css 1.37 KiB main.fdae79f138a0e0cd6a30.js 3.38 KiB 2 auxiliary assets\n  runtime modules 7.92 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 18695 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>现在尝试编辑 <code>main.css</code>，可以发现构建输出的文件名发生了变化。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 提供的占位符可以帮助我们给输出文件名添加额外信息。</p>\n<p>在这些占位符中，最有价值的是 <code>[name]</code>, <code>[contenthash]</code> 和 <code>[ext]</code>。 <code>[contenthash]</code> 基于文件内容生成 hash 值。</p>\n<p>如果要导出 css 文件，即用了 <code>MiniCssExtractPlugin</code>，那么也需要在 css 文件名中使用 <code>[contenthash]</code>。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-22",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/file-hash.html",pathLocale:"/",permalink:null,slug:"file-hash",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/file-hash.md",filePathRelative:"courses/webpack/file-hash.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/file-hash.html.vue",componentFilePathRelative:"pages/courses/webpack/file-hash.html.vue",componentFileChunkName:"v-3412e5cc",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/file-hash.html.js",dataFilePathRelative:"pages/courses/webpack/file-hash.html.js",dataFileChunkName:"v-3412e5cc",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/file-hash.html",htmlFilePathRelative:"courses/webpack/file-hash.html"},{key:"v-266b3de9",path:"/courses/webpack/i18n.html",title:"国际化（i18n）",lang:"zh-CN",frontmatter:{title:"国际化（i18n）",description:"介绍 Webpack 中如何处理国际化（i18n）",keywords:["Webpack"],date:"2021-02-01T00:00:00.000Z",key:30},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加不同语言的翻译文件",slug:"添加不同语言的翻译文件",children:[]},{level:2,title:"配置 Webpack",slug:"配置-webpack",children:[]},{level:2,title:"在应用中使用国际化",slug:"在应用中使用国际化",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n国际化（Internationalization, i18n）本身是一个很大的话题，通常来说，就是将 UI 翻译成不同的语言。本地化（Localization, l10n）更具体一点，描述的是如何将 UI 与适配到某一个具体的地区（locale）。不同的地区可能有相同的语言，但是会有不同的时间格式或者尺寸单位等。\n\n在 Webpack 中，我们可以使用动态加载的方式来实现国际化。\n\n## 添加不同语言的翻译文件\n\n**translations/en.json**\n\n```json\n{ \"hello\": \"Hello world\" }\n```\n\n**translations/zh.json**\n\n```json\n{ \"hello\": \"你好\" }\n```\n\n## 配置 Webpack\n\n我们复用一些前面章节中定义的配置。\n\n**webpack.i18n.js**\n\n```js\nconst path = require('path');\nconst { MiniHtmlWebpackPlugin } = require('mini-html-webpack-plugin');\nconst APP_SOURCE = path.join(__dirname, 'src');\n\nmodule.exports = {\n  mode: 'production',\n  entry: { index: path.join(APP_SOURCE, 'i18n.js') },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        include: APP_SOURCE,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  plugins: [new MiniHtmlWebpackPlugin()],\n};\n```\n\n**.babelrc**\n\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", { \"modules\": false }],\n    \"@babel/preset-react\"\n  ]\n}\n```\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"build:i18n\": \"wp --config webpack.i18n.js\"\n  }\n}\n```\n\n## 在应用中使用国际化\n\n我们用 React 来演示这个应用，同时用 `import` 来加载国际化。\n\n**src/i18n.js**\n\n```js\nimport 'regenerator-runtime/runtime';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  const [language, setLanguage] = useState('en');\n  const [hello, setHello] = useState('');\n\n  const changeLanguage = () => setLanguage(language === 'en' ? 'fi' : 'en');\n\n  useEffect(() => {\n    translate(language, 'hello').then(setHello).catch(console.error);\n  }, [language]);\n\n  return (\n    <div>\n      <button onClick={changeLanguage}>Change language</button>\n      <div>{hello}</div>\n    </div>\n  );\n};\n\nfunction translate(locale, text) {\n  return getLocaleData(locale).then((messages) => messages[text]);\n}\n\nasync function getLocaleData(locale) {\n  return import(`../messages/${locale}.json`);\n}\n\nconst root = document.createElement('div');\n\nroot.setAttribute('id', 'app');\ndocument.body.appendChild(root);\n\nReactDOM.render(<App />, root);\n```\n\n此时执行 `npm run build:i18n`，然后启动应用 `npx serve dist`，我们可以看到随着按钮点击，应用使用了不同的翻译资源。\n\n> 如果要去除应用开头的 `regenerator-runtime/runtime`，我们需要使用 Babel 的 `useBuiltIns`，可以在[加载 JavaScript](./load-js.md) 一章中了解具体的使用方法。\n\n## 总结\n\nWebpack 支持多种 i18n 和 l10n 的方式。本文提供了一种入门方案，使用 `import` 动态加载国际化资源。\n",contentRendered:'<p>国际化（Internationalization, i18n）本身是一个很大的话题，通常来说，就是将 UI 翻译成不同的语言。本地化（Localization, l10n）更具体一点，描述的是如何将 UI 与适配到某一个具体的地区（locale）。不同的地区可能有相同的语言，但是会有不同的时间格式或者尺寸单位等。</p>\n<p>在 Webpack 中，我们可以使用动态加载的方式来实现国际化。</p>\n<h2 id="添加不同语言的翻译文件" tabindex="-1"><a class="header-anchor" href="#添加不同语言的翻译文件" aria-hidden="true">#</a> 添加不同语言的翻译文件</h2>\n<p><strong>translations/en.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token string">"Hello world"</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>translations/zh.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token string">"你好"</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="配置-webpack" tabindex="-1"><a class="header-anchor" href="#配置-webpack" aria-hidden="true">#</a> 配置 Webpack</h2>\n<p>我们复用一些前面章节中定义的配置。</p>\n<p><strong>webpack.i18n.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> MiniHtmlWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">APP_SOURCE</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span> index<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span> <span class="token string">\'i18n.js\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> <span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>.babelrc</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{\n  "presets": [\n    ["@babel/preset-env", { "modules": false }],\n    "@babel/preset-react"\n  ]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build:i18n"</span><span class="token operator">:</span> <span class="token string">"wp --config webpack.i18n.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="在应用中使用国际化" tabindex="-1"><a class="header-anchor" href="#在应用中使用国际化" aria-hidden="true">#</a> 在应用中使用国际化</h2>\n<p>我们用 React 来演示这个应用，同时用 <code>import</code> 来加载国际化。</p>\n<p><strong>src/i18n.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">\'regenerator-runtime/runtime\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>language<span class="token punctuation">,</span> setLanguage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'en\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>hello<span class="token punctuation">,</span> setHello<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">changeLanguage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setLanguage</span><span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">\'en\'</span> <span class="token operator">?</span> <span class="token string">\'fi\'</span> <span class="token operator">:</span> <span class="token string">\'en\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">translate</span><span class="token punctuation">(</span>language<span class="token punctuation">,</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>setHello<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>language<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>changeLanguage<span class="token punctuation">}</span><span class="token operator">></span>Change language<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>hello<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token parameter">locale<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">getLocaleData</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">messages</span><span class="token punctuation">)</span> <span class="token operator">=></span> messages<span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getLocaleData</span><span class="token punctuation">(</span><span class="token parameter">locale</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../messages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nroot<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">,</span> <span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>此时执行 <code>npm run build:i18n</code>，然后启动应用 <code>npx serve dist</code>，我们可以看到随着按钮点击，应用使用了不同的翻译资源。</p>\n<blockquote>\n<p>如果要去除应用开头的 <code>regenerator-runtime/runtime</code>，我们需要使用 Babel 的 <code>useBuiltIns</code>，可以在<RouterLink to="/courses/webpack/load-js.html">加载 JavaScript</RouterLink> 一章中了解具体的使用方法。</p>\n</blockquote>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 支持多种 i18n 和 l10n 的方式。本文提供了一种入门方案，使用 <code>import</code> 动态加载国际化资源。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-02-01",deps:[],hoistedTags:[],links:[{raw:"./load-js.md",relative:"courses/webpack/load-js.md",absolute:"/courses/webpack/load-js.md"}],pathInferred:"/courses/webpack/i18n.html",pathLocale:"/",permalink:null,slug:"i18n",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/i18n.md",filePathRelative:"courses/webpack/i18n.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/i18n.html.vue",componentFilePathRelative:"pages/courses/webpack/i18n.html.vue",componentFileChunkName:"v-266b3de9",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/i18n.html.js",dataFilePathRelative:"pages/courses/webpack/i18n.html.js",dataFileChunkName:"v-266b3de9",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/i18n.html",htmlFilePathRelative:"courses/webpack/i18n.html"},{key:"v-e3c551aa",path:"/courses/webpack/load-css.html",title:"加载样式文件",lang:"zh-CN",frontmatter:{title:"加载样式文件",description:"介绍 Webpack 如何处理样式文件",keywords:["Webpack"],date:"2021-01-07T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"加载 css 文件",slug:"加载-css-文件",children:[]},{level:2,title:"添加初始样式",slug:"添加初始样式",children:[]},{level:2,title:"PostCSS",slug:"postcss",children:[]},{level:2,title:"使用 CSS 预处理器",slug:"使用-css-预处理器",children:[]},{level:2,title:"深入理解 css-loader",slug:"深入理解-css-loader",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n默认情况下，Webpack 不支持处理样式文件，需要借助于 `loader` 和 插件。\n\n## 加载 css 文件\n\n要加载 css 文件，我们需要 [css-loader](https://www.npmjs.com/package/css-loader) 和 [style-loader](https://www.npmjs.com/package/style-loader).\n\ncss-loader 会在所有匹配到的文件中查找 `@import` 和 `url()` 语句，并将它们当成普通的 import 语句来处理。如果 `@import` 语句指向了一个外部资源，比如一个 url 链接，那么 css-loader 会跳过。\n\nstyle-loader 会将样式注入到 html 上的 style 元素中。可以通过配置来修改将样式注入 style 元素的方式。同时 style-loader 也实现了 HMR 接口，提供了更好的开发体验。\n\n将样式内联到页面中通常不是一个好的实践方式，我们需要使用 `MiniCssExtractPlugin` 这个插件来讲 css 导出到文件中。这个插件后面章节会做说明。\n\n安装依赖包：\n\n```bash\nnpm add css-loader style-loader --develop\n```\n\n在 **webpack.parts.js** 中添加\n\n```js\nexports.loadCSS = () => ({\n  module: {\n    rules: [{ test: /\\.css$/, use: ['style-loader', 'css-loader'] }],\n  },\n});\n```\n\n上面的配置说明如果文件是 `.css` 结尾，则需要使用这两个 loader。loader 返回处理后的文件内容，loader 之间可以像 Unix 的管道一样连接起来，从右向左一次处理：\n\n```js\nstyleLoader(cssLoader(input));\n```\n\n将配置组合到 **webpack.config.js** 中\n\n```js\nconst commonConfig = merge([...parts.loadCSS()]);\n```\n\n## 添加初始样式\n\n**src/main.css**\n\n```css\nbody {\n  background: cornsilk;\n}\n```\n\n在代码中引用这段样式， **src/index.js**\n\n```js\nimport \"./main.css\";\n...\n```\n\n启动开发服务器 `npm run start`，可以看到浏览器中的背景色发生了变化。这时，修改背景色为 `background: lime`, 浏览器中的背景色会发生相应变化。\n\n![helloworld](/courses/webpack/helloworld-color-c.png)\n\n## PostCSS\n\n[PostCSS](http://postcss.org/) 允许你通过其提供的各种插件对 CSS 做各种转换处理。PostCSS 类似于处理样式的 Babel。后面章节会做说明。\n\n## 使用 CSS 预处理器\n\nWebpack 支持多种主流的 CSS 预处理器。\n\n- 可以通过 [less-loader](https://www.npmjs.com/package/less-loader) 使用 less 预处理器。\n- 可以通过 [sass-loader](https://www.npmjs.com/package/sass-loader) 或者 [fast-sass-loader](https://www.npmjs.com/package/fast-sass-loader) 来使用 sass 预处理器。\n- 可以通过 [stylus-loader](https://www.npmjs.com/package/stylus-loader) 来使用 stylus 预处理器。\n\n## 深入理解 css-loader\n\n要更好的使用 css-loader，首先需要明白 css-loader 是如何查找文件的。css-loader 默认只处理相对路径导入的模块，绝对路径导入(`url(\"https://mydomain.com/static/demo.png\")`)或者根路径导入（`url(\"/static/img/demo.png\")`）的模块不会被处理。\n\n如果项目中需要使用到这些外部模块，需要将这些模块拷贝到项目中来，可以借助 [webpack-copy-plugin](https://www.npmjs.com/package/copy-webpack-plugin) 完成。\n\n如果你需要自定义 css-loader 如何处理要导入的模块，你需要设置 `importLoaders` 这个选项，来告诉 css-loader 在处理待导入模块之前，该模块必须要被多少个其他模块处理过。\n\n举个例子加以说明。比如需要在 css 文件导入一个 sass 文件，`@import \"./variables.sass\";`， 那么为了能处理 sass 文件，loader 的配置需要配置为：\n\n```js\nconst config = {\n  test: /\\.css$/,\n  use: [\n    'style-loader',\n    {\n      loader: 'css-loader',\n      options: { importLoaders: 1 },\n    },\n    'sass-loader',\n  ],\n};\n```\n\n此时，`importLoaders` 为 1，告诉 css-loader 在处理导入的模块时，需要确保被导入的模块需要被 sass-loader 处理过。如果添加更多的 loader，比如再加一个 postcss-loader， 则 `importLoaders` 需要改为 2.\n\n> `importLoaders` 选项只在 css-loader 无法处理待导入的模块的时候才会被使用。比如上面的例子 css 文件中导入了一个 sass 文件，要处理 sass 文件需要借助于 sass-loader，因此需要确保在 css-loader 处理模块之前，sass-loader 先处理了该模块。而如果在 sass 文件中导入 sass 文件，则模块本身已经被 sass-loader 处理过，就不需要 css-loader 处理 sass 文件了。\n\n如果需要导入 `node_modules` 目录下的样式文件，则需要加一个 `~` 前缀。比如导入 bootstrap 的样式文件 `@import \"~bootstrap/less/bootstrap\";`。`~` 告诉 webpack 该模块不是一个相对路径引入的模块，需要在 node_modules 目录下查找。\n\n## 总结\n\nWebapck 可以处理各种格式的样式文件，默认情况下，所有样式都会编译成 JavaScript bundle。\n\ncss-loader 处理 `@import` 和 `url()` 语句，style-loader 负责将样式编译成 js，同时实现了 HMR 接口。\n\nWebapck 支持多种预处理器，可以将各种格式的样式转换成 CSS，常见的预处理器有 Sass，Less 和 Stylus。\n\nPostCSS 借助其自身的插件系统，提供了多种处理 CSS 的能力，比如自动添加前缀等。\n\n默认情况下 css-loader 不会处理绝对路径导入和根目录导入的模块。css-loader 通过 `importLoaders` 选项支持自定义模块导入处理能力。如果要导入一个 node_moduels 目录下的文件，需要使用 `~` 前缀。\n",contentRendered:'<p>默认情况下，Webpack 不支持处理样式文件，需要借助于 <code>loader</code> 和 插件。</p>\n<h2 id="加载-css-文件" tabindex="-1"><a class="header-anchor" href="#加载-css-文件" aria-hidden="true">#</a> 加载 css 文件</h2>\n<p>要加载 css 文件，我们需要 <a href="https://www.npmjs.com/package/css-loader" target="_blank" rel="noopener noreferrer">css-loader<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/style-loader" target="_blank" rel="noopener noreferrer">style-loader<OutboundLink/></a>.</p>\n<p>css-loader 会在所有匹配到的文件中查找 <code>@import</code> 和 <code>url()</code> 语句，并将它们当成普通的 import 语句来处理。如果 <code>@import</code> 语句指向了一个外部资源，比如一个 url 链接，那么 css-loader 会跳过。</p>\n<p>style-loader 会将样式注入到 html 上的 style 元素中。可以通过配置来修改将样式注入 style 元素的方式。同时 style-loader 也实现了 HMR 接口，提供了更好的开发体验。</p>\n<p>将样式内联到页面中通常不是一个好的实践方式，我们需要使用 <code>MiniCssExtractPlugin</code> 这个插件来讲 css 导出到文件中。这个插件后面章节会做说明。</p>\n<p>安装依赖包：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> css-loader style-loader --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在 <strong>webpack.parts.js</strong> 中添加</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">loadCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的配置说明如果文件是 <code>.css</code> 结尾，则需要使用这两个 loader。loader 返回处理后的文件内容，loader 之间可以像 Unix 的管道一样连接起来，从右向左一次处理：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">styleLoader</span><span class="token punctuation">(</span><span class="token function">cssLoader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将配置组合到 <strong>webpack.config.js</strong> 中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">loadCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="添加初始样式" tabindex="-1"><a class="header-anchor" href="#添加初始样式" aria-hidden="true">#</a> 添加初始样式</h2>\n<p><strong>src/main.css</strong></p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> cornsilk<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在代码中引用这段样式， <strong>src/index.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">"./main.css"</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动开发服务器 <code>npm run start</code>，可以看到浏览器中的背景色发生了变化。这时，修改背景色为 <code>background: lime</code>, 浏览器中的背景色会发生相应变化。</p>\n<p><img src="/courses/webpack/helloworld-color-c.png" alt="helloworld"></p>\n<h2 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss" aria-hidden="true">#</a> PostCSS</h2>\n<p><a href="http://postcss.org/" target="_blank" rel="noopener noreferrer">PostCSS<OutboundLink/></a> 允许你通过其提供的各种插件对 CSS 做各种转换处理。PostCSS 类似于处理样式的 Babel。后面章节会做说明。</p>\n<h2 id="使用-css-预处理器" tabindex="-1"><a class="header-anchor" href="#使用-css-预处理器" aria-hidden="true">#</a> 使用 CSS 预处理器</h2>\n<p>Webpack 支持多种主流的 CSS 预处理器。</p>\n<ul>\n<li>可以通过 <a href="https://www.npmjs.com/package/less-loader" target="_blank" rel="noopener noreferrer">less-loader<OutboundLink/></a> 使用 less 预处理器。</li>\n<li>可以通过 <a href="https://www.npmjs.com/package/sass-loader" target="_blank" rel="noopener noreferrer">sass-loader<OutboundLink/></a> 或者 <a href="https://www.npmjs.com/package/fast-sass-loader" target="_blank" rel="noopener noreferrer">fast-sass-loader<OutboundLink/></a> 来使用 sass 预处理器。</li>\n<li>可以通过 <a href="https://www.npmjs.com/package/stylus-loader" target="_blank" rel="noopener noreferrer">stylus-loader<OutboundLink/></a> 来使用 stylus 预处理器。</li>\n</ul>\n<h2 id="深入理解-css-loader" tabindex="-1"><a class="header-anchor" href="#深入理解-css-loader" aria-hidden="true">#</a> 深入理解 css-loader</h2>\n<p>要更好的使用 css-loader，首先需要明白 css-loader 是如何查找文件的。css-loader 默认只处理相对路径导入的模块，绝对路径导入(<code>url(&quot;https://mydomain.com/static/demo.png&quot;)</code>)或者根路径导入（<code>url(&quot;/static/img/demo.png&quot;)</code>）的模块不会被处理。</p>\n<p>如果项目中需要使用到这些外部模块，需要将这些模块拷贝到项目中来，可以借助 <a href="https://www.npmjs.com/package/copy-webpack-plugin" target="_blank" rel="noopener noreferrer">webpack-copy-plugin<OutboundLink/></a> 完成。</p>\n<p>如果你需要自定义 css-loader 如何处理要导入的模块，你需要设置 <code>importLoaders</code> 这个选项，来告诉 css-loader 在处理待导入模块之前，该模块必须要被多少个其他模块处理过。</p>\n<p>举个例子加以说明。比如需要在 css 文件导入一个 sass 文件，<code>@import &quot;./variables.sass&quot;;</code>， 那么为了能处理 sass 文件，loader 的配置需要配置为：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span> importLoaders<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>此时，<code>importLoaders</code> 为 1，告诉 css-loader 在处理导入的模块时，需要确保被导入的模块需要被 sass-loader 处理过。如果添加更多的 loader，比如再加一个 postcss-loader， 则 <code>importLoaders</code> 需要改为 2.</p>\n<blockquote>\n<p><code>importLoaders</code> 选项只在 css-loader 无法处理待导入的模块的时候才会被使用。比如上面的例子 css 文件中导入了一个 sass 文件，要处理 sass 文件需要借助于 sass-loader，因此需要确保在 css-loader 处理模块之前，sass-loader 先处理了该模块。而如果在 sass 文件中导入 sass 文件，则模块本身已经被 sass-loader 处理过，就不需要 css-loader 处理 sass 文件了。</p>\n</blockquote>\n<p>如果需要导入 <code>node_modules</code> 目录下的样式文件，则需要加一个 <code>~</code> 前缀。比如导入 bootstrap 的样式文件 <code>@import &quot;~bootstrap/less/bootstrap&quot;;</code>。<code>~</code> 告诉 webpack 该模块不是一个相对路径引入的模块，需要在 node_modules 目录下查找。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webapck 可以处理各种格式的样式文件，默认情况下，所有样式都会编译成 JavaScript bundle。</p>\n<p>css-loader 处理 <code>@import</code> 和 <code>url()</code> 语句，style-loader 负责将样式编译成 js，同时实现了 HMR 接口。</p>\n<p>Webapck 支持多种预处理器，可以将各种格式的样式转换成 CSS，常见的预处理器有 Sass，Less 和 Stylus。</p>\n<p>PostCSS 借助其自身的插件系统，提供了多种处理 CSS 的能力，比如自动添加前缀等。</p>\n<p>默认情况下 css-loader 不会处理绝对路径导入和根目录导入的模块。css-loader 通过 <code>importLoaders</code> 选项支持自定义模块导入处理能力。如果要导入一个 node_moduels 目录下的文件，需要使用 <code>~</code> 前缀。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-07",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/load-css.html",pathLocale:"/",permalink:null,slug:"load-css",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/load-css.md",filePathRelative:"courses/webpack/load-css.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-css.html.vue",componentFilePathRelative:"pages/courses/webpack/load-css.html.vue",componentFileChunkName:"v-e3c551aa",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-css.html.js",dataFilePathRelative:"pages/courses/webpack/load-css.html.js",dataFileChunkName:"v-e3c551aa",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/load-css.html",htmlFilePathRelative:"courses/webpack/load-css.html"},{key:"v-82d8e3d6",path:"/courses/webpack/load-font.html",title:"加载字体文件",lang:"zh-CN",frontmatter:{title:"加载字体文件",description:"介绍 Webpack 中如何处理字体文件",keywords:["Webpack"],date:"2021-01-13T00:00:00.000Z",key:11},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"使用 Icon Fonts",slug:"使用-icon-fonts",children:[]},{level:2,title:"修改 file-loader 的 output 路径和 publicPath",slug:"修改-file-loader-的-output-路径和-publicpath",children:[]},{level:2,title:"删除未用的符号来较少字体大小",slug:"删除未用的符号来较少字体大小",children:[]},{level:2,title:"结论",slug:"结论",children:[]}],content:"\n加载字体文件与加载图片类似，但也要做一些特殊处理。不同的浏览器对各种字体格式的支持不同。如果想要在各个浏览器上都有一个好的展示效果的话，通常需要考虑四种字体格式，老旧浏览器可以考虑使用系统默认字体。\n\n在 Webpack 中，我们依然依靠 loader 的 `type` 字段来配置。从 [Can I Use](https://caniuse.com/woff) 网站上可以查到，除了 Opera mini 以外，其他浏览器都支持 .woff 格式，同时 .woff2 也被大部分现代浏览器支持。\n\n如果只用一种字体格式的话，可以配置如下：\n\n```js\nconst config = {\n  test: /\\.woff2?(\\?v=\\d+\\.\\d+\\.\\d+)?$/, // 匹配 .woff?v=1.1.1.\n  use: {\n    type: 'asset',\n    parser: { dataUrlCondition: { maxSize: 50000 } },\n  },\n};\n```\n\n如果需要在所有浏览器上都有一个好的显示效果，那么可以使用 `type: \"asset/resource\"`，放弃内联字体文件。\n\n```js\nconst config = {\n  test: /\\.(ttf|eot|woff|woff2)$/,\n  type: 'asset/resource',\n};\n```\n\n之后，我们需要在样式文件中定义字体，为了能优先使用新的字体格式，我们需要把定义放在前面。\n\n```css\n@font-face {\n  font-family: 'Demo Font';\n  src: url('./fonts/df.woff2') format('woff2'), url('./fonts/df.woff') format('woff'),\n    url('./fonts/df.eot') format('embedded-opentype'), url('./fonts/df.ttf')\n      format('truetype');\n}\n```\n\n## 使用 Icon Fonts\n\n[iconfont-webpack-plugin](https://www.npmjs.com/package/iconfont-webpack-plugin) 这个插件可以用来加载 icon font 字体，它会将 svg 内联在 css 样式中。\n\n[fontmin-webpack](https://www.npmjs.com/package/fontmin-webpack) 可以帮助我们删除未被使用的字体。\n\n## 修改 file-loader 的 output 路径和 publicPath\n\n可以通过 `file-loader` 和 `url-loader` 来更好的控制字体的输出。我们设置可以每个 loader 都定义不同的 `publicPath`。\n\n```js\n{\n  // 匹配 woff2 以及类似于 .woff?v=1.1.1 的模式\n  test: /\\.woff2?(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n  use: {\n    loader: \"url-loader\",\n    options: {\n      limit: 50000,\n      mimetype: \"application/font-woff\",\n      name: \"./fonts/[name].[ext]\", // 输出在 ./fonts 目录下\n      publicPath: \"../\", // 把模块目录也考虑到最终输出目录中去\n    },\n  },\n},\n```\n\n> 在上面的例子中，`file-loader` 是被默认引用的，在 `limit` 中会启用 `file-loader`。\n\n## 删除未用的符号来较少字体大小\n\n[subfont](https://www.npmjs.com/package/subfont) 可以静态分析输出的 html 中的文字，然后仅仅将被使用的字体符号写入到字体文件中。这样可以显著减小字体文件的大小。\n\n## 结论\n\n加载字体文件与加载图片类似，我们要做的是根据要支持的浏览器来选择不同的加载策略。\n\n我们可以选择将体积较小的字体文件内联在样式文件中，将较大的字体文件单独输出为一个文件。\n\n不同浏览器对字体格式的支持不同，我们可以选中一两种字体格式，然后老旧浏览器使用系统默认字体。\n",contentRendered:'<p>加载字体文件与加载图片类似，但也要做一些特殊处理。不同的浏览器对各种字体格式的支持不同。如果想要在各个浏览器上都有一个好的展示效果的话，通常需要考虑四种字体格式，老旧浏览器可以考虑使用系统默认字体。</p>\n<p>在 Webpack 中，我们依然依靠 loader 的 <code>type</code> 字段来配置。从 <a href="https://caniuse.com/woff" target="_blank" rel="noopener noreferrer">Can I Use<OutboundLink/></a> 网站上可以查到，除了 Opera mini 以外，其他浏览器都支持 .woff 格式，同时 .woff2 也被大部分现代浏览器支持。</p>\n<p>如果只用一种字体格式的话，可以配置如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.woff2?(\\?v=\\d+\\.\\d+\\.\\d+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配 .woff?v=1.1.1.</span>\n  use<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">\'asset\'</span><span class="token punctuation">,</span>\n    parser<span class="token operator">:</span> <span class="token punctuation">{</span> dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span> maxSize<span class="token operator">:</span> <span class="token number">50000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果需要在所有浏览器上都有一个好的显示效果，那么可以使用 <code>type: &quot;asset/resource&quot;</code>，放弃内联字体文件。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|eot|woff|woff2)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">\'asset/resource\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>之后，我们需要在样式文件中定义字体，为了能优先使用新的字体格式，我们需要把定义放在前面。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>\n  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">\'Demo Font\'</span><span class="token punctuation">;</span>\n  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">\'./fonts/df.woff2\'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'woff2\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">\'./fonts/df.woff\'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'woff\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">\'./fonts/df.eot\'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'embedded-opentype\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">\'./fonts/df.ttf\'</span><span class="token punctuation">)</span></span>\n      <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'truetype\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="使用-icon-fonts" tabindex="-1"><a class="header-anchor" href="#使用-icon-fonts" aria-hidden="true">#</a> 使用 Icon Fonts</h2>\n<p><a href="https://www.npmjs.com/package/iconfont-webpack-plugin" target="_blank" rel="noopener noreferrer">iconfont-webpack-plugin<OutboundLink/></a> 这个插件可以用来加载 icon font 字体，它会将 svg 内联在 css 样式中。</p>\n<p><a href="https://www.npmjs.com/package/fontmin-webpack" target="_blank" rel="noopener noreferrer">fontmin-webpack<OutboundLink/></a> 可以帮助我们删除未被使用的字体。</p>\n<h2 id="修改-file-loader-的-output-路径和-publicpath" tabindex="-1"><a class="header-anchor" href="#修改-file-loader-的-output-路径和-publicpath" aria-hidden="true">#</a> 修改 file-loader 的 output 路径和 publicPath</h2>\n<p>可以通过 <code>file-loader</code> 和 <code>url-loader</code> 来更好的控制字体的输出。我们设置可以每个 loader 都定义不同的 <code>publicPath</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token comment">// 匹配 woff2 以及类似于 .woff?v=1.1.1 的模式</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.woff2?(\\?v=\\d+\\.\\d+\\.\\d+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">{</span>\n    loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      limit<span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>\n      mimetype<span class="token operator">:</span> <span class="token string">"application/font-woff"</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">"./fonts/[name].[ext]"</span><span class="token punctuation">,</span> <span class="token comment">// 输出在 ./fonts 目录下</span>\n      publicPath<span class="token operator">:</span> <span class="token string">"../"</span><span class="token punctuation">,</span> <span class="token comment">// 把模块目录也考虑到最终输出目录中去</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote>\n<p>在上面的例子中，<code>file-loader</code> 是被默认引用的，在 <code>limit</code> 中会启用 <code>file-loader</code>。</p>\n</blockquote>\n<h2 id="删除未用的符号来较少字体大小" tabindex="-1"><a class="header-anchor" href="#删除未用的符号来较少字体大小" aria-hidden="true">#</a> 删除未用的符号来较少字体大小</h2>\n<p><a href="https://www.npmjs.com/package/subfont" target="_blank" rel="noopener noreferrer">subfont<OutboundLink/></a> 可以静态分析输出的 html 中的文字，然后仅仅将被使用的字体符号写入到字体文件中。这样可以显著减小字体文件的大小。</p>\n<h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2>\n<p>加载字体文件与加载图片类似，我们要做的是根据要支持的浏览器来选择不同的加载策略。</p>\n<p>我们可以选择将体积较小的字体文件内联在样式文件中，将较大的字体文件单独输出为一个文件。</p>\n<p>不同浏览器对字体格式的支持不同，我们可以选中一两种字体格式，然后老旧浏览器使用系统默认字体。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-13",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/load-font.html",pathLocale:"/",permalink:null,slug:"load-font",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/load-font.md",filePathRelative:"courses/webpack/load-font.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-font.html.vue",componentFilePathRelative:"pages/courses/webpack/load-font.html.vue",componentFileChunkName:"v-82d8e3d6",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-font.html.js",dataFilePathRelative:"pages/courses/webpack/load-font.html.js",dataFileChunkName:"v-82d8e3d6",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/load-font.html",htmlFilePathRelative:"courses/webpack/load-font.html"},{key:"v-2cb53d93",path:"/courses/webpack/load-image.html",title:"加载图片",lang:"zh-CN",frontmatter:{title:"加载图片",description:"介绍 Webpack 中如何处理图片",keywords:["Webpack"],date:"2021-01-12T00:00:00.000Z",key:10},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"把图片添加到项目中",slug:"把图片添加到项目中",children:[]},{level:2,title:"使用 srcset",slug:"使用-srcset",children:[]},{level:2,title:"优化图片",slug:"优化图片",children:[]},{level:2,title:"加载 SVG",slug:"加载-svg",children:[]},{level:2,title:"动态加载图片",slug:"动态加载图片",children:[]},{level:2,title:"加载雪碧图",slug:"加载雪碧图",children:[]},{level:2,title:"使用图片占位符",slug:"使用图片占位符",children:[]},{level:2,title:"代码中如何使用图片",slug:"代码中如何使用图片",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\nWebpack 可以帮助我们处理项目中的图片。在之前的版本中，我们需要通过 `url-loader` 或者 `file-loader` 来处理图片资源，从 Webpack 5 开始，Webpack 内置了这些能力，我们只需要指定特定的选项就可以了。\n\n- `type: "asset/inline"` 将图片资源转成 base64 编码的形式保存在输出的代码中。这么做减少了页面请求数量，但是会增加构建输出的大小。该能力原来是 `url-loader` 提供。\n- `type: "asset/resource"` 与 `file-loader` 能力相同，输出图片到单独的文件中。\n- `type: "asset/source"` 与 `raw-loader` 能力相同，返回模块的原始内容。\n- `type: "asset"` 是 `type: "asset/inline"` 和 `type: "asset/source"` 的混合体，取决于资源的大小，与 `file-loader` 的 `limit` 功能相同。\n\n`output.assetModuleFilename` 用来设置输出资源文件的名称，`[hash][ext][query]` 是三个占位符可选项，同时支持设置路径。\n\n## 把图片添加到项目中\n\n上面提到了各种处理图片的方式，下面是具体配置：\n\n**webpack.parts.js**\n\n```js\nexports.loadImages = ({ limit } = {}) => ({\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg)$/,\n        type: \'asset\',\n        parser: { dataUrlCondition: { maxSize: limit } },\n      },\n    ],\n  },\n});\n```\n\n**webpack.config.js**\n\n```js\nconst commonConfig = merge([...parts.loadImages({ limit: 15000 })]);\n```\n\n测试一下我们配置，下载一张图片，然后添加到项目中。\n\n**src/main.css**\n\n```css\nbody {\n  background: cornsilk;\n  background-image: url(\'./logo.png\');\n  background-repeat: no-repeat;\n  background-position: center;\n}\n```\n\n构建结果会根据 `limit` 的不同而不同。如果图片大小小于 `limit`，则图片会被内联在构建输出的代码里，否则会被以单独的文件形式输出。\n\n## 使用 `srcset`\n\n现在浏览器支持给图片添加 `srcset` 属性，来根据不同条件使用不同的图片已达到最好的显示效果。可以通过 [resize-image-loader](https://www.npmjs.com/package/resize-image-loader), [html-loader-srcset](https://www.npmjs.com/package/html-loader-srcset) 和 [responsive-loader](https://www.npmjs.com/package/responsive-loader) 这几个包来实现这个功能。\n\n## 优化图片\n\n压缩图片可以有效减少生产环境的带宽占用，提升网站性能。如果你想压缩一下图片，则可以用这几个包，[image-webpack-loader](https://www.npmjs.com/package/image-webpack-loader),[svgo-loader](https://www.npmjs.com/package/svgo-loader)(只适用于 svg)，和 [imagemin-webpack-plugin](https://www.npmjs.com/package/imagemin-webpack-plugin). 注意，这些 loader 需要确保在最前面运行。\n\n## 加载 SVG\n\nWebpack 支持多种加载 svg 的方法，最简单的方法就是通过 `type`：\n\n```js\nconst config = { test: /\\.svg$/, type: \'asset\' };\n```\n\n然后直接在样式中引用：\n\n```css\n.icon {\n  background-image: url(\'../assets/icon.svg\');\n}\n```\n\n如下几个 loader 也可以实现加载 svg。\n\n- [svg-inline-loader](https://www.npmjs.com/package/svg-inline-loader) 这个 loader 会删除 svg 中无用的标签。\n- [svg-sprite-loader](https://www.npmjs.com/package/svg-sprite-loader) 这个 loader 可以将多个 svg 合并到一个雪碧图中。这个 loader 同时也支持 .jpg 和 .png 图片。\n- [svg-url-loader](https://www.npmjs.com/package/svg-url-loader) 将 svg 图片以 UTF-8 编码的 data-url 形式输出，比 base64 编码性能更好。\n- [@svgr/webpack](https://www.npmjs.com/package/@svgr/webpack) 将 svg 图片以 React 组件的形式输出。\n\n## 动态加载图片\n\nWebpack 还支持动态加载图片，原理与代码按需加载的原理相同，后面会介绍。\n\n## 加载雪碧图\n\n雪碧图可以帮助我们将多个图片合并到一个图片中，减少网页请求数量。\n\n[webpack-spritesmith](https://www.npmjs.com/package/webpack-spritesmith) 这个插件可以将多个图片合成为一个雪碧图，同时输出 Sass/Less/Stylus 的 mixins。我们需要在配置中添加 `SpritesmithPlugin` 插件，指向要组合额图片，同时制定一个输出的 mixins 名称，然后，代码中就可以使用雪碧图了。\n\n```css\n@import "~sprite.sass";\n\n.close-button {\n  sprite($close);\n}\n\n.open-button {\n  sprite($open);\n}\n```\n\n## 使用图片占位符\n\n[image-trace-loader](https://www.npmjs.com/package/image-trace-loader) 这个包加载图片，同时以 `image/svg+xml` 的 url 编码的形式输出图片。与 `file-loader` 和 `url-loader` 一起使用，可以实现在请求真实图片的时候，先试用图片占位符显示。\n\n[lqip-loader](https://www.npmjs.com/package/lqip-loader) 这个包实现的功能类似，但是 `lqip-loader` 会用一个模糊图片替代。\n\n## 代码中如何使用图片\n\n除了在样式中通过 `@import` 和 `url()` 的方式引用图片，在代码我们还可以这么用：\n\n```js\nimport src from \'./avatar.png\';\n\nconst Profile = () => <img src={src} />;\n```\n\n从 Webpack 5 开始，我们还可以这么用：\n\n```js\nconst Profile = () => <img src={new URL(\'./avatar.png\', import.meta.url)} />;\n```\n\n同时也可以动态加载图片\n\n```js\nconst src = require(`./avatars/\\${avatar}`);\n```\n\n## 总结\n\n通过 `type` 字段在调整不同资源的加载方式。在 Webpack 5 以前，通过 `file-loader` 和 `url-loader` 来实现。\n\n通过根据图片的大小来决定图片输出的方式。\n\n可以将多个小图片合并成一个雪碧图，来减少网络请求。\n\nWebpack 还支持动态加载图片。\n',contentRendered:'<p>Webpack 可以帮助我们处理项目中的图片。在之前的版本中，我们需要通过 <code>url-loader</code> 或者 <code>file-loader</code> 来处理图片资源，从 Webpack 5 开始，Webpack 内置了这些能力，我们只需要指定特定的选项就可以了。</p>\n<ul>\n<li><code>type: &quot;asset/inline&quot;</code> 将图片资源转成 base64 编码的形式保存在输出的代码中。这么做减少了页面请求数量，但是会增加构建输出的大小。该能力原来是 <code>url-loader</code> 提供。</li>\n<li><code>type: &quot;asset/resource&quot;</code> 与 <code>file-loader</code> 能力相同，输出图片到单独的文件中。</li>\n<li><code>type: &quot;asset/source&quot;</code> 与 <code>raw-loader</code> 能力相同，返回模块的原始内容。</li>\n<li><code>type: &quot;asset&quot;</code> 是 <code>type: &quot;asset/inline&quot;</code> 和 <code>type: &quot;asset/source&quot;</code> 的混合体，取决于资源的大小，与 <code>file-loader</code> 的 <code>limit</code> 功能相同。</li>\n</ul>\n<p><code>output.assetModuleFilename</code> 用来设置输出资源文件的名称，<code>[hash][ext][query]</code> 是三个占位符可选项，同时支持设置路径。</p>\n<h2 id="把图片添加到项目中" tabindex="-1"><a class="header-anchor" href="#把图片添加到项目中" aria-hidden="true">#</a> 把图片添加到项目中</h2>\n<p>上面提到了各种处理图片的方式，下面是具体配置：</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">loadImages</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> limit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">\'asset\'</span><span class="token punctuation">,</span>\n        parser<span class="token operator">:</span> <span class="token punctuation">{</span> dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span> maxSize<span class="token operator">:</span> limit <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">loadImages</span><span class="token punctuation">(</span><span class="token punctuation">{</span> limit<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>测试一下我们配置，下载一张图片，然后添加到项目中。</p>\n<p><strong>src/main.css</strong></p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> cornsilk<span class="token punctuation">;</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">\'./logo.png\'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>\n  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>构建结果会根据 <code>limit</code> 的不同而不同。如果图片大小小于 <code>limit</code>，则图片会被内联在构建输出的代码里，否则会被以单独的文件形式输出。</p>\n<h2 id="使用-srcset" tabindex="-1"><a class="header-anchor" href="#使用-srcset" aria-hidden="true">#</a> 使用 <code>srcset</code></h2>\n<p>现在浏览器支持给图片添加 <code>srcset</code> 属性，来根据不同条件使用不同的图片已达到最好的显示效果。可以通过 <a href="https://www.npmjs.com/package/resize-image-loader" target="_blank" rel="noopener noreferrer">resize-image-loader<OutboundLink/></a>, <a href="https://www.npmjs.com/package/html-loader-srcset" target="_blank" rel="noopener noreferrer">html-loader-srcset<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/responsive-loader" target="_blank" rel="noopener noreferrer">responsive-loader<OutboundLink/></a> 这几个包来实现这个功能。</p>\n<h2 id="优化图片" tabindex="-1"><a class="header-anchor" href="#优化图片" aria-hidden="true">#</a> 优化图片</h2>\n<p>压缩图片可以有效减少生产环境的带宽占用，提升网站性能。如果你想压缩一下图片，则可以用这几个包，<a href="https://www.npmjs.com/package/image-webpack-loader" target="_blank" rel="noopener noreferrer">image-webpack-loader<OutboundLink/></a>,<a href="https://www.npmjs.com/package/svgo-loader" target="_blank" rel="noopener noreferrer">svgo-loader<OutboundLink/></a>(只适用于 svg)，和 <a href="https://www.npmjs.com/package/imagemin-webpack-plugin" target="_blank" rel="noopener noreferrer">imagemin-webpack-plugin<OutboundLink/></a>. 注意，这些 loader 需要确保在最前面运行。</p>\n<h2 id="加载-svg" tabindex="-1"><a class="header-anchor" href="#加载-svg" aria-hidden="true">#</a> 加载 SVG</h2>\n<p>Webpack 支持多种加载 svg 的方法，最简单的方法就是通过 <code>type</code>：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">\'asset\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后直接在样式中引用：</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">.icon</span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">\'../assets/icon.svg\'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如下几个 loader 也可以实现加载 svg。</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/svg-inline-loader" target="_blank" rel="noopener noreferrer">svg-inline-loader<OutboundLink/></a> 这个 loader 会删除 svg 中无用的标签。</li>\n<li><a href="https://www.npmjs.com/package/svg-sprite-loader" target="_blank" rel="noopener noreferrer">svg-sprite-loader<OutboundLink/></a> 这个 loader 可以将多个 svg 合并到一个雪碧图中。这个 loader 同时也支持 .jpg 和 .png 图片。</li>\n<li><a href="https://www.npmjs.com/package/svg-url-loader" target="_blank" rel="noopener noreferrer">svg-url-loader<OutboundLink/></a> 将 svg 图片以 UTF-8 编码的 data-url 形式输出，比 base64 编码性能更好。</li>\n<li><a href="https://www.npmjs.com/package/@svgr/webpack" target="_blank" rel="noopener noreferrer">@svgr/webpack<OutboundLink/></a> 将 svg 图片以 React 组件的形式输出。</li>\n</ul>\n<h2 id="动态加载图片" tabindex="-1"><a class="header-anchor" href="#动态加载图片" aria-hidden="true">#</a> 动态加载图片</h2>\n<p>Webpack 还支持动态加载图片，原理与代码按需加载的原理相同，后面会介绍。</p>\n<h2 id="加载雪碧图" tabindex="-1"><a class="header-anchor" href="#加载雪碧图" aria-hidden="true">#</a> 加载雪碧图</h2>\n<p>雪碧图可以帮助我们将多个图片合并到一个图片中，减少网页请求数量。</p>\n<p><a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener noreferrer">webpack-spritesmith<OutboundLink/></a> 这个插件可以将多个图片合成为一个雪碧图，同时输出 Sass/Less/Stylus 的 mixins。我们需要在配置中添加 <code>SpritesmithPlugin</code> 插件，指向要组合额图片，同时制定一个输出的 mixins 名称，然后，代码中就可以使用雪碧图了。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"~sprite.sass"</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.close-button</span> <span class="token punctuation">{</span>\n  <span class="token function">sprite</span><span class="token punctuation">(</span>$close<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.open-button</span> <span class="token punctuation">{</span>\n  <span class="token function">sprite</span><span class="token punctuation">(</span>$open<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="使用图片占位符" tabindex="-1"><a class="header-anchor" href="#使用图片占位符" aria-hidden="true">#</a> 使用图片占位符</h2>\n<p><a href="https://www.npmjs.com/package/image-trace-loader" target="_blank" rel="noopener noreferrer">image-trace-loader<OutboundLink/></a> 这个包加载图片，同时以 <code>image/svg+xml</code> 的 url 编码的形式输出图片。与 <code>file-loader</code> 和 <code>url-loader</code> 一起使用，可以实现在请求真实图片的时候，先试用图片占位符显示。</p>\n<p><a href="https://www.npmjs.com/package/lqip-loader" target="_blank" rel="noopener noreferrer">lqip-loader<OutboundLink/></a> 这个包实现的功能类似，但是 <code>lqip-loader</code> 会用一个模糊图片替代。</p>\n<h2 id="代码中如何使用图片" tabindex="-1"><a class="header-anchor" href="#代码中如何使用图片" aria-hidden="true">#</a> 代码中如何使用图片</h2>\n<p>除了在样式中通过 <code>@import</code> 和 <code>url()</code> 的方式引用图片，在代码我们还可以这么用：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> src <span class="token keyword">from</span> <span class="token string">\'./avatar.png\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Profile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>src<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从 Webpack 5 开始，我们还可以这么用：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Profile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">\'./avatar.png\'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同时也可以动态加载图片</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> src <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./avatars/\\${avatar}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>通过 <code>type</code> 字段在调整不同资源的加载方式。在 Webpack 5 以前，通过 <code>file-loader</code> 和 <code>url-loader</code> 来实现。</p>\n<p>通过根据图片的大小来决定图片输出的方式。</p>\n<p>可以将多个小图片合并成一个雪碧图，来减少网络请求。</p>\n<p>Webpack 还支持动态加载图片。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-12",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/load-image.html",pathLocale:"/",permalink:null,slug:"load-image",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/load-image.md",filePathRelative:"courses/webpack/load-image.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-image.html.vue",componentFilePathRelative:"pages/courses/webpack/load-image.html.vue",componentFileChunkName:"v-2cb53d93",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-image.html.js",dataFilePathRelative:"pages/courses/webpack/load-image.html.js",dataFileChunkName:"v-2cb53d93",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/load-image.html",htmlFilePathRelative:"courses/webpack/load-image.html"},{key:"v-5227281b",path:"/courses/webpack/load-js.html",title:"加载 JavaScript",lang:"zh-CN",frontmatter:{title:"加载 JavaScript",description:"介绍 Webpack 中如何处理 JS 文件",keywords:["Webpack"],date:"2021-01-14T00:00:00.000Z",key:12},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"在 Webpack 中使用 Babel",slug:"在-webpack-中使用-babel",children:[]},{level:2,title:"使用 Polyfill",slug:"使用-polyfill",children:[]},{level:2,title:"关于 Babel 的一些小提示",slug:"关于-babel-的一些小提示",children:[]},{level:2,title:"Babel 的一些插件",slug:"babel-的一些插件",children:[]},{level:2,title:"针对不同浏览器输出不同的构建结果",slug:"针对不同浏览器输出不同的构建结果",children:[]},{level:2,title:"使用 TypeScript",slug:"使用-typescript",children:[]},{level:2,title:"使用 TypeScript 来编写 Webpack 配置文件",slug:"使用-typescript-来编写-webpack-配置文件",children:[]},{level:2,title:"WebAssembly",slug:"webassembly",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\nWebpack 默认支持 ES2015 的模块定义，但是在进行代码转换的时候，像 `const` 这样的语法并不会被转换。这样的话，在一些老旧浏览器中就会产生很多问题。\n\n为了能更好的理解 Webpack 的默认输出，我们将 Webpack 的 `mode` 参数设置为 `none`, 然后观察一下构建输出：\n\n**dist/main.js**\n\n```js\n...\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((text = "Hello world") => {\n  const element = document.createElement("div");\n  element.className = "rounded bg-red-100 border max-w-md m-4 p-4";\n  element.innerHTML = text;\n  return element;\n});\n...\n```\n\n为了解决上面的语法转换的问题，我们可以借助于 [Babel](https://babeljs.io/). Babel 是一个 JavaScript 语法转译器，支持 ES2015 以及更新版本的各种特性。\n\n## 在 Webpack 中使用 Babel\n\n在 Webpack 中，我们可以通过 [babel-loader](https://www.npmjs.com/package/babel-loader) 来使用 Babel。\n\n首先安装 babel-loader.\n\n```bash\nnpm add babel-loader @babel/core --develop\n```\n\n**webpack.parts.js**\n\n```js\nconst APP_SOURCE = path.join(__dirname, \'src\');\n\nexports.loadJavaScript = () => ({\n  module: {\n    rules: [{ test: /\\.js$/, include: APP_SOURCE, use: \'babel-loader\' }],\n  },\n});\n```\n\n**webpack.config.js**\n\n```js\nconst commonConfig = merge([...parts.loadJavaScript()]);\n```\n\n设置完 babel-loader 的配置以后，我们还需要添加一个 babel 的配置，我们把配置放在 `.babelrc` 里面。\n\n通常情况下，我们至少需要安装 [@babel/preset-env](https://www.npmjs.com/package/@babel/preset-env). 这个包是 Babel 的一个插件预置包，它通过 `browserslist` 中的定义来加载需要的插件。\n\n> browserslist 我们在前面已经讲过，这里不再赘述。\n\n安装预置包，\n\n```bash\nnpm add @babel/preset-env --develop\n```\n\n**.babelrc** 定义如下：\n\n```\n{\n  "presets": [["@babel/preset-env", { "modules": false }]]\n}\n```\n\n这时候执行 `npm run build -- --mode none`，然后查看 `dist/main.js` 的内容，你会发现，当 `.browserslistrc` 内的定义变化的时候，`dist/main.js` 也会发生变化.\n\n我们将 `.browserslistrc` 中的定义修改为只包含 IE8，则输出的 `dist/main.js` 内容为：\n\n```js\n...\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function () {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Hello world";\n  var element = document.createElement("div");\n  element.className = "rounded bg-red-100 border max-w-md m-4 p-4";\n  element.innerHTML = text;\n  return element;\n});\n...\n```\n\n对比前面的 `dist/main.js` 输出，我们可以看到函数的语法发生了变化。\n\n## 使用 Polyfill\n\n`@babel/preset-env` 可以针对一些老旧浏览器填补语法功能的缺失。要使用这个功能，需要开启 `useBuiltIns` 参数并安装 [core-js](https://www.npmjs.com/package/core-js).如果代码中使用了 `async` 函数，那么还需要安装 [regenerator-runtime](https://www.npmjs.com/package/regenerator-runtime) 这个包。\n\n除非我们使用 `useBuiltIns: \'usage\'` 来配置 `@babel/preset-env`, 否则我们需要在代码中显示的引入 `core-js` 或者在 Webpack 的 entry 中配置，`app: ["core-js", "./src"]`。\n\n> 注意，core-js 会污染全局变量，比如 Promise. 对于一个三方库开发者来说，引入 core-js 会引发许多问题。Babel 有一个插件 [@babel/plugin-transform-runtime](https://babeljs.io/docs/plugins/transform-runtime/) 可以很好的解决这个问题。\n\n## 关于 Babel 的一些小提示\n\n`.babelrc` 还有很多其他的选项可以使用，可以参考[官网说明](https://babeljs.io/docs/en/options)。`.babelrc` 支持 [JSON5](https://www.npmjs.com/package/json5) 格式，也就是可以在 `.babelrc` 中添加注释、使用单引号字符串等。\n\n有时候如果你要使用一些新特性或者实验性的特性，如果项目是一个长期迭代的项目，那么注释是非常必要的。\n\n## Babel 的一些插件\n\nBabel 有很多插件可以使用。\n\n- [babel-plugin-import](https://www.npmjs.com/package/babel-plugin-import) 可以重写模块的导入语法。比如在代码中可以直接写 `import { Button } from "antd";`，而不是现实的使用 `Button` 模块的路径。\n- [babel-plugin-transform-react-remove-prop-types](https://www.npmjs.com/package/babel-plugin-transform-react-remove-prop-types) 会在 production 构建中删除 `propType` 相关的代码。\n\n> 在 NodeJS 中，我们可以通过 [babel-register](https://www.npmjs.com/package/babel-register) 或者 [babel-cli](https://www.npmjs.com/package/babel-cli) 来使用 Babel。\n\n## 针对不同浏览器输出不同的构建结果\n\n为了更好的利用现代浏览器对一些语法的支持，同时支持老旧浏览器，我们需要构建两份输出，然后在启动代码中根据浏览器加载不同的构建结果。这样的话，在现代浏览器中，加载的代码体积更小，同时解析时间也更短。\n\n我们可以像下面这样，在 HTML 中使用不同的构建结果。\n\n```html\n\x3c!-- 支持 ES module 语法的加载这个文件 --\x3e\n<script type="module" src="main.mjs"><\/script>\n\n\x3c!-- 老浏览器加载这个文件 (同时支持 module 语法的浏览器知道不去加载这个文件（nomodule）). --\x3e\n<script nomodule src="main.es5.js"><\/script>\n```\n\n我们可以通过下面的方式配置 Webpack 输出两份构建结果。\n\n**.browserslistrc**\n\n```\n# 支持老的 IE\n[legacy]\nIE 8\n\n# 新浏览器，可以根据需要自行决定\n[modern]\n> 1% # Browser usage over 1%\n```\n\n**webpack.config.js**\n\n```js\n// 记住在生产构建中设置 "mode": "production"\nconst getConfig = (mode) => {\n  switch (mode) {\n    case "prod:legacy":\n      process.env.BROWSERSLIST_ENV = "legacy";\n      return merge(commonConfig, productionConfig);\n    case "prod:modern":\n      process.env.BROWSERSLIST_ENV = "modern";\n      return merge(commonConfig, productionConfig);\n    ...\n    default:\n      throw new Error(`Trying to use an unknown mode, ${mode}`);\n  }\n};\n```\n\n**package.json**\n\n```json\n{\n  "scripts": {\n    "build": "wp --mode prod:legacy && wp --mode prod:modern"\n  }\n}\n```\n\n上面的两次 Webpack 构建是串行执行，我们可以通过 [concurrently](https://www.npmjs.com/package/concurrently) 并行支持 Webpack 构建。\n\n## 使用 TypeScript\n\n微软的 TypeScript 是一门编译型语言，使用模式与 Babel 类似。TypeScript 除了有 JavaScript 能力以外，还有类型定义。\n\n在 Webpack 中，我们可以通过 [ts-loader](https://www.npmjs.com/package/ts-loader) 来使用 TypeScript。在使用 ts-loader 的时候，我们可以仅仅使用它的代码编译功能，把类型检查能力通过编辑器来实现，或者通过 [fork-ts-checker-webpack-plugin](https://www.npmjs.com/package/fork-ts-checker-webpack-plugin) 这个插件在另一个进程中实现。\n\n我们也可以通过 [@babel/plugin-transform-typescript](https://www.npmjs.com/package/@babel/plugin-transform-typescript) 来使用 TypeScript。\n\n> Webpack 5 已经默认支持了 TypeScript。在使用 Webpack 5 的时候要确保项目中不要安装 `@types/webpack` 这个包，因为会有冲突。\n\n有时候项目中的 TypeScript 配置有多个，比如使用 `extends` 属性 `"extends": "./tsconfig.common"` 配置了多个配置，这时候，我们可以通过 ts-loader 的 `configFile` 来指定一个具体配置文件。\n\n## 使用 TypeScript 来编写 Webpack 配置文件\n\n如果项目中使用 TypeScript，那么 Webpack 的配置文件也可以使用 TypeScript 来编写，webpack.config.ts。 Webpack 会自动检测和执行这个配置文件。\n\n要让 TypeScript 编辑的配置文件能够正确执行，我们需要安装 [ts-node](https://www.npmjs.com/package/ts-node) 和 [ts-node-dev](https://www.npmjs.com/package/ts-node-dev) 这两个包，因为 Webpack 需要这两个包来执行配置文件。\n\n默认情况下，在 Webpack watc 模式或者 webpack-dev-server 中，编译错误会导致构建失败。为了避免这个问题，我们可以使用下面的配置：\n\n**tsconfig.json**\n\n```json\n{ "ts-node": { "logError": true, "transpileOnly": true } }\n```\n\n`logError` 非常重要，因为没有这个选项的话，ts-node 在遇到错误的时候会直接退出。`transpileOnly` 只编译，不做类型检查。因为很多时候编辑器已经可以帮助我们做了类型检查。\n\n## WebAssembly\n\n[WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly) 让开发者在浏览器上运行一些非 JavaScript 代码，比如 C++。\n\n[wasm-simple](https://github.com/webpack/webpack/tree/master/examples/wasm-simple) 和 [wasm-complex](https://github.com/webpack/webpack/tree/master/examples/wasm-complex) 是两个官方示例。\n\n## 总结\n\nWebpack 默认支持 JavaScript，Babel 工具可以帮助我们根据不同浏览器定制构建输出。\n\nBabel 给我们提供了针对不同浏览器定制转换代码的能力。@babel/preset-env 可以根据 `.browserslistrc` 的定义决定哪些特性要编译，需要使用哪些 polyfill.\n\n借助于 Babel，我们可以使用还处在试验阶段的语言特性。Babel 有很多 preset 和 插件来定制使用。\n\n我们可以根据不同环境定制不同的 Babel 能力。我们需要在不同环境中确保使用正确的 preset 和插件。\n',contentRendered:'<p>Webpack 默认支持 ES2015 的模块定义，但是在进行代码转换的时候，像 <code>const</code> 这样的语法并不会被转换。这样的话，在一些老旧浏览器中就会产生很多问题。</p>\n<p>为了能更好的理解 Webpack 的默认输出，我们将 Webpack 的 <code>mode</code> 参数设置为 <code>none</code>, 然后观察一下构建输出：</p>\n<p><strong>dist/main.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token doc-comment comment">/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => <span class="token punctuation">{</span>\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n<span class="token comment">/* harmony export */</span>   <span class="token string">"default"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> __WEBPACK_DEFAULT_EXPORT__\n<span class="token comment">/* harmony export */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* harmony default export */</span> <span class="token keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"rounded bg-red-100 border max-w-md m-4 p-4"</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>为了解决上面的语法转换的问题，我们可以借助于 <a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">Babel<OutboundLink/></a>. Babel 是一个 JavaScript 语法转译器，支持 ES2015 以及更新版本的各种特性。</p>\n<h2 id="在-webpack-中使用-babel" tabindex="-1"><a class="header-anchor" href="#在-webpack-中使用-babel" aria-hidden="true">#</a> 在 Webpack 中使用 Babel</h2>\n<p>在 Webpack 中，我们可以通过 <a href="https://www.npmjs.com/package/babel-loader" target="_blank" rel="noopener noreferrer">babel-loader<OutboundLink/></a> 来使用 Babel。</p>\n<p>首先安装 babel-loader.</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> babel-loader @babel/core --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">APP_SOURCE</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">loadJavaScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">loadJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>设置完 babel-loader 的配置以后，我们还需要添加一个 babel 的配置，我们把配置放在 <code>.babelrc</code> 里面。</p>\n<p>通常情况下，我们至少需要安装 <a href="https://www.npmjs.com/package/@babel/preset-env" target="_blank" rel="noopener noreferrer">@babel/preset-env<OutboundLink/></a>. 这个包是 Babel 的一个插件预置包，它通过 <code>browserslist</code> 中的定义来加载需要的插件。</p>\n<blockquote>\n<p>browserslist 我们在前面已经讲过，这里不再赘述。</p>\n</blockquote>\n<p>安装预置包，</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> @babel/preset-env --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>.babelrc</strong> 定义如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{\n  "presets": [["@babel/preset-env", { "modules": false }]]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这时候执行 <code>npm run build -- --mode none</code>，然后查看 <code>dist/main.js</code> 的内容，你会发现，当 <code>.browserslistrc</code> 内的定义变化的时候，<code>dist/main.js</code> 也会发生变化.</p>\n<p>我们将 <code>.browserslistrc</code> 中的定义修改为只包含 IE8，则输出的 <code>dist/main.js</code> 内容为：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token doc-comment comment">/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => <span class="token punctuation">{</span>\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n<span class="token comment">/* harmony export */</span>   <span class="token string">"default"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> __WEBPACK_DEFAULT_EXPORT__\n<span class="token comment">/* harmony export */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* harmony default export */</span> <span class="token keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> text <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"rounded bg-red-100 border max-w-md m-4 p-4"</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>对比前面的 <code>dist/main.js</code> 输出，我们可以看到函数的语法发生了变化。</p>\n<h2 id="使用-polyfill" tabindex="-1"><a class="header-anchor" href="#使用-polyfill" aria-hidden="true">#</a> 使用 Polyfill</h2>\n<p><code>@babel/preset-env</code> 可以针对一些老旧浏览器填补语法功能的缺失。要使用这个功能，需要开启 <code>useBuiltIns</code> 参数并安装 <a href="https://www.npmjs.com/package/core-js" target="_blank" rel="noopener noreferrer">core-js<OutboundLink/></a>.如果代码中使用了 <code>async</code> 函数，那么还需要安装 <a href="https://www.npmjs.com/package/regenerator-runtime" target="_blank" rel="noopener noreferrer">regenerator-runtime<OutboundLink/></a> 这个包。</p>\n<p>除非我们使用 <code>useBuiltIns: \'usage\'</code> 来配置 <code>@babel/preset-env</code>, 否则我们需要在代码中显示的引入 <code>core-js</code> 或者在 Webpack 的 entry 中配置，<code>app: [&quot;core-js&quot;, &quot;./src&quot;]</code>。</p>\n<blockquote>\n<p>注意，core-js 会污染全局变量，比如 Promise. 对于一个三方库开发者来说，引入 core-js 会引发许多问题。Babel 有一个插件 <a href="https://babeljs.io/docs/plugins/transform-runtime/" target="_blank" rel="noopener noreferrer">@babel/plugin-transform-runtime<OutboundLink/></a> 可以很好的解决这个问题。</p>\n</blockquote>\n<h2 id="关于-babel-的一些小提示" tabindex="-1"><a class="header-anchor" href="#关于-babel-的一些小提示" aria-hidden="true">#</a> 关于 Babel 的一些小提示</h2>\n<p><code>.babelrc</code> 还有很多其他的选项可以使用，可以参考<a href="https://babeljs.io/docs/en/options" target="_blank" rel="noopener noreferrer">官网说明<OutboundLink/></a>。<code>.babelrc</code> 支持 <a href="https://www.npmjs.com/package/json5" target="_blank" rel="noopener noreferrer">JSON5<OutboundLink/></a> 格式，也就是可以在 <code>.babelrc</code> 中添加注释、使用单引号字符串等。</p>\n<p>有时候如果你要使用一些新特性或者实验性的特性，如果项目是一个长期迭代的项目，那么注释是非常必要的。</p>\n<h2 id="babel-的一些插件" tabindex="-1"><a class="header-anchor" href="#babel-的一些插件" aria-hidden="true">#</a> Babel 的一些插件</h2>\n<p>Babel 有很多插件可以使用。</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/babel-plugin-import" target="_blank" rel="noopener noreferrer">babel-plugin-import<OutboundLink/></a> 可以重写模块的导入语法。比如在代码中可以直接写 <code>import { Button } from &quot;antd&quot;;</code>，而不是现实的使用 <code>Button</code> 模块的路径。</li>\n<li><a href="https://www.npmjs.com/package/babel-plugin-transform-react-remove-prop-types" target="_blank" rel="noopener noreferrer">babel-plugin-transform-react-remove-prop-types<OutboundLink/></a> 会在 production 构建中删除 <code>propType</code> 相关的代码。</li>\n</ul>\n<blockquote>\n<p>在 NodeJS 中，我们可以通过 <a href="https://www.npmjs.com/package/babel-register" target="_blank" rel="noopener noreferrer">babel-register<OutboundLink/></a> 或者 <a href="https://www.npmjs.com/package/babel-cli" target="_blank" rel="noopener noreferrer">babel-cli<OutboundLink/></a> 来使用 Babel。</p>\n</blockquote>\n<h2 id="针对不同浏览器输出不同的构建结果" tabindex="-1"><a class="header-anchor" href="#针对不同浏览器输出不同的构建结果" aria-hidden="true">#</a> 针对不同浏览器输出不同的构建结果</h2>\n<p>为了更好的利用现代浏览器对一些语法的支持，同时支持老旧浏览器，我们需要构建两份输出，然后在启动代码中根据浏览器加载不同的构建结果。这样的话，在现代浏览器中，加载的代码体积更小，同时解析时间也更短。</p>\n<p>我们可以像下面这样，在 HTML 中使用不同的构建结果。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token comment">&lt;!-- 支持 ES module 语法的加载这个文件 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.mjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 老浏览器加载这个文件 (同时支持 module 语法的浏览器知道不去加载这个文件（nomodule）). --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.es5.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们可以通过下面的方式配置 Webpack 输出两份构建结果。</p>\n<p><strong>.browserslistrc</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code># 支持老的 IE\n[legacy]\nIE 8\n\n# 新浏览器，可以根据需要自行决定\n[modern]\n> 1% # Browser usage over 1%\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 记住在生产构建中设置 "mode": "production"</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"prod:legacy"</span><span class="token operator">:</span>\n      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BROWSERSLIST_ENV</span> <span class="token operator">=</span> <span class="token string">"legacy"</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">"prod:modern"</span><span class="token operator">:</span>\n      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BROWSERSLIST_ENV</span> <span class="token operator">=</span> <span class="token string">"modern"</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Trying to use an unknown mode, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"wp --mode prod:legacy &amp;&amp; wp --mode prod:modern"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的两次 Webpack 构建是串行执行，我们可以通过 <a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener noreferrer">concurrently<OutboundLink/></a> 并行支持 Webpack 构建。</p>\n<h2 id="使用-typescript" tabindex="-1"><a class="header-anchor" href="#使用-typescript" aria-hidden="true">#</a> 使用 TypeScript</h2>\n<p>微软的 TypeScript 是一门编译型语言，使用模式与 Babel 类似。TypeScript 除了有 JavaScript 能力以外，还有类型定义。</p>\n<p>在 Webpack 中，我们可以通过 <a href="https://www.npmjs.com/package/ts-loader" target="_blank" rel="noopener noreferrer">ts-loader<OutboundLink/></a> 来使用 TypeScript。在使用 ts-loader 的时候，我们可以仅仅使用它的代码编译功能，把类型检查能力通过编辑器来实现，或者通过 <a href="https://www.npmjs.com/package/fork-ts-checker-webpack-plugin" target="_blank" rel="noopener noreferrer">fork-ts-checker-webpack-plugin<OutboundLink/></a> 这个插件在另一个进程中实现。</p>\n<p>我们也可以通过 <a href="https://www.npmjs.com/package/@babel/plugin-transform-typescript" target="_blank" rel="noopener noreferrer">@babel/plugin-transform-typescript<OutboundLink/></a> 来使用 TypeScript。</p>\n<blockquote>\n<p>Webpack 5 已经默认支持了 TypeScript。在使用 Webpack 5 的时候要确保项目中不要安装 <code>@types/webpack</code> 这个包，因为会有冲突。</p>\n</blockquote>\n<p>有时候项目中的 TypeScript 配置有多个，比如使用 <code>extends</code> 属性 <code>&quot;extends&quot;: &quot;./tsconfig.common&quot;</code> 配置了多个配置，这时候，我们可以通过 ts-loader 的 <code>configFile</code> 来指定一个具体配置文件。</p>\n<h2 id="使用-typescript-来编写-webpack-配置文件" tabindex="-1"><a class="header-anchor" href="#使用-typescript-来编写-webpack-配置文件" aria-hidden="true">#</a> 使用 TypeScript 来编写 Webpack 配置文件</h2>\n<p>如果项目中使用 TypeScript，那么 Webpack 的配置文件也可以使用 TypeScript 来编写，webpack.config.ts。 Webpack 会自动检测和执行这个配置文件。</p>\n<p>要让 TypeScript 编辑的配置文件能够正确执行，我们需要安装 <a href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noopener noreferrer">ts-node<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/ts-node-dev" target="_blank" rel="noopener noreferrer">ts-node-dev<OutboundLink/></a> 这两个包，因为 Webpack 需要这两个包来执行配置文件。</p>\n<p>默认情况下，在 Webpack watc 模式或者 webpack-dev-server 中，编译错误会导致构建失败。为了避免这个问题，我们可以使用下面的配置：</p>\n<p><strong>tsconfig.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">"ts-node"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"logError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">"transpileOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>logError</code> 非常重要，因为没有这个选项的话，ts-node 在遇到错误的时候会直接退出。<code>transpileOnly</code> 只编译，不做类型检查。因为很多时候编辑器已经可以帮助我们做了类型检查。</p>\n<h2 id="webassembly" tabindex="-1"><a class="header-anchor" href="#webassembly" aria-hidden="true">#</a> WebAssembly</h2>\n<p><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noopener noreferrer">WebAssembly<OutboundLink/></a> 让开发者在浏览器上运行一些非 JavaScript 代码，比如 C++。</p>\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/wasm-simple" target="_blank" rel="noopener noreferrer">wasm-simple<OutboundLink/></a> 和 <a href="https://github.com/webpack/webpack/tree/master/examples/wasm-complex" target="_blank" rel="noopener noreferrer">wasm-complex<OutboundLink/></a> 是两个官方示例。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 默认支持 JavaScript，Babel 工具可以帮助我们根据不同浏览器定制构建输出。</p>\n<p>Babel 给我们提供了针对不同浏览器定制转换代码的能力。@babel/preset-env 可以根据 <code>.browserslistrc</code> 的定义决定哪些特性要编译，需要使用哪些 polyfill.</p>\n<p>借助于 Babel，我们可以使用还处在试验阶段的语言特性。Babel 有很多 preset 和 插件来定制使用。</p>\n<p>我们可以根据不同环境定制不同的 Babel 能力。我们需要在不同环境中确保使用正确的 preset 和插件。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-14",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/load-js.html",pathLocale:"/",permalink:null,slug:"load-js",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/load-js.md",filePathRelative:"courses/webpack/load-js.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-js.html.vue",componentFilePathRelative:"pages/courses/webpack/load-js.html.vue",componentFileChunkName:"v-5227281b",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/load-js.html.js",dataFilePathRelative:"pages/courses/webpack/load-js.html.js",dataFileChunkName:"v-5227281b",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/load-js.html",htmlFilePathRelative:"courses/webpack/load-js.html"},{key:"v-53e3047e",path:"/courses/webpack/manage-config.html",title:"管理 Webpack 的配置",lang:"zh-CN",frontmatter:{title:"管理 Webpack 的配置",description:"对 Webpack 的配置项进行管理",keywords:["Webpack"],date:"2021-01-06T00:00:00.000Z",key:4},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"webpack-merge 使用",slug:"webpack-merge-使用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n由于 webpack 配置的复杂性，webpack.config.js 将会慢慢变得难以理解和维护。因此，我们需要一种管理 webpack 配置的方法。\n\n\n一般有如下几种方式可供选择：\n1. 每一个环境的配置单独形成一个文件，然后通过 cli 的 --config 参数来指定配置文件\n2. 通过一些库来添加配置，比如 [webpack-config-plugins](https://github.com/namics/webpack-config-plugins)、[Neutrino](https://neutrino.js.org/)、[webpack-blocks](https://www.npmjs.com/package/webpack-blocks)\n3. 通过工具来管理配置，比如 [create-react-app](https://www.npmjs.com/package/create-react-app)、 [kyt](https://www.npmjs.com/package/kyt)、 [nwb](https://www.npmjs.com/package/nwb)\n4. 在单个文件中维护所有的配置，然后通过 --mode 参数来区分环境\n\n本文介绍一种新的管理方式，我们将应用配置拆散成多个小的函数，比如样式配置、js 配置、图片配置等，然后通过 [webpack-merge](https://www.npmjs.org/package/webpack-merge) 将这些配置再组合起来。这样做有一个好处是可以最大限度的复用配置，同时又非常的灵活。webpack-merge 甚至可以做到针对单个配置项的灵活设置。\n\nwebpack-merge 主要功能就是串接数组和合并对象。下面的例子说明 webpack-merge 是如何工作的：\n\n```bash\n> { merge } = require("webpack-merge")\n...\n> merge(\n... { a: [1], b: 5, c: 20 },\n... { a: [2], b: 10, d: 421 }\n... )\n{ a: [ 1, 2 ], b: 10, c: 20, d: 421 }\n```\n\n> 在合并对象的时候，webpack-merge 不会直接覆盖已有值，而是合并。\n\n## webpack-merge 使用\n\n安装 webpack-merge\n\n```bash\nnpm add webpack-merge --develop\n```\n\n我们对 webpack 的配置做一些抽象，将配置项级别的、小的配置放在 `webpack.parts.js` 里面，将更高级别的配置放在 webpack.config.js 中，示例如下：\n\n**webpack.parts.js**\n\n```js\nconst { WebpackPluginServe } = require("webpack-plugin-serve");\nconst {\n  MiniHtmlWebpackPlugin,\n} = require("mini-html-webpack-plugin");\n\n\nexports.devServer = () => ({\n  watch: true,\n  plugins: [\n    new WebpackPluginServe({\n      port: process.env.PORT || 8080,\n      static: "./dist", // Expose if output.path changes\n      liveReload: true,\n      waitForBuild: true,\n    }),\n  ],\n});\n\n\nexports.page = ({ title }) => ({\n  plugins: [new MiniHtmlWebpackPlugin({ context: { title } })],\n});\n```\n\n`webpack.config.js` 用来组合这些配置项：\n\n```js\nconst { mode } = require("webpack-nano/argv");\nconst { merge } = require("webpack-merge");\nconst parts = require("./webpack.parts");\n\nconst commonConfig = merge([\n  { entry: ["./src"] },\n  parts.page({ title: "Demo" }),\n]);\n\nconst productionConfig = merge([]);\n\nconst developmentConfig = merge([\n  { entry: ["webpack-plugin-serve/client"] },\n  parts.devServer(),\n]);\n\nconst getConfig = (mode) => {\n  switch (mode) {\n    case "production":\n      return merge(commonConfig, productionConfig, { mode });\n    case "development":\n      return merge(commonConfig, developmentConfig, { mode });\n    default:\n      throw new Error(`Trying to use an unknown mode, ${mode}`);\n  }\n};\n\nmodule.exports = getConfig(mode);\n```\n\n通过使用 webpack-merge, 我们可以方便的复用、修改、扩展配置，而不用再担心配置不好维护了。\n\n## 总结\n\n1. 因为 webpack 配置是普通 JavaScript 代码，因此我们有多种方式来管理这些配置项。\n2. webpack-merge 提供了一种轻量级的组合webpack 配置的方法。当然，你也可以使用其他的方式来管理配置。\n3. 基于组合的方式来管理配置可以最大限度的复用配置，甚至可以通过抽取 npm包的形式跨项目复用。\n',contentRendered:'<p>由于 webpack 配置的复杂性，webpack.config.js 将会慢慢变得难以理解和维护。因此，我们需要一种管理 webpack 配置的方法。</p>\n<p>一般有如下几种方式可供选择：</p>\n<ol>\n<li>每一个环境的配置单独形成一个文件，然后通过 cli 的 --config 参数来指定配置文件</li>\n<li>通过一些库来添加配置，比如 <a href="https://github.com/namics/webpack-config-plugins" target="_blank" rel="noopener noreferrer">webpack-config-plugins<OutboundLink/></a>、<a href="https://neutrino.js.org/" target="_blank" rel="noopener noreferrer">Neutrino<OutboundLink/></a>、<a href="https://www.npmjs.com/package/webpack-blocks" target="_blank" rel="noopener noreferrer">webpack-blocks<OutboundLink/></a></li>\n<li>通过工具来管理配置，比如 <a href="https://www.npmjs.com/package/create-react-app" target="_blank" rel="noopener noreferrer">create-react-app<OutboundLink/></a>、 <a href="https://www.npmjs.com/package/kyt" target="_blank" rel="noopener noreferrer">kyt<OutboundLink/></a>、 <a href="https://www.npmjs.com/package/nwb" target="_blank" rel="noopener noreferrer">nwb<OutboundLink/></a></li>\n<li>在单个文件中维护所有的配置，然后通过 --mode 参数来区分环境</li>\n</ol>\n<p>本文介绍一种新的管理方式，我们将应用配置拆散成多个小的函数，比如样式配置、js 配置、图片配置等，然后通过 <a href="https://www.npmjs.org/package/webpack-merge" target="_blank" rel="noopener noreferrer">webpack-merge<OutboundLink/></a> 将这些配置再组合起来。这样做有一个好处是可以最大限度的复用配置，同时又非常的灵活。webpack-merge 甚至可以做到针对单个配置项的灵活设置。</p>\n<p>webpack-merge 主要功能就是串接数组和合并对象。下面的例子说明 webpack-merge 是如何工作的：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">></span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">></span> merge<span class="token punctuation">(</span>\n<span class="token punctuation">..</span>. <span class="token punctuation">{</span> a: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, b: <span class="token number">5</span>, c: <span class="token number">20</span> <span class="token punctuation">}</span>,\n<span class="token punctuation">..</span>. <span class="token punctuation">{</span> a: <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>, b: <span class="token number">10</span>, d: <span class="token number">421</span> <span class="token punctuation">}</span>\n<span class="token punctuation">..</span>. <span class="token punctuation">)</span>\n<span class="token punctuation">{</span> a: <span class="token punctuation">[</span> <span class="token number">1</span>, <span class="token number">2</span> <span class="token punctuation">]</span>, b: <span class="token number">10</span>, c: <span class="token number">20</span>, d: <span class="token number">421</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote>\n<p>在合并对象的时候，webpack-merge 不会直接覆盖已有值，而是合并。</p>\n</blockquote>\n<h2 id="webpack-merge-使用" tabindex="-1"><a class="header-anchor" href="#webpack-merge-使用" aria-hidden="true">#</a> webpack-merge 使用</h2>\n<p>安装 webpack-merge</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> webpack-merge --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们对 webpack 的配置做一些抽象，将配置项级别的、小的配置放在 <code>webpack.parts.js</code> 里面，将更高级别的配置放在 webpack.config.js 中，示例如下：</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> WebpackPluginServe <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-plugin-serve"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  MiniHtmlWebpackPlugin<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">devServer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  watch<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">WebpackPluginServe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      port<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span><span class="token punctuation">,</span>\n      <span class="token keyword">static</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span> <span class="token comment">// Expose if output.path changes</span>\n      liveReload<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      waitForBuild<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><code>webpack.config.js</code> 用来组合这些配置项：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-nano/argv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.parts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">"Demo"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> developmentConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"webpack-plugin-serve/client"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">devServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"production"</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">"development"</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> developmentConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Trying to use an unknown mode, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>通过使用 webpack-merge, 我们可以方便的复用、修改、扩展配置，而不用再担心配置不好维护了。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<ol>\n<li>因为 webpack 配置是普通 JavaScript 代码，因此我们有多种方式来管理这些配置项。</li>\n<li>webpack-merge 提供了一种轻量级的组合webpack 配置的方法。当然，你也可以使用其他的方式来管理配置。</li>\n<li>基于组合的方式来管理配置可以最大限度的复用配置，甚至可以通过抽取 npm包的形式跨项目复用。</li>\n</ol>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-06",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/manage-config.html",pathLocale:"/",permalink:null,slug:"manage-config",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/manage-config.md",filePathRelative:"courses/webpack/manage-config.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/manage-config.html.vue",componentFilePathRelative:"pages/courses/webpack/manage-config.html.vue",componentFileChunkName:"v-53e3047e",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/manage-config.html.js",dataFilePathRelative:"pages/courses/webpack/manage-config.html.js",dataFileChunkName:"v-53e3047e",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/manage-config.html",htmlFilePathRelative:"courses/webpack/manage-config.html"},{key:"v-5fd84ca8",path:"/courses/webpack/micro-frontend.html",title:"构建微前端应用",lang:"zh-CN",frontmatter:{title:"构建微前端应用",description:"介绍 Webpack 中如何构建微前端应用",keywords:["Webpack"],date:"2021-01-29T00:00:00.000Z",key:27},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Module Federation 的例子",slug:"module-federation-的例子",children:[]},{level:2,title:"添加 Webpack 配置",slug:"添加-webpack-配置",children:[]},{level:2,title:"通过 React 来实现这个应用",slug:"通过-react-来实现这个应用",children:[]},{level:2,title:"分离出引导程序（bootstrap）",slug:"分离出引导程序-bootstrap",children:[]},{level:2,title:"分离出 Header 模块",slug:"分离出-header-模块",children:[]},{level:2,title:"说明",slug:"说明",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n[微前端](https://micro-frontends.org/) 将微服务的开发理念带到了前端开发中。微前端将原来的单体应用拆分成多个子应用，每个子应用可以使用不同的技术栈开发，最终再拼合成一个整体的应用对外提供服务。\n\n从 Webpack 5 开始，Webpack 通过 Module Federation 内置了对构建微前端应用的支持。\n\n## Module Federation 的例子\n\n我们通过下面这个例子来演示，页面的结构如下：\n\n```html\n<body>\n  <h1>Demo</h1>\n  <aside>\n    <ul>\n      <li><button>Hello world</button></li>\n      <li><button>Hello federation</button></li>\n      <li><button>Hello webpack</button></li>\n    </ul>\n  </aside>\n  <main>内容随着点击按钮的不同而变化。</main>\n</body>\n```\n\n## 添加 Webpack 配置\n\n**webpack.mf.js**\n\n```js\nconst path = require(\'path\');\nconst { mode } = require(\'webpack-nano/argv\');\nconst { merge } = require(\'webpack-merge\');\nconst parts = require(\'./webpack.parts\');\n\nconst commonConfig = merge([\n  {\n    entry: [path.join(__dirname, \'src\', \'mf.js\')],\n    output: { publicPath: \'/\' },\n  },\n  parts.loadJavaScript(),\n  parts.loadImages(),\n  parts.page(),\n  parts.extractCSS({ loaders: [parts.tailwind()] }),\n]);\n\nconst configs = {\n  development: merge(\n    { entry: [\'webpack-plugin-serve/client\'] },\n    parts.devServer()\n  ),\n  production: {},\n};\n\nmodule.exports = merge(commonConfig, configs[mode], { mode });\n```\n\n这个配置文件使用了一部分我们在前面章节中定义的配置。`.babelrc` 如下：\n\n**.balbelrc**\n\n```\n{\n  "presets": [\n    "@babel/preset-react",\n    ["@babel/preset-env", { "modules": false }]\n  ]\n}\n```\n\n**package.json**\n\n```json\n{\n  "scripts": {\n    "build:mf": "wp --config webpack.mf.js --mode production",\n    "start:mf": "wp --config webpack.mf.js --mode development"\n  }\n}\n```\n\n## 通过 React 来实现这个应用\n\n为了避免直接操作 DOM，我们通过 React 来实现这个应用。\n\n**src/mf.js**\n\n```js\nimport ReactDOM from \'react-dom\';\nimport React from \'react\';\nimport \'./main.css\';\n\nfunction App() {\n  const options = [\'Hello world\', \'Hello fed\', \'Hello webpack\'];\n  const [content, setContent] = React.useState(\'Changes on click.\');\n\n  return (\n    <main className="max-w-md mx-auto space-y-8">\n      <h1 className="text-xl">Demo</h1>\n      <aside>\n        <ul className="flex space-x-8">\n          {options.map((option) => (\n            <li key={option}>\n              <button\n                className="rounded bg-blue-500 text-white p-2"\n                onClick={() => setContent(option)}\n              >\n                {option}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </aside>\n      <article>{content}</article>\n    </main>\n  );\n}\n\nconst container = document.createElement(\'div\');\ndocument.body.appendChild(container);\nReactDOM.render(<App />, container);\n```\n\n我们通过前面[删除多余样式](./remove-css.md) 一章介绍的方法，使用 Tailwind 来美化一下页面。\n\n此时执行 `npm run start:mf`，我们点击按钮，可以发现内容会随着按钮点击发生变化。\n\n## 分离出引导程序（bootstrap）\n\n我们现在将这个单体应用分割成多个模块。在实际实践中，这些模块可以被不同的团队使用不同的技术栈开发。\n\n我们使用 Webpack 的 `ModuleFederationPlugin` 插件，同时异步加载各个模块。同时，因为我们需要动态加载不同的模块，因此需要使用一个运行时。\n\n**src/bootstrap.js**\n\n```js\nimport(\'./mf\');\n```\n\n我们调整一下 webpack 配置。\n\n```js\n\nconst { ModuleFederationPlugin } = require("webpack").container;\n\n...\n\nconst commonConfig = merge([\n  {\n    // entry: [path.join(__dirname, "src", "mf.js")],\n    entry: [path.join(__dirname, "src", "bootstrap.js")],\n    output: { publicPath: "/" },\n  },\n  ...\n  {\n    plugins: [\n      new ModuleFederationPlugin({\n        name: "app",\n        remotes: {},\n        shared: {\n          react: { singleton: true },\n          "react-dom": { singleton: true },\n        },\n      }),\n    ],\n  },\n]);\n\n...\n```\n\n此时执行 `npm run start:mf`，可以看到页面与之前的一样，没有任何变化。\n\n> 如果我们不使用运行时，而是直接将 entry 指向原始模块，我们会在浏览器中看到 `Uncaught Error: Shared module is not available for eager consumption` 这样一条错误信息。\n\n我们现在将 header 部分分离成单独的模块，然后通过使用 module federation 来加载这个模块。\n\n> 注意上面配置文件中，`singleton` 的配置，这么做可以保证分离出来各个模块可以使用相同的 react 库。\n\n## 分离出 Header 模块\n\n**src/header.js**\n\n```js\nimport React from \'react\';\n\nconst Header = () => <h1 className="text-xl">Demo</h1>;\n\nexport default Header;\n```\n\n我们现在修改应用代码，使用这个新的模块。同时，我们新加一个 `mf` 的命名空间，我们将会在 Module Federation 里来管理这个命名空间。\n\n**src/mf.js**\n\n```js\n...\nimport Header from "mf/header";\n\nfunction App() {\n  ...\n  return (\n    <main className="max-w-md mx-auto space-y-8">\n      {/* <h1 className="text-xl">Demo</h1> */}\n      <Header />\n      ...\n    </main>\n  );\n}\n```\n\n现在添加 federation 配置，我们定义在 `webpack.parts.js` 中。\n\n**webpack.parts.js**\n\n```js\nconst { ModuleFederationPlugin } = require(\'webpack\').container;\n\nexports.federateModule = ({ name, filename, exposes, remotes, shared }) => ({\n  plugins: [\n    new ModuleFederationPlugin({\n      name,\n      filename,\n      exposes,\n      remotes,\n      shared,\n    }),\n  ],\n});\n```\n\n因为我们要构建多个模块，为了代码复用，我们通过 `--component` 来区分不同的模块构建。\n\n**webpack.mf.js**\n\n```js\n// const { mode } = require("webpack-nano/argv");\n// const { ModuleFederationPlugin } = require("webpack").container;\n\nconst { component, mode } = require("webpack-nano/argv");\n\nconst commonConfig = merge([\n  {\n//  entry: [path.join(__dirname, "src", "bootstrap.js")],\n    output: { publicPath: "/" },\n  }\n  ...\n\n  // parts.extractCSS({ loaders: [parts.tailwind()] }),\n  // {\n  //   plugins: [\n  //     new ModuleFederationPlugin({\n  //       name: "app",\n  //       remotes: {},\n  //       shared: {\n  //         react: { singleton: true },\n  //         "react-dom": { singleton: true },\n  //       },\n  //     }),\n  //   ],\n  // },\n]);\n\nconst shared = {\n  react: { singleton: true },\n  "react-dom": { singleton: true },\n};\nconst componentConfigs = {\n  app: merge(\n    {\n      entry: [path.join(__dirname, "src", "bootstrap.js")],\n    },\n    parts.page(),\n    parts.federateModule({\n      name: "app",\n      remotes: { mf: "mf@/mf.js" },\n      shared,\n    })\n  ),\n  header: merge(\n    {\n      entry: [path.join(__dirname, "src", "header.js")],\n    },\n    parts.federateModule({\n      name: "mf",\n      filename: "mf.js",\n      exposes: { "./header": "./src/header" },\n      shared,\n    })\n  ),\n};\n\nif (!component) throw new Error("Missing component name");\n\n// module.exports = merge(commonConfig, configs[mode], { mode });\n\nmodule.exports = merge(\n  commonConfig,\n  configs[mode],\n  { mode },\n  componentConfigs[component]\n);\n```\n\n执行 `npm run build:mf -- --component header` 来构建 header 模块，执行 `npm run start:mf -- --component app` 来构建 app 模块。\n\n## 说明\n\n引入 Module Federation 以后，Webpack 配置变得复杂了。但是，我们把应用拆成了多个可以独立开发独立部署的模块。每个模块都可以使用不同的技术进行开发。\n\nModule Federation 需要有一个运行时来加载不同的模块，我们需要花费一些精力还思考如何实现这个运行时。\n\n## 总结\n\nWebpack 5 中的 Module Federation 从基础设施层面为微前端开发提供了工具支持。\n\n`ModuleFederationPlugin` 是 Module Federation 的具体技术实现。\n\n如果我们要在项目中使用 Module Federation，我们需要将异步加载入口模块。\n\n使用 Module Federation 是的配置变得复杂，但是可以将模块做解耦，方便多团队协作。\n',contentRendered:'<p><a href="https://micro-frontends.org/" target="_blank" rel="noopener noreferrer">微前端<OutboundLink/></a> 将微服务的开发理念带到了前端开发中。微前端将原来的单体应用拆分成多个子应用，每个子应用可以使用不同的技术栈开发，最终再拼合成一个整体的应用对外提供服务。</p>\n<p>从 Webpack 5 开始，Webpack 通过 Module Federation 内置了对构建微前端应用的支持。</p>\n<h2 id="module-federation-的例子" tabindex="-1"><a class="header-anchor" href="#module-federation-的例子" aria-hidden="true">#</a> Module Federation 的例子</h2>\n<p>我们通过下面这个例子来演示，页面的结构如下：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Hello federation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Hello webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>内容随着点击按钮的不同而变化。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="添加-webpack-配置" tabindex="-1"><a class="header-anchor" href="#添加-webpack-配置" aria-hidden="true">#</a> 添加 Webpack 配置</h2>\n<p><strong>webpack.mf.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-nano/argv\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-merge\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.parts\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'mf.js\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span> publicPath<span class="token operator">:</span> <span class="token string">\'/\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">loadJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">loadImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">extractCSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loaders<span class="token operator">:</span> <span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">tailwind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> configs <span class="token operator">=</span> <span class="token punctuation">{</span>\n  development<span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'webpack-plugin-serve/client\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    parts<span class="token punctuation">.</span><span class="token function">devServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  production<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> configs<span class="token punctuation">[</span>mode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>这个配置文件使用了一部分我们在前面章节中定义的配置。<code>.babelrc</code> 如下：</p>\n<p><strong>.balbelrc</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{\n  "presets": [\n    "@babel/preset-react",\n    ["@babel/preset-env", { "modules": false }]\n  ]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build:mf"</span><span class="token operator">:</span> <span class="token string">"wp --config webpack.mf.js --mode production"</span><span class="token punctuation">,</span>\n    <span class="token property">"start:mf"</span><span class="token operator">:</span> <span class="token string">"wp --config webpack.mf.js --mode development"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="通过-react-来实现这个应用" tabindex="-1"><a class="header-anchor" href="#通过-react-来实现这个应用" aria-hidden="true">#</a> 通过 React 来实现这个应用</h2>\n<p>为了避免直接操作 DOM，我们通过 React 来实现这个应用。</p>\n<p><strong>src/mf.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./main.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Hello world\'</span><span class="token punctuation">,</span> <span class="token string">\'Hello fed\'</span><span class="token punctuation">,</span> <span class="token string">\'Hello webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span> setContent<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'Changes on click.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>main className<span class="token operator">=</span><span class="token string">"max-w-md mx-auto space-y-8"</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"text-xl"</span><span class="token operator">></span>Demo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      <span class="token operator">&lt;</span>aside<span class="token operator">></span>\n        <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"flex space-x-8"</span><span class="token operator">></span>\n          <span class="token punctuation">{</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>option<span class="token punctuation">}</span><span class="token operator">></span>\n              <span class="token operator">&lt;</span>button\n                className<span class="token operator">=</span><span class="token string">"rounded bg-blue-500 text-white p-2"</span>\n                onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setContent</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">}</span>\n              <span class="token operator">></span>\n                <span class="token punctuation">{</span>option<span class="token punctuation">}</span>\n              <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>aside<span class="token operator">></span>\n      <span class="token operator">&lt;</span>article<span class="token operator">></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>我们通过前面<RouterLink to="/courses/webpack/remove-css.html">删除多余样式</RouterLink> 一章介绍的方法，使用 Tailwind 来美化一下页面。</p>\n<p>此时执行 <code>npm run start:mf</code>，我们点击按钮，可以发现内容会随着按钮点击发生变化。</p>\n<h2 id="分离出引导程序-bootstrap" tabindex="-1"><a class="header-anchor" href="#分离出引导程序-bootstrap" aria-hidden="true">#</a> 分离出引导程序（bootstrap）</h2>\n<p>我们现在将这个单体应用分割成多个模块。在实际实践中，这些模块可以被不同的团队使用不同的技术栈开发。</p>\n<p>我们使用 Webpack 的 <code>ModuleFederationPlugin</code> 插件，同时异步加载各个模块。同时，因为我们需要动态加载不同的模块，因此需要使用一个运行时。</p>\n<p><strong>src/bootstrap.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./mf\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们调整一下 webpack 配置。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> ModuleFederationPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// entry: [path.join(__dirname, "src", "mf.js")],</span>\n    entry<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"bootstrap.js"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span> publicPath<span class="token operator">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n  <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>\n        remotes<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        shared<span class="token operator">:</span> <span class="token punctuation">{</span>\n          react<span class="token operator">:</span> <span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"react-dom"</span><span class="token operator">:</span> <span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>此时执行 <code>npm run start:mf</code>，可以看到页面与之前的一样，没有任何变化。</p>\n<blockquote>\n<p>如果我们不使用运行时，而是直接将 entry 指向原始模块，我们会在浏览器中看到 <code>Uncaught Error: Shared module is not available for eager consumption</code> 这样一条错误信息。</p>\n</blockquote>\n<p>我们现在将 header 部分分离成单独的模块，然后通过使用 module federation 来加载这个模块。</p>\n<blockquote>\n<p>注意上面配置文件中，<code>singleton</code> 的配置，这么做可以保证分离出来各个模块可以使用相同的 react 库。</p>\n</blockquote>\n<h2 id="分离出-header-模块" tabindex="-1"><a class="header-anchor" href="#分离出-header-模块" aria-hidden="true">#</a> 分离出 Header 模块</h2>\n<p><strong>src/header.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"text-xl"</span><span class="token operator">></span>Demo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Header<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们现在修改应用代码，使用这个新的模块。同时，我们新加一个 <code>mf</code> 的命名空间，我们将会在 Module Federation 里来管理这个命名空间。</p>\n<p><strong>src/mf.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">"mf/header"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>main className<span class="token operator">=</span><span class="token string">"max-w-md mx-auto space-y-8"</span><span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token comment">/* &lt;h1 className="text-xl">Demo&lt;/h1> */</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>Header <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">...</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>现在添加 federation 配置，我们定义在 <code>webpack.parts.js</code> 中。</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ModuleFederationPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">federateModule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> exposes<span class="token punctuation">,</span> remotes<span class="token punctuation">,</span> shared <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">,</span>\n      filename<span class="token punctuation">,</span>\n      exposes<span class="token punctuation">,</span>\n      remotes<span class="token punctuation">,</span>\n      shared<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>因为我们要构建多个模块，为了代码复用，我们通过 <code>--component</code> 来区分不同的模块构建。</p>\n<p><strong>webpack.mf.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// const { mode } = require("webpack-nano/argv");</span>\n<span class="token comment">// const { ModuleFederationPlugin } = require("webpack").container;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> component<span class="token punctuation">,</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-nano/argv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n<span class="token comment">//  entry: [path.join(__dirname, "src", "bootstrap.js")],</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span> publicPath<span class="token operator">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n\n  <span class="token comment">// parts.extractCSS({ loaders: [parts.tailwind()] }),</span>\n  <span class="token comment">// {</span>\n  <span class="token comment">//   plugins: [</span>\n  <span class="token comment">//     new ModuleFederationPlugin({</span>\n  <span class="token comment">//       name: "app",</span>\n  <span class="token comment">//       remotes: {},</span>\n  <span class="token comment">//       shared: {</span>\n  <span class="token comment">//         react: { singleton: true },</span>\n  <span class="token comment">//         "react-dom": { singleton: true },</span>\n  <span class="token comment">//       },</span>\n  <span class="token comment">//     }),</span>\n  <span class="token comment">//   ],</span>\n  <span class="token comment">// },</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> shared <span class="token operator">=</span> <span class="token punctuation">{</span>\n  react<span class="token operator">:</span> <span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"react-dom"</span><span class="token operator">:</span> <span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> componentConfigs <span class="token operator">=</span> <span class="token punctuation">{</span>\n  app<span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"bootstrap.js"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    parts<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    parts<span class="token punctuation">.</span><span class="token function">federateModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>\n      remotes<span class="token operator">:</span> <span class="token punctuation">{</span> mf<span class="token operator">:</span> <span class="token string">"mf@/mf.js"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      shared<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  header<span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"header.js"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    parts<span class="token punctuation">.</span><span class="token function">federateModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">"mf"</span><span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token string">"mf.js"</span><span class="token punctuation">,</span>\n      exposes<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">"./header"</span><span class="token operator">:</span> <span class="token string">"./src/header"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      shared<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>component<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Missing component name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// module.exports = merge(commonConfig, configs[mode], { mode });</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>\n  commonConfig<span class="token punctuation">,</span>\n  configs<span class="token punctuation">[</span>mode<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> mode <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  componentConfigs<span class="token punctuation">[</span>component<span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>执行 <code>npm run build:mf -- --component header</code> 来构建 header 模块，执行 <code>npm run start:mf -- --component app</code> 来构建 app 模块。</p>\n<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2>\n<p>引入 Module Federation 以后，Webpack 配置变得复杂了。但是，我们把应用拆成了多个可以独立开发独立部署的模块。每个模块都可以使用不同的技术进行开发。</p>\n<p>Module Federation 需要有一个运行时来加载不同的模块，我们需要花费一些精力还思考如何实现这个运行时。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 5 中的 Module Federation 从基础设施层面为微前端开发提供了工具支持。</p>\n<p><code>ModuleFederationPlugin</code> 是 Module Federation 的具体技术实现。</p>\n<p>如果我们要在项目中使用 Module Federation，我们需要将异步加载入口模块。</p>\n<p>使用 Module Federation 是的配置变得复杂，但是可以将模块做解耦，方便多团队协作。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-29",deps:[],hoistedTags:[],links:[{raw:"./remove-css.md",relative:"courses/webpack/remove-css.md",absolute:"/courses/webpack/remove-css.md"}],pathInferred:"/courses/webpack/micro-frontend.html",pathLocale:"/",permalink:null,slug:"micro-frontend",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/micro-frontend.md",filePathRelative:"courses/webpack/micro-frontend.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/micro-frontend.html.vue",componentFilePathRelative:"pages/courses/webpack/micro-frontend.html.vue",componentFileChunkName:"v-5fd84ca8",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/micro-frontend.html.js",dataFilePathRelative:"pages/courses/webpack/micro-frontend.html.js",dataFileChunkName:"v-5fd84ca8",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/micro-frontend.html",htmlFilePathRelative:"courses/webpack/micro-frontend.html"},{key:"v-24a0a3f8",path:"/courses/webpack/multi-page.html",title:"构建多页应用",lang:"zh-CN",frontmatter:{title:"构建多页应用",description:"介绍 Webpack 中如何构建多页应用",keywords:["Webpack"],date:"2021-01-27T00:00:00.000Z",key:25},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"生成多个页面",slug:"生成多个页面",children:[]},{level:2,title:"测试构建结果",slug:"测试构建结果",children:[]},{level:2,title:"渐进式 web 应用（PWA）",slug:"渐进式-web-应用-pwa",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n尽管我们通常都会用 Webpack 来构建单页应用，其实 Webpack 也可以构建多页面应用。方法与前面[设置构建输出目标](./output-target.md)一章中输出多个文件类似，我们通过配置 `MiniHtmlWebpackPlugin` 这个插件来完成。\n\n## 生成多个页面\n\n我们通过 mini-html-webpack-plugin 这个插件来生成多个页面。html-webpack-plugin 也可以实现功能，并且我们还可以实现更细粒度的控制。本文只做演示说明，mini-html-webpack-plugin 足够使用了。\n\n通常一个页面中需要指定标题、文件地址和要加载的构建模块（chunk）。配置如下：\n\n**webpack.parts.js**\n\n```js\nconst { MiniHtmlWebpackPlugin } = require('mini-html-webpack-plugin');\n\nexports.page = ({ title, url = '', chunks } = {}) => ({\n  plugins: [\n    new MiniHtmlWebpackPlugin({\n      publicPath: '/',\n      chunks,\n      filename: `${url && url + '/'}index.html`,\n      context: { title },\n    }),\n  ],\n});\n```\n\n我们使用新的配置文件\n\n**webpack.multi.js**\n\n```js\nconst { merge } = require('webpack-merge');\nconst parts = require('./webpack.parts');\n\nmodule.exports = merge(\n  { mode: 'production', entry: { app: './src/multi.js' } },\n  parts.page({ title: 'Demo' }),\n  parts.page({ title: 'Another', url: 'another' })\n);\n```\n\n编写一个小模块来渲染页面：\n\n**src/multi.js**\n\n```js\nconst element = document.createElement('div');\nelement.innerHTML = 'hello multi';\ndocument.body.appendChild(element);\n```\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"build:multi\": \"wp --config webpack.multi.js\"\n  }\n}\n```\n\n## 测试构建结果\n\n执行完构建脚本以后，执行 `npx serve dist`，我们可以看到 `/` 和 `/another` 这两个页面。\n\n我们可以通过 `parts.page` 的 `chunks` 参数来控制页面可以加载哪些模块。如果传 `[]`，则页面不会加载任何 模块。该参数同时还支持使用前面 [Bundle Spliting](https://mp.weixin.qq.com/s?__biz=MzI1OTg5MTQ5NQ==&mid=2247483741&idx=1&sn=39fcd310b1da96efa81f374b3df2ca1a&chksm=ea734915dd04c003f46e7eb3a79b74488113fd5581f8bc11f82927b10be52c7d106ab66c35d1&token=1782930901&lang=zh_CN#rd) 一章中分割出来的 bundle，方便我们复用像 vendor 这样的 bundle。\n\n## 渐进式 web 应用（PWA）\n\n如果我们在构建多页应用的时候，考虑一些代码复用和路由的问题，最终我们的应用会慢慢靠近 PWA。[webpack-pwd](https://github.com/webpack/webpack-pwa) 这个官方例子展示了如何使用 Webpack 来构建 PWA 应用。\n\n使用 [Service Worker](https://developer.mozilla.org/en/docs/Web/API/Service_Worker_API) 可以提升应用离线使用体验，[Workbox](https://developers.google.com/web/tools/workbox/) 及相关的 [webpack-workbox-plugin](https://www.npmjs.com/package/workbox-webpack-plugin) 可以帮助我们方便使用 Service Worker.\n\n## 总结\n\n我们可以通过使用多个进行并行编译的形式来生成多个页面，但是这么做可能无法复用公共代码。\n\n我们可以将构建多个页面的配置放到一个配置文件中。通过 MiniHtmlWebpackPlugin 这个插件来构建多个页面。\n\n我们可以通过各种 Webpack 技术来构建 PWA 应用，帮助我们提升应用的性能和使用体验。\n",contentRendered:'<p>尽管我们通常都会用 Webpack 来构建单页应用，其实 Webpack 也可以构建多页面应用。方法与前面<RouterLink to="/courses/webpack/output-target.html">设置构建输出目标</RouterLink>一章中输出多个文件类似，我们通过配置 <code>MiniHtmlWebpackPlugin</code> 这个插件来完成。</p>\n<h2 id="生成多个页面" tabindex="-1"><a class="header-anchor" href="#生成多个页面" aria-hidden="true">#</a> 生成多个页面</h2>\n<p>我们通过 mini-html-webpack-plugin 这个插件来生成多个页面。html-webpack-plugin 也可以实现功能，并且我们还可以实现更细粒度的控制。本文只做演示说明，mini-html-webpack-plugin 足够使用了。</p>\n<p>通常一个页面中需要指定标题、文件地址和要加载的构建模块（chunk）。配置如下：</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> MiniHtmlWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> chunks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MiniHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      publicPath<span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n      chunks<span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url <span class="token operator">&amp;&amp;</span> url <span class="token operator">+</span> <span class="token string">\'/\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">index.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      context<span class="token operator">:</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>我们使用新的配置文件</p>\n<p><strong>webpack.multi.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-merge\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.parts\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span> entry<span class="token operator">:</span> <span class="token punctuation">{</span> app<span class="token operator">:</span> <span class="token string">\'./src/multi.js\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">\'Demo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">\'Another\'</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">\'another\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写一个小模块来渲染页面：</p>\n<p><strong>src/multi.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nelement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">\'hello multi\'</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build:multi"</span><span class="token operator">:</span> <span class="token string">"wp --config webpack.multi.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="测试构建结果" tabindex="-1"><a class="header-anchor" href="#测试构建结果" aria-hidden="true">#</a> 测试构建结果</h2>\n<p>执行完构建脚本以后，执行 <code>npx serve dist</code>，我们可以看到 <code>/</code> 和 <code>/another</code> 这两个页面。</p>\n<p>我们可以通过 <code>parts.page</code> 的 <code>chunks</code> 参数来控制页面可以加载哪些模块。如果传 <code>[]</code>，则页面不会加载任何 模块。该参数同时还支持使用前面 <a href="https://mp.weixin.qq.com/s?__biz=MzI1OTg5MTQ5NQ==&amp;mid=2247483741&amp;idx=1&amp;sn=39fcd310b1da96efa81f374b3df2ca1a&amp;chksm=ea734915dd04c003f46e7eb3a79b74488113fd5581f8bc11f82927b10be52c7d106ab66c35d1&amp;token=1782930901&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">Bundle Spliting<OutboundLink/></a> 一章中分割出来的 bundle，方便我们复用像 vendor 这样的 bundle。</p>\n<h2 id="渐进式-web-应用-pwa" tabindex="-1"><a class="header-anchor" href="#渐进式-web-应用-pwa" aria-hidden="true">#</a> 渐进式 web 应用（PWA）</h2>\n<p>如果我们在构建多页应用的时候，考虑一些代码复用和路由的问题，最终我们的应用会慢慢靠近 PWA。<a href="https://github.com/webpack/webpack-pwa" target="_blank" rel="noopener noreferrer">webpack-pwd<OutboundLink/></a> 这个官方例子展示了如何使用 Webpack 来构建 PWA 应用。</p>\n<p>使用 <a href="https://developer.mozilla.org/en/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer">Service Worker<OutboundLink/></a> 可以提升应用离线使用体验，<a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener noreferrer">Workbox<OutboundLink/></a> 及相关的 <a href="https://www.npmjs.com/package/workbox-webpack-plugin" target="_blank" rel="noopener noreferrer">webpack-workbox-plugin<OutboundLink/></a> 可以帮助我们方便使用 Service Worker.</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>我们可以通过使用多个进行并行编译的形式来生成多个页面，但是这么做可能无法复用公共代码。</p>\n<p>我们可以将构建多个页面的配置放到一个配置文件中。通过 MiniHtmlWebpackPlugin 这个插件来构建多个页面。</p>\n<p>我们可以通过各种 Webpack 技术来构建 PWA 应用，帮助我们提升应用的性能和使用体验。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-27",deps:[],hoistedTags:[],links:[{raw:"./output-target.md",relative:"courses/webpack/output-target.md",absolute:"/courses/webpack/output-target.md"}],pathInferred:"/courses/webpack/multi-page.html",pathLocale:"/",permalink:null,slug:"multi-page",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/multi-page.md",filePathRelative:"courses/webpack/multi-page.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/multi-page.html.vue",componentFilePathRelative:"pages/courses/webpack/multi-page.html.vue",componentFileChunkName:"v-24a0a3f8",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/multi-page.html.js",dataFilePathRelative:"pages/courses/webpack/multi-page.html.js",dataFileChunkName:"v-24a0a3f8",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/multi-page.html",htmlFilePathRelative:"courses/webpack/multi-page.html"},{key:"v-10411a6e",path:"/courses/webpack/output-target.html",title:"设置构建输出目标",lang:"zh-CN",frontmatter:{title:"设置构建输出目标",description:"介绍 Webpack 中如何设置构建输出目标",keywords:["Webpack"],date:"2021-01-26T00:00:00.000Z",key:24},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"输出为 Web 应用",slug:"输出为-web-应用",children:[]},{level:2,title:"输出为 NodeJS 应用",slug:"输出为-nodejs-应用",children:[]},{level:2,title:"输出为桌面应用",slug:"输出为桌面应用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n尽管 Webpack 通常被用来构建 Web 项目，但其实 Webpack 还可以被用在其他类型的项目中。比如 NodeJS 环境、桌面应用环境（比如：Electron）等。\n\nWebpack 通过 `target` 字段来控制输出目标。\n\n## 输出为 Web 应用\n\n`web` 是 `target` 字段的默认取值，用来构建 Web 项目。在最终的构建结果中，Webpack 运行时会启动应用程序，然后通过 `manifest` 文件中记录的模块列表信息来加载模块。\n\n从 Webpack 5 开始，`target` 的默认值变为 `browserslist`，以防项目中已经定义了浏览器配置。没有浏览器配置时，默认值为 `web`。通过 `.browserslist` 文件，Webpack 可以有针对性的输出结果，而不需要兼容一些老旧浏览器。Webpack 同时还支持将构建目标指定为仅满足某些特定语言规范（比如 `es2020`）即可，也支持设置一组构建目标（比如 `["web", "es2020"]`）。\n\n**Web worker**\n\n设置 `target` 为 `webworker`，可以将应用打包为 [web worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API)。我们可以通过 Web worker 来实现完成复杂的计算工作，从而避免影响主流程的用户体验。\n\n在使用 Web worker 这个 `target` 的时候，有一些限制需要注意：\n\n- 不能使用 Webpack 的 hash 特性，即各种 hash 占位符不能生效。\n- 在 Web worker 中不能操作 DOM。\n\n## 输出为 NodeJS 应用\n\nWebpack 提供了两个 Node 相关的 `target` 选项：`node` 和 `node-async`。在使用 `node` 的时候，会使用标准的 Node `require` 来加载模块，而在 `node-async` target 下，Webpack 会对输出模块进行包装，从而实现异步加载。\n\nNode targets 主要被用在服务端渲染（Server-Side Rendering）。从 Webpack 5 开始，支持将 `target` 设置为具体的 Node 版本，比如 `node10.13`。\n\n> 如果我们要在服务中使用 Webpack，[nodemon-webpack-plugin](https://www.npmjs.com/package/nodemon-webpack-plugin) 这个插件可以在 webpack 配置发生变化的时候主动重启服务进程。\n\n## 输出为桌面应用\n\n目前市面上有很多用来开发桌面应用的框架，比如 [NW.js](https://nwjs.io/) 和 [Electron](https://electron.atom.io/)。Webpack 可以分别设置如下的构建目标来输出：\n\n- `node-webkit` 针对 NW.js 输出\n- `atom`, `electron` 和 `electron-main` 针对 Electron [主进程](https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md)\n- `electron-renderer` 针对 Electron 渲染进程输出\n\n## 总结\n\n我们可以通过 `target` 字段来控制 Webpack 的构建输出目标，`target` 字段的默认值是 `web`。\n\n除了 Web 应用以外，Webpack 还可以输出桌面、NodeJS 和 Web worker 应用。\n\nNodeJS 场景下，Webpack 通常会被用在服务端渲染场景中。\n',contentRendered:'<p>尽管 Webpack 通常被用来构建 Web 项目，但其实 Webpack 还可以被用在其他类型的项目中。比如 NodeJS 环境、桌面应用环境（比如：Electron）等。</p>\n<p>Webpack 通过 <code>target</code> 字段来控制输出目标。</p>\n<h2 id="输出为-web-应用" tabindex="-1"><a class="header-anchor" href="#输出为-web-应用" aria-hidden="true">#</a> 输出为 Web 应用</h2>\n<p><code>web</code> 是 <code>target</code> 字段的默认取值，用来构建 Web 项目。在最终的构建结果中，Webpack 运行时会启动应用程序，然后通过 <code>manifest</code> 文件中记录的模块列表信息来加载模块。</p>\n<p>从 Webpack 5 开始，<code>target</code> 的默认值变为 <code>browserslist</code>，以防项目中已经定义了浏览器配置。没有浏览器配置时，默认值为 <code>web</code>。通过 <code>.browserslist</code> 文件，Webpack 可以有针对性的输出结果，而不需要兼容一些老旧浏览器。Webpack 同时还支持将构建目标指定为仅满足某些特定语言规范（比如 <code>es2020</code>）即可，也支持设置一组构建目标（比如 <code>[&quot;web&quot;, &quot;es2020&quot;]</code>）。</p>\n<p><strong>Web worker</strong></p>\n<p>设置 <code>target</code> 为 <code>webworker</code>，可以将应用打包为 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener noreferrer">web worker<OutboundLink/></a>。我们可以通过 Web worker 来实现完成复杂的计算工作，从而避免影响主流程的用户体验。</p>\n<p>在使用 Web worker 这个 <code>target</code> 的时候，有一些限制需要注意：</p>\n<ul>\n<li>不能使用 Webpack 的 hash 特性，即各种 hash 占位符不能生效。</li>\n<li>在 Web worker 中不能操作 DOM。</li>\n</ul>\n<h2 id="输出为-nodejs-应用" tabindex="-1"><a class="header-anchor" href="#输出为-nodejs-应用" aria-hidden="true">#</a> 输出为 NodeJS 应用</h2>\n<p>Webpack 提供了两个 Node 相关的 <code>target</code> 选项：<code>node</code> 和 <code>node-async</code>。在使用 <code>node</code> 的时候，会使用标准的 Node <code>require</code> 来加载模块，而在 <code>node-async</code> target 下，Webpack 会对输出模块进行包装，从而实现异步加载。</p>\n<p>Node targets 主要被用在服务端渲染（Server-Side Rendering）。从 Webpack 5 开始，支持将 <code>target</code> 设置为具体的 Node 版本，比如 <code>node10.13</code>。</p>\n<blockquote>\n<p>如果我们要在服务中使用 Webpack，<a href="https://www.npmjs.com/package/nodemon-webpack-plugin" target="_blank" rel="noopener noreferrer">nodemon-webpack-plugin<OutboundLink/></a> 这个插件可以在 webpack 配置发生变化的时候主动重启服务进程。</p>\n</blockquote>\n<h2 id="输出为桌面应用" tabindex="-1"><a class="header-anchor" href="#输出为桌面应用" aria-hidden="true">#</a> 输出为桌面应用</h2>\n<p>目前市面上有很多用来开发桌面应用的框架，比如 <a href="https://nwjs.io/" target="_blank" rel="noopener noreferrer">NW.js<OutboundLink/></a> 和 <a href="https://electron.atom.io/" target="_blank" rel="noopener noreferrer">Electron<OutboundLink/></a>。Webpack 可以分别设置如下的构建目标来输出：</p>\n<ul>\n<li><code>node-webkit</code> 针对 NW.js 输出</li>\n<li><code>atom</code>, <code>electron</code> 和 <code>electron-main</code> 针对 Electron <a href="https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md" target="_blank" rel="noopener noreferrer">主进程<OutboundLink/></a></li>\n<li><code>electron-renderer</code> 针对 Electron 渲染进程输出</li>\n</ul>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>我们可以通过 <code>target</code> 字段来控制 Webpack 的构建输出目标，<code>target</code> 字段的默认值是 <code>web</code>。</p>\n<p>除了 Web 应用以外，Webpack 还可以输出桌面、NodeJS 和 Web worker 应用。</p>\n<p>NodeJS 场景下，Webpack 通常会被用在服务端渲染场景中。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-26",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/output-target.html",pathLocale:"/",permalink:null,slug:"output-target",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/output-target.md",filePathRelative:"courses/webpack/output-target.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/output-target.html.vue",componentFilePathRelative:"pages/courses/webpack/output-target.html.vue",componentFileChunkName:"v-10411a6e",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/output-target.html.js",dataFilePathRelative:"pages/courses/webpack/output-target.html.js",dataFileChunkName:"v-10411a6e",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/output-target.html",htmlFilePathRelative:"courses/webpack/output-target.html"},{key:"v-4a3ec27b",path:"/courses/webpack/performance.html",title:"性能优化",lang:"zh-CN",frontmatter:{title:"性能优化",description:"介绍 Webpack 中如何优化性能",keywords:["Webpack"],date:"2021-01-25T00:00:00.000Z",key:23},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"找到待优化的地方",slug:"找到待优化的地方",children:[]},{level:2,title:"一些优化措施",slug:"一些优化措施",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\nWebpack 默认的优化措施对于一些小项目来说已经足够了。但是当项目的规模逐渐变大，Webpack 会逐渐产生性能问题，我们需要设置一些优化措施来优化 Webpack 的性能。\n\n## 找到待优化的地方\n\n前面说到，Webpack 输出的统计数据（stats）里面包含了各阶段的构建信息，我们可以分析 stats 数据来找出性能较差的地方。[webpack.debug.ProfilingPlugin](https://webpack.js.org/plugins/profiling-plugin/) 和 [cpuprofile-webpack-plugin](https://github.com/jantimon/cpuprofile-webpack-plugin) 可以将插件的运行时间输出到文件中，然后将这个文件导入到 Chrome 的开发工具中，我们可以看到由此生成的火焰图数据。\n\n## 一些优化措施\n\n默认情况下，Webpack 只会开启一个实例，无法充分利用多核 CPU 的优势。我们可以通过 [thread-loader](https://www.npmjs.com/package/thread-loader) 或者 [parallel-webpack](https://www.npmjs.com/package/parallel-webpack) 来开启并行模式。parallel-webpack 支持传入一组配置文件，然后并行的进行构建输出。\n\n除了启动多个进程并行构建以外，还有一些细节问题也可以优化。\n\n- 在开发阶段使用性能更好的 source-map 选项，或者不使用 source-map.\n- 使用 [@babel/preset-env](https://www.npmjs.com/package/@babel/preset-env) 来减少现代浏览器中的代码转译。\n- 在开发阶段跳过 polyfill。因为引入 core-js 会极大的增加构建开销。\n- 不对 NodeJS 相关的功能做 polyfill. 比如 polyfill `process` 对象对构建 bundle 的大小影响很大。\n- 从 Webpack 5 开始，可以通过 `cache.type = "filesystem"` 来开启文件系统级别的缓存。通过 `cache.buildDependencies.config = [__filename]` 可以在配置文件发生变化的时候让缓存失效。\n\n除了上面的优化措施，还有一些 loader 级别的优化。\n\n- 在开发阶段，可以跳过某些 loader。比如对于现代浏览器，我们可以跳过 `babel-loader`。\n- 可以通过 `include` 和 `exclude` 来控制文件检索范围。\n- 可以通过 `thread-loader` 来讲一些高耗时的 loader 并行执行。\n\n在开发阶段，我们还可以优化重新构建的时间。比如，在 React 项目中，我们可以舍弃 `propType`，只加载一个 `.min.js` 版本的 React。结合 `module.noParse` 和 `resolve.alias`，我们可以告诉 Webpack 在构建时不处理已经最小化压缩的文件。\n\n```js\nexports.dontParse = ({ name, path }) => ({\n  module: { noParse: [new RegExp(path)] },\n  resolve: { alias: { [name]: path } },\n});\n```\n\n使用如下：\n\n```js\ndontParse({\n  name: "react",\n  path: path.resolve(\n    __dirname, "node_modules/react/cjs/react.production.min.js",\n  ),\n}),\n```\n\n如此配置，Webpack 在构建时将不会再解析 React 的代码。\n\n## 总结\n\n我们可以通过多种方式来优化 Webpack 的性能。通常情况下，我们可以从最容易实施的优化措施开始。\n\n我们可以通过并行执行的方式，开启多个实例构建，优化构建性能。\n\n针对现代游览器，在开发阶段，我们可以跳过很多转译 loader 的处理。\n',contentRendered:'<p>Webpack 默认的优化措施对于一些小项目来说已经足够了。但是当项目的规模逐渐变大，Webpack 会逐渐产生性能问题，我们需要设置一些优化措施来优化 Webpack 的性能。</p>\n<h2 id="找到待优化的地方" tabindex="-1"><a class="header-anchor" href="#找到待优化的地方" aria-hidden="true">#</a> 找到待优化的地方</h2>\n<p>前面说到，Webpack 输出的统计数据（stats）里面包含了各阶段的构建信息，我们可以分析 stats 数据来找出性能较差的地方。<a href="https://webpack.js.org/plugins/profiling-plugin/" target="_blank" rel="noopener noreferrer">webpack.debug.ProfilingPlugin<OutboundLink/></a> 和 <a href="https://github.com/jantimon/cpuprofile-webpack-plugin" target="_blank" rel="noopener noreferrer">cpuprofile-webpack-plugin<OutboundLink/></a> 可以将插件的运行时间输出到文件中，然后将这个文件导入到 Chrome 的开发工具中，我们可以看到由此生成的火焰图数据。</p>\n<h2 id="一些优化措施" tabindex="-1"><a class="header-anchor" href="#一些优化措施" aria-hidden="true">#</a> 一些优化措施</h2>\n<p>默认情况下，Webpack 只会开启一个实例，无法充分利用多核 CPU 的优势。我们可以通过 <a href="https://www.npmjs.com/package/thread-loader" target="_blank" rel="noopener noreferrer">thread-loader<OutboundLink/></a> 或者 <a href="https://www.npmjs.com/package/parallel-webpack" target="_blank" rel="noopener noreferrer">parallel-webpack<OutboundLink/></a> 来开启并行模式。parallel-webpack 支持传入一组配置文件，然后并行的进行构建输出。</p>\n<p>除了启动多个进程并行构建以外，还有一些细节问题也可以优化。</p>\n<ul>\n<li>在开发阶段使用性能更好的 source-map 选项，或者不使用 source-map.</li>\n<li>使用 <a href="https://www.npmjs.com/package/@babel/preset-env" target="_blank" rel="noopener noreferrer">@babel/preset-env<OutboundLink/></a> 来减少现代浏览器中的代码转译。</li>\n<li>在开发阶段跳过 polyfill。因为引入 core-js 会极大的增加构建开销。</li>\n<li>不对 NodeJS 相关的功能做 polyfill. 比如 polyfill <code>process</code> 对象对构建 bundle 的大小影响很大。</li>\n<li>从 Webpack 5 开始，可以通过 <code>cache.type = &quot;filesystem&quot;</code> 来开启文件系统级别的缓存。通过 <code>cache.buildDependencies.config = [__filename]</code> 可以在配置文件发生变化的时候让缓存失效。</li>\n</ul>\n<p>除了上面的优化措施，还有一些 loader 级别的优化。</p>\n<ul>\n<li>在开发阶段，可以跳过某些 loader。比如对于现代浏览器，我们可以跳过 <code>babel-loader</code>。</li>\n<li>可以通过 <code>include</code> 和 <code>exclude</code> 来控制文件检索范围。</li>\n<li>可以通过 <code>thread-loader</code> 来讲一些高耗时的 loader 并行执行。</li>\n</ul>\n<p>在开发阶段，我们还可以优化重新构建的时间。比如，在 React 项目中，我们可以舍弃 <code>propType</code>，只加载一个 <code>.min.js</code> 版本的 React。结合 <code>module.noParse</code> 和 <code>resolve.alias</code>，我们可以告诉 Webpack 在构建时不处理已经最小化压缩的文件。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">dontParse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> path <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span> noParse<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span> alias<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> path <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">dontParse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n  path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n    __dirname<span class="token punctuation">,</span> <span class="token string">"node_modules/react/cjs/react.production.min.js"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如此配置，Webpack 在构建时将不会再解析 React 的代码。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>我们可以通过多种方式来优化 Webpack 的性能。通常情况下，我们可以从最容易实施的优化措施开始。</p>\n<p>我们可以通过并行执行的方式，开启多个实例构建，优化构建性能。</p>\n<p>针对现代游览器，在开发阶段，我们可以跳过很多转译 loader 的处理。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-25",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/performance.html",pathLocale:"/",permalink:null,slug:"performance",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/performance.md",filePathRelative:"courses/webpack/performance.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/performance.html.vue",componentFilePathRelative:"pages/courses/webpack/performance.html.vue",componentFileChunkName:"v-4a3ec27b",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/performance.html.js",dataFilePathRelative:"pages/courses/webpack/performance.html.js",dataFileChunkName:"v-4a3ec27b",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/performance.html",htmlFilePathRelative:"courses/webpack/performance.html"},{key:"v-25469c66",path:"/courses/webpack/remove-css.html",title:"删除多余样式",lang:"zh-CN",frontmatter:{title:"删除多余样式",description:"介绍 Webpack 如何删除多余的样式",keywords:["Webpack"],date:"2021-01-09T00:00:00.000Z",key:7},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"PurgeCSS",slug:"purgecss",children:[]},{level:2,title:"critical-path-css-tools",slug:"critical-path-css-tools",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n像 [Bootstrap](https://www.npmjs.com/package/bootstrap) 和 [Tailwind](https://www.npmjs.com/package/tailwind) 这类的框架通常都会有很多的样式，有时候我们仅仅使用了一个功能，却不得不引入一个庞大的样式包。本篇介绍一些删除多余样式的方法。\n\n## PurgeCSS\n\n[PurgeCSS](https://www.npmjs.com/package/purgecss) 通过分析代码，可以分析出哪些样式类被使用，从而将未被使用的样式从项目中移除。我们以 Tailwind 为例做个说明，如何使用 PurgeCSS。\n\n安装 Tailwind\n\n```bash\nnpm add tailwindcss postcss-loader --develop\n```\n\n我们需要借助与 PostCSS 来使用 Tailwind。\n\n**webpack.parts.js**\n\n```js\nexports.tailwind = () => ({\n  loader: 'postcss-loader',\n  options: {\n    postcssOptions: { plugins: [require('tailwindcss')()] },\n  },\n});\n```\n\n**webpack.config.js**\n\n```js\nconst cssLoaders = [parts.tailwind()];\n\nconst commonConfig = merge([\n  ...// parts.extractCSS(),\n  parts.extractCSS({ loaders: cssLoaders }),\n]);\n```\n\n在项目中导入 Tailwind 的样式\n\n**src/main.css**\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  background: cornsilk;\n}\n```\n\n在代码中使用 Tailwind 的样式类\n**src/component.js**\n\n```js\nexport default (text = 'Hello world') => {\n  const element = document.createElement('div');\n  element.className = 'rounded bg-red-100 border max-w-md m-4 p-4';\n  element.innerHTML = text;\n  return element;\n};\n```\n\n启动开发服务器，`npm run start`, 查看浏览器结果\n![da07c43af07e0642f092dc1e1a8da0e4.png](/courses/webpack/hellowold-c.png)\n\n执行构建，`npm run build`, 输出如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: asset main.css 3.39 MiB [compared for emit] [big] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  asset main.js 193 bytes [emitted] [minimized] (name: main)\n  Entrypoint main [big] 3.39 MiB = main.css 3.39 MiB main.js 193 bytes\n  orphan modules 266 bytes [orphan] 2 modules\n  code generated modules 365 bytes (javascript) 3.39 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 365 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/main.css 3.39 MiB [code generated]\n```\n\n从构建结果中可以看到，样式文件变大了，有 3.39 MB. 我们用 PurgeCSS 来优化一下。\n\n安装 [purgecss-webpack-plugin](https://www.npmjs.com/package/purgecss-webpack-plugin) 插件\n\n```bash\nnpm add glob purgecss-webpack-plugin --develop\n```\n\n修改配置\n**webpack.parts.js**\n\n```js\nconst path = require('path');\nconst glob = require('glob');\nconst PurgeCSSPlugin = require('purgecss-webpack-plugin');\n\nconst ALL_FILES = glob.sync(path.join(__dirname, 'src/*.js'));\n\nexports.eliminateUnusedCSS = () => ({\n  plugins: [\n    new PurgeCSSPlugin({\n      paths: ALL_FILES, // Consider extracting as a parameter\n      extractors: [\n        {\n          extractor: (content) =>\n            content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || [],\n          extensions: ['html'],\n        },\n      ],\n    }),\n  ],\n});\n```\n\n**webpack.config.js**\n\n```js\n// const productionConfig = merge([]);\nconst productionConfig = merge([parts.eliminateUnusedCSS()]);\n```\n\n执行构建，`npm run build`, 输出结果如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: asset main.css 7.52 KiB [emitted] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  asset main.js 193 bytes [compared for emit] [minimized] (name: main)\n  Entrypoint main 7.71 KiB = main.css 7.52 KiB main.js 193 bytes\n  orphan modules 266 bytes [orphan] 2 modules\n  code generated modules 365 bytes (javascript) 3.39 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 365 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/main.css 3.39 MiB [code generated]\n  webpack 5.11.1 compiled successfully in 4901 ms\n```\n\n可以看到，输出样式减小到了 7.52 KB.\n\n> [uncss](https://www.npmjs.com/package/uncss) 是 PurgeCSS 的一个替代方案，可以作为 PostCSS 的插件来使用。\n\n## critical-path-css-tools\n\n[critical-path-css-tools](https://github.com/addyosmani/critical-path-css-tools) 换了一个角度，不减少构建结果的大小，而是从关键渲染路径的角度出发，先渲染页面，然后通过分析关键渲染路径上的样式使用来确定哪些样式需要优先加载。\n\n## 总结\n\n使用 PurgeCSS 可以有效的帮助我们减小构建结果的大小。在构建使用了样式框架的静态站点时尤为适用。\n\nPurgeCSS 通过静态分析源代码的形式来检测未被使用的样式。\n\n我们通过 purgecss-webpack-plugin 这个插件来使用 PurgeCSS。\n\n通常情况下，PurgeCSS 可以帮助我们移除大部分的未使用样式，但是如果代码中的样式都是动态引用的，那么移除效果会打个折扣。\n\n关键路径渲染是另一种 CSS 优化策略，旨在尽快的展示内容，而不是等待所有样式加载完之后才渲染。\n",contentRendered:'<p>像 <a href="https://www.npmjs.com/package/bootstrap" target="_blank" rel="noopener noreferrer">Bootstrap<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/tailwind" target="_blank" rel="noopener noreferrer">Tailwind<OutboundLink/></a> 这类的框架通常都会有很多的样式，有时候我们仅仅使用了一个功能，却不得不引入一个庞大的样式包。本篇介绍一些删除多余样式的方法。</p>\n<h2 id="purgecss" tabindex="-1"><a class="header-anchor" href="#purgecss" aria-hidden="true">#</a> PurgeCSS</h2>\n<p><a href="https://www.npmjs.com/package/purgecss" target="_blank" rel="noopener noreferrer">PurgeCSS<OutboundLink/></a> 通过分析代码，可以分析出哪些样式类被使用，从而将未被使用的样式从项目中移除。我们以 Tailwind 为例做个说明，如何使用 PurgeCSS。</p>\n<p>安装 Tailwind</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> tailwindcss postcss-loader --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们需要借助与 PostCSS 来使用 Tailwind。</p>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">tailwind</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  loader<span class="token operator">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> <span class="token punctuation">{</span>\n    postcssOptions<span class="token operator">:</span> <span class="token punctuation">{</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> cssLoaders <span class="token operator">=</span> <span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">tailwind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token comment">// parts.extractCSS(),</span>\n  parts<span class="token punctuation">.</span><span class="token function">extractCSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loaders<span class="token operator">:</span> cssLoaders <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在项目中导入 Tailwind 的样式</p>\n<p><strong>src/main.css</strong></p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> cornsilk<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在代码中使用 Tailwind 的样式类\n<strong>src/component.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">\'Hello world\'</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">\'rounded bg-red-100 border max-w-md m-4 p-4\'</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>启动开发服务器，<code>npm run start</code>, 查看浏览器结果\n<img src="/courses/webpack/hellowold-c.png" alt="da07c43af07e0642f092dc1e1a8da0e4.png"></p>\n<p>执行构建，<code>npm run build</code>, 输出如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset main.css 3.39 MiB [compared for emit] [big] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  asset main.js 193 bytes [emitted] [minimized] (name: main)\n  Entrypoint main [big] 3.39 MiB = main.css 3.39 MiB main.js 193 bytes\n  orphan modules 266 bytes [orphan] 2 modules\n  code generated modules 365 bytes (javascript) 3.39 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 365 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/main.css 3.39 MiB [code generated]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>从构建结果中可以看到，样式文件变大了，有 3.39 MB. 我们用 PurgeCSS 来优化一下。</p>\n<p>安装 <a href="https://www.npmjs.com/package/purgecss-webpack-plugin" target="_blank" rel="noopener noreferrer">purgecss-webpack-plugin<OutboundLink/></a> 插件</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> glob purgecss-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>修改配置\n<strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'glob\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> PurgeCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'purgecss-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">ALL_FILES</span> <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/*.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">eliminateUnusedCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">PurgeCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      paths<span class="token operator">:</span> <span class="token constant">ALL_FILES</span><span class="token punctuation">,</span> <span class="token comment">// Consider extracting as a parameter</span>\n      extractors<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token function-variable function">extractor</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n            content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^&lt;>"\'`\\s]*[^&lt;>"\'`\\s:]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'html\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// const productionConfig = merge([]);</span>\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">eliminateUnusedCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行构建，<code>npm run build</code>, 输出结果如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset main.css 7.52 KiB [emitted] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  asset main.js 193 bytes [compared for emit] [minimized] (name: main)\n  Entrypoint main 7.71 KiB = main.css 7.52 KiB main.js 193 bytes\n  orphan modules 266 bytes [orphan] 2 modules\n  code generated modules 365 bytes (javascript) 3.39 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 365 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/main.css 3.39 MiB [code generated]\n  webpack 5.11.1 compiled successfully in 4901 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以看到，输出样式减小到了 7.52 KB.</p>\n<blockquote>\n<p><a href="https://www.npmjs.com/package/uncss" target="_blank" rel="noopener noreferrer">uncss<OutboundLink/></a> 是 PurgeCSS 的一个替代方案，可以作为 PostCSS 的插件来使用。</p>\n</blockquote>\n<h2 id="critical-path-css-tools" tabindex="-1"><a class="header-anchor" href="#critical-path-css-tools" aria-hidden="true">#</a> critical-path-css-tools</h2>\n<p><a href="https://github.com/addyosmani/critical-path-css-tools" target="_blank" rel="noopener noreferrer">critical-path-css-tools<OutboundLink/></a> 换了一个角度，不减少构建结果的大小，而是从关键渲染路径的角度出发，先渲染页面，然后通过分析关键渲染路径上的样式使用来确定哪些样式需要优先加载。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>使用 PurgeCSS 可以有效的帮助我们减小构建结果的大小。在构建使用了样式框架的静态站点时尤为适用。</p>\n<p>PurgeCSS 通过静态分析源代码的形式来检测未被使用的样式。</p>\n<p>我们通过 purgecss-webpack-plugin 这个插件来使用 PurgeCSS。</p>\n<p>通常情况下，PurgeCSS 可以帮助我们移除大部分的未使用样式，但是如果代码中的样式都是动态引用的，那么移除效果会打个折扣。</p>\n<p>关键路径渲染是另一种 CSS 优化策略，旨在尽快的展示内容，而不是等待所有样式加载完之后才渲染。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-09",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/remove-css.html",pathLocale:"/",permalink:null,slug:"remove-css",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/remove-css.md",filePathRelative:"courses/webpack/remove-css.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/remove-css.html.vue",componentFilePathRelative:"pages/courses/webpack/remove-css.html.vue",componentFileChunkName:"v-25469c66",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/remove-css.html.js",dataFilePathRelative:"pages/courses/webpack/remove-css.html.js",dataFileChunkName:"v-25469c66",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/remove-css.html",htmlFilePathRelative:"courses/webpack/remove-css.html"},{key:"v-ed77765a",path:"/courses/webpack/runtime.html",title:"独立输出运行时（runtime）文件",lang:"zh-CN",frontmatter:{title:"独立输出运行时（runtime）文件",description:"介绍 Webpack 中如何 独立输出运行时（runtime）文件",keywords:["Webpack"],date:"2021-01-23T00:00:00.000Z",key:21},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"导出运行时文件",slug:"导出运行时文件",children:[]},{level:2,title:"使用构建历史（records）",slug:"使用构建历史-records",children:[]},{level:2,title:"与其他工具集成",slug:"与其他工具集成",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n当 Webpack 在输出 bundle 文件的时候，它同时还维护了一个运行时。这个运行时包含一个要加载的文件的清单。当文件内容发生变化的时候，这个文件清单也会发生变化，因此我们需要将这个运行时也单独输出到独立的文件中。\n\n## 导出运行时文件\n\n在 [Bundle Spliting](./bundle-split.md) 一章中我们已经交代了巨大部分输出 bundle 的配置，这里我们需要通过 `optimization.runtimeChunk` 来输出运行时。\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  ...\n  // { optimization: { splitChunks: { chunks: "all" } } },\n  {\n    optimization: {\n      splitChunks: { chunks: "all" },\n      runtimeChunk: { name: "runtime" },\n    },\n  },\n  ...\n]);\n```\n\n`runtime` 这个名称是默认值，我们可以指定任何其他的名称。\n\n此时执行 `npm run build`，可以看到输出结果为：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 130 KiB\n    asset 935.a25ff4285adcf5d835fd.js 126 KiB [emitted] [immutable] [minimized] (id hint: vendors) 2 related assets\n    asset runtime.73d14ef014bf8bb2c12f.js 3.12 KiB [emitted] [immutable] [minimized] (name: runtime) 1 related asset\n    asset main.be57b34b7c7a29bc1280.js 479 bytes [emitted] [immutable] [minimized] (name: main) 1 related asset\n    asset 958.1752e720e564a63a9d5f.js 204 bytes [emitted] [immutable] [minimized] 1 related asset\n  asset main.dd02bdb46b234aa6a450.css 1.37 KiB [emitted] [immutable] [minimized] (name: main)\n  asset index.html 377 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = runtime.73d14ef014bf8bb2c12f.js 3.12 KiB 935.a25ff4285adcf5d835fd.js 126 KiB main.dd02bdb46b234aa6a450.css 1.37 KiB main.be57b34b7c7a29bc1280.js 479 bytes 3 auxiliary assets\n  runtime modules 7.95 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 20891 ms\n```\n\n根据上面的配置，运行时被输出到了 runtime 这个文件中。因为我们使用了 `MiniHtmlWebpackPlugin` 这个插件，它会自动将运行时文件更新到 html 中，无需我们手动处理。\n\n从 Webpack 5 开始，会根据项目的 `.browserslist` 文件定义的浏览器信息和 `target` 来输出运行时文件。如果 `target` 设置的 `es5`，则会输出一个兼容 ECMAScript 5 的文件，如果设置的是 `es2015` 则会输出使用较新语法的文件。\n\n## 使用构建历史（records）\n\n在前面章节中提到 `AggressiveSplittingPlugin`，这个插件会使用 `record` 来做缓存，从而加快构建性能。\n\nrecord 用来缓存不同构建之间的模块 id 的。我们使用 `records.json` 这个文件来保存模块 id。\n\n**webpack.config.js**\n\n```js\n\nconst path = require(\'path\');\n...\nconst productionConfig = merge([\n  ...\n  { recordsPath: path.join(__dirname, "records.json") },\n]);\n```\n\n此时执行 `npm run build`，可以看到在项目跟目录下多了一个 `records.json` 文件，下次 Webpack 在构建的时候会读取这个文件。\n\n> `recordsInputPath` 和 `recordsOutputPath` 提供了更加细粒度的控制。\n\n## 与其他工具集成\n\n有时候我们需要将输出资源与其他工具集成。[webpack-manifest-plugin](https://www.npmjs.com/package/webpack-manifest-plugin) 和 [webpack-assets-manifest](https://www.npmjs.com/package/webpack-assets-manifest) 可以提供一些帮助。这两个插件都输出一个 JSON 文件，里面包含文件路径的映射关系。\n\n## 总结\n\nWebpack 构件过程中有一个运行时，这个运行时包含了运行应用的启动信息。\n\n一些插件可以帮助我们将运行时更新到 `index.html` 中，同时还可以输出 JSON 信息，这在服务端渲染等场景下非常有用。\n\n构建记录 record 可以缓存不同次构建间的模块 ID 信息。缺点是我们需要额外存储这个文件。\n',contentRendered:'<p>当 Webpack 在输出 bundle 文件的时候，它同时还维护了一个运行时。这个运行时包含一个要加载的文件的清单。当文件内容发生变化的时候，这个文件清单也会发生变化，因此我们需要将这个运行时也单独输出到独立的文件中。</p>\n<h2 id="导出运行时文件" tabindex="-1"><a class="header-anchor" href="#导出运行时文件" aria-hidden="true">#</a> 导出运行时文件</h2>\n<p>在 <RouterLink to="/courses/webpack/bundle-split.html">Bundle Spliting</RouterLink> 一章中我们已经交代了巨大部分输出 bundle 的配置，这里我们需要通过 <code>optimization.runtimeChunk</code> 来输出运行时。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span>\n  <span class="token comment">// { optimization: { splitChunks: { chunks: "all" } } },</span>\n  <span class="token punctuation">{</span>\n    optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n      splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span> chunks<span class="token operator">:</span> <span class="token string">"all"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      runtimeChunk<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"runtime"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>runtime</code> 这个名称是默认值，我们可以指定任何其他的名称。</p>\n<p>此时执行 <code>npm run build</code>，可以看到输出结果为：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 130 KiB\n    asset 935.a25ff4285adcf5d835fd.js 126 KiB [emitted] [immutable] [minimized] (id hint: vendors) 2 related assets\n    asset runtime.73d14ef014bf8bb2c12f.js 3.12 KiB [emitted] [immutable] [minimized] (name: runtime) 1 related asset\n    asset main.be57b34b7c7a29bc1280.js 479 bytes [emitted] [immutable] [minimized] (name: main) 1 related asset\n    asset 958.1752e720e564a63a9d5f.js 204 bytes [emitted] [immutable] [minimized] 1 related asset\n  asset main.dd02bdb46b234aa6a450.css 1.37 KiB [emitted] [immutable] [minimized] (name: main)\n  asset index.html 377 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = runtime.73d14ef014bf8bb2c12f.js 3.12 KiB 935.a25ff4285adcf5d835fd.js 126 KiB main.dd02bdb46b234aa6a450.css 1.37 KiB main.be57b34b7c7a29bc1280.js 479 bytes 3 auxiliary assets\n  runtime modules 7.95 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 20891 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>根据上面的配置，运行时被输出到了 runtime 这个文件中。因为我们使用了 <code>MiniHtmlWebpackPlugin</code> 这个插件，它会自动将运行时文件更新到 html 中，无需我们手动处理。</p>\n<p>从 Webpack 5 开始，会根据项目的 <code>.browserslist</code> 文件定义的浏览器信息和 <code>target</code> 来输出运行时文件。如果 <code>target</code> 设置的 <code>es5</code>，则会输出一个兼容 ECMAScript 5 的文件，如果设置的是 <code>es2015</code> 则会输出使用较新语法的文件。</p>\n<h2 id="使用构建历史-records" tabindex="-1"><a class="header-anchor" href="#使用构建历史-records" aria-hidden="true">#</a> 使用构建历史（records）</h2>\n<p>在前面章节中提到 <code>AggressiveSplittingPlugin</code>，这个插件会使用 <code>record</code> 来做缓存，从而加快构建性能。</p>\n<p>record 用来缓存不同构建之间的模块 id 的。我们使用 <code>records.json</code> 这个文件来保存模块 id。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span>\n  <span class="token punctuation">{</span> recordsPath<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"records.json"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此时执行 <code>npm run build</code>，可以看到在项目跟目录下多了一个 <code>records.json</code> 文件，下次 Webpack 在构建的时候会读取这个文件。</p>\n<blockquote>\n<p><code>recordsInputPath</code> 和 <code>recordsOutputPath</code> 提供了更加细粒度的控制。</p>\n</blockquote>\n<h2 id="与其他工具集成" tabindex="-1"><a class="header-anchor" href="#与其他工具集成" aria-hidden="true">#</a> 与其他工具集成</h2>\n<p>有时候我们需要将输出资源与其他工具集成。<a href="https://www.npmjs.com/package/webpack-manifest-plugin" target="_blank" rel="noopener noreferrer">webpack-manifest-plugin<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/webpack-assets-manifest" target="_blank" rel="noopener noreferrer">webpack-assets-manifest<OutboundLink/></a> 可以提供一些帮助。这两个插件都输出一个 JSON 文件，里面包含文件路径的映射关系。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 构件过程中有一个运行时，这个运行时包含了运行应用的启动信息。</p>\n<p>一些插件可以帮助我们将运行时更新到 <code>index.html</code> 中，同时还可以输出 JSON 信息，这在服务端渲染等场景下非常有用。</p>\n<p>构建记录 record 可以缓存不同次构建间的模块 ID 信息。缺点是我们需要额外存储这个文件。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-23",deps:[],hoistedTags:[],links:[{raw:"./bundle-split.md",relative:"courses/webpack/bundle-split.md",absolute:"/courses/webpack/bundle-split.md"}],pathInferred:"/courses/webpack/runtime.html",pathLocale:"/",permalink:null,slug:"runtime",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/runtime.md",filePathRelative:"courses/webpack/runtime.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/runtime.html.vue",componentFilePathRelative:"pages/courses/webpack/runtime.html.vue",componentFileChunkName:"v-ed77765a",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/runtime.html.js",dataFilePathRelative:"pages/courses/webpack/runtime.html.js",dataFileChunkName:"v-ed77765a",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/runtime.html",htmlFilePathRelative:"courses/webpack/runtime.html"},{key:"v-85e2eb66",path:"/courses/webpack/simple-demo.html",title:"一个简单的 demo",lang:"zh-CN",frontmatter:{title:"一个简单的 demo",description:"通过一个样例介绍如何使用 Webpack",keywords:["Webpack"],date:"2021-01-03T00:00:00.000Z",key:2},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"初始化项目",slug:"初始化项目",children:[]},{level:2,title:"安装 Webpack",slug:"安装-webpack",children:[]},{level:2,title:"运行 Webpack",slug:"运行-webpack",children:[]},{level:2,title:"添加其他文件",slug:"添加其他文件",children:[]},{level:2,title:"配置 mini-html-webpack-plugin 插件",slug:"配置-mini-html-webpack-plugin-插件",children:[]},{level:2,title:"检查输出",slug:"检查输出",children:[]},{level:2,title:"添加快捷命令",slug:"添加快捷命令",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n在开始之前，我们需要准备好本地的开发环境，安装好 Nodejs. Nodejs 可以直接从[官方网站](https://nodejs.org/en/)下载安装。\n\n## 初始化项目\n\n创建一个目录，然后通过 `npm init -y` 生层 `package.json`.\n\n```bash\nmkdir webpack-demo\n\ncd webpack-demo\n\n# -y 选项会使用默认值来填充 package.json\nnpm init -y\n```\n\n## 安装 Webpack\n\n```bash\nnpm add webpack webpack-nano --develop # --develop === -D\n```\n\n通过以上命令，我们将 Webpack 安装在了项目的 `node_modules` 目录下，并且在 `node_modules/.bin` 目录下可以找到 webpack 的可执行文件。\n\n> 需要说明的是，我们这里使用了 [webpack-nano](https://www.npmjs.com/package/webpack-nano) 而不是官方的 webpack-cli 是因为 webpack-nano 的功能足够我们使用了，而且 webpack-nano 兼容 webpack 4 和 webpack 5 的。\n\n## 运行 Webpack\n\n在命令行输入 `node_modules/.bin/wp` 来运行 webpack-nano。输出结果如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: assets by status 0 bytes [cached] 1 asset\n\n\n  WARNING in configuration\n  The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\n  You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/\n\n\n  ERROR in main\n  Module not found: Error: Can't resolve './src' in '/Users/xxx/workspace/projects/webpack-demo'\n\n\n  webpack 5.11.1 compiled with 1 error and 1 warning in 146 ms\n```\n\n输出结果显示 webpack 找不到可编译的文件。\n\n为了要 webpack 能正确运行起来，我们需要做一些其他操作。\n\n1. 添加 `src/index.js` 文件，内容为 `console.log('Hello World!')`;\n2. 执行 `./node_modules/.bin/wp`，webpack 默认会找到这个文件。\n3. 检查 `dist/main.js`，在输出文件中我们可以看到 webpack 的启动代码，在之后一点的地方，我们可以找到 `src/index.js` 文件的内容。\n\n## 添加其他文件\n\n为了让构建更复杂一点，我们再添加一个模块，`src/component.js`。\n\n```js\nexport default (text = 'Hello world') => {\n  const element = document.createElement('div');\n  element.innerHTML = text;\n  return element;\n};\n```\n\n修改 `src/index.js` 代码如下：\n\n```js\nimport component from './component';\n\ndocument.body.appendChild(component());\n```\n\n再次运行 `node_modules/.bin/wp`，我们查看 `dist` 目录下的输出，我们可以看到这两个模块的代码都在输出的 bundle 中。\n\nWebpack 完成了打包输出，那么如何在浏览器中运行呢？\n\n## 配置 mini-html-webpack-plugin 插件\n\n我们需要写一个 html 文件，在这个文件中引用 webpack 打包输出的文件即可。可以通过 [mini-html-webpack-plugin](https://www.npmjs.com/package/mini-html-webpack-plugin) 这个插件来帮我们自动的做这个事情。\n\n```bash\nnpm add mini-html-webpack-plugin --develop\n```\n\n> [webpack-html-plugin](https://www.npmjs.com/package/webpack-html-plugin) 也可以完成上面的工作，而且功能更丰富。但是 mini-html-webpack-plugin 功能已经足够演示使用，后面会介绍 webpack-html-plugin 的使用。\n\n为了让 Webpack 可以使用这个插件，我们需要一个配置文件，`webpack.config.js`。\n\n```js\nconst { mode } = require('webpack-nano/argv');\nconst { MiniHtmlWebpackPlugin } = require('mini-html-webpack-plugin');\nmodule.exports = {\n  mode,\n  plugins: [\n    new MiniHtmlWebpackPlugin({\n      context: { title: 'Demo' },\n    }),\n  ],\n};\n```\n\n配置完成之后，执行如下命令：\n\n1. 通过 `node_modules/.bin/wp --mode production` 构建项目。\n2. 使用 `npx serve dist` 运行一个静态文件服务器。\n\n在浏览器中我们可以看到如下输出：\n\n![HelloWorld](/courses/webpack/helloworld-c.png)\n\n> Webpack 不仅支持对象类型的配置，还支持数组、Promise 类型的配置。Webpack 对输入和输出都有默认值，默认会从 `src/` 目录下开始寻找模块，默认输出到 `dist` 目录中。我们可以通过 `entry` 和 `output` 这两个配置来改变这个行为。\n\n## 检查输出\n\n在执行完 `node_modules/.bin/wp --mode production` 以后，输出如下：\n\n```\n⬡ webpack: Build Finished\n⬡ webpack: asset index.html 190 bytes [compared for emit]\n  asset main.js 136 bytes [compared for emit] [minimized] (name: main)\n  orphan modules 149 bytes [orphan] 1 module\n  ./src/index.js + 1 modules 228 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 198 ms\n```\n\n从 Webpack 5 开始，输出内容被极大的简化了。在之前的版本中，输出内容会包含一整个 Webpack 运行时，但是从 Webpack 5 开始，Webpack 可以按照最小需求优化输出了。\n\n## 添加快捷命令\n\n不断执行 `node_modules/.bin/wp --mode production` 这个命令非常麻烦，我们可以在 package.json 添加一个快捷命令。\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"wp --mode production\"\n  }\n}\n```\n\n现在执行 `npm run build`，我们可以得到与之前相同的结果。\n\n## 总结\n\n通过本地依赖的形式安装 webpack 是一个好主意，这样可以确切的直到使用了哪个版本的 Webpack。\n\nWebpack-cli 是官方提供的命令行工具，功能非常丰富。但是如果仅仅是基础使用的话，Webpack-nano 是一个不错的备选。\n\n如果要修改 Webpack 的行为，我们需要一个额外的配置文件，通常叫 `webpack.config.js`。\n\nmini-html-webpack-plugin 和 html-webpack-plugin 都可以用来生成应用的入口 html 文件，html-webpack-plugin 功能更丰富。\n\n通过 npm scripts 可以帮助我们减少一些重复的命令行输入。\n",contentRendered:'<p>在开始之前，我们需要准备好本地的开发环境，安装好 Nodejs. Nodejs 可以直接从<a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">官方网站<OutboundLink/></a>下载安装。</p>\n<h2 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h2>\n<p>创建一个目录，然后通过 <code>npm init -y</code> 生层 <code>package.json</code>.</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">mkdir</span> webpack-demo\n\n<span class="token builtin class-name">cd</span> webpack-demo\n\n<span class="token comment"># -y 选项会使用默认值来填充 package.json</span>\n<span class="token function">npm</span> init -y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="安装-webpack" tabindex="-1"><a class="header-anchor" href="#安装-webpack" aria-hidden="true">#</a> 安装 Webpack</h2>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> webpack webpack-nano --develop <span class="token comment"># --develop === -D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过以上命令，我们将 Webpack 安装在了项目的 <code>node_modules</code> 目录下，并且在 <code>node_modules/.bin</code> 目录下可以找到 webpack 的可执行文件。</p>\n<blockquote>\n<p>需要说明的是，我们这里使用了 <a href="https://www.npmjs.com/package/webpack-nano" target="_blank" rel="noopener noreferrer">webpack-nano<OutboundLink/></a> 而不是官方的 webpack-cli 是因为 webpack-nano 的功能足够我们使用了，而且 webpack-nano 兼容 webpack 4 和 webpack 5 的。</p>\n</blockquote>\n<h2 id="运行-webpack" tabindex="-1"><a class="header-anchor" href="#运行-webpack" aria-hidden="true">#</a> 运行 Webpack</h2>\n<p>在命令行输入 <code>node_modules/.bin/wp</code> 来运行 webpack-nano。输出结果如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by status 0 bytes [cached] 1 asset\n\n\n  WARNING in configuration\n  The \'mode\' option has not been set, webpack will fallback to \'production\' for this value. Set \'mode\' option to \'development\' or \'production\' to enable defaults for each environment.\n  You can also set it to \'none\' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/\n\n\n  ERROR in main\n  Module not found: Error: Can\'t resolve \'./src\' in \'/Users/xxx/workspace/projects/webpack-demo\'\n\n\n  webpack 5.11.1 compiled with 1 error and 1 warning in 146 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>输出结果显示 webpack 找不到可编译的文件。</p>\n<p>为了要 webpack 能正确运行起来，我们需要做一些其他操作。</p>\n<ol>\n<li>添加 <code>src/index.js</code> 文件，内容为 <code>console.log(\'Hello World!\')</code>;</li>\n<li>执行 <code>./node_modules/.bin/wp</code>，webpack 默认会找到这个文件。</li>\n<li>检查 <code>dist/main.js</code>，在输出文件中我们可以看到 webpack 的启动代码，在之后一点的地方，我们可以找到 <code>src/index.js</code> 文件的内容。</li>\n</ol>\n<h2 id="添加其他文件" tabindex="-1"><a class="header-anchor" href="#添加其他文件" aria-hidden="true">#</a> 添加其他文件</h2>\n<p>为了让构建更复杂一点，我们再添加一个模块，<code>src/component.js</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">\'Hello world\'</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>修改 <code>src/index.js</code> 代码如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> component <span class="token keyword">from</span> <span class="token string">\'./component\'</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>再次运行 <code>node_modules/.bin/wp</code>，我们查看 <code>dist</code> 目录下的输出，我们可以看到这两个模块的代码都在输出的 bundle 中。</p>\n<p>Webpack 完成了打包输出，那么如何在浏览器中运行呢？</p>\n<h2 id="配置-mini-html-webpack-plugin-插件" tabindex="-1"><a class="header-anchor" href="#配置-mini-html-webpack-plugin-插件" aria-hidden="true">#</a> 配置 mini-html-webpack-plugin 插件</h2>\n<p>我们需要写一个 html 文件，在这个文件中引用 webpack 打包输出的文件即可。可以通过 <a href="https://www.npmjs.com/package/mini-html-webpack-plugin" target="_blank" rel="noopener noreferrer">mini-html-webpack-plugin<OutboundLink/></a> 这个插件来帮我们自动的做这个事情。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> mini-html-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p><a href="https://www.npmjs.com/package/webpack-html-plugin" target="_blank" rel="noopener noreferrer">webpack-html-plugin<OutboundLink/></a> 也可以完成上面的工作，而且功能更丰富。但是 mini-html-webpack-plugin 功能已经足够演示使用，后面会介绍 webpack-html-plugin 的使用。</p>\n</blockquote>\n<p>为了让 Webpack 可以使用这个插件，我们需要一个配置文件，<code>webpack.config.js</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-nano/argv\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> MiniHtmlWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MiniHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      context<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">\'Demo\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>配置完成之后，执行如下命令：</p>\n<ol>\n<li>通过 <code>node_modules/.bin/wp --mode production</code> 构建项目。</li>\n<li>使用 <code>npx serve dist</code> 运行一个静态文件服务器。</li>\n</ol>\n<p>在浏览器中我们可以看到如下输出：</p>\n<p><img src="/courses/webpack/helloworld-c.png" alt="HelloWorld"></p>\n<blockquote>\n<p>Webpack 不仅支持对象类型的配置，还支持数组、Promise 类型的配置。Webpack 对输入和输出都有默认值，默认会从 <code>src/</code> 目录下开始寻找模块，默认输出到 <code>dist</code> 目录中。我们可以通过 <code>entry</code> 和 <code>output</code> 这两个配置来改变这个行为。</p>\n</blockquote>\n<h2 id="检查输出" tabindex="-1"><a class="header-anchor" href="#检查输出" aria-hidden="true">#</a> 检查输出</h2>\n<p>在执行完 <code>node_modules/.bin/wp --mode production</code> 以后，输出如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset index.html 190 bytes [compared for emit]\n  asset main.js 136 bytes [compared for emit] [minimized] (name: main)\n  orphan modules 149 bytes [orphan] 1 module\n  ./src/index.js + 1 modules 228 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 198 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>从 Webpack 5 开始，输出内容被极大的简化了。在之前的版本中，输出内容会包含一整个 Webpack 运行时，但是从 Webpack 5 开始，Webpack 可以按照最小需求优化输出了。</p>\n<h2 id="添加快捷命令" tabindex="-1"><a class="header-anchor" href="#添加快捷命令" aria-hidden="true">#</a> 添加快捷命令</h2>\n<p>不断执行 <code>node_modules/.bin/wp --mode production</code> 这个命令非常麻烦，我们可以在 package.json 添加一个快捷命令。</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"wp --mode production"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在执行 <code>npm run build</code>，我们可以得到与之前相同的结果。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>通过本地依赖的形式安装 webpack 是一个好主意，这样可以确切的直到使用了哪个版本的 Webpack。</p>\n<p>Webpack-cli 是官方提供的命令行工具，功能非常丰富。但是如果仅仅是基础使用的话，Webpack-nano 是一个不错的备选。</p>\n<p>如果要修改 Webpack 的行为，我们需要一个额外的配置文件，通常叫 <code>webpack.config.js</code>。</p>\n<p>mini-html-webpack-plugin 和 html-webpack-plugin 都可以用来生成应用的入口 html 文件，html-webpack-plugin 功能更丰富。</p>\n<p>通过 npm scripts 可以帮助我们减少一些重复的命令行输入。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-03",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/simple-demo.html",pathLocale:"/",permalink:null,slug:"simple-demo",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/simple-demo.md",filePathRelative:"courses/webpack/simple-demo.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/simple-demo.html.vue",componentFilePathRelative:"pages/courses/webpack/simple-demo.html.vue",componentFileChunkName:"v-85e2eb66",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/simple-demo.html.js",dataFilePathRelative:"pages/courses/webpack/simple-demo.html.js",dataFileChunkName:"v-85e2eb66",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/simple-demo.html",htmlFilePathRelative:"courses/webpack/simple-demo.html"},{key:"v-2cda2f46",path:"/courses/webpack/source-map.html",title:"Source Map",lang:"zh-CN",frontmatter:{title:"Source Map",description:"介绍 Webpack 中如何生成 source map",keywords:["Webpack"],date:"2021-01-15T00:00:00.000Z",key:13},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"使用 Source Map",slug:"使用-source-map",children:[]},{level:2,title:"内联 Source Map",slug:"内联-source-map",children:[{level:3,title:'devtool: "eval"',slug:"devtool-eval",children:[]},{level:3,title:'devtool: "eval-cheap-source-map"',slug:"devtool-eval-cheap-source-map",children:[]},{level:3,title:"devtool: eval-cheap-module-source-map",slug:"devtool-eval-cheap-module-source-map",children:[]},{level:3,title:'devtool: "eval-source-map"',slug:"devtool-eval-source-map",children:[]}]},{level:2,title:"输出 Source Map 文件",slug:"输出-source-map-文件",children:[{level:3,title:'devtool: "cheap-source-map"',slug:"devtool-cheap-source-map",children:[]},{level:3,title:'devtool: "cheap-module-source-map"',slug:"devtool-cheap-module-source-map",children:[]},{level:3,title:'devtool: "source-map"',slug:"devtool-source-map",children:[]},{level:3,title:'devtool: "hidden-source-map"',slug:"devtool-hidden-source-map",children:[]},{level:3,title:'devtool: "nosources-source-map"',slug:"devtool-nosources-source-map",children:[]}]},{level:2,title:"其他的 Source Map 选项",slug:"其他的-source-map-选项",children:[]},{level:2,title:"从 Source Map 中生成源代码",slug:"从-source-map-中生成源代码",children:[]},{level:2,title:"使用项目依赖包中的 Source Map",slug:"使用项目依赖包中的-source-map",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\n源代码在被转换后变得不可读，这给调试带来了非常多的不便。通常我们可以通过 Source Map 来解决这个问题。我们不仅可以给 JavaScript 文件添加 Source Map，还可以给样式文件添加 Source Map。\n\nWebpack 同时支持将 Source Map 内联在输出的 Bundle 中和将 Source Map 单独输出到文件中。在开发过程中，将 Source Map 内联在构建输出中可以加快构建性能。在生产环境中，Source Map 通常会被单独输出到文件中，减少请求文件大小。\n\n## 使用 Source Map\n\n**webpack.parts.js**\n\n```js\nexports.generateSourceMaps = ({ type }) => ({ devtool: type });\n```\n\nWebpack 支持多种 Source Map 选项，每种选项都有着针对构建性能和输出质量的不同考量。假设现在我们在生产环境中使用 `source-map` 这个选项，开发环境中使用 Webpack 的默认值，则配置如下：\n\n**webpack.config.js**\n\n```js\nconst productionConfig = merge([\n  ...parts.generateSourceMaps({ type: \'source-map\' }),\n]);\n```\n\n`source-map` 是构建速度最慢，但是质量最高的选项，比较适合用在生产环境中。\n\n这时候执行 `npm run build`, 可以在项目的 `dist` 目录中看到输出的 `.map` 文件。\n\n## 内联 Source Map\n\n所谓内联 Source Map 就是将 Source Map 与构建出来的结果一同输出。Webpack 支持多种内联 Source Map 设置，下面逐一介绍。每一个选项都会有一个样例。\n\n> 每个样例除了 Source Map 的设置，还额外使用了 `optimization.moduleIds = "named"` 配置来给每一个模块添加名称，提高可阅读性。同时还将 `mode` 设置为 `false` 来避免 Webpack 的默认处理。\n\n### `devtool: "eval"`\n\n`eval` 选项生成的代码会将每一个模块的源代码包裹在 `eval` 函数中。\n\n```js\n/***/ "./src/index.js":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\"./src/main.css\\");\\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_main_css__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\"./src/component.js\\");\\n\\n\\ndocument.body.appendChild(Object(_component__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"])());\\n\\n//# sourceURL=webpack:///./src/index.js?");\n\n/***/ }),\n```\n\n### `devtool: "eval-cheap-source-map"`\n\n`eval-cheap-source-map` 与 `eval` 类似，但是会将 Source Map 信息进行 Base64 编码，将就编码结果以 data url 的形式作为 Source Map 的地址保存在构建结果中。`eval-cheap-source-map` 输出的 Map 信息中只有行数据，没有代码列的 Map 数据。我们将 Source Map 信息解码后可以看到如下信息：\n\n```json\n{\n  "version": 3,\n  "file": "./src/index.js.js",\n  "sources": ["webpack:///./src/index.js?3700"],\n  "sourcesContent": [\n    "import \'./main.css\';\\nimport component from \\"./component\\";\\ndocument.body.appendChild(component());"\n  ],\n  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA",\n  "sourceRoot": ""\n}\n```\n\n### `devtool: eval-cheap-module-source-map`\n\n`eval-cheap-module-source-map` 的处理方式相同，只是构建出来的 Source Map 质量更高，但是构建速度更慢。解码信息如下：\n\n```json\n{\n  "version": 3,\n  "file": "./src/index.js.js",\n  "sources": ["webpack:///./src/index.js?b635"],\n  "sourcesContent": ["import \'./main.css\';\\nimport component ..."],\n  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA",\n  "sourceRoot": ""\n}\n```\n\n### `devtool: "eval-source-map"`\n\n`eval-source-map` 得到的 Source Map 质量最高，同时构建速度也最慢。解码后得到的信息也最多。\n\n```json\n{\n  "version": 3,\n  "sources": ["webpack:///./src/index.js?b635"],\n  "names": ["document", "body", "appendChild", "component"],\n  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BC,0DAAS,EAAnC",\n  "file": "./src/index.js.js",\n  "sourcesContent": ["import \'./main.css\';\\nimport component ..."],\n  "sourceRoot": ""\n}\n```\n\n## 输出 Source Map 文件\n\n一般来说，在生产环境中，我们会将 Source Map 输出到单独的 `.map` 文件中。下面几个选项会将 Source Map 信息单独输出到文件中。\n\n### `devtool: "cheap-source-map"`\n\n与上面的内联的 cheap 选项相同，`cheap-source-map` 生成的 Map 文件中只有代码行的 Map 数据，没有代码列的 Map 数据。同时，来自于 loader 的 Source Map 也不会包含在输出结果中。\n\n检查输出的 `.map` 文件可以看到如下结果。\n\n```json\n{\n  "version": 3,\n  "file": "main.js",\n  "sources": [\n    "webpack:///webpack/bootstrap",\n    "webpack:///./src/component.js",\n    "webpack:///./src/index.js",\n    "webpack:///./src/main.css"\n  ],\n  "sourcesContent": ["...", "// extracted by mini-css-extract-plugin"],\n  "mappings": ";AAAA;...;;ACFA;;;;A",\n  "sourceRoot": ""\n}\n```\n\n在构建输出的代码文件中，可以看到类似于 `//# sourceMappingURL=main.js.map` 这样的注释，来告知浏览器使用的 Source Map 的地址。\n\n### `devtool: "cheap-module-source-map"`\n\n`cheap-module-source-map` 于上一个选项基本相同，除了会将来自于 loader 的 Source Map 也包含在输出的 Map 文件中。注意该选项只包含代码行的 Map 信息。\n\n查看输出信息如下：\n\n```json\n{\n  "version": 3,\n  "file": "main.js",\n  "sources": [\n    "webpack:///webpack/bootstrap",\n    "webpack:///./src/component.js",\n    "webpack:///./src/index.js",\n    "webpack:///./src/main.css"\n  ],\n  "sourcesContent": ["...", "// extracted by mini-css-extract-plugin"],\n  "mappings": ";AAAA;...;;ACFA;;;;A",\n  "sourceRoot": ""\n}\n```\n\n### `devtool: "source-map"`\n\n`source-map` 的输出质量最高，但是性能也最差。输出结果如下：\n\n```json\n{\n  "version": 3,\n  "sources": [\n    "webpack:///webpack/bootstrap",\n    "webpack:///./src/component.js",\n    "webpack:///./src/index.js",\n    "webpack:///./src/main.css"\n  ],\n  "names": [\n    "text",\n    "element",\n    "document",\n    "createElement",\n    "className",\n    "innerHTML",\n    "body",\n    "appendChild",\n    "component"\n  ],\n  "mappings": ";AAAA;...;;ACFA;;;;A",\n  "file": "main.js",\n  "sourcesContent": ["...", "// extracted by mini-css-extract-plugin"],\n  "sourceRoot": ""\n}\n```\n\n### `devtool: "hidden-source-map"`\n\n`hidden-source-map` 与 `source-map` 相同，但是 `hidden-source-map` 不会在代码中输出 `.map` 的引用地址。因此浏览器调试工具无法自动加载 Source Map 文件。\n\n### `devtool: "nosources-source-map"`\n\n`nosources-source-map` 输出的 Source Map 文件中不包含 `sourcesContent` 这个字段，也就是说在客户端看不到源代码。但是可以得到报错的基于源代码的堆栈信息。\n\n## 其他的 Source Map 选项\n\n这里还有一些可以控制 Source Map 输出的选项。\n\n```js\nconst config = {\n  output: {\n    // 指定生成的 Source Map 文件名称\n    // 可以使用 [file], [id], [fullhash], and [chunkhash] 占位符.\n    sourceMapFilename: \'[file].map\', // 默认配置\n\n    // 默认的 Source Map 引用模板。\n    devtoolModuleFilenameTemplate: \'webpack:///[resource-path]?[loaders]\',\n\n    // create-react-app 会使用下面的配置，这样让 Source Map 可以在开发工具中更好的展示\n    devtoolModuleFilenameTemplate: (info) =>\n      path.resolve(info.absoluteResourcePath).replace(/\\\\/g, \'/\'),\n  },\n};\n```\n\n## 从 Source Map 中生成源代码\n\n我们可以借助于 [source-from-sourcemaps](https://www.npmjs.com/package/source-from-sourcemaps)这个工具，通过 Source Map 和压缩混淆过的代码反向生成源代码。\n\n## 使用项目依赖包中的 Source Map\n\n[source-map-loader](https://www.npmjs.com/package/source-map-loader) 可以帮助我们将项目依赖包中的内联 Source Map 提取出来，从而避免将依赖包的 Source Map 输出到项目代码中。\n\n## 总结\n\nSource Map 通过建立转换后的代码和源代码的映射关系，给开发调试带来的极大的便利。在开发和生产环境中都可以使用。\n\nWebpack 支持多种 Source Map 的生成方式，通常分为内联 Source Map 和单独输出到文件 Source Map 两种。前者常用在开发环境中，后者常用在生产环境中。\n\n`devtool: "source-map"` 生成的 Source Map 质量最高，常被用在生产环境中。\n\n通过使用 `devtool: "hidden-source-map"`，我们可以在生产环境中不暴露 Source Map 文件。将错误堆栈上报到其他服务，然后结合 Source Map 查找问题。\n\n在处理第三方依赖包的 Source Map 的时候，我们需要使用 `source-map-loader`.\n\n在处理样式相关的 Source Map 的时候，我们需要开启对应 loader 的 `sourceMap` 参数。\n',contentRendered:'<p>源代码在被转换后变得不可读，这给调试带来了非常多的不便。通常我们可以通过 Source Map 来解决这个问题。我们不仅可以给 JavaScript 文件添加 Source Map，还可以给样式文件添加 Source Map。</p>\n<p>Webpack 同时支持将 Source Map 内联在输出的 Bundle 中和将 Source Map 单独输出到文件中。在开发过程中，将 Source Map 内联在构建输出中可以加快构建性能。在生产环境中，Source Map 通常会被单独输出到文件中，减少请求文件大小。</p>\n<h2 id="使用-source-map" tabindex="-1"><a class="header-anchor" href="#使用-source-map" aria-hidden="true">#</a> 使用 Source Map</h2>\n<p><strong>webpack.parts.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">generateSourceMaps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> type <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> devtool<span class="token operator">:</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Webpack 支持多种 Source Map 选项，每种选项都有着针对构建性能和输出质量的不同考量。假设现在我们在生产环境中使用 <code>source-map</code> 这个选项，开发环境中使用 Webpack 的默认值，则配置如下：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">generateSourceMaps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">\'source-map\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>source-map</code> 是构建速度最慢，但是质量最高的选项，比较适合用在生产环境中。</p>\n<p>这时候执行 <code>npm run build</code>, 可以在项目的 <code>dist</code> 目录中看到输出的 <code>.map</code> 文件。</p>\n<h2 id="内联-source-map" tabindex="-1"><a class="header-anchor" href="#内联-source-map" aria-hidden="true">#</a> 内联 Source Map</h2>\n<p>所谓内联 Source Map 就是将 Source Map 与构建出来的结果一同输出。Webpack 支持多种内联 Source Map 设置，下面逐一介绍。每一个选项都会有一个样例。</p>\n<blockquote>\n<p>每个样例除了 Source Map 的设置，还额外使用了 <code>optimization.moduleIds = &quot;named&quot;</code> 配置来给每一个模块添加名称，提高可阅读性。同时还将 <code>mode</code> 设置为 <code>false</code> 来避免 Webpack 的默认处理。</p>\n</blockquote>\n<h3 id="devtool-eval" tabindex="-1"><a class="header-anchor" href="#devtool-eval" aria-hidden="true">#</a> <code>devtool: &quot;eval&quot;</code></h3>\n<p><code>eval</code> 选项生成的代码会将每一个模块的源代码包裹在 <code>eval</code> 函数中。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token doc-comment comment">/***/ "./src/index.js":\n/***/</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token string">"use strict"</span><span class="token punctuation">;</span>\n<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\"./src/main.css\\");\\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_main_css__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\"./src/component.js\\");\\n\\n\\ndocument.body.appendChild(Object(_component__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"])());\\n\\n//# sourceURL=webpack:///./src/index.js?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/***/ <span class="token punctuation">}</span>),\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="devtool-eval-cheap-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-eval-cheap-source-map" aria-hidden="true">#</a> <code>devtool: &quot;eval-cheap-source-map&quot;</code></h3>\n<p><code>eval-cheap-source-map</code> 与 <code>eval</code> 类似，但是会将 Source Map 信息进行 Base64 编码，将就编码结果以 data url 的形式作为 Source Map 的地址保存在构建结果中。<code>eval-cheap-source-map</code> 输出的 Map 信息中只有行数据，没有代码列的 Map 数据。我们将 Source Map 信息解码后可以看到如下信息：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"./src/index.js.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"webpack:///./src/index.js?3700"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"sourcesContent"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"import \'./main.css\';\\nimport component from \\"./component\\";\\ndocument.body.appendChild(component());"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token string">"AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA"</span><span class="token punctuation">,</span>\n  <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="devtool-eval-cheap-module-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-eval-cheap-module-source-map" aria-hidden="true">#</a> <code>devtool: eval-cheap-module-source-map</code></h3>\n<p><code>eval-cheap-module-source-map</code> 的处理方式相同，只是构建出来的 Source Map 质量更高，但是构建速度更慢。解码信息如下：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"./src/index.js.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"webpack:///./src/index.js?b635"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"sourcesContent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"import \'./main.css\';\\nimport component ..."</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token string">"AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA"</span><span class="token punctuation">,</span>\n  <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="devtool-eval-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-eval-source-map" aria-hidden="true">#</a> <code>devtool: &quot;eval-source-map&quot;</code></h3>\n<p><code>eval-source-map</code> 得到的 Source Map 质量最高，同时构建速度也最慢。解码后得到的信息也最多。</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"webpack:///./src/index.js?b635"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">,</span> <span class="token string">"body"</span><span class="token punctuation">,</span> <span class="token string">"appendChild"</span><span class="token punctuation">,</span> <span class="token string">"component"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token string">"AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BC,0DAAS,EAAnC"</span><span class="token punctuation">,</span>\n  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"./src/index.js.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"sourcesContent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"import \'./main.css\';\\nimport component ..."</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="输出-source-map-文件" tabindex="-1"><a class="header-anchor" href="#输出-source-map-文件" aria-hidden="true">#</a> 输出 Source Map 文件</h2>\n<p>一般来说，在生产环境中，我们会将 Source Map 输出到单独的 <code>.map</code> 文件中。下面几个选项会将 Source Map 信息单独输出到文件中。</p>\n<h3 id="devtool-cheap-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-cheap-source-map" aria-hidden="true">#</a> <code>devtool: &quot;cheap-source-map&quot;</code></h3>\n<p>与上面的内联的 cheap 选项相同，<code>cheap-source-map</code> 生成的 Map 文件中只有代码行的 Map 数据，没有代码列的 Map 数据。同时，来自于 loader 的 Source Map 也不会包含在输出结果中。</p>\n<p>检查输出的 <code>.map</code> 文件可以看到如下结果。</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"webpack:///webpack/bootstrap"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/component.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/index.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/main.css"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"sourcesContent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"..."</span><span class="token punctuation">,</span> <span class="token string">"// extracted by mini-css-extract-plugin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token string">";AAAA;...;;ACFA;;;;A"</span><span class="token punctuation">,</span>\n  <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在构建输出的代码文件中，可以看到类似于 <code>//# sourceMappingURL=main.js.map</code> 这样的注释，来告知浏览器使用的 Source Map 的地址。</p>\n<h3 id="devtool-cheap-module-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-cheap-module-source-map" aria-hidden="true">#</a> <code>devtool: &quot;cheap-module-source-map&quot;</code></h3>\n<p><code>cheap-module-source-map</code> 于上一个选项基本相同，除了会将来自于 loader 的 Source Map 也包含在输出的 Map 文件中。注意该选项只包含代码行的 Map 信息。</p>\n<p>查看输出信息如下：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"webpack:///webpack/bootstrap"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/component.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/index.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/main.css"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"sourcesContent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"..."</span><span class="token punctuation">,</span> <span class="token string">"// extracted by mini-css-extract-plugin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token string">";AAAA;...;;ACFA;;;;A"</span><span class="token punctuation">,</span>\n  <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="devtool-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-source-map" aria-hidden="true">#</a> <code>devtool: &quot;source-map&quot;</code></h3>\n<p><code>source-map</code> 的输出质量最高，但是性能也最差。输出结果如下：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"webpack:///webpack/bootstrap"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/component.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/index.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"webpack:///./src/main.css"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"text"</span><span class="token punctuation">,</span>\n    <span class="token string">"element"</span><span class="token punctuation">,</span>\n    <span class="token string">"document"</span><span class="token punctuation">,</span>\n    <span class="token string">"createElement"</span><span class="token punctuation">,</span>\n    <span class="token string">"className"</span><span class="token punctuation">,</span>\n    <span class="token string">"innerHTML"</span><span class="token punctuation">,</span>\n    <span class="token string">"body"</span><span class="token punctuation">,</span>\n    <span class="token string">"appendChild"</span><span class="token punctuation">,</span>\n    <span class="token string">"component"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token string">";AAAA;...;;ACFA;;;;A"</span><span class="token punctuation">,</span>\n  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"sourcesContent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"..."</span><span class="token punctuation">,</span> <span class="token string">"// extracted by mini-css-extract-plugin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="devtool-hidden-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-hidden-source-map" aria-hidden="true">#</a> <code>devtool: &quot;hidden-source-map&quot;</code></h3>\n<p><code>hidden-source-map</code> 与 <code>source-map</code> 相同，但是 <code>hidden-source-map</code> 不会在代码中输出 <code>.map</code> 的引用地址。因此浏览器调试工具无法自动加载 Source Map 文件。</p>\n<h3 id="devtool-nosources-source-map" tabindex="-1"><a class="header-anchor" href="#devtool-nosources-source-map" aria-hidden="true">#</a> <code>devtool: &quot;nosources-source-map&quot;</code></h3>\n<p><code>nosources-source-map</code> 输出的 Source Map 文件中不包含 <code>sourcesContent</code> 这个字段，也就是说在客户端看不到源代码。但是可以得到报错的基于源代码的堆栈信息。</p>\n<h2 id="其他的-source-map-选项" tabindex="-1"><a class="header-anchor" href="#其他的-source-map-选项" aria-hidden="true">#</a> 其他的 Source Map 选项</h2>\n<p>这里还有一些可以控制 Source Map 输出的选项。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 指定生成的 Source Map 文件名称</span>\n    <span class="token comment">// 可以使用 [file], [id], [fullhash], and [chunkhash] 占位符.</span>\n    sourceMapFilename<span class="token operator">:</span> <span class="token string">\'[file].map\'</span><span class="token punctuation">,</span> <span class="token comment">// 默认配置</span>\n\n    <span class="token comment">// 默认的 Source Map 引用模板。</span>\n    devtoolModuleFilenameTemplate<span class="token operator">:</span> <span class="token string">\'webpack:///[resource-path]?[loaders]\'</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// create-react-app 会使用下面的配置，这样让 Source Map 可以在开发工具中更好的展示</span>\n    <span class="token function-variable function">devtoolModuleFilenameTemplate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>absoluteResourcePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="从-source-map-中生成源代码" tabindex="-1"><a class="header-anchor" href="#从-source-map-中生成源代码" aria-hidden="true">#</a> 从 Source Map 中生成源代码</h2>\n<p>我们可以借助于 <a href="https://www.npmjs.com/package/source-from-sourcemaps" target="_blank" rel="noopener noreferrer">source-from-sourcemaps<OutboundLink/></a>这个工具，通过 Source Map 和压缩混淆过的代码反向生成源代码。</p>\n<h2 id="使用项目依赖包中的-source-map" tabindex="-1"><a class="header-anchor" href="#使用项目依赖包中的-source-map" aria-hidden="true">#</a> 使用项目依赖包中的 Source Map</h2>\n<p><a href="https://www.npmjs.com/package/source-map-loader" target="_blank" rel="noopener noreferrer">source-map-loader<OutboundLink/></a> 可以帮助我们将项目依赖包中的内联 Source Map 提取出来，从而避免将依赖包的 Source Map 输出到项目代码中。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Source Map 通过建立转换后的代码和源代码的映射关系，给开发调试带来的极大的便利。在开发和生产环境中都可以使用。</p>\n<p>Webpack 支持多种 Source Map 的生成方式，通常分为内联 Source Map 和单独输出到文件 Source Map 两种。前者常用在开发环境中，后者常用在生产环境中。</p>\n<p><code>devtool: &quot;source-map&quot;</code> 生成的 Source Map 质量最高，常被用在生产环境中。</p>\n<p>通过使用 <code>devtool: &quot;hidden-source-map&quot;</code>，我们可以在生产环境中不暴露 Source Map 文件。将错误堆栈上报到其他服务，然后结合 Source Map 查找问题。</p>\n<p>在处理第三方依赖包的 Source Map 的时候，我们需要使用 <code>source-map-loader</code>.</p>\n<p>在处理样式相关的 Source Map 的时候，我们需要开启对应 loader 的 <code>sourceMap</code> 参数。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-15",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/source-map.html",pathLocale:"/",permalink:null,slug:"source-map",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/source-map.md",filePathRelative:"courses/webpack/source-map.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/source-map.html.vue",componentFilePathRelative:"pages/courses/webpack/source-map.html.vue",componentFileChunkName:"v-2cda2f46",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/source-map.html.js",dataFilePathRelative:"pages/courses/webpack/source-map.html.js",dataFileChunkName:"v-2cda2f46",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/source-map.html",htmlFilePathRelative:"courses/webpack/source-map.html"},{key:"v-7f45384e",path:"/courses/webpack/ssr.html",title:"服务端渲染（SSR）",lang:"zh-CN",frontmatter:{title:"服务端渲染（SSR）",description:"介绍 Webpack 中如何进行服务端渲染（SSR）",keywords:["Webpack"],date:"2021-01-28T00:00:00.000Z",key:26},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加 Babel",slug:"添加-babel",children:[]},{level:2,title:"添加 React demo",slug:"添加-react-demo",children:[]},{level:2,title:"配置 Webpack",slug:"配置-webpack",children:[]},{level:2,title:"搭建服务",slug:"搭建服务",children:[]},{level:2,title:"预渲染（Prerendering）",slug:"预渲染-prerendering",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n通过服务端渲染（SSR）我们可以将应用的 HTML、JavaScript、CSS 代码，甚至是应用的初始状态数据在首次请求时就返回给浏览器。浏览器在拿到数据后，即使在 JavaScript 被禁用的状态下也能正确的展示页面。除此以外，服务端渲染还可以帮助实现搜索引擎优化（SEO）。\n\n我们现在来展示一下如何使用 SSR。\n\n## 添加 Babel\n\n通常来说，在 React 中我们都会使用 JSX，因此，需要先配置 babel。\n\n```bash\nnpm add babel-loader @babel/core @babel/preset-react --develop\n```\n\n**.babelrc**\n\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", { \"modules\": false }],\n    \"@babel/preset-react\"\n  ]\n}\n```\n\n## 添加 React demo\n\n安装 react 包。\n\n```bash\nnpm add react react-dom\n```\n\n做服务端渲染，在应用入口处有两种情况需要考虑。在浏览器端渲染时，我们需要将应用渲染到页面上。而在服务端时，我们只需要返回应用的 JSX 代码。\n\n另外，ES2016 的导入导出语法与 CommonJS 的导入导出预发不能混用，我们需要在入口代码处统一使用 CommonJS 语法。\n\n**src/ssr.js**\n\n```js\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst SSR = <div onClick={() => alert('hello')}>Hello world</div>;\n\nif (typeof document === 'undefined') {\n  module.exports = SSR;\n} else {\n  // 浏览器端做渲染\n  ReactDOM.hydrate(SSR, document.getElementById('app'));\n}\n```\n\n## 配置 Webpack\n\n我们单独定义一份配置文件。假设我们需要在多种环境中使用相同的输出，则使用 `UMD` 进行输出更为合理。\n\n**webpack.ssr.js**\n\n```js\nconst path = require('path');\nconst APP_SOURCE = path.join(__dirname, 'src');\n\nmodule.exports = {\n  mode: 'production',\n  entry: { index: path.join(APP_SOURCE, 'ssr.js') },\n  output: {\n    path: path.join(__dirname, 'static'),\n    filename: '[name].js',\n    libraryTarget: 'umd',\n    globalObject: 'this',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        include: APP_SOURCE,\n        use: 'babel-loader',\n      },\n    ],\n  },\n};\n```\n\n添加构建脚本.\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"build:ssr\": \"wp --config webpack.ssr.js\"\n  }\n}\n```\n\n此时执行 `npm run build:ssr`，我们可以看到新构建出来的文件 `./static/index.js`。下一步就是搭建一个服务来渲染页面。\n\n## 搭建服务\n\n我们使用 express 来举例。\n\n```bash\nnpm add express --develop\n```\n\n**server.js**\n\n```js\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('./static');\n\nconst app = express();\napp.use(express.static('static'));\napp.get('/', (req, res) =>\n  res.status(200).send(renderMarkup(renderToString(SSR)))\n);\napp.listen(process.env.PORT || 8080);\n\nfunction renderMarkup(html) {\n  return `<!DOCTYPE html>\n<html>\n  <head><title>SSR Demo</title><meta charset=\"utf-8\" /></head>\n  <body>\n    <div id=\"app\">${html}</div>\n    <script src=\"./index.js\"><\/script>\n  </body>\n</html>`;\n}\n```\n\n启动服务，`node ./server.js`，访问 `http://localhost:8080` 就可以看到调试工具的 `Source` 标签页中看到服务端渲染返回的内容了。\n\n此时如果修改了应用代码，刷新页面数据不会更新。我们可以通过 [webpack-dev-middleware](https://www.npmjs.com/package/webpack-dev-middleware) 来解决这个问题。\n\n上面这是简单演示了一个服务端渲染的 demo。有很多实际的问题没有解决，比如如何加载一个非 JavaScript 模块，像 CSS、图片等直接在服务端加载会导致报错。社区有很多成熟的服务端渲染框架，比如 Next.js 可以帮助解决这些问题。\n\n## 预渲染（Prerendering）\n\n预渲染同样可以解决 SEO 问题。预渲染通过一个无头浏览器将页面内容渲染完成后提供给爬虫。相对于服务端渲染来说，预渲染更易实现。预渲染也有缺点，就是对频繁变化的数据支持的不够理想。\n\n在 Webpack 中，我们可以使用这些工具来实现预渲染。\n\n- [prerender-spa-plugin](https://www.npmjs.com/package/prerender-spa-plugin)，底层使用 [Puppeteer](https://www.npmjs.com/package/puppeteer)\n- [prerender-loader](https://www.npmjs.com/package/prerender-loader) 可以提供高度定制化的选项。可以与 html-webpack-plugin 结合使用。\n\n## 总结\n\n服务端渲染可以为浏览器在加载初始 JavaScript 的时候提供更多的展示内容，同时也带来了更大的技术挑战。Webpack 可以为服务端渲染提供更多的资源构建支持。在一些主流的服务端渲染框架中，比如 Next.js 中都内置了 Webpack 来构建资源。\n",contentRendered:'<p>通过服务端渲染（SSR）我们可以将应用的 HTML、JavaScript、CSS 代码，甚至是应用的初始状态数据在首次请求时就返回给浏览器。浏览器在拿到数据后，即使在 JavaScript 被禁用的状态下也能正确的展示页面。除此以外，服务端渲染还可以帮助实现搜索引擎优化（SEO）。</p>\n<p>我们现在来展示一下如何使用 SSR。</p>\n<h2 id="添加-babel" tabindex="-1"><a class="header-anchor" href="#添加-babel" aria-hidden="true">#</a> 添加 Babel</h2>\n<p>通常来说，在 React 中我们都会使用 JSX，因此，需要先配置 babel。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> babel-loader @babel/core @babel/preset-react --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>.babelrc</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{\n  "presets": [\n    ["@babel/preset-env", { "modules": false }],\n    "@babel/preset-react"\n  ]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="添加-react-demo" tabindex="-1"><a class="header-anchor" href="#添加-react-demo" aria-hidden="true">#</a> 添加 React demo</h2>\n<p>安装 react 包。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> react react-dom\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>做服务端渲染，在应用入口处有两种情况需要考虑。在浏览器端渲染时，我们需要将应用渲染到页面上。而在服务端时，我们只需要返回应用的 JSX 代码。</p>\n<p>另外，ES2016 的导入导出语法与 CommonJS 的导入导出预发不能混用，我们需要在入口代码处统一使用 CommonJS 语法。</p>\n<p><strong>src/ssr.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'react\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ReactDOM <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'react-dom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">SSR</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">SSR</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 浏览器端做渲染</span>\n  ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token constant">SSR</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="配置-webpack" tabindex="-1"><a class="header-anchor" href="#配置-webpack" aria-hidden="true">#</a> 配置 Webpack</h2>\n<p>我们单独定义一份配置文件。假设我们需要在多种环境中使用相同的输出，则使用 <code>UMD</code> 进行输出更为合理。</p>\n<p><strong>webpack.ssr.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">APP_SOURCE</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span> index<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span> <span class="token string">\'ssr.js\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'static\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span><span class="token punctuation">,</span>\n    globalObject<span class="token operator">:</span> <span class="token string">\'this\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> <span class="token constant">APP_SOURCE</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>添加构建脚本.</p>\n<p><strong>package.json</strong></p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build:ssr"</span><span class="token operator">:</span> <span class="token string">"wp --config webpack.ssr.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时执行 <code>npm run build:ssr</code>，我们可以看到新构建出来的文件 <code>./static/index.js</code>。下一步就是搭建一个服务来渲染页面。</p>\n<h2 id="搭建服务" tabindex="-1"><a class="header-anchor" href="#搭建服务" aria-hidden="true">#</a> 搭建服务</h2>\n<p>我们使用 express 来举例。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> express --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>server.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> renderToString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'react-dom/server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">SSR</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./static\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'static\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderMarkup</span><span class="token punctuation">(</span><span class="token function">renderToString</span><span class="token punctuation">(</span><span class="token constant">SSR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">renderMarkup</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html>\n&lt;html>\n  &lt;head>&lt;title>SSR Demo&lt;/title>&lt;meta charset="utf-8" />&lt;/head>\n  &lt;body>\n    &lt;div id="app"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n    &lt;script src="./index.js">&lt;/script>\n  &lt;/body>\n&lt;/html></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>启动服务，<code>node ./server.js</code>，访问 <code>http://localhost:8080</code> 就可以看到调试工具的 <code>Source</code> 标签页中看到服务端渲染返回的内容了。</p>\n<p>此时如果修改了应用代码，刷新页面数据不会更新。我们可以通过 <a href="https://www.npmjs.com/package/webpack-dev-middleware" target="_blank" rel="noopener noreferrer">webpack-dev-middleware<OutboundLink/></a> 来解决这个问题。</p>\n<p>上面这是简单演示了一个服务端渲染的 demo。有很多实际的问题没有解决，比如如何加载一个非 JavaScript 模块，像 CSS、图片等直接在服务端加载会导致报错。社区有很多成熟的服务端渲染框架，比如 Next.js 可以帮助解决这些问题。</p>\n<h2 id="预渲染-prerendering" tabindex="-1"><a class="header-anchor" href="#预渲染-prerendering" aria-hidden="true">#</a> 预渲染（Prerendering）</h2>\n<p>预渲染同样可以解决 SEO 问题。预渲染通过一个无头浏览器将页面内容渲染完成后提供给爬虫。相对于服务端渲染来说，预渲染更易实现。预渲染也有缺点，就是对频繁变化的数据支持的不够理想。</p>\n<p>在 Webpack 中，我们可以使用这些工具来实现预渲染。</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/prerender-spa-plugin" target="_blank" rel="noopener noreferrer">prerender-spa-plugin<OutboundLink/></a>，底层使用 <a href="https://www.npmjs.com/package/puppeteer" target="_blank" rel="noopener noreferrer">Puppeteer<OutboundLink/></a></li>\n<li><a href="https://www.npmjs.com/package/prerender-loader" target="_blank" rel="noopener noreferrer">prerender-loader<OutboundLink/></a> 可以提供高度定制化的选项。可以与 html-webpack-plugin 结合使用。</li>\n</ul>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>服务端渲染可以为浏览器在加载初始 JavaScript 的时候提供更多的展示内容，同时也带来了更大的技术挑战。Webpack 可以为服务端渲染提供更多的资源构建支持。在一些主流的服务端渲染框架中，比如 Next.js 中都内置了 Webpack 来构建资源。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-28",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/ssr.html",pathLocale:"/",permalink:null,slug:"ssr",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/ssr.md",filePathRelative:"courses/webpack/ssr.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/ssr.html.vue",componentFilePathRelative:"pages/courses/webpack/ssr.html.vue",componentFileChunkName:"v-7f45384e",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/ssr.html.js",dataFilePathRelative:"pages/courses/webpack/ssr.html.js",dataFileChunkName:"v-7f45384e",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/ssr.html",htmlFilePathRelative:"courses/webpack/ssr.html"},{key:"v-5e8e0e9a",path:"/courses/webpack/tree-shaking.html",title:"Tree Shaking",lang:"zh-CN",frontmatter:{title:"Tree Shaking",description:"介绍 Webpack 中如何进行 Tree Shaking",keywords:["Webpack"],date:"2021-01-20T00:00:00.000Z",key:18},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Tree Shaking 示例",slug:"tree-shaking-示例",children:[]},{level:2,title:"包级别的 Tree Shaking",slug:"包级别的-tree-shaking",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:'\nTree Shaking 是 ES2015 模块定义方式提供的一个特性。Webpack 通过静态的分析模块定义，可以知道模块中哪些代码被使用了，那么代码没有被使用过。从 Webpack 5 开始，Tree Shaking 功能更加强大，可以支持嵌套代码、CommonJS 规范定义的代码的 Tree Shaking.\n\n## Tree Shaking 示例\n\n我们先定义一个包含不会被使用的代码的模块。\n\n**src/shake.js**\n\n```js\nconst shake = () => console.log(\'shake\');\nconst bake = () => console.log(\'bake\');\n\nexport { shake, bake };\n```\n\n在应用代码中是只用其中一部分。\n\n**src/index.js**\n\n```js\n...\nimport { bake } from "./shake";\n\nbake();\n```\n\n此时，执行 `npm run build`，查看构建输出的代码（`dist/main.js`），可以看到代码中只有 `console.log("bake")` 而没有 `console.log("shake")`.\n\n> 如果要与 TypeScript 配合使用，我们需要设置 `compilerOptions.module` 为 `es2015`。这么做是为了将 ES2015 的模块定义留给 Webpack 来处理。\n\n## 包级别的 Tree Shaking\n\nWebpack 同样支持针对 npm 包的 Tree Shaking。如果一个包需要支持 Tree Shaking，这个包需要将 ES2015 模块以外的代码都进行转换，然后通过 `package.json` 中的 `module` 字段指定 ES2015 模块的代码。这样 Webpack 就可以通过 `module` 找到 ES2015 的模块，然后应用 Tree Shaking。\n\n如果需要与 Babel 一起使用，则需要设置 `"modules": false`，这样才能让 Webpack 来处理 ES2015 模块。\n\n另外，需要注意，为了能更好的应用 Tree Shaking，如果包里没有产生副作用的代码，则可以在 `package.json` 中增加 `"sideEffects": false` 来显示标明。\n\n另一种对第三方包进行 Tree Shaking 的方式是使用 [babel-plugin-transform-imports](https://www.npmjs.com/package/babel-plugin-transform-imports) 这个包来对模块中的 `import` 语句做一些处理，使得 Webpack 能更好的进行 Tree Shaking。\n\n## 总结\n\nTree Shaking 是一个很强大的功能，一个包如果要支持 Tree Shaking 的话，需要源代码使用 ES2015，同时在 `package.json` 中设置 `module` 字段。\n\nTree Shaking 会删除未被使用的代码。\n\n如果要使用 Tree Shaking，需要以 ES2015 来编写源代码。\n\n如果你是一个包的开发者，要想支持 Tree Shaking，则需要将源代码中非 ES2015 模块的代码进行必要的转换，同时可以借助于 `"sideEffects": false` 来让 Webpack 更好的应用 Tree Shaking.\n',contentRendered:'<p>Tree Shaking 是 ES2015 模块定义方式提供的一个特性。Webpack 通过静态的分析模块定义，可以知道模块中哪些代码被使用了，那么代码没有被使用过。从 Webpack 5 开始，Tree Shaking 功能更加强大，可以支持嵌套代码、CommonJS 规范定义的代码的 Tree Shaking.</p>\n<h2 id="tree-shaking-示例" tabindex="-1"><a class="header-anchor" href="#tree-shaking-示例" aria-hidden="true">#</a> Tree Shaking 示例</h2>\n<p>我们先定义一个包含不会被使用的代码的模块。</p>\n<p><strong>src/shake.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">shake</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'shake\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bake</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'bake\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> shake<span class="token punctuation">,</span> bake <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在应用代码中是只用其中一部分。</p>\n<p><strong>src/index.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> bake <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./shake"</span><span class="token punctuation">;</span>\n\n<span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此时，执行 <code>npm run build</code>，查看构建输出的代码（<code>dist/main.js</code>），可以看到代码中只有 <code>console.log(&quot;bake&quot;)</code> 而没有 <code>console.log(&quot;shake&quot;)</code>.</p>\n<blockquote>\n<p>如果要与 TypeScript 配合使用，我们需要设置 <code>compilerOptions.module</code> 为 <code>es2015</code>。这么做是为了将 ES2015 的模块定义留给 Webpack 来处理。</p>\n</blockquote>\n<h2 id="包级别的-tree-shaking" tabindex="-1"><a class="header-anchor" href="#包级别的-tree-shaking" aria-hidden="true">#</a> 包级别的 Tree Shaking</h2>\n<p>Webpack 同样支持针对 npm 包的 Tree Shaking。如果一个包需要支持 Tree Shaking，这个包需要将 ES2015 模块以外的代码都进行转换，然后通过 <code>package.json</code> 中的 <code>module</code> 字段指定 ES2015 模块的代码。这样 Webpack 就可以通过 <code>module</code> 找到 ES2015 的模块，然后应用 Tree Shaking。</p>\n<p>如果需要与 Babel 一起使用，则需要设置 <code>&quot;modules&quot;: false</code>，这样才能让 Webpack 来处理 ES2015 模块。</p>\n<p>另外，需要注意，为了能更好的应用 Tree Shaking，如果包里没有产生副作用的代码，则可以在 <code>package.json</code> 中增加 <code>&quot;sideEffects&quot;: false</code> 来显示标明。</p>\n<p>另一种对第三方包进行 Tree Shaking 的方式是使用 <a href="https://www.npmjs.com/package/babel-plugin-transform-imports" target="_blank" rel="noopener noreferrer">babel-plugin-transform-imports<OutboundLink/></a> 这个包来对模块中的 <code>import</code> 语句做一些处理，使得 Webpack 能更好的进行 Tree Shaking。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Tree Shaking 是一个很强大的功能，一个包如果要支持 Tree Shaking 的话，需要源代码使用 ES2015，同时在 <code>package.json</code> 中设置 <code>module</code> 字段。</p>\n<p>Tree Shaking 会删除未被使用的代码。</p>\n<p>如果要使用 Tree Shaking，需要以 ES2015 来编写源代码。</p>\n<p>如果你是一个包的开发者，要想支持 Tree Shaking，则需要将源代码中非 ES2015 模块的代码进行必要的转换，同时可以借助于 <code>&quot;sideEffects&quot;: false</code> 来让 Webpack 更好的应用 Tree Shaking.</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-20",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/tree-shaking.html",pathLocale:"/",permalink:null,slug:"tree-shaking",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/tree-shaking.md",filePathRelative:"courses/webpack/tree-shaking.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/tree-shaking.html.vue",componentFilePathRelative:"pages/courses/webpack/tree-shaking.html.vue",componentFileChunkName:"v-5e8e0e9a",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/tree-shaking.html.js",dataFilePathRelative:"pages/courses/webpack/tree-shaking.html.js",dataFileChunkName:"v-5e8e0e9a",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/tree-shaking.html",htmlFilePathRelative:"courses/webpack/tree-shaking.html"},{key:"v-3bab95e0",path:"/courses/webpack/web-worker.html",title:"Web Worker",lang:"zh-CN",frontmatter:{title:"Web Worker",description:"介绍 Webpack 中如何处理Web Worker",keywords:["Webpack"],date:"2021-01-31T00:00:00.000Z",key:29},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加一个 worker",slug:"添加一个-worker",children:[]},{level:2,title:"添加一个宿主",slug:"添加一个宿主",children:[]},{level:2,title:"数据共享",slug:"数据共享",children:[]},{level:2,title:"其他选择",slug:"其他选择",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n[Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) 可以实现将复杂、耗时的计算从 JavaScript 的主执行进程中抽离出来，以后台任务的形式运行，避免影响主执行进程。Web Worker 无法操作 DOM 元素。\n\n在前面[设置构建输出目标](./output-target.md)一章中我们介绍过构建 Web Worker 的配置，这里我们介绍一下具体的使用方法。\n\n## 添加一个 worker\n\n一个 Worker 需要关注两件事情，一个是接收消息，一个是响应消息。在这之前，Worker 进行计算处理。\n\n**src/worker.js**\n\n```js\nself.onmessage = ({ data: { text } }) => {\n  self.postMessage({ text: text + text });\n};\n```\n\n## 添加一个宿主\n\n宿主需要初始化 Worker 并与 Worker 进行通信。\n\n**src/component.js**\n\n```js\nexport default (text = HELLO) => {\n  const element = document.createElement('h1');\n  const worker = new Worker(new URL('./worker.js', import.meta.url));\n  const state = { text };\n\n  worker.addEventListener('message', ({ data: { text } }) => {\n    state.text = text;\n    element.innerHTML = text;\n  });\n  element.innerHTML = state.text;\n  element.onclick = () => worker.postMessage({ text: state.text });\n\n  return element;\n};\n```\n\n完成这两步以后，我们就可以实现按钮的文案来自于 worker 计算的结果了。我们还可以将 worker 的响应改成异步的形式，加一些延时，看看按钮的变化。\n\n## 数据共享\n\n考虑到 Worker 与宿主间通信过程中数据序列化的开销，我们可以通过 [Transferable objects](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownershi) 来降低序列化的开销，同时还可以考虑使用 [SharedArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) 来共享数据。\n\n## 其他选择\n\n在 Webpack 5 之前，我们可以使用 [worker-loader](https://www.npmjs.com/package/worker-loader) 来构建 Worker，现在依然可以使用，worker-loader 提供了更加细粒度的配置。\n\n借助于 [workerize-loader](https://www.npmjs.com/package/workerize-loader) 和 [worker-plugin](https://www.npmjs.com/package/worker-plugin) 我们可以想普通 JavaScript 模块一样定义 Worker，同时还可以避免使用上面样例中 `self`。\n\n[threads.js](https://threads.js.org/) 提供了功能更加丰富，也更加复杂的解决方案。Thread.js 提供了可观察对象、线程池等特性。我们可以通过 [threads-plugin](https://github.com/andywer/threads-plugin) 将其与 Webpack 结合起来。\n\n## 总结\n\nWeb Worker 可以将复杂的计算等任务从 JavaScript 主执行进程中剥离出来，作为后台任务运行。Worker 无法直接操作用户 UI。\n\nWeb Worker 的通信开销比较大，不过随着上面介绍的一些技术的发展，这个问题将会得到改善。\n",contentRendered:'<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener noreferrer">Web Worker<OutboundLink/></a> 可以实现将复杂、耗时的计算从 JavaScript 的主执行进程中抽离出来，以后台任务的形式运行，避免影响主执行进程。Web Worker 无法操作 DOM 元素。</p>\n<p>在前面<RouterLink to="/courses/webpack/output-target.html">设置构建输出目标</RouterLink>一章中我们介绍过构建 Web Worker 的配置，这里我们介绍一下具体的使用方法。</p>\n<h2 id="添加一个-worker" tabindex="-1"><a class="header-anchor" href="#添加一个-worker" aria-hidden="true">#</a> 添加一个 worker</h2>\n<p>一个 Worker 需要关注两件事情，一个是接收消息，一个是响应消息。在这之前，Worker 进行计算处理。</p>\n<p><strong>src/worker.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> text <span class="token operator">+</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="添加一个宿主" tabindex="-1"><a class="header-anchor" href="#添加一个宿主" aria-hidden="true">#</a> 添加一个宿主</h2>\n<p>宿主需要初始化 Worker 并与 Worker 进行通信。</p>\n<p><strong>src/component.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">text <span class="token operator">=</span> <span class="token constant">HELLO</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'h1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">\'./worker.js\'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> state<span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> state<span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>完成这两步以后，我们就可以实现按钮的文案来自于 worker 计算的结果了。我们还可以将 worker 的响应改成异步的形式，加一些延时，看看按钮的变化。</p>\n<h2 id="数据共享" tabindex="-1"><a class="header-anchor" href="#数据共享" aria-hidden="true">#</a> 数据共享</h2>\n<p>考虑到 Worker 与宿主间通信过程中数据序列化的开销，我们可以通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownershi" target="_blank" rel="noopener noreferrer">Transferable objects<OutboundLink/></a> 来降低序列化的开销，同时还可以考虑使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer" target="_blank" rel="noopener noreferrer">SharedArrayBuffer<OutboundLink/></a> 来共享数据。</p>\n<h2 id="其他选择" tabindex="-1"><a class="header-anchor" href="#其他选择" aria-hidden="true">#</a> 其他选择</h2>\n<p>在 Webpack 5 之前，我们可以使用 <a href="https://www.npmjs.com/package/worker-loader" target="_blank" rel="noopener noreferrer">worker-loader<OutboundLink/></a> 来构建 Worker，现在依然可以使用，worker-loader 提供了更加细粒度的配置。</p>\n<p>借助于 <a href="https://www.npmjs.com/package/workerize-loader" target="_blank" rel="noopener noreferrer">workerize-loader<OutboundLink/></a> 和 <a href="https://www.npmjs.com/package/worker-plugin" target="_blank" rel="noopener noreferrer">worker-plugin<OutboundLink/></a> 我们可以想普通 JavaScript 模块一样定义 Worker，同时还可以避免使用上面样例中 <code>self</code>。</p>\n<p><a href="https://threads.js.org/" target="_blank" rel="noopener noreferrer">threads.js<OutboundLink/></a> 提供了功能更加丰富，也更加复杂的解决方案。Thread.js 提供了可观察对象、线程池等特性。我们可以通过 <a href="https://github.com/andywer/threads-plugin" target="_blank" rel="noopener noreferrer">threads-plugin<OutboundLink/></a> 将其与 Webpack 结合起来。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Web Worker 可以将复杂的计算等任务从 JavaScript 主执行进程中剥离出来，作为后台任务运行。Worker 无法直接操作用户 UI。</p>\n<p>Web Worker 的通信开销比较大，不过随着上面介绍的一些技术的发展，这个问题将会得到改善。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-31",deps:[],hoistedTags:[],links:[{raw:"./output-target.md",relative:"courses/webpack/output-target.md",absolute:"/courses/webpack/output-target.md"}],pathInferred:"/courses/webpack/web-worker.html",pathLocale:"/",permalink:null,slug:"web-worker",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/web-worker.md",filePathRelative:"courses/webpack/web-worker.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/web-worker.html.vue",componentFilePathRelative:"pages/courses/webpack/web-worker.html.vue",componentFileChunkName:"v-3bab95e0",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/web-worker.html.js",dataFilePathRelative:"pages/courses/webpack/web-worker.html.js",dataFileChunkName:"v-3bab95e0",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/web-worker.html",htmlFilePathRelative:"courses/webpack/web-worker.html"},{key:"v-0d9b199a",path:"/courses/webpack/what-is-loader.html",title:"什么是 loader",lang:"zh-CN",frontmatter:{title:"什么是 loader",description:"介绍 Webpack 中 loader 的概念",keywords:["Webpack"],date:"2021-01-11T00:00:00.000Z",key:9},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Loader 的顺序",slug:"loader-的顺序",children:[]},{level:2,title:"loader 的参数",slug:"loader-的参数",children:[]},{level:2,title:"内联 loader 定义",slug:"内联-loader-定义",children:[]},{level:2,title:"通过 info 对象来加载资源",slug:"通过-info-对象来加载资源",children:[]},{level:2,title:"通过 resourceQuery 加载资源",slug:"通过-resourcequery-加载资源",children:[]},{level:2,title:"通过 issuer 加载资源",slug:"通过-issuer-加载资源",children:[]},{level:2,title:"调整 loader 匹配条件的各种方法",slug:"调整-loader-匹配条件的各种方法",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n前面在加载样式文件的时候介绍了很多 loader，每个 loader 都有不同的配置方法。实际上，Webpack 提供了多种方式来设置 loader 参数。本文就来详细说明如何配置一个 loader。\n\nWebpack 默认只支持 CommonJS 规范。其他规范的模块，Webpack 需要借助于 loader 来解析。下面的样例展示了利用 babel 来加载 JavaScript 文件的 loader 配置。\n\n```js\nconst config = {\n  module: {\n    rules: [\n      {\n        // 文件匹配条件，支持正则表达式或者函数\n        test: /\\.js$/,\n\n        // 文件目录匹配\n        include: path.join(__dirname, \"app\"),\n        exclude: (path) => path.match(/node_modules/);\n\n        // 针对匹配到的文件需要执行的动作\n        use: \"babel-loader\",\n      },\n    ],\n  },\n};\n```\n\n## Loader 的顺序\n\n在 Webpack 中，loader 是按从右向左，从下向上的顺序依次评估的。可以通过函数调用的方式加以理解。`use: [\"style-loader\", \"css-loader\"]` 等同于 `style(css(input))` 。参考样例：\n\n```js\nconst config = {\n  test: /\\.css$/,\n  use: ['style-loader', 'css-loader'],\n};\n```\n\n基于从右向左的原则，配置还可以改成这样：\n\n```js\nconst config = [\n  { test: /\\.css$/, use: 'style-loader' },\n  { test: /\\.css$/, use: 'css-loader' },\n];\n```\n\n正常情况下，通过上面的规则，我们可以实现各种处理顺序的 loader 定义。但是，有时候如果可以动态调整 loader 定义的顺序会给开发带来极大的遍历。这时候我们可以通过 `enforce` 这个字段来实现，`enforce` 取值为 `pre` 则 loader 会在其他 loader 之前执行，取值为 `post` 则 loader 会在其他 loader 之后执行。\n\n代码规范静态检查配置可以很好的说明 `enforce` 的使用，通常我们需要在加载源代码的时候就检查代码规范，因此需要配置 `enforce: \"pre\"`。`enforce:\"post\"` 不太常用，通常会被用在对构建输出做校验的场景下。\n\n```js\nconst config = {\n  test: /\\.js$/,\n  enforce: 'pre', // \"post\" too\n  use: 'eslint-loader',\n};\n```\n\n通常来说，我们也可以通过纯代码的形式控制 loader 顺序，但是 `enforce` 提供了更多的遍历，同时也允许 loader 的配置分散在多个文件中，灵活性更好。\n\n## loader 的参数\n\nWebpack 支持通过 query 参数的形式给 loader 设置参数。\n\n```js\nconst config = { test: /\\.js$/, use: 'babel-loader?presets[]=env' };\n```\n\n这种传参方式同样可以被应用在源代码中。缺点是可读性差一些。\n\n通常情况下，我们使用 `use` 来给 loader 传参：\n\n```js\nconst config = {\n  test: /\\.js$/,\n  use: { loader: 'babel-loader', options: { presets: ['env'] } },\n};\n```\n\n## 内联 loader 定义\n\n通常情况下，我们通过 webpack 的配置文件来定义 loader，但是，Webpack 同时支持在源代码中通过内联的形式定义 loader。\n\n```js\nimport 'url-loader!./foo.png';\nimport '!!url-loader!./bar.png';\n```\n\n一般来说，我们应该避免这么做，因为这样使得我们的源代码跟 webpack 产生了耦合。\n\n我们也可以在 webpack 的 entry 配置中定义 loader。\n\n```js\nconst config = { entry: { app: 'babel-loader!./app' } };\n```\n\n## 通过 `info` 对象来加载资源\n\n`use` 支持传递一个函数，返回 loader 配置。在这个函数里，我们可以根据环境等条件返回不同的配置。`use` 函数中必须返回一个值，可以为 falsy, object，或者字符串。\n\n```js\nconst config = {\n  rules: [\n    {\n      test: /\\.js$/,\n      use: [\n        (info) => ({\n          loader: 'babel-loader',\n          options: { presets: ['env'] },\n        }),\n      ],\n    },\n  ],\n};\n```\n\ninfo 对象包含如下内容：\n\n```js\n{\n  resource: '/webpack-demo/src/main.css', // 表示匹配到的资源路径\n  realResource: '/webpack-demo/src/main.css',\n  resourceQuery: '', // 表示匹配到的资源的查询参数\n  issuer: '', // 表示引用这个资源的模块路径\n  compiler: 'mini-css-extract-plugin /webpack-demo/node_modules/css-loader/dist/cjs.js!/webpack-demo/node_modules/postcss-loader/src/index.js??ref--4-2!/webpack-demo/node_modules/postcss-loader/src/index.js??ref--4-3!/webpack-demo/src/main.css'\n}\n```\n\n## 通过 resourceQuery 加载资源\n\n可以通过 `oneOf` 字段，我们可以配置让 Webpack 根据不同的资源加载不同的 loader。\n\n```js\nconst config = {\n  test: /\\.png$/,\n  oneOf: [\n    { resourceQuery: /inline/, use: 'url-loader' },\n    { resourceQuery: /external/, use: 'file-loader' },\n  ],\n};\n```\n\n除了 resourceQuery，也可以使用 resourcePath.\n\n## 通过 issuer 加载资源\n\n`issuer` 可以用来根据引用者来加载不同的 loader。下面的例子，表示当一个 css 是被 JavaScript 文件引用的时候，需要加载 `style-loader`。\n\n```js\nconst config = {\n  test: /\\.css$/,\n  rules: [{ issuer: /\\.js$/, use: 'style-loader' }, { use: 'css-loader' }],\n};\n```\n\n`issuer` 也可以与 `not` 混用，\n\n```js\nconst config = {\n  test: /\\.css$/,\n  rules: [\n    // 将被其他非 css 模块引入的 css 写入到 dom 中\n    { issuer: { not: /\\.css$/ }, use: 'style-loader' },\n    { use: 'css-loader' }, // 处理 css 导入\n  ],\n};\n```\n\n## 调整 loader 匹配条件的各种方法\n\n- `test`, `include`, `exclude` 是最常用的匹配条件，可以设置为正则表达式、字符串、函数、对象，或者一个数组。\n- `resource: /inline/` 匹配资源路径，包括查询参数，比如： `/path/foo.inline.js`, `/path/bar.png?inline`.\n- `issuer: /bar.js/` 当一个资源的引用方满足条件的时候，这个资源被匹配到。比如：`/path/foo.png` 如果被 `/path/bar.js` 引用了，则它就会被匹配。\n- `resourcePath: /inline/` 仅匹配资源路径，比如： `/path/foo.inline.png`\n- `resourceQuery: /inline/` 仅匹配资源的查询参数，比如： `/path/foo.png?inline`.\n\n同时还可以与下面的布尔型匹配条件组合使用。\n\n- `not` 不匹配某一个条件。\n- `and` 同时满足一组条件。\n- `or` 满足一组条件中的一个。\n\n## 总结\n\n` loader-runner` 这个包可以不借助 Webpack 直接运行 loader, 可以帮助我们更好的理解 loader 的工作机制。通过将 `inspect-loader` 这个工具与 Webpack 配置结合起来，我们可以了解 loader 之间数据是如何传递的。\n\n我们通过 loader 来配置 Webpack 根据不同的模块使用不同的处理机制。\n\n一个 loader 定义包块匹配模块的条件和处理模块的动作。\n\nWebpack 提供了多种定义 loader 的方式，我们可以根据不同的需求使用不同的配置。\n",contentRendered:'<p>前面在加载样式文件的时候介绍了很多 loader，每个 loader 都有不同的配置方法。实际上，Webpack 提供了多种方式来设置 loader 参数。本文就来详细说明如何配置一个 loader。</p>\n<p>Webpack 默认只支持 CommonJS 规范。其他规范的模块，Webpack 需要借助于 loader 来解析。下面的样例展示了利用 babel 来加载 JavaScript 文件的 loader 配置。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 文件匹配条件，支持正则表达式或者函数</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n\n        <span class="token comment">// 文件目录匹配</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">exclude</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 针对匹配到的文件需要执行的动作</span>\n        use<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="loader-的顺序" tabindex="-1"><a class="header-anchor" href="#loader-的顺序" aria-hidden="true">#</a> Loader 的顺序</h2>\n<p>在 Webpack 中，loader 是按从右向左，从下向上的顺序依次评估的。可以通过函数调用的方式加以理解。<code>use: [&quot;style-loader&quot;, &quot;css-loader&quot;]</code> 等同于 <code>style(css(input))</code> 。参考样例：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>基于从右向左的原则，配置还可以改成这样：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'style-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>正常情况下，通过上面的规则，我们可以实现各种处理顺序的 loader 定义。但是，有时候如果可以动态调整 loader 定义的顺序会给开发带来极大的遍历。这时候我们可以通过 <code>enforce</code> 这个字段来实现，<code>enforce</code> 取值为 <code>pre</code> 则 loader 会在其他 loader 之前执行，取值为 <code>post</code> 则 loader 会在其他 loader 之后执行。</p>\n<p>代码规范静态检查配置可以很好的说明 <code>enforce</code> 的使用，通常我们需要在加载源代码的时候就检查代码规范，因此需要配置 <code>enforce: &quot;pre&quot;</code>。<code>enforce:&quot;post&quot;</code> 不太常用，通常会被用在对构建输出做校验的场景下。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  enforce<span class="token operator">:</span> <span class="token string">\'pre\'</span><span class="token punctuation">,</span> <span class="token comment">// "post" too</span>\n  use<span class="token operator">:</span> <span class="token string">\'eslint-loader\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通常来说，我们也可以通过纯代码的形式控制 loader 顺序，但是 <code>enforce</code> 提供了更多的遍历，同时也允许 loader 的配置分散在多个文件中，灵活性更好。</p>\n<h2 id="loader-的参数" tabindex="-1"><a class="header-anchor" href="#loader-的参数" aria-hidden="true">#</a> loader 的参数</h2>\n<p>Webpack 支持通过 query 参数的形式给 loader 设置参数。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'babel-loader?presets[]=env\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这种传参方式同样可以被应用在源代码中。缺点是可读性差一些。</p>\n<p>通常情况下，我们使用 <code>use</code> 来给 loader 传参：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'env\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="内联-loader-定义" tabindex="-1"><a class="header-anchor" href="#内联-loader-定义" aria-hidden="true">#</a> 内联 loader 定义</h2>\n<p>通常情况下，我们通过 webpack 的配置文件来定义 loader，但是，Webpack 同时支持在源代码中通过内联的形式定义 loader。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">\'url-loader!./foo.png\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'!!url-loader!./bar.png\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>一般来说，我们应该避免这么做，因为这样使得我们的源代码跟 webpack 产生了耦合。</p>\n<p>我们也可以在 webpack 的 entry 配置中定义 loader。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> entry<span class="token operator">:</span> <span class="token punctuation">{</span> app<span class="token operator">:</span> <span class="token string">\'babel-loader!./app\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="通过-info-对象来加载资源" tabindex="-1"><a class="header-anchor" href="#通过-info-对象来加载资源" aria-hidden="true">#</a> 通过 <code>info</code> 对象来加载资源</h2>\n<p><code>use</code> 支持传递一个函数，返回 loader 配置。在这个函数里，我们可以根据环境等条件返回不同的配置。<code>use</code> 函数中必须返回一个值，可以为 falsy, object，或者字符串。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span> <span class="token punctuation">{</span> presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'env\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>info 对象包含如下内容：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">{</span>\n  resource<span class="token operator">:</span> <span class="token string">\'/webpack-demo/src/main.css\'</span><span class="token punctuation">,</span> <span class="token comment">// 表示匹配到的资源路径</span>\n  realResource<span class="token operator">:</span> <span class="token string">\'/webpack-demo/src/main.css\'</span><span class="token punctuation">,</span>\n  resourceQuery<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 表示匹配到的资源的查询参数</span>\n  issuer<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 表示引用这个资源的模块路径</span>\n  compiler<span class="token operator">:</span> <span class="token string">\'mini-css-extract-plugin /webpack-demo/node_modules/css-loader/dist/cjs.js!/webpack-demo/node_modules/postcss-loader/src/index.js??ref--4-2!/webpack-demo/node_modules/postcss-loader/src/index.js??ref--4-3!/webpack-demo/src/main.css\'</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="通过-resourcequery-加载资源" tabindex="-1"><a class="header-anchor" href="#通过-resourcequery-加载资源" aria-hidden="true">#</a> 通过 resourceQuery 加载资源</h2>\n<p>可以通过 <code>oneOf</code> 字段，我们可以配置让 Webpack 根据不同的资源加载不同的 loader。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  oneOf<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> resourceQuery<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">inline</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'url-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> resourceQuery<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">external</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'file-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>除了 resourceQuery，也可以使用 resourcePath.</p>\n<h2 id="通过-issuer-加载资源" tabindex="-1"><a class="header-anchor" href="#通过-issuer-加载资源" aria-hidden="true">#</a> 通过 issuer 加载资源</h2>\n<p><code>issuer</code> 可以用来根据引用者来加载不同的 loader。下面的例子，表示当一个 css 是被 JavaScript 文件引用的时候，需要加载 <code>style-loader</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> issuer<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'style-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> use<span class="token operator">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>issuer</code> 也可以与 <code>not</code> 混用，</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 将被其他非 css 模块引入的 css 写入到 dom 中</span>\n    <span class="token punctuation">{</span> issuer<span class="token operator">:</span> <span class="token punctuation">{</span> not<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">\'style-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> use<span class="token operator">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 处理 css 导入</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="调整-loader-匹配条件的各种方法" tabindex="-1"><a class="header-anchor" href="#调整-loader-匹配条件的各种方法" aria-hidden="true">#</a> 调整 loader 匹配条件的各种方法</h2>\n<ul>\n<li><code>test</code>, <code>include</code>, <code>exclude</code> 是最常用的匹配条件，可以设置为正则表达式、字符串、函数、对象，或者一个数组。</li>\n<li><code>resource: /inline/</code> 匹配资源路径，包括查询参数，比如： <code>/path/foo.inline.js</code>, <code>/path/bar.png?inline</code>.</li>\n<li><code>issuer: /bar.js/</code> 当一个资源的引用方满足条件的时候，这个资源被匹配到。比如：<code>/path/foo.png</code> 如果被 <code>/path/bar.js</code> 引用了，则它就会被匹配。</li>\n<li><code>resourcePath: /inline/</code> 仅匹配资源路径，比如： <code>/path/foo.inline.png</code></li>\n<li><code>resourceQuery: /inline/</code> 仅匹配资源的查询参数，比如： <code>/path/foo.png?inline</code>.</li>\n</ul>\n<p>同时还可以与下面的布尔型匹配条件组合使用。</p>\n<ul>\n<li><code>not</code> 不匹配某一个条件。</li>\n<li><code>and</code> 同时满足一组条件。</li>\n<li><code>or</code> 满足一组条件中的一个。</li>\n</ul>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p><code> loader-runner</code> 这个包可以不借助 Webpack 直接运行 loader, 可以帮助我们更好的理解 loader 的工作机制。通过将 <code>inspect-loader</code> 这个工具与 Webpack 配置结合起来，我们可以了解 loader 之间数据是如何传递的。</p>\n<p>我们通过 loader 来配置 Webpack 根据不同的模块使用不同的处理机制。</p>\n<p>一个 loader 定义包块匹配模块的条件和处理模块的动作。</p>\n<p>Webpack 提供了多种定义 loader 的方式，我们可以根据不同的需求使用不同的配置。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-11",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/what-is-loader.html",pathLocale:"/",permalink:null,slug:"what-is-loader",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/what-is-loader.md",filePathRelative:"courses/webpack/what-is-loader.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/what-is-loader.html.vue",componentFilePathRelative:"pages/courses/webpack/what-is-loader.html.vue",componentFileChunkName:"v-0d9b199a",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/what-is-loader.html.js",dataFilePathRelative:"pages/courses/webpack/what-is-loader.html.js",dataFileChunkName:"v-0d9b199a",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/what-is-loader.html",htmlFilePathRelative:"courses/webpack/what-is-loader.html"},{key:"v-864eb9d0",path:"/courses/webpack/what-is-webpack.html",title:"什么是 Webpack",lang:"zh-CN",frontmatter:{title:"什么是 Webpack",description:"介绍 Webpack 的基本概念",keywords:["Webpack"],date:"2021-01-02T00:00:00.000Z",key:1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"概述",slug:"概述",children:[]},{level:2,title:"Webpack 的执行过程（execution process）",slug:"webpack-的执行过程-execution-process",children:[]},{level:2,title:"Webpack 的解析过程（resolution process）",slug:"webpack-的解析过程-resolution-process",children:[]},{level:2,title:"Webpack 的评估过程（Evaluation process）",slug:"webpack-的评估过程-evaluation-process",children:[]},{level:2,title:"Webpack 的输出",slug:"webpack-的输出",children:[]},{level:2,title:"Webpack 是配置驱动的",slug:"webpack-是配置驱动的",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\nWebpack 是一个模块打包器（module bundler），在 webpack 中模块（module）是最基本的概念。\n\n## 概述\n\n举个例子方便说明，一个应用有如下目录结构：\n\n```\n— src\n  — app.js\n  — file-a.js\n  — file-b.js\n```\n\n应用的入口文件是 app.js, 内容如下：\n\n```js\nimport moduleA from './file-a';\nimport moduleB from './file-b';\n\n/*\n * 一些应用逻辑\n */\n```\n\n在这个项目中，我们有三个模块，分别是 `app.js`，`file-a.js` 和 `file-b.js`。 Webpack 在执行打包的时候，会从应用入口（`app.js`）开始解析，通过 `import` 语句解析到 `app.js` 依赖了 `file-a.js` 和 `file-b.js` 这两个模块，构成一个依赖图（dependency graph）。\n\n> 依赖图是一个描述各节点之间关系的有向图，在这里，这个图是由各个文件之间的 `import` 和 `require` 来定义的。Webpack 会单纯静态的扫描而不执行这些文件，来生成这个图。\n\n之后，webpack 会根据用户的配置生成输出文件（output）。此外，用户还可以在代码中定义分割点（split points），将应用的代码分割打包到不同的 bundle 中，实现按需加载。\n\n> 所谓 bundle，就是一组代码的集合，可以将一个应用的所有代码都打包到一个 bundle 中，也可以分成多个 bundle，按需加载。在 Webpack 中，还有一个常见的名词 chunk，chunk 就是代码块，多个 chunk 组成了 bundle。\n\nWebpack 默认支持 ES2015，CommonJS，MJS 和 AMD 模块规范。同时，通过 loader 机制，借助于 css-loader 提供的 `@import` 和 `url()` 语法，webpack 还可以支持对 css 文件的打包。\n\n## Webpack 的执行过程（execution process）\n\n![Webpack](/courses/webpack/webpack-c.png)\n\n上图清晰地展示了 Webpack 的执行过程。\n\n首先 Webpack 从 `entry` 文件开始处理，通常这些 `entiry` 文件是 JavaScript 文件。在执行过程中，webpack 会根据 loader 的配置来决定如何处理每一个匹配到的文件。最终，在生成依赖图以后，再输出打包后的文件。\n\n## Webpack 的解析过程（resolution process）\n\nWebpack 通过 `resolve` 配置项来在文件系统中查找遇到的每一个模块，比如我们可以通过配置来让 webpack 避开 node_modules 目录。\n\n如果解析失败，webpack 会抛出一个运行时错误，如果解析成功，webpack 则会根据 `loader` 的配置来处理这个文件。每个 `loader` 都定义了一套处理对应模块内容的方法。\n\n可以通过多种方式给某一类型的文件指定 `loader`，比如文件类型或者文件在文件系统中的位置。Webpack 支持通过同样的方式来指定 `loader`，`loader` 本身就有自己的 `resolve` 配置。如果 webpack 查找 `loader` 失败，则会抛出一个运行时错误。\n\nWebpack 会解析它碰到的任何一个模块，如果一个模块依赖了其他模块，那么 Webpack 会递归的解析每一个依赖模块，直到解析完所有的模块。\n\n同时，Webpack 允许用户自定义不同资源的处理方式。比如用户可以选择将某些资源内联在 JavaScript 文件中来减少网络请求，可以通过 CSS Modules 等技术来将样式与组件关联起来，避免全局冲突。\n\n尽管主要被用来打包 JavaScript，Webpack 还可以被用来处理图片、字体文件这样的资源文件，并将其单独输出文件。这一切都取决于用户如何配置。\n\n## Webpack 的评估过程（Evaluation process）\n\n假设用户配置的所有 `loader` 都成功解析，Webpack 在处理模块的时候，会从下到上、从右到左（`styleLoader(cssLoader('./main.css'))`）按序依次用匹配的 `loader` 来对模块进行处理。如果一个 `loader` 执行成功，没有任何运行时错误，那么 Webpack 就将模块的源代码包含到最终生成的 bundle 中。\n\n尽管 `loader` 处理模块时功能非常强大，但是 `loader` 却不能处理一些更高级的任务。 Webpack 插件弥补了这一不足。插件可以截取 Webpack 的运行时事件（runtime events）来做一些额外的任务。\n\nMiniCssExtractPlugin 就是一个很好的例子，在和 `loader` 配合使用的时候，MiniCssExtractPlugin 可以将 css 文件从 bundle 中抽取出来，放到独立的文件中去。否则 css 文件将会和 JavaScript 文件打包在一起。\n\n## Webpack 的输出\n\n在处理完所有的模块以后，Webpack 开始输出文件。在输出文件中有一个非常小的运行时（runtime）文件，该运行时文件负责在浏览器中执行 Webpack 输出的结果。另外，在输出文件中还有一个 manifest 文件，记录了所有需要被加载的 bundle 。\n\n## Webpack 是配置驱动的\n\nWebpack 是配置驱动的，下面的配置样例清楚的展示如何配置 Webpack 进行打包：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: { app: './entry.js' }, // 开始打包\n  output: {\n    path: path.join(__dirname, 'dist'), // 输出到 dist 目录\n    filename: '[name].js', // 输出 app.js ，因为 entry 的名称为 app\n  },\n  // 解析所有遇到的模块\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.js$/,\n        use: 'swc-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  // 进行额外的处理\n  plugins: [new webpack.DefinePlugin({ HELLO: 'hello' })],\n  // 调整模块解析方式\n  resolve: {\n    alias: {\n      react: 'preact-compat',\n    },\n  },\n};\n```\n\nWebpack 的配置非常复杂，而且经常会慢慢变得难以理解。本系列的目的就是为了将这些背后的概念和设计讲清楚，方便更好的理解 Webpack .\n\n## 总结\n\nWebpack 是一个模块打包器，通过遍历所有模块来生成依赖图，并基于依赖图和用户配置来输出打包结果。\n\nWebpack 依赖于 `loader` 和 `plugin`。`loader` 负责处理模块，而 `plugin` 则借助于 Webpack 提供的钩子能更好的与执行过程配合执行一些其他处理任务。\n\nWebpack 的配置文件描述了 Webpack 如何来处理各种资源文件，并决定最终以何种形式输出。\n",contentRendered:'<p>Webpack 是一个模块打包器（module bundler），在 webpack 中模块（module）是最基本的概念。</p>\n<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2>\n<p>举个例子方便说明，一个应用有如下目录结构：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>— src\n  — app.js\n  — file-a.js\n  — file-b.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>应用的入口文件是 app.js, 内容如下：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> moduleA <span class="token keyword">from</span> <span class="token string">\'./file-a\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> moduleB <span class="token keyword">from</span> <span class="token string">\'./file-b\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n * 一些应用逻辑\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在这个项目中，我们有三个模块，分别是 <code>app.js</code>，<code>file-a.js</code> 和 <code>file-b.js</code>。 Webpack 在执行打包的时候，会从应用入口（<code>app.js</code>）开始解析，通过 <code>import</code> 语句解析到 <code>app.js</code> 依赖了 <code>file-a.js</code> 和 <code>file-b.js</code> 这两个模块，构成一个依赖图（dependency graph）。</p>\n<blockquote>\n<p>依赖图是一个描述各节点之间关系的有向图，在这里，这个图是由各个文件之间的 <code>import</code> 和 <code>require</code> 来定义的。Webpack 会单纯静态的扫描而不执行这些文件，来生成这个图。</p>\n</blockquote>\n<p>之后，webpack 会根据用户的配置生成输出文件（output）。此外，用户还可以在代码中定义分割点（split points），将应用的代码分割打包到不同的 bundle 中，实现按需加载。</p>\n<blockquote>\n<p>所谓 bundle，就是一组代码的集合，可以将一个应用的所有代码都打包到一个 bundle 中，也可以分成多个 bundle，按需加载。在 Webpack 中，还有一个常见的名词 chunk，chunk 就是代码块，多个 chunk 组成了 bundle。</p>\n</blockquote>\n<p>Webpack 默认支持 ES2015，CommonJS，MJS 和 AMD 模块规范。同时，通过 loader 机制，借助于 css-loader 提供的 <code>@import</code> 和 <code>url()</code> 语法，webpack 还可以支持对 css 文件的打包。</p>\n<h2 id="webpack-的执行过程-execution-process" tabindex="-1"><a class="header-anchor" href="#webpack-的执行过程-execution-process" aria-hidden="true">#</a> Webpack 的执行过程（execution process）</h2>\n<p><img src="/courses/webpack/webpack-c.png" alt="Webpack"></p>\n<p>上图清晰地展示了 Webpack 的执行过程。</p>\n<p>首先 Webpack 从 <code>entry</code> 文件开始处理，通常这些 <code>entiry</code> 文件是 JavaScript 文件。在执行过程中，webpack 会根据 loader 的配置来决定如何处理每一个匹配到的文件。最终，在生成依赖图以后，再输出打包后的文件。</p>\n<h2 id="webpack-的解析过程-resolution-process" tabindex="-1"><a class="header-anchor" href="#webpack-的解析过程-resolution-process" aria-hidden="true">#</a> Webpack 的解析过程（resolution process）</h2>\n<p>Webpack 通过 <code>resolve</code> 配置项来在文件系统中查找遇到的每一个模块，比如我们可以通过配置来让 webpack 避开 node_modules 目录。</p>\n<p>如果解析失败，webpack 会抛出一个运行时错误，如果解析成功，webpack 则会根据 <code>loader</code> 的配置来处理这个文件。每个 <code>loader</code> 都定义了一套处理对应模块内容的方法。</p>\n<p>可以通过多种方式给某一类型的文件指定 <code>loader</code>，比如文件类型或者文件在文件系统中的位置。Webpack 支持通过同样的方式来指定 <code>loader</code>，<code>loader</code> 本身就有自己的 <code>resolve</code> 配置。如果 webpack 查找 <code>loader</code> 失败，则会抛出一个运行时错误。</p>\n<p>Webpack 会解析它碰到的任何一个模块，如果一个模块依赖了其他模块，那么 Webpack 会递归的解析每一个依赖模块，直到解析完所有的模块。</p>\n<p>同时，Webpack 允许用户自定义不同资源的处理方式。比如用户可以选择将某些资源内联在 JavaScript 文件中来减少网络请求，可以通过 CSS Modules 等技术来将样式与组件关联起来，避免全局冲突。</p>\n<p>尽管主要被用来打包 JavaScript，Webpack 还可以被用来处理图片、字体文件这样的资源文件，并将其单独输出文件。这一切都取决于用户如何配置。</p>\n<h2 id="webpack-的评估过程-evaluation-process" tabindex="-1"><a class="header-anchor" href="#webpack-的评估过程-evaluation-process" aria-hidden="true">#</a> Webpack 的评估过程（Evaluation process）</h2>\n<p>假设用户配置的所有 <code>loader</code> 都成功解析，Webpack 在处理模块的时候，会从下到上、从右到左（<code>styleLoader(cssLoader(\'./main.css\'))</code>）按序依次用匹配的 <code>loader</code> 来对模块进行处理。如果一个 <code>loader</code> 执行成功，没有任何运行时错误，那么 Webpack 就将模块的源代码包含到最终生成的 bundle 中。</p>\n<p>尽管 <code>loader</code> 处理模块时功能非常强大，但是 <code>loader</code> 却不能处理一些更高级的任务。 Webpack 插件弥补了这一不足。插件可以截取 Webpack 的运行时事件（runtime events）来做一些额外的任务。</p>\n<p>MiniCssExtractPlugin 就是一个很好的例子，在和 <code>loader</code> 配合使用的时候，MiniCssExtractPlugin 可以将 css 文件从 bundle 中抽取出来，放到独立的文件中去。否则 css 文件将会和 JavaScript 文件打包在一起。</p>\n<h2 id="webpack-的输出" tabindex="-1"><a class="header-anchor" href="#webpack-的输出" aria-hidden="true">#</a> Webpack 的输出</h2>\n<p>在处理完所有的模块以后，Webpack 开始输出文件。在输出文件中有一个非常小的运行时（runtime）文件，该运行时文件负责在浏览器中执行 Webpack 输出的结果。另外，在输出文件中还有一个 manifest 文件，记录了所有需要被加载的 bundle 。</p>\n<h2 id="webpack-是配置驱动的" tabindex="-1"><a class="header-anchor" href="#webpack-是配置驱动的" aria-hidden="true">#</a> Webpack 是配置驱动的</h2>\n<p>Webpack 是配置驱动的，下面的配置样例清楚的展示如何配置 Webpack 进行打包：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span> app<span class="token operator">:</span> <span class="token string">\'./entry.js\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 开始打包</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 输出到 dist 目录</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span> <span class="token comment">// 输出 app.js ，因为 entry 的名称为 app</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 解析所有遇到的模块</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">\'swc-loader\'</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 进行额外的处理</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">HELLO</span><span class="token operator">:</span> <span class="token string">\'hello\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 调整模块解析方式</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      react<span class="token operator">:</span> <span class="token string">\'preact-compat\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>Webpack 的配置非常复杂，而且经常会慢慢变得难以理解。本系列的目的就是为了将这些背后的概念和设计讲清楚，方便更好的理解 Webpack .</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>Webpack 是一个模块打包器，通过遍历所有模块来生成依赖图，并基于依赖图和用户配置来输出打包结果。</p>\n<p>Webpack 依赖于 <code>loader</code> 和 <code>plugin</code>。<code>loader</code> 负责处理模块，而 <code>plugin</code> 则借助于 Webpack 提供的钩子能更好的与执行过程配合执行一些其他处理任务。</p>\n<p>Webpack 的配置文件描述了 Webpack 如何来处理各种资源文件，并决定最终以何种形式输出。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-01-02",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/webpack/what-is-webpack.html",pathLocale:"/",permalink:null,slug:"what-is-webpack",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/webpack/what-is-webpack.md",filePathRelative:"courses/webpack/what-is-webpack.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/what-is-webpack.html.vue",componentFilePathRelative:"pages/courses/webpack/what-is-webpack.html.vue",componentFileChunkName:"v-864eb9d0",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/webpack/what-is-webpack.html.js",dataFilePathRelative:"pages/courses/webpack/what-is-webpack.html.js",dataFileChunkName:"v-864eb9d0",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/webpack/what-is-webpack.html",htmlFilePathRelative:"courses/webpack/what-is-webpack.html"}]}},2745:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const p=(0,e.Wm)("div",{class:"custom-container tip"},[(0,e.Wm)("p",{class:"custom-container-title"},"TIP"),(0,e.Wm)("p",null,"Webpack 学习笔记")],-1),t=(0,e.uE)('<blockquote><p>参考链接：https://survivejs.com/webpack/what-is-webpack/</p></blockquote><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',2),o={render:function(n,s){const a=(0,e.up)("ArticleList");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)(a,{noTag:!0}),t],64)}}}}]);