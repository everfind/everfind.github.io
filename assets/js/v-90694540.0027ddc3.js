"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[5849],{977:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-90694540",path:"/solutions/graphql/federation-server.html",title:"Apollo Federation 实践",lang:"zh-CN",frontmatter:{title:"Apollo Federation 实践",description:"使用 Apollo Federation 对 BFF 单体服务进行拆分，代码样例。",keywords:["GraphQL","Apollo Federation"],date:"2021-08-02T00:00:00.000Z",key:7,tags:["实践"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"应用架构",slug:"应用架构",children:[]},{level:2,title:"开发拆分后的子服务",slug:"开发拆分后的子服务",children:[{level:3,title:"商品子服务",slug:"商品子服务",children:[]},{level:3,title:"订单子服务",slug:"订单子服务",children:[]}]},{level:2,title:"开发网关（Gateway）",slug:"开发网关-gateway",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"solutions/graphql/federation-server.md"}},8831:(n,s,a)=>{a.r(s),a.d(s,{default:()=>R});var p=a(6252);const t=(0,p.Wm)("p",null,"上一篇我们介绍了 Apollo Federation 的架构以及一些开发原则，本篇我们来结合代码说明如何借助于 Federation 来拆分单体 BFF 服务。",-1),e=(0,p.Wm)("h2",{id:"应用架构",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#应用架构","aria-hidden":"true"},"#"),(0,p.Uk)(" 应用架构")],-1),o=(0,p.Uk)("在前面的 "),c=(0,p.Uk)("BFF 单体服务"),l=(0,p.Uk)("中，我们定义了两个模型，商品模型和订单模型。本文中，我们划分两个领域，商品域和订单域。这两个域分别由一个服务来承载，加上网关，我们的应用架构如下："),r=(0,p.uE)('<img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLU3vbnREExL3stebFMpT3s4-djZsTtFXiJk_JheKGaHVh5ZtjdGeLuOBeKz3LjODfWr0AUdfsg9gHn56CS4ZDIm4w0m00" alt="uml diagram"><h2 id="开发拆分后的子服务" tabindex="-1"><a class="header-anchor" href="#开发拆分后的子服务" aria-hidden="true">#</a> 开发拆分后的子服务</h2><h3 id="商品子服务" tabindex="-1"><a class="header-anchor" href="#商品子服务" aria-hidden="true">#</a> 商品子服务</h3>',3),u=(0,p.Uk)("商品服务的所有代码在"),i={href:"https://github.com/everfind/bff-goods-service",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("这里"),d=(0,p.Uk)("，文中只展示关键点。"),b=(0,p.uE)('<p>定义商品服务：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> Field<span class="token punctuation">,</span> ObjectType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/graphql&#39;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectType</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&#39;商品信息&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Directive</span></span><span class="token punctuation">(</span><span class="token string">&#39;@key(fields: &quot;goodsId&quot;)&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GoodsData</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">,</span> <span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;商品 ID&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  goodsId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">,</span> <span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;商品名称&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  goodsName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">,</span> <span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;商品简介&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  goodsBrief<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>通过 nestjs 的 <code>Directive</code> 装饰器，我们使用 Apollo Federation 的 <code>@key</code> 指令告诉 Federation 可以使用 <code>goodsId</code> 来查询 <code>GoodsData</code> 实例信息。</p><p>同时我们在 <code>GoodsResolver</code> 中添加一个 <code>ResolveReference</code>，来实现在 Federation 场景下的查找动作。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Resolver</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> GoodsData<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GoodsResolver</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> goodsService<span class="token operator">:</span> GoodsService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// 其他业务代码</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ResolveReference</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">resolveReference</span><span class="token punctuation">(</span>reference<span class="token operator">:</span> <span class="token punctuation">{</span>\n    __typename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    goodsId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>GoodsData<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goodsService<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">{</span> goodsId<span class="token operator">:</span> reference<span class="token punctuation">.</span>goodsId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>除了上面的改造以外，我们还需将原来 <code>src/app.module.ts</code> 中的 <code>GraphQLModule</code> 换成 <code>GraphQLFederationModule</code>，其他保持不变。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    GraphQLFederationModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      introspection<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生产环境中需要关闭</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/goods/graphql&#39;</span><span class="token punctuation">,</span>\n      autoSchemaFile<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// 其他配置信息</span>\n    <span class="token punctuation">}</span> <span class="token keyword">as</span> GqlModuleOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>services<span class="token punctuation">,</span> <span class="token operator">...</span>resolvers<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>至此，新的商品子服务就改造完成了。</p><p>启动服务。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> start:dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>访问 <code>http://localhost:3001/goods/graphql</code>。</p><p>我们可以像使用单体服务一样使用新的商品子服务。</p><p><img src="/solutions/graphql/bff-goods-service-c.gif" alt="商品子服务"></p><h3 id="订单子服务" tabindex="-1"><a class="header-anchor" href="#订单子服务" aria-hidden="true">#</a> 订单子服务</h3>',14),m=(0,p.Uk)("订单子服务的代码在"),g={href:"https://github.com/everfind/bff-order-service",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("这里"),y=(0,p.Uk)("，文中只展示关键点。"),f=(0,p.uE)('<p>因为订单要引用商品模型，拆分以后，我们需要在订单中定义一下对商品模型的引用。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> Field<span class="token punctuation">,</span> ObjectType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/graphql&#39;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectType</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&#39;商品信息&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Directive</span></span><span class="token punctuation">(</span><span class="token string">&#39;@extends&#39;</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Directive</span></span><span class="token punctuation">(</span><span class="token string">&#39;@key(fields: &quot;goodsId&quot;)&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GoodsData</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">,</span> <span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;商品 ID&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Directive</span></span><span class="token punctuation">(</span><span class="token string">&#39;@external&#39;</span><span class="token punctuation">)</span>\n  goodsId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过 <code>@extends</code> 指令告诉 Federation <code>GoodsData</code> 继承自一个其他服务定义的类型。<code>@key</code> 指令告诉 Federation 使用 <code>goodsId</code> 作为主键，同时在 <code>goodsId</code> 字段上的<code>@external</code> 指令告诉 Federation 这个字段也是来自于其他服务定义的。</p>',3),v=(0,p.Uk)("在订单服务中，我们可以在这个 "),w=(0,p.Wm)("code",null,"GoodsData",-1),x=(0,p.Uk)(" 上定义订单服务额外增加的字段，此处不做过多说明。关于类型如何定义，Federation 指令如何使用，可以参考 "),F={href:"https://www.apollographql.com/docs/federation/entities/",target:"_blank",rel:"noopener noreferrer"},G=(0,p.Uk)("Federation 文档"),D=(0,p.Uk)("."),q=(0,p.uE)('<p>定义好 <code>GoodsData</code> 以后，我们需要在订单模型中定义引用这个类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectType</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&#39;订单数据&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderData</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 其他字段定义</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> GoodsData<span class="token punctuation">,</span> <span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&#39;商品信息&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Directive</span></span><span class="token punctuation">(</span><span class="token string">&#39;@provides(fields: &quot;goodsId&quot;)&#39;</span><span class="token punctuation">)</span>\n  goodsData<span class="token operator">?</span><span class="token operator">:</span> GoodsData<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>@provides</code> 指令告诉 Federation 订单服务可以提供商品信息的查询。</p><p>同时，我们需要对 <code>OrderResolver</code> 做一些改造。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Resolver</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> OrderData<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderPropertyResolver</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ResolveField</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> GoodsData<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;goodsData&#39;</span><span class="token punctuation">,</span>\n    nullable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">goodsData</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Parent</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> orderData<span class="token operator">:</span> OrderData<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> __typename<span class="token operator">:</span> <span class="token string">&#39;GoodsData&#39;</span><span class="token punctuation">,</span> goodsId<span class="token operator">:</span> orderData<span class="token punctuation">.</span>goodsId <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在 <code>goodsData</code> 方法中，我们不再直接查商品数据库，而是返回一个 Reference 对象，包含两个字段，<code>__typename</code> 告诉 Federation 引用的具体的类型名称，<code>goodsId</code> 就是我们在商品子服务中通过 <code>@key</code> 定义的主键。</p><p>我们同样需要对 <code>src/app.module.ts</code> 做一些改造。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    HttpModule<span class="token punctuation">,</span>\n    GraphQLFederationModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 其他配置项</span>\n      introspection<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生产环境中需要关闭</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/order/graphql&#39;</span><span class="token punctuation">,</span>\n      autoSchemaFile<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      buildSchemaOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        orphanedTypes<span class="token operator">:</span> <span class="token punctuation">[</span>GoodsData<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span> <span class="token keyword">as</span> GqlModuleOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>services<span class="token punctuation">,</span> <span class="token operator">...</span>resolvers<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>我们将 <code>GraphQLModule</code> 换成 <code>GraphQLFederationModule</code>，同时通过 <code>buildSchemaOptions</code> 将 <code>GoodsData</code> 标记为其他系统定义的类型。</p><h2 id="开发网关-gateway" tabindex="-1"><a class="header-anchor" href="#开发网关-gateway" aria-hidden="true">#</a> 开发网关（Gateway）</h2><p>子服务只定义了领域内的类型，以及类型间的依赖关系，Apollo Federation 的网关在运行时将会分析查询信息，根据类型间的关系将请求分发到各个子服务上去。</p>',11),W=(0,p.Uk)("网关的完整代码在"),M={href:"https://github.com/everfind/bff-gateway",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("这里"),I=(0,p.Uk)("，本文只针对关键代码做说明。"),L=(0,p.uE)('<p>Federation 网关的代码非常简单，如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> GraphQLGatewayModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/graphql&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> graphqlGatewayModule <span class="token operator">=</span> GraphQLGatewayModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/bff/graphql&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    gateway<span class="token operator">:</span> <span class="token punctuation">{</span>\n      serviceList<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span>\n          url<span class="token operator">:</span> <span class="token string">&#39;http://localhost:3001/goods/graphql&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;order&#39;</span><span class="token punctuation">,</span>\n          url<span class="token operator">:</span> <span class="token string">&#39;http://localhost:3002/order/graphql&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>graphqlGatewayModule<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>我们通过 <code>serviceList</code> 指定了两个子服务。网关在启动后，会根据 <code>serviceList</code> 拉取子服务的 schema。</p><p><img src="/solutions/graphql/bff-gateway-c.gif" alt="从网关查数据"></p><p>上图中我们可以看出，从网关查询数据与前面单体服务完全相同，客户端完全感知不到差别。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文借助于 NestJS，对如何使用 Apollo Federation 拆分 BFF 单体服务做了样例说明。</p><p>我们定义了商品和订单两个子服务，订单服务中引用了商品服务的模型。</p><p>我们还定义了一个网关来聚合子服务，并对外提供服务。在网关中我们通过 <code>serviceList</code> 来定义服务列表。从工程实践的角度来说，这种方式非常不便，每新增一个服务都需要更改这个配置，下一篇我们来介绍如何解决这个问题。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',10),R={render:function(n,s){const a=(0,p.up)("RouterLink"),R=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,e,(0,p.Wm)("p",null,[o,(0,p.Wm)(a,{to:"/solutions/graphql/server.html"},{default:(0,p.w5)((()=>[c])),_:1}),l]),r,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[u,(0,p.Wm)("a",i,[k,(0,p.Wm)(R)]),d])]),b,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[m,(0,p.Wm)("a",g,[h,(0,p.Wm)(R)]),y])]),f,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[v,w,x,(0,p.Wm)("a",F,[G,(0,p.Wm)(R)]),D])]),q,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[W,(0,p.Wm)("a",M,[j,(0,p.Wm)(R)]),I])]),L],64)}}}}]);