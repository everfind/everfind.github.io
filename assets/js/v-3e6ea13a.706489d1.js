"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6892],{2697:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-3e6ea13a",path:"/courses/python/",title:"Python 学习笔记",lang:"zh-CN",frontmatter:{title:"Python 学习笔记",description:"Python 是一门非常实用的脚本语言，语法简洁、功能强大。这个系列是我在学习 Python 过程中的一些记录和总结，方便后面备查，也希望能给对 Python 感兴趣的同学提供一些学习资料。",sidebar:!1,date:"2021-09-03T00:00:00.000Z"},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],filePathRelative:"courses/python/README.md",articleList:[{key:"v-5d65d204",path:"/courses/python/class.html",title:"类",lang:"zh-CN",frontmatter:{title:"类",description:"Python 中的作用域、命名空间和类",keywords:["Python"],date:"2021-09-10T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"作用域和命名空间",slug:"作用域和命名空间",children:[]},{level:2,title:"类的定义",slug:"类的定义",children:[]},{level:2,title:"类对象",slug:"类对象",children:[]},{level:2,title:"实例对象",slug:"实例对象",children:[{level:3,title:"实例对象上的变量",slug:"实例对象上的变量",children:[]},{level:3,title:"实例对象上的方法",slug:"实例对象上的方法",children:[]}]},{level:2,title:"继承",slug:"继承",children:[]},{level:2,title:"私有变量",slug:"私有变量",children:[]}],content:'\n## 作用域和命名空间\n\n命名空间是一个名称和对象的映射关系。在现在的 Python 实现中，命名空间大都是通过字典实现的。常见的命名空间例子有模块的顶层命名空间，函数内的命名空间等。不同命名空间内拥有相同名字的对象之间没有任何关联关系。\n\n不同的命名空间，创建时机不同，生命周期也不同。保存内置函数、变量的命名空间在 Python 解析器启动的时候创建，并且在解析器退出之前一直有效。模块的顶层命名空间在模块首次导入的时候被创建。函数内部的命名空间在函数被调用的时候创建，并且多次调用函数会创建不同的命名空间，在函数返回时，命名空间被销毁。\n\n一般有三种命名空间：\n\n* 内置名称（built-in names）， Python 语言内置的名称，比如函数名 `abs`、`char` 和异常名称 `BaseException`、`Exception` 等等。\n* 全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。\n* 局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）\n\n作用域是一个 Python 程序可以直接访问命名空间的正文区域。在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到。变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。作用域物理上指的是一段程序区域，在这个区域里的所有命名构成一个命名空间，在这个区域里，这个命名空间包含的所有命名都可以直接访问。\n\n一般有四种作用域：\n* L（Local）：最内层，包含局部变量，比如一个函数/方法内部。\n* E（Enclosing）：包含了非局部（non-local）也非全局（non-global）的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。\n* G（Global）：当前脚本的最外层，比如当前模块的全局变量。\n* B（Built-in）：包含了内建的变量/关键字等，最后被搜索。\n\n一般来说，在没有 `global` 和 `nonlocal` 关键字的情况下，为一个名称赋值都会在最内层的命名空间中创建对象。赋值并不拷贝具体的值，而是在命名空间中做绑定关系。\n\n如果在内部作用域使用 `global` 关键字，则会将名称重新绑定到模块顶层的全局命名空间（Global）中。使用 `nonlocal` 关键字，则标明这个名称在中间层次（Enclosing）的命名空间中。\n\n下面的例子可以说明这两个关键字的作用。\n\n```python\ndef scope_test():\n    def do_local():\n        spam = "local spam"\n\n    def do_nonlocal():\n        nonlocal spam\n        spam = "nonlocal spam"\n\n    def do_global():\n        global spam\n        spam = "global spam"\n\n    spam = "test spam"\n    do_local()\n    print("After local assignment:", spam)\n    do_nonlocal()\n    print("After nonlocal assignment:", spam)\n    do_global()\n    print("After global assignment:", spam)\n\nscope_test()\nprint("In global scope:", spam)\n```\n\n输出为\n\n```\nAfter local assignment: test spam\nAfter nonlocal assignment: nonlocal spam\nAfter global assignment: nonlocal spam\nIn global scope: global spam\n```\n\n## 类的定义\n\n类定义的语法形式如下：\n\n```python\nclass ClassName:\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n在定义类的时候，会创建一个新的命名空间，同时 Python 的 Local 作用域变成了这个类。类中定义的变量、函数都绑定在新的命名空间中。当完成类定义之后，会生成一个类对象，这个类对象中保存者类中命名空间的内容。同时，在进入类定义之前的作用域被恢复为 Local 作用域，类对象被绑定在这个作用域的命名空间中。\n\n## 类对象\n\n类对象支持两种类型的操作，属性访问和实例化。\n\n比如下面定义的类：\n\n```python\nclass MyClass:\n    """A simple example class"""\n    i = 12345\n\n    def f(self):\n        return \'hello world\'\n```\n\n我们可以通过 `MyClass.i` 和 `MyClass.f` 来访问类对象上的属性，我们设置可以修改类对象上的属性。\n\n通过如下方式可以实现类的实例化。\n\n```python\nx = MyClass()\n```\n\n实例化后，会创建一个新的对象，实例对象，对象中保存一些初始状态。比如上面的代码会创建一个空对象。我们可以在类定义中通过 `__init__()` 函数来指定在实例化时需要的参数，在实例化时会自动调用这个函数。\n\n```bash\n>>> class Complex:\n...     def __init__(self, realpart, imagpart):\n...         self.r = realpart\n...         self.i = imagpart\n...\n>>> x = Complex(3.0, -4.5)\n>>> x.r, x.i\n(3.0, -4.5)\n```\n\n## 实例对象\n\n实例对象，顾名思义是有类实例化而来。实例对象上通常又两种属性，一种是变量，一种是方法。我们可以给实例对象添加任意属性，即使这个属性没有在类定义中定义。\n\n### 实例对象上的变量\n\n实例对象上的变量为实例单独所有，类对象上的变量为所有实例对象共有。如果类对象上的变量是一个可变对象，比如列表，那么变更后的值为所有实例对象共有。\n\n```python\nclass A:\n    a = 3 # 所有实例共有\n    list = []\n    def f(self):\n        print(\'class a \' + str(self.a))\n```\n\n```bash\n>>> m = A()\n>>> n = A()\n>>> m.a\n3\n>>> m.a = 6\n>>> m.a\n6\n>>> n.a\n3\n>>> m.list.append(1)\n>>> n.list\n[1]\n```\n\n注意上面的 `m.a = 6`，如果实例对象上的属性名称与类对象上的属性名称相同，则 Python 会优先使用实例对象上的名称。（别忘了，在给一个变量赋值的时候，会在对应命名空间中创建绑定关系。）\n\n### 实例对象上的方法\n\n在前面的例子中，`MyClass.f` 和 `x.f` 是否是一样的呢？答案是否。`MyClass.f` 是一个函数对象，而 `x.f` 是一个方法对象。方法对象中包装了类的函数对象和实例对象。当调用这个方法对象的时候，方法对象会在参数列表前面加上实例对象，然后使用新的参数列表调用函数对象。\n\n也就是说 `x.f()` 与 `MyClass.f(MyClass)` 意义相同。\n\n## 继承\n继承的语法形式为：\n\n```python\nclass DerivedClassName(Base1, Base2, Base3):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n继承场景下的类对象与单一类对象类似，子类对象中会保存一个基类对象。在查找属性的时候，会优先查找子类上的属性，必要情况下会查找基类对象上的属性。\n\n子类可以复写基类的方法。如果子类复写了基类的方法，那么当基类上的其他方法在调用这个方法的时候，实际上是调用的子类上的方法。我们可以通过 `BaseClassName.methodname(self, arguments)` 来调用基类的方法。\n\n在 Python 中，我们可以通过 `isinstance()` 和 `issubclass()` 来判断继承关系。\n\n在多继承场景下，属性搜索遵循深度优先，从左到右的原则。即先查找 `DerivedClassName`，之后查找 `Base1` 以及 `Base1` 的基类，如果还未找到，再从 `Base2` 及 `Base2` 的基类中找，以此类推。\n\n## 私有变量\n\n在 Python 中有个约定，以下划线开头的变量会被认为是私有变量。为了防止在类继承的时候私有变量被修改，Python 会对以至少两个下划线 `__` 开头、至多一个下划线结尾的变量名做内部处理，比如 `__spam` 会被处理为 `_classname__spam`，这样就可以有效避免不必要的修改了。这种处理对所有定义在类定义范围内的名称有效，不考虑名称出现的具体位置。\n\n```python\nclass Mapping:\n    def __init__(self, iterable):\n        self.items_list = []\n        self.__update(iterable)\n\n    def update(self, iterable):\n        for item in iterable:\n            self.items_list.append(item)\n\n    __update = update   # 对 update() 的私有拷贝\n\nclass MappingSubclass(Mapping):\n\n    def update(self, keys, values):\n        for item in zip(keys, values):\n            self.items_list.append(item)\n```\n\n即使我们在 `MappingSubclass` 中定义一个 `__update` 变量，也不会影响 `Mapping` 类中的 `__update` 工作。\n',contentRendered:'<h2 id="作用域和命名空间" tabindex="-1"><a class="header-anchor" href="#作用域和命名空间" aria-hidden="true">#</a> 作用域和命名空间</h2>\n<p>命名空间是一个名称和对象的映射关系。在现在的 Python 实现中，命名空间大都是通过字典实现的。常见的命名空间例子有模块的顶层命名空间，函数内的命名空间等。不同命名空间内拥有相同名字的对象之间没有任何关联关系。</p>\n<p>不同的命名空间，创建时机不同，生命周期也不同。保存内置函数、变量的命名空间在 Python 解析器启动的时候创建，并且在解析器退出之前一直有效。模块的顶层命名空间在模块首次导入的时候被创建。函数内部的命名空间在函数被调用的时候创建，并且多次调用函数会创建不同的命名空间，在函数返回时，命名空间被销毁。</p>\n<p>一般有三种命名空间：</p>\n<ul>\n<li>内置名称（built-in names）， Python 语言内置的名称，比如函数名 <code>abs</code>、<code>char</code> 和异常名称 <code>BaseException</code>、<code>Exception</code> 等等。</li>\n<li>全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</li>\n<li>局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</li>\n</ul>\n<p>作用域是一个 Python 程序可以直接访问命名空间的正文区域。在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到。变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。作用域物理上指的是一段程序区域，在这个区域里的所有命名构成一个命名空间，在这个区域里，这个命名空间包含的所有命名都可以直接访问。</p>\n<p>一般有四种作用域：</p>\n<ul>\n<li>L（Local）：最内层，包含局部变量，比如一个函数/方法内部。</li>\n<li>E（Enclosing）：包含了非局部（non-local）也非全局（non-global）的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li>\n<li>G（Global）：当前脚本的最外层，比如当前模块的全局变量。</li>\n<li>B（Built-in）：包含了内建的变量/关键字等，最后被搜索。</li>\n</ul>\n<p>一般来说，在没有 <code>global</code> 和 <code>nonlocal</code> 关键字的情况下，为一个名称赋值都会在最内层的命名空间中创建对象。赋值并不拷贝具体的值，而是在命名空间中做绑定关系。</p>\n<p>如果在内部作用域使用 <code>global</code> 关键字，则会将名称重新绑定到模块顶层的全局命名空间（Global）中。使用 <code>nonlocal</code> 关键字，则标明这个名称在中间层次（Enclosing）的命名空间中。</p>\n<p>下面的例子可以说明这两个关键字的作用。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">scope_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">do_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        spam <span class="token operator">=</span> <span class="token string">"local spam"</span>\n\n    <span class="token keyword">def</span> <span class="token function">do_nonlocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">nonlocal</span> spam\n        spam <span class="token operator">=</span> <span class="token string">"nonlocal spam"</span>\n\n    <span class="token keyword">def</span> <span class="token function">do_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">global</span> spam\n        spam <span class="token operator">=</span> <span class="token string">"global spam"</span>\n\n    spam <span class="token operator">=</span> <span class="token string">"test spam"</span>\n    do_local<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After local assignment:"</span><span class="token punctuation">,</span> spam<span class="token punctuation">)</span>\n    do_nonlocal<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After nonlocal assignment:"</span><span class="token punctuation">,</span> spam<span class="token punctuation">)</span>\n    do_global<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After global assignment:"</span><span class="token punctuation">,</span> spam<span class="token punctuation">)</span>\n\nscope_test<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"In global scope:"</span><span class="token punctuation">,</span> spam<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>输出为</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>After local assignment: test spam\nAfter nonlocal assignment: nonlocal spam\nAfter global assignment: nonlocal spam\nIn global scope: global spam\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义" aria-hidden="true">#</a> 类的定义</h2>\n<p>类定义的语法形式如下：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">></span>\n    <span class="token punctuation">.</span>\n    <span class="token punctuation">.</span>\n    <span class="token punctuation">.</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在定义类的时候，会创建一个新的命名空间，同时 Python 的 Local 作用域变成了这个类。类中定义的变量、函数都绑定在新的命名空间中。当完成类定义之后，会生成一个类对象，这个类对象中保存者类中命名空间的内容。同时，在进入类定义之前的作用域被恢复为 Local 作用域，类对象被绑定在这个作用域的命名空间中。</p>\n<h2 id="类对象" tabindex="-1"><a class="header-anchor" href="#类对象" aria-hidden="true">#</a> 类对象</h2>\n<p>类对象支持两种类型的操作，属性访问和实例化。</p>\n<p>比如下面定义的类：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""A simple example class"""</span>\n    i <span class="token operator">=</span> <span class="token number">12345</span>\n\n    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token string">\'hello world\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们可以通过 <code>MyClass.i</code> 和 <code>MyClass.f</code> 来访问类对象上的属性，我们设置可以修改类对象上的属性。</p>\n<p>通过如下方式可以实现类的实例化。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>x <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>实例化后，会创建一个新的对象，实例对象，对象中保存一些初始状态。比如上面的代码会创建一个空对象。我们可以在类定义中通过 <code>__init__()</code> 函数来指定在实例化时需要的参数，在实例化时会自动调用这个函数。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> class Complex:\n<span class="token punctuation">..</span>.     def __init__<span class="token punctuation">(</span>self, realpart, imagpart<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.         self.r <span class="token operator">=</span> realpart\n<span class="token punctuation">..</span>.         self.i <span class="token operator">=</span> imagpart\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> Complex<span class="token punctuation">(</span><span class="token number">3.0</span>, -4.5<span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> x.r, x.i\n<span class="token punctuation">(</span><span class="token number">3.0</span>, -4.5<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="实例对象" tabindex="-1"><a class="header-anchor" href="#实例对象" aria-hidden="true">#</a> 实例对象</h2>\n<p>实例对象，顾名思义是有类实例化而来。实例对象上通常又两种属性，一种是变量，一种是方法。我们可以给实例对象添加任意属性，即使这个属性没有在类定义中定义。</p>\n<h3 id="实例对象上的变量" tabindex="-1"><a class="header-anchor" href="#实例对象上的变量" aria-hidden="true">#</a> 实例对象上的变量</h3>\n<p>实例对象上的变量为实例单独所有，类对象上的变量为所有实例对象共有。如果类对象上的变量是一个可变对象，比如列表，那么变更后的值为所有实例对象共有。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>\n    a <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment"># 所有实例共有</span>\n    <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'class a \'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> n <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> m.a\n<span class="token number">3</span>\n<span class="token operator">>></span><span class="token operator">></span> m.a <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token operator">>></span><span class="token operator">></span> m.a\n<span class="token number">6</span>\n<span class="token operator">>></span><span class="token operator">></span> n.a\n<span class="token number">3</span>\n<span class="token operator">>></span><span class="token operator">></span> m.list.append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> n.list\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注意上面的 <code>m.a = 6</code>，如果实例对象上的属性名称与类对象上的属性名称相同，则 Python 会优先使用实例对象上的名称。（别忘了，在给一个变量赋值的时候，会在对应命名空间中创建绑定关系。）</p>\n<h3 id="实例对象上的方法" tabindex="-1"><a class="header-anchor" href="#实例对象上的方法" aria-hidden="true">#</a> 实例对象上的方法</h3>\n<p>在前面的例子中，<code>MyClass.f</code> 和 <code>x.f</code> 是否是一样的呢？答案是否。<code>MyClass.f</code> 是一个函数对象，而 <code>x.f</code> 是一个方法对象。方法对象中包装了类的函数对象和实例对象。当调用这个方法对象的时候，方法对象会在参数列表前面加上实例对象，然后使用新的参数列表调用函数对象。</p>\n<p>也就是说 <code>x.f()</code> 与 <code>MyClass.f(MyClass)</code> 意义相同。</p>\n<h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2>\n<p>继承的语法形式为：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DerivedClassName</span><span class="token punctuation">(</span>Base1<span class="token punctuation">,</span> Base2<span class="token punctuation">,</span> Base3<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">></span>\n    <span class="token punctuation">.</span>\n    <span class="token punctuation">.</span>\n    <span class="token punctuation">.</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>继承场景下的类对象与单一类对象类似，子类对象中会保存一个基类对象。在查找属性的时候，会优先查找子类上的属性，必要情况下会查找基类对象上的属性。</p>\n<p>子类可以复写基类的方法。如果子类复写了基类的方法，那么当基类上的其他方法在调用这个方法的时候，实际上是调用的子类上的方法。我们可以通过 <code>BaseClassName.methodname(self, arguments)</code> 来调用基类的方法。</p>\n<p>在 Python 中，我们可以通过 <code>isinstance()</code> 和 <code>issubclass()</code> 来判断继承关系。</p>\n<p>在多继承场景下，属性搜索遵循深度优先，从左到右的原则。即先查找 <code>DerivedClassName</code>，之后查找 <code>Base1</code> 以及 <code>Base1</code> 的基类，如果还未找到，再从 <code>Base2</code> 及 <code>Base2</code> 的基类中找，以此类推。</p>\n<h2 id="私有变量" tabindex="-1"><a class="header-anchor" href="#私有变量" aria-hidden="true">#</a> 私有变量</h2>\n<p>在 Python 中有个约定，以下划线开头的变量会被认为是私有变量。为了防止在类继承的时候私有变量被修改，Python 会对以至少两个下划线 <code>__</code> 开头、至多一个下划线结尾的变量名做内部处理，比如 <code>__spam</code> 会被处理为 <code>_classname__spam</code>，这样就可以有效避免不必要的修改了。这种处理对所有定义在类定义范围内的名称有效，不考虑名称出现的具体位置。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Mapping</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>items_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        self<span class="token punctuation">.</span>__update<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>items_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n\n    __update <span class="token operator">=</span> update   <span class="token comment"># 对 update() 的私有拷贝</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MappingSubclass</span><span class="token punctuation">(</span>Mapping<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>items_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>即使我们在 <code>MappingSubclass</code> 中定义一个 <code>__update</code> 变量，也不会影响 <code>Mapping</code> 类中的 <code>__update</code> 工作。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-10",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/class.html",pathLocale:"/",permalink:null,slug:"class",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/class.md",filePathRelative:"courses/python/class.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/class.html.vue",componentFilePathRelative:"pages/courses/python/class.html.vue",componentFileChunkName:"v-5d65d204",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/class.html.js",dataFilePathRelative:"pages/courses/python/class.html.js",dataFileChunkName:"v-5d65d204",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/class.html",htmlFilePathRelative:"courses/python/class.html"},{key:"v-6c9166f8",path:"/courses/python/control-flow.html",title:"逻辑判断与循环",lang:"zh-CN",frontmatter:{title:"逻辑判断与循环",description:"Python 中的逻辑判断、分支条件、循环处理等。",keywords:["Python"],date:"2021-09-08T00:00:00.000Z",key:2},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"if 语句",slug:"if-语句",children:[]},{level:2,title:"for 语句",slug:"for-语句",children:[]},{level:2,title:"while 语句",slug:"while-语句",children:[]},{level:2,title:"break 、continue 和循环中的 else 语句",slug:"break-、continue-和循环中的-else-语句",children:[]},{level:2,title:"pass 语句",slug:"pass-语句",children:[]},{level:2,title:"逻辑判断和优先级",slug:"逻辑判断和优先级",children:[]}],content:"\n## `if` 语句\n\n```bash\n>>> if x < 0:\n...     print('Negative')\n... elif x == 0:\n...     print('Zero')\n... else:\n...     print('Positive')\n```\n\n其中，`elif` 就是 `else if` 的含义。\n\n## `for` 语句\n\n不像其他语言，Python 中的 `for` 循环只能针对具备迭代能力（iterable）的类型（比如列表、字符串等）进行循环。\n\n```bash\n>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words:\n...     print(w, len(w))\n...\ncat 3\nwindow 6\ndefenestrate 12\n```\n\n对于字典类型，我们可以通过 `ittems()` 直接访问其键值对。\n\n```\n>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}\n>>> for k, v in knights.items():\n...     print(k, v)\n...\ngallahad the pure\nrobin the brave\n```\n\n如果要在循环中使用一个[序列](https://docs.python.org/3/library/stdtypes.html#typesseq)（列表、字符串等）中的位置索引，可以使用 `enumerate()`。\n\n```bash\n>>> for i, v in enumerate(['tic', 'tac', 'toe']):\n...     print(i, v)\n...\n0 tic\n1 tac\n2 toe\n```\n\n可以通过 `zip()` 同时循环两个序列，最短的序列结束时循环终止。\n\n```bash\n>>> questions = ['name', 'quest', 'favorite color']\n>>> answers = ['lancelot', 'the holy grail', 'blue']\n>>> for q, a in zip(questions, answers):\n...     print('What is your {0}?  It is {1}.'.format(q, a))\n...\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\n```\n\n## `while` 语句\n\n只要 `while` 语句中的表达式为 `True`，循环就会一直持续下去。\n\n```bash\n>>> x = 3\n>>> while x > 1:\n...     print(x)\n...     x = x - 1\n...\n3\n2\n```\n\n## `break` 、`continue` 和循环中的 `else` 语句\n\n与其他语言（如 C 语言）相同，`break` 语句用于跳出当前循环，`continue` 语句用于进入下一次循环逻辑。\n\n```bash\n>>> for n in range(2, 10):\n...     for x in range(2, n):\n...         if n % x == 0:\n...             print(n, '等于', x, '*', n//x)\n...             break\n...     else:\n...         print(n, '是个素数')\n...\n2 是个素数\n3 是个素数\n4 等于 2 * 2\n5 是个素数\n6 等于 2 * 3\n7 是个素数\n8 等于 2 * 4\n9 等于 3 * 3\n```\n\n注意，循环中的 `else` 分支只有在循环结束且不是 `break` 退出的时候才会执行。`else` 既可以与 `for` 一起使用，也可以与 `while` 一起使用。\n\n```bash\n>>> for num in range(2, 3):\n...     if num % 2 == 0:\n...         print(\"偶数\", num)\n...         continue\n...     print(\"奇数\", num)\n偶数 2\n奇数 3\n```\n\n## `pass` 语句\n\n`pass` 语句什么也不做，可以用来定义一个空类或者空函数。\n\n```bash\n>>> class MyEmptyClass:\n...     pass\n...\n```\n\n```bash\n>>> def initlog(*args):\n...     pass   # 后续会实现\n...\n```\n\n## 逻辑判断和优先级\n\n比较运算符 `in` 和 `not in` 可以判断一个值是否在序列中。比较运算符 `is` 和 `is not` 可以判断两个对象是否是同一个对象。所有的比较运算符优先级相同，但是都比数值运算符优先级低。\n\n\n运算符可以级联，比如 `a < b == c` 表示 `a` 小于 `b` 同时 `b` 等于 `c`。\n\n可以使用布尔运算符 `and` 和 `or` 组合比较，并且比较（或任何其他布尔表达式）的结果可以用 `not` 否定。布尔运算符的优先级比比较运算符低，在布尔运算符中，`not` 的优先级最好，`or` 的优先级最低。因此， `A and not B or C` 与 `(A and (not B)) or C` 等同。\n\n`and` 和 `or` 同时也是短路求值运算符，从左到右依次求值，当满足结果时就中断求值。即如果 `A` 和 `C` 都是 `True` 但是 `B` 是 `False`，那么 `A and B and C` 的值为 `False`，不管 `C` 的值是什么。\n\n\n我们可以将比较结果赋值给一个变量：\n\n```bash\n>>> string1, string2, string3 = '', 'string1', 'string2'\n>>> non_null = string1 or string2 or string3\n>>> non_null\n'string1'\n```\n\n在 Python 中，我们还可以对序列进行比较。这种比较使用字典顺序：首先比较前两项，如果它们不同，则决定比较的结果；如果它们相等，则比较接下来的两个项目，依此类推，直到用完任一序列。如果要比较的两个项目本身是相同类型的序列，则递归地进行字典序比较。如果两个序列的所有项比较相等，则认为这两个序列相等。如果一个序列是另一个的初始子序列，则较短的序列是较小（较小）的序列。字符串的字典顺序使用 Unicode 代码点编号来对单个字符进行排序。\n\n相同类型序列之间比较的一些示例：\n\n```bash\n(1, 2, 3)              < (1, 2, 4)\n[1, 2, 3]              < [1, 2, 4]\n'ABC' < 'C' < 'Pascal' < 'Python'\n(1, 2, 3, 4)           < (1, 2, 4)\n(1, 2)                 < (1, 2, -1)\n(1, 2, 3)             == (1.0, 2.0, 3.0)\n(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)\n```\n\n请注意，在 Python 中如果对象具有适当的比较方法，则使用 `<` 或 `>` 比较不同类型的对象也是合法的。如果对象没有定义比较方法，则会抛出 `TypeError` 错误。\n",contentRendered:'<h2 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句" aria-hidden="true">#</a> <code>if</code> 语句</h2>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">\'Negative\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">\'Zero\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. else:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">\'Positive\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中，<code>elif</code> 就是 <code>else if</code> 的含义。</p>\n<h2 id="for-语句" tabindex="-1"><a class="header-anchor" href="#for-语句" aria-hidden="true">#</a> <code>for</code> 语句</h2>\n<p>不像其他语言，Python 中的 <code>for</code> 循环只能针对具备迭代能力（iterable）的类型（比如列表、字符串等）进行循环。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'cat\'</span>, <span class="token string">\'window\'</span>, <span class="token string">\'defenestrate\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token for-or-select variable">w</span> <span class="token keyword">in</span> words:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>w, len<span class="token punctuation">(</span>w<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.\n<span class="token function">cat</span> <span class="token number">3</span>\nwindow <span class="token number">6</span>\ndefenestrate <span class="token number">12</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于字典类型，我们可以通过 <code>ittems()</code> 直接访问其键值对。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>>>> knights = {\'gallahad\': \'the pure\', \'robin\': \'the brave\'}\n>>> for k, v in knights.items():\n...     print(k, v)\n...\ngallahad the pure\nrobin the brave\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果要在循环中使用一个<a href="https://docs.python.org/3/library/stdtypes.html#typesseq" target="_blank" rel="noopener noreferrer">序列<OutboundLink/></a>（列表、字符串等）中的位置索引，可以使用 <code>enumerate()</code>。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i, <span class="token function">v</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'tic\'</span>, <span class="token string">\'tac\'</span>, <span class="token string">\'toe\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>i, <span class="token function">v</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token number">0</span> tic\n<span class="token number">1</span> <span class="token function">tac</span>\n<span class="token number">2</span> toe\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过 <code>zip()</code> 同时循环两个序列，最短的序列结束时循环终止。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> questions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span>, <span class="token string">\'quest\'</span>, <span class="token string">\'favorite color\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'lancelot\'</span>, <span class="token string">\'the holy grail\'</span>, <span class="token string">\'blue\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> q, a <span class="token keyword">in</span> zip<span class="token punctuation">(</span>questions, answers<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">\'What is your {0}?  It is {1}.\'</span>.format<span class="token punctuation">(</span>q, a<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句" aria-hidden="true">#</a> <code>while</code> 语句</h2>\n<p>只要 <code>while</code> 语句中的表达式为 <code>True</code>，循环就会一直持续下去。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">while</span> x <span class="token operator">></span> <span class="token number">1</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     x <span class="token operator">=</span> x - <span class="token number">1</span>\n<span class="token punctuation">..</span>.\n<span class="token number">3</span>\n<span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="break-、continue-和循环中的-else-语句" tabindex="-1"><a class="header-anchor" href="#break-、continue-和循环中的-else-语句" aria-hidden="true">#</a> <code>break</code> 、<code>continue</code> 和循环中的 <code>else</code> 语句</h2>\n<p>与其他语言（如 C 语言）相同，<code>break</code> 语句用于跳出当前循环，<code>continue</code> 语句用于进入下一次循环逻辑。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">10</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span>, n<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.         <span class="token keyword">if</span> n % x <span class="token operator">==</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.             print<span class="token punctuation">(</span>n, <span class="token string">\'等于\'</span>, x, <span class="token string">\'*\'</span>, n//x<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.             <span class="token builtin class-name">break</span>\n<span class="token punctuation">..</span>.     else:\n<span class="token punctuation">..</span>.         print<span class="token punctuation">(</span>n, <span class="token string">\'是个素数\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token number">2</span> 是个素数\n<span class="token number">3</span> 是个素数\n<span class="token number">4</span> 等于 <span class="token number">2</span> * <span class="token number">2</span>\n<span class="token number">5</span> 是个素数\n<span class="token number">6</span> 等于 <span class="token number">2</span> * <span class="token number">3</span>\n<span class="token number">7</span> 是个素数\n<span class="token number">8</span> 等于 <span class="token number">2</span> * <span class="token number">4</span>\n<span class="token number">9</span> 等于 <span class="token number">3</span> * <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注意，循环中的 <code>else</code> 分支只有在循环结束且不是 <code>break</code> 退出的时候才会执行。<code>else</code> 既可以与 <code>for</code> 一起使用，也可以与 <code>while</code> 一起使用。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token for-or-select variable">num</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token keyword">if</span> num % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>:\n<span class="token punctuation">..</span>.         print<span class="token punctuation">(</span><span class="token string">"偶数"</span>, num<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.         <span class="token builtin class-name">continue</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">"奇数"</span>, num<span class="token punctuation">)</span>\n偶数 <span class="token number">2</span>\n奇数 <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="pass-语句" tabindex="-1"><a class="header-anchor" href="#pass-语句" aria-hidden="true">#</a> <code>pass</code> 语句</h2>\n<p><code>pass</code> 语句什么也不做，可以用来定义一个空类或者空函数。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> class MyEmptyClass:\n<span class="token punctuation">..</span>.     pass\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def initlog<span class="token punctuation">(</span>*args<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     pass   <span class="token comment"># 后续会实现</span>\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="逻辑判断和优先级" tabindex="-1"><a class="header-anchor" href="#逻辑判断和优先级" aria-hidden="true">#</a> 逻辑判断和优先级</h2>\n<p>比较运算符 <code>in</code> 和 <code>not in</code> 可以判断一个值是否在序列中。比较运算符 <code>is</code> 和 <code>is not</code> 可以判断两个对象是否是同一个对象。所有的比较运算符优先级相同，但是都比数值运算符优先级低。</p>\n<p>运算符可以级联，比如 <code>a &lt; b == c</code> 表示 <code>a</code> 小于 <code>b</code> 同时 <code>b</code> 等于 <code>c</code>。</p>\n<p>可以使用布尔运算符 <code>and</code> 和 <code>or</code> 组合比较，并且比较（或任何其他布尔表达式）的结果可以用 <code>not</code> 否定。布尔运算符的优先级比比较运算符低，在布尔运算符中，<code>not</code> 的优先级最好，<code>or</code> 的优先级最低。因此， <code>A and not B or C</code> 与 <code>(A and (not B)) or C</code> 等同。</p>\n<p><code>and</code> 和 <code>or</code> 同时也是短路求值运算符，从左到右依次求值，当满足结果时就中断求值。即如果 <code>A</code> 和 <code>C</code> 都是 <code>True</code> 但是 <code>B</code> 是 <code>False</code>，那么 <code>A and B and C</code> 的值为 <code>False</code>，不管 <code>C</code> 的值是什么。</p>\n<p>我们可以将比较结果赋值给一个变量：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> string1, string2, string3 <span class="token operator">=</span> <span class="token string">\'\'</span>, <span class="token string">\'string1\'</span>, <span class="token string">\'string2\'</span>\n<span class="token operator">>></span><span class="token operator">></span> non_null <span class="token operator">=</span> string1 or string2 or string3\n<span class="token operator">>></span><span class="token operator">></span> non_null\n<span class="token string">\'string1\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 Python 中，我们还可以对序列进行比较。这种比较使用字典顺序：首先比较前两项，如果它们不同，则决定比较的结果；如果它们相等，则比较接下来的两个项目，依此类推，直到用完任一序列。如果要比较的两个项目本身是相同类型的序列，则递归地进行字典序比较。如果两个序列的所有项比较相等，则认为这两个序列相等。如果一个序列是另一个的初始子序列，则较短的序列是较小（较小）的序列。字符串的字典顺序使用 Unicode 代码点编号来对单个字符进行排序。</p>\n<p>相同类型序列之间比较的一些示例：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>              <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>              <span class="token operator">&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token string">\'ABC\'</span> <span class="token operator">&lt;</span> <span class="token string">\'C\'</span> <span class="token operator">&lt;</span> <span class="token string">\'Pascal\'</span> <span class="token operator">&lt;</span> <span class="token string">\'Python\'</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">)</span>           <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span>                 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, -1<span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>             <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1.0</span>, <span class="token number">2.0</span>, <span class="token number">3.0</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token punctuation">(</span><span class="token string">\'aa\'</span>, <span class="token string">\'ab\'</span><span class="token punctuation">))</span>   <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token punctuation">(</span><span class="token string">\'abc\'</span>, <span class="token string">\'a\'</span><span class="token punctuation">)</span>, <span class="token number">4</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>请注意，在 Python 中如果对象具有适当的比较方法，则使用 <code>&lt;</code> 或 <code>&gt;</code> 比较不同类型的对象也是合法的。如果对象没有定义比较方法，则会抛出 <code>TypeError</code> 错误。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-08",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/control-flow.html",pathLocale:"/",permalink:null,slug:"control-flow",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/control-flow.md",filePathRelative:"courses/python/control-flow.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/control-flow.html.vue",componentFilePathRelative:"pages/courses/python/control-flow.html.vue",componentFileChunkName:"v-6c9166f8",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/control-flow.html.js",dataFilePathRelative:"pages/courses/python/control-flow.html.js",dataFileChunkName:"v-6c9166f8",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/control-flow.html",htmlFilePathRelative:"courses/python/control-flow.html"},{key:"v-2ed9719f",path:"/courses/python/data-type.html",title:"Python 中的数据类型",lang:"zh-CN",frontmatter:{title:"Python 中的数据类型",description:"Python 中的基础数据类型，常见数据结构等",keywords:["Python"],date:"2021-09-03T00:00:00.000Z",key:1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"数字类型",slug:"数字类型",children:[]},{level:2,title:"字符串",slug:"字符串",children:[]},{level:2,title:"列表",slug:"列表",children:[]},{level:2,title:"元组",slug:"元组",children:[]},{level:2,title:"集合",slug:"集合",children:[]},{level:2,title:"字典",slug:"字典",children:[]}],content:"\n## 数字类型\n\nPython 中有两种常见数字类型，整型（int）和浮点型（float），整型数之间运算结果为整型，整型与浮点型之间运算结果为浮点型。除法永远返回浮点型。\n\n一般计算：\n```bash\n>>> 2 + 2\n4\n>>> 50 - 5 * 6\n20\n>>> (50 - 5 * 6) / 4\n5.0\n```\n\n除法：\n```bash\n>>> 8 / 5\n1.6\n>>> 17 // 3  # 取商\n5\n>>> 17 % 3  # 取余\n2\n```\n\n阶乘：\n```bash\n>>> 5 ** 2\n25\n>>> 2 ** 7\n128\n```\n\n## 字符串\n字符串可以通过单引号（`'`）或者双引号（`\"`）来表示，反斜线（`\\`）来转译字符。字符串是常量，即不可改。\n\n```bash\n>>> 'spam eggs'  # 单引号\n'spam eggs'\n>>> 'doesn\\'t'  # 转译字符\n\"doesn't\"\n>>> \"doesn't\"  # 双引号\n\"doesn't\"\n>>> '\"Yes,\" they said.'\n'\"Yes,\" they said.'\n>>> \"\\\"Yes,\\\" they said.\"\n'\"Yes,\" they said.'\n>>> '\"Isn\\'t,\" they said.'\n'\"Isn\\'t,\" they said.'\n```\n\n通常情况下，反斜线会被作为转译字符使用，如果我们要强制将其作为一般字符时，需要在字符串前面加一个 `r` 标记，表示这个字符串使用原始字符。\n\n```bash\n>>> print('C:\\some\\name')  # 这里 \\n 表示换行\nC:\\some\name\n>>> print(r'C:\\some\\name')  # 注意单引号前面的 r\nC:\\some\\name\n```\n\n我们可以通过 `\"\"\"...\"\"\"` 和 `'''...'''` 来表示多行字符串，在多行字符串中每一行末尾的换行符会被保留。如果我们想去除某一行默认的换行符，可以在行末加一个反斜线。\n\n下面的例子会省略初始的一个空行。\n```bash\nprint(\"\"\"\\\nUsage: thingy [OPTIONS]\n     -h                        Display this usage message\n     -H hostname               Hostname to connect to\n\"\"\")\n```\n\n通过数字和乘机符号，我们可以对字符串进行重复。\n\n```bash\n>>> 3 * 'un' + 'ium'\n'unununium'\n```\n\n两个相邻的字符串字面量可以直接拼接成一个新的字符串，但是字符串字面量和变量之间不行。\n\n```bash\n>>> 'Py' 'thon'\n'Python'\n```\n\n字符串支持索引，索引规则如下：\n\n```\n +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n```\n\n## 列表\n\n列表可以用来保存一组数据，这些数据可以是同一种类型，也可以不同类型。列表支持索引，列表内的值可改。\n\n```bash\n>>> squares = [1, 4, 9, 16, 25]\n>>> squares\n[1, 4, 9, 16, 25]\n>>> squares[0]  # 索引访问\n1\n>>> squares[-1]\n25\n>>> squares[-3:]  # 返回新的列表\n[9, 16, 25]\n```\n\n通过 `+` 连接两个列表，可以返回一个新的列表：\n\n```bash\n>>> squares + [36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n我们可以通过索引对列表进行操作：\n\n```bash\n>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> letters\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> # 替换一些值\n>>> letters[2:5] = ['C', 'D', 'E']\n>>> letters\n['a', 'b', 'C', 'D', 'E', 'f', 'g']\n>>> # 删除一些值\n>>> letters[2:5] = []\n>>> letters\n['a', 'b', 'f', 'g']\n>>> # 清空列表\n>>> letters[:] = []\n>>> letters\n[]\n```\n\n列表还支持简写方式：\n\n```bash\nsquares = [x**2 for x in range(10)]\n```\n\n等效于：\n\n```bash\n>>> squares = []\n>>> for x in range(10):\n...     squares.append(x**2)\n...\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n更复杂一点的例子：\n```bash\n>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n```\n\n## 元组\n\n元组（tuple）是由一组逗号分割的值组成的。元组内的值不能修改。\n\n```bash\n>>> t = 12345, 54321, 'hello!'\n>>> t[0]\n12345\n>>> t\n(12345, 54321, 'hello!')\n>>> v = ([1, 2, 3], [3, 2, 1])\n>>> v\n([1, 2, 3], [3, 2, 1])\n```\n\n通过如下方式可以对元组进行解构：\n\n```bash\n>>> x, y, z = t\n```\n\n## 集合\n集合（set）中保存的是一组无序但唯一的值。注意，空集合需要使用 `set()`，因为 `{}` 表示一个空字典（dict）。\n\n```bash\n>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\n>>> print(basket)   # 重复项已经被删除\n{'orange', 'banana', 'pear', 'apple'}\n```\n\n集合运算：\n\n```bash\n>>> a = set('abracadabra')\n>>> b = set('alacazam')\n>>> a\n{'a', 'r', 'b', 'c', 'd'}\n>>> a - b  # 在 a 中但是不在 b 中的字母\n{'r', 'd', 'b'}\n>>> a | b  # 在 a 中活在 b 中的字母\n{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n>>> a & b  # 即在 a 中又在 b 中的字母\n{'a', 'c'}\n>>> a ^ b  # 在 a 或者 b 中，但又不同时在 a 和 b 中\n{'r', 'd', 'b', 'm', 'z', 'l'}\n```\n\n与列表相似，集合也支持简写方式：\n\n```bash\n>>> a = {x for x in 'abracadabra' if x not in 'abc'}\n>>> a\n{'r', 'd'}\n```\n\n## 字典\n\n字典用于存储一组键值对。key 可以是任何不可变的数据。\n\n```bash\n>>> tel = {'jack': 4098, 'sape': 4139}\n>>> tel['guido'] = 4127\n>>> tel\n{'jack': 4098, 'sape': 4139, 'guido': 4127}\n>>> tel['jack']\n4098\n>>> tel['irv'] = 4127\n>>> tel\n{'jack': 4098, 'guido': 4127, 'irv': 4127}\n```\n\n可以通过 `dict()` 构造函数来创建字典：\n\n```bash\n>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\n>>> dict(sape=4139, guido=4127, jack=4098)\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\n```\n\n字典也支持简写形式：\n\n```bash\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n```\n",contentRendered:'<h2 id="数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型" aria-hidden="true">#</a> 数字类型</h2>\n<p>Python 中有两种常见数字类型，整型（int）和浮点型（float），整型数之间运算结果为整型，整型与浮点型之间运算结果为浮点型。除法永远返回浮点型。</p>\n<p>一般计算：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> + <span class="token number">2</span>\n<span class="token number">4</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token number">50</span> - <span class="token number">5</span> * <span class="token number">6</span>\n<span class="token number">20</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">50</span> - <span class="token number">5</span> * <span class="token number">6</span><span class="token punctuation">)</span> / <span class="token number">4</span>\n<span class="token number">5.0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>除法：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token number">8</span> / <span class="token number">5</span>\n<span class="token number">1.6</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token number">17</span> // <span class="token number">3</span>  <span class="token comment"># 取商</span>\n<span class="token number">5</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token number">17</span> % <span class="token number">3</span>  <span class="token comment"># 取余</span>\n<span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>阶乘：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> ** <span class="token number">2</span>\n<span class="token number">25</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> ** <span class="token number">7</span>\n<span class="token number">128</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2>\n<p>字符串可以通过单引号（<code>\'</code>）或者双引号（<code>&quot;</code>）来表示，反斜线（<code>\\</code>）来转译字符。字符串是常量，即不可改。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'spam eggs\'</span>  <span class="token comment"># 单引号</span>\n<span class="token string">\'spam eggs\'</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'doesn\\\'</span>t<span class="token string">\'  # 转译字符\n"doesn\'</span>t<span class="token string">"\n>>> "</span>doesn<span class="token string">\'t"  # 双引号\n"doesn\'</span>t<span class="token string">"\n>>> \'"</span>Yes,<span class="token string">" they said.\'\n\'"</span>Yes,<span class="token string">" they said.\'\n>>> "</span><span class="token punctuation">\\</span>"Yes,<span class="token punctuation">\\</span>" they said.<span class="token string">"\n\'"</span>Yes,<span class="token string">" they said.\'\n>>> \'"</span>Isn<span class="token punctuation">\\</span>\'t,<span class="token string">" they said.\'\n\'"</span>Isn<span class="token punctuation">\\</span>\'t," they said.\'\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>通常情况下，反斜线会被作为转译字符使用，如果我们要强制将其作为一般字符时，需要在字符串前面加一个 <code>r</code> 标记，表示这个字符串使用原始字符。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'C:\\some\\name\'</span><span class="token punctuation">)</span>  <span class="token comment"># 这里 \\n 表示换行</span>\nC:<span class="token punctuation">\\</span>some\name\n<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span>r<span class="token string">\'C:\\some\\name\'</span><span class="token punctuation">)</span>  <span class="token comment"># 注意单引号前面的 r</span>\nC:<span class="token punctuation">\\</span>some<span class="token punctuation">\\</span>name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们可以通过 <code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 和 <code>\'\'\'...\'\'\'</code> 来表示多行字符串，在多行字符串中每一行末尾的换行符会被保留。如果我们想去除某一行默认的换行符，可以在行末加一个反斜线。</p>\n<p>下面的例子会省略初始的一个空行。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>print<span class="token punctuation">(</span><span class="token string">""</span>"<span class="token punctuation">\\</span>\nUsage: thingy <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>\n     -h                        Display this usage message\n     -H <span class="token function">hostname</span>               Hostname to connect to\n<span class="token string">""</span>"<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过数字和乘机符号，我们可以对字符串进行重复。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> * <span class="token string">\'un\'</span> + <span class="token string">\'ium\'</span>\n<span class="token string">\'unununium\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>两个相邻的字符串字面量可以直接拼接成一个新的字符串，但是字符串字面量和变量之间不行。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'Py\'</span> <span class="token string">\'thon\'</span>\n<span class="token string">\'Python\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>字符串支持索引，索引规则如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h2>\n<p>列表可以用来保存一组数据，这些数据可以是同一种类型，也可以不同类型。列表支持索引，列表内的值可改。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> squares\n<span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 索引访问</span>\n<span class="token number">1</span>\n<span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span>-1<span class="token punctuation">]</span>\n<span class="token number">25</span>\n<span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span>-3:<span class="token punctuation">]</span>  <span class="token comment"># 返回新的列表</span>\n<span class="token punctuation">[</span><span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过 <code>+</code> 连接两个列表，可以返回一个新的列表：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> squares + <span class="token punctuation">[</span><span class="token number">36</span>, <span class="token number">49</span>, <span class="token number">64</span>, <span class="token number">81</span>, <span class="token number">100</span><span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span>, <span class="token number">36</span>, <span class="token number">49</span>, <span class="token number">64</span>, <span class="token number">81</span>, <span class="token number">100</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们可以通过索引对列表进行操作：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'c\'</span>, <span class="token string">\'d\'</span>, <span class="token string">\'e\'</span>, <span class="token string">\'f\'</span>, <span class="token string">\'g\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> letters\n<span class="token punctuation">[</span><span class="token string">\'a\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'c\'</span>, <span class="token string">\'d\'</span>, <span class="token string">\'e\'</span>, <span class="token string">\'f\'</span>, <span class="token string">\'g\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># 替换一些值</span>\n<span class="token operator">>></span><span class="token operator">></span> letters<span class="token punctuation">[</span><span class="token number">2</span>:5<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'C\'</span>, <span class="token string">\'D\'</span>, <span class="token string">\'E\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> letters\n<span class="token punctuation">[</span><span class="token string">\'a\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'C\'</span>, <span class="token string">\'D\'</span>, <span class="token string">\'E\'</span>, <span class="token string">\'f\'</span>, <span class="token string">\'g\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># 删除一些值</span>\n<span class="token operator">>></span><span class="token operator">></span> letters<span class="token punctuation">[</span><span class="token number">2</span>:5<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> letters\n<span class="token punctuation">[</span><span class="token string">\'a\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'f\'</span>, <span class="token string">\'g\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># 清空列表</span>\n<span class="token operator">>></span><span class="token operator">></span> letters<span class="token punctuation">[</span>:<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> letters\n<span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>列表还支持简写方式：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>squares <span class="token operator">=</span> <span class="token punctuation">[</span>x**2 <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>等效于：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     squares.append<span class="token punctuation">(</span>x**2<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> squares\n<span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span>, <span class="token number">36</span>, <span class="token number">49</span>, <span class="token number">64</span>, <span class="token number">81</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>更复杂一点的例子：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x, y<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token for-or-select variable">y</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">3,1</span>,4<span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">3</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">4</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">4</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">1</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h2>\n<p>元组（tuple）是由一组逗号分割的值组成的。元组内的值不能修改。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token number">12345</span>, <span class="token number">54321</span>, <span class="token string">\'hello!\'</span>\n<span class="token operator">>></span><span class="token operator">></span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token number">12345</span>\n<span class="token operator">>></span><span class="token operator">></span> t\n<span class="token punctuation">(</span><span class="token number">12345</span>, <span class="token number">54321</span>, <span class="token string">\'hello!\'</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token function">v</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token function">v</span>\n<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过如下方式可以对元组进行解构：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> x, y, z <span class="token operator">=</span> t\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2>\n<p>集合（set）中保存的是一组无序但唯一的值。注意，空集合需要使用 <code>set()</code>，因为 <code>{}</code> 表示一个空字典（dict）。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> basket <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'apple\'</span>, <span class="token string">\'orange\'</span>, <span class="token string">\'apple\'</span>, <span class="token string">\'pear\'</span>, <span class="token string">\'orange\'</span>, <span class="token string">\'banana\'</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span>basket<span class="token punctuation">)</span>   <span class="token comment"># 重复项已经被删除</span>\n<span class="token punctuation">{</span><span class="token string">\'orange\'</span>, <span class="token string">\'banana\'</span>, <span class="token string">\'pear\'</span>, <span class="token string">\'apple\'</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>集合运算：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">\'abracadabra\'</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">\'alacazam\'</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> a\n<span class="token punctuation">{</span><span class="token string">\'a\'</span>, <span class="token string">\'r\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'c\'</span>, <span class="token string">\'d\'</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> a - b  <span class="token comment"># 在 a 中但是不在 b 中的字母</span>\n<span class="token punctuation">{</span><span class="token string">\'r\'</span>, <span class="token string">\'d\'</span>, <span class="token string">\'b\'</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">|</span> b  <span class="token comment"># 在 a 中活在 b 中的字母</span>\n<span class="token punctuation">{</span><span class="token string">\'a\'</span>, <span class="token string">\'c\'</span>, <span class="token string">\'r\'</span>, <span class="token string">\'d\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'m\'</span>, <span class="token string">\'z\'</span>, <span class="token string">\'l\'</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">&amp;</span> b  <span class="token comment"># 即在 a 中又在 b 中的字母</span>\n<span class="token punctuation">{</span><span class="token string">\'a\'</span>, <span class="token string">\'c\'</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> a ^ b  <span class="token comment"># 在 a 或者 b 中，但又不同时在 a 和 b 中</span>\n<span class="token punctuation">{</span><span class="token string">\'r\'</span>, <span class="token string">\'d\'</span>, <span class="token string">\'b\'</span>, <span class="token string">\'m\'</span>, <span class="token string">\'z\'</span>, <span class="token string">\'l\'</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>与列表相似，集合也支持简写方式：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> <span class="token string">\'abracadabra\'</span> <span class="token keyword">if</span> x not <span class="token keyword">in</span> <span class="token string">\'abc\'</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> a\n<span class="token punctuation">{</span><span class="token string">\'r\'</span>, <span class="token string">\'d\'</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h2>\n<p>字典用于存储一组键值对。key 可以是任何不可变的数据。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> tel <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'jack\'</span><span class="token builtin class-name">:</span> <span class="token number">4098</span>, <span class="token string">\'sape\'</span><span class="token builtin class-name">:</span> <span class="token number">4139</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">[</span><span class="token string">\'guido\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4127</span>\n<span class="token operator">>></span><span class="token operator">></span> tel\n<span class="token punctuation">{</span><span class="token string">\'jack\'</span><span class="token builtin class-name">:</span> <span class="token number">4098</span>, <span class="token string">\'sape\'</span><span class="token builtin class-name">:</span> <span class="token number">4139</span>, <span class="token string">\'guido\'</span><span class="token builtin class-name">:</span> <span class="token number">4127</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">[</span><span class="token string">\'jack\'</span><span class="token punctuation">]</span>\n<span class="token number">4098</span>\n<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">[</span><span class="token string">\'irv\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4127</span>\n<span class="token operator">>></span><span class="token operator">></span> tel\n<span class="token punctuation">{</span><span class="token string">\'jack\'</span><span class="token builtin class-name">:</span> <span class="token number">4098</span>, <span class="token string">\'guido\'</span><span class="token builtin class-name">:</span> <span class="token number">4127</span>, <span class="token string">\'irv\'</span><span class="token builtin class-name">:</span> <span class="token number">4127</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可以通过 <code>dict()</code> 构造函数来创建字典：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">\'sape\'</span>, <span class="token number">4139</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">\'guido\'</span>, <span class="token number">4127</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">\'jack\'</span>, <span class="token number">4098</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span><span class="token string">\'sape\'</span><span class="token builtin class-name">:</span> <span class="token number">4139</span>, <span class="token string">\'guido\'</span><span class="token builtin class-name">:</span> <span class="token number">4127</span>, <span class="token string">\'jack\'</span><span class="token builtin class-name">:</span> <span class="token number">4098</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>sape<span class="token operator">=</span><span class="token number">4139</span>, <span class="token assign-left variable">guido</span><span class="token operator">=</span><span class="token number">4127</span>, <span class="token assign-left variable">jack</span><span class="token operator">=</span><span class="token number">4098</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span><span class="token string">\'sape\'</span><span class="token builtin class-name">:</span> <span class="token number">4139</span>, <span class="token string">\'guido\'</span><span class="token builtin class-name">:</span> <span class="token number">4127</span>, <span class="token string">\'jack\'</span><span class="token builtin class-name">:</span> <span class="token number">4098</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>字典也支持简写形式：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>x: x**2 <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token number">2</span>: <span class="token number">4</span>, <span class="token number">4</span>: <span class="token number">16</span>, <span class="token number">6</span>: <span class="token number">36</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-03",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/data-type.html",pathLocale:"/",permalink:null,slug:"data-type",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/data-type.md",filePathRelative:"courses/python/data-type.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/data-type.html.vue",componentFilePathRelative:"pages/courses/python/data-type.html.vue",componentFileChunkName:"v-2ed9719f",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/data-type.html.js",dataFilePathRelative:"pages/courses/python/data-type.html.js",dataFileChunkName:"v-2ed9719f",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/data-type.html",htmlFilePathRelative:"courses/python/data-type.html"},{key:"v-5f8c179c",path:"/courses/python/error-exception.html",title:"错误和异常",lang:"zh-CN",frontmatter:{title:"错误和异常",description:"Python 中的错误、异常处理",keywords:["Python"],date:"2021-09-10T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"语法错误",slug:"语法错误",children:[]},{level:2,title:"异常",slug:"异常",children:[{level:3,title:"处理异常",slug:"处理异常",children:[]},{level:3,title:"抛出异常",slug:"抛出异常",children:[]}]}],content:'\n## 语法错误\n\n如下，当我们编写的代码中出现语法错误的时候，Python 解析器会报这类的错误。\n\n```bash\n>>> while True print(\'Hello world\')\n  File "<stdin>", line 1\n    while True print(\'Hello world\')\n                   ^\nSyntaxError: invalid syntax\n```\n\n## 异常\n\n在程序运行过程中，难免会出现异常。下面展示了几种运行时异常。\n\n```bash\n>>> 10 * (1/0)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nZeroDivisionError: division by zero\n>>> 4 + spam*3\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nNameError: name \'spam\' is not defined\n>>> \'2\' + 2\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: Can\'t convert \'int\' object to str implicitly\n```\n\n### 处理异常\n\n我们通过 `try` 语句来处理异常，完成的使用方法如下：\n\n```python\ntry:\n    <statement-1>\n    .\n    .\n    <statement-N>\nexcept Exception as err:\n    <statement>\nexcept (RuntimeError, TypeError, NameError):\n    <statement>\nelse:\n    <statement>\nfinally:\n    <statement>\n```\n\n首先执行 `try` 和 `except` 之间的语句，如果未出现异常，则 `try` 语句执行结束。否则，会逐个匹配 `except` 语句，匹配上则执行 `except` 语句，否则会继续抛出异常。`except Except as err`，我们可以通过 `err` 来访问异常对象，我们可以通过 `err.args` 来访问构造这个异常对象时的参数。\n\n`else` 语句在 `try` 中执行完，且没有出现异常的时候执行。`finally` 语句指定了在 `try` 返回之前要做的事情，不管是否有异常发生，通常会被用来做一些收尾工作，比如关闭文件等。如果 `finally` 语句中指定了 `return` 语句，那么 `finally` 中 `return` 的会替换掉 `try` 中 `return` 的值。\n\n### 抛出异常\n\n我们可以通过 `raise` 语句抛出一个异常。\n\n```bash\n>>> try:\n...     raise NameError(\'HiThere\')\n... except NameError as err:\n...     print(\'An exception flew by!\' + str(err.args))\n...     raise\n...\nAn exception flew by! (\'HiThere\',)\nTraceback (most recent call last):\n  File "<stdin>", line 2, in <module>\nNameError: HiThere\n```\n\n`raise` 语句还支持后跟一个 `from` 语句来实现异常的级联。\n\n```bash\n>>> def func():\n...     raise IOError\n...\n>>> try:\n...     func()\n... except IOError as exc:\n...     raise RuntimeError(\'Failed to open database\') from exc\n...\nTraceback (most recent call last):\n  File "<stdin>", line 2, in <module>\n  File "<stdin>", line 2, in func\nOSError\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File "<stdin>", line 4, in <module>\nRuntimeError: Failed to open database\n```\n\n通过异常级联，我们可以清楚的看出异常抛出的链路。\n\n注意，在 `except` 语句和 `finally` 语句中抛出的异常是自动级联的。\n\n```bash\n>>> try:\n...     raise NameError(\'aa\')\n... except NameError as err:\n...     raise RuntimeError from err\n...\nTraceback (most recent call last):\n  File "<stdin>", line 2, in <module>\nNameError: aa\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File "<stdin>", line 4, in <module>\nRuntimeError\n```\n\n前面说到，`finally` 语句可以用来处理异常发生后的收尾工作。但是很多时候会显得比较繁琐，比如读写文件的时候，如果忘记在 `finally` 语句中关闭文件，则会导致内存泄漏等严重问题。\n\n我们可以通过 `with` 语句来帮助我们自动处理这些收尾工作，使得代码更加简洁。\n\n```python\nwith open("myfile.txt") as f:\n    for line in f:\n        print(line, end="")\n```\n\n当然，`with` 语句不是所有地方都能用。要使用 `with` 语句，需实现 `__enter__` 和 `__exit__` 方法，具体细节可以看[这里](https://docs.python.org/3/reference/compound_stmts.html#with)。\n',contentRendered:'<h2 id="语法错误" tabindex="-1"><a class="header-anchor" href="#语法错误" aria-hidden="true">#</a> 语法错误</h2>\n<p>如下，当我们编写的代码中出现语法错误的时候，Python 解析器会报这类的错误。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">while</span> True print<span class="token punctuation">(</span><span class="token string">\'Hello world\'</span><span class="token punctuation">)</span>\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">1</span>\n    <span class="token keyword">while</span> True print<span class="token punctuation">(</span><span class="token string">\'Hello world\'</span><span class="token punctuation">)</span>\n                   ^\nSyntaxError: invalid syntax\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2>\n<p>在程序运行过程中，难免会出现异常。下面展示了几种运行时异常。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> * <span class="token punctuation">(</span><span class="token number">1</span>/0<span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nZeroDivisionError: division by zero\n<span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span> + spam*3\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nNameError: name <span class="token string">\'spam\'</span> is not defined\n<span class="token operator">>></span><span class="token operator">></span> <span class="token string">\'2\'</span> + <span class="token number">2</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nTypeError: Can<span class="token string">\'t convert \'</span>int\' object to str implicitly\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="处理异常" tabindex="-1"><a class="header-anchor" href="#处理异常" aria-hidden="true">#</a> 处理异常</h3>\n<p>我们通过 <code>try</code> 语句来处理异常，完成的使用方法如下：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">></span>\n    <span class="token punctuation">.</span>\n    <span class="token punctuation">.</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">></span>\n<span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">></span>\n<span class="token keyword">except</span> <span class="token punctuation">(</span>RuntimeError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> NameError<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">></span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">></span>\n<span class="token keyword">finally</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>statement<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>首先执行 <code>try</code> 和 <code>except</code> 之间的语句，如果未出现异常，则 <code>try</code> 语句执行结束。否则，会逐个匹配 <code>except</code> 语句，匹配上则执行 <code>except</code> 语句，否则会继续抛出异常。<code>except Except as err</code>，我们可以通过 <code>err</code> 来访问异常对象，我们可以通过 <code>err.args</code> 来访问构造这个异常对象时的参数。</p>\n<p><code>else</code> 语句在 <code>try</code> 中执行完，且没有出现异常的时候执行。<code>finally</code> 语句指定了在 <code>try</code> 返回之前要做的事情，不管是否有异常发生，通常会被用来做一些收尾工作，比如关闭文件等。如果 <code>finally</code> 语句中指定了 <code>return</code> 语句，那么 <code>finally</code> 中 <code>return</code> 的会替换掉 <code>try</code> 中 <code>return</code> 的值。</p>\n<h3 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h3>\n<p>我们可以通过 <code>raise</code> 语句抛出一个异常。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> try:\n<span class="token punctuation">..</span>.     raise NameError<span class="token punctuation">(</span><span class="token string">\'HiThere\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. except NameError as err:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">\'An exception flew by!\'</span> + str<span class="token punctuation">(</span>err.args<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.     raise\n<span class="token punctuation">..</span>.\nAn exception flew by<span class="token operator">!</span> <span class="token punctuation">(</span><span class="token string">\'HiThere\'</span>,<span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nNameError: HiThere\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>raise</code> 语句还支持后跟一个 <code>from</code> 语句来实现异常的级联。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def func<span class="token punctuation">(</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     raise IOError\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> try:\n<span class="token punctuation">..</span>.     func<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. except IOError as exc:\n<span class="token punctuation">..</span>.     raise RuntimeError<span class="token punctuation">(</span><span class="token string">\'Failed to open database\'</span><span class="token punctuation">)</span> from exc\n<span class="token punctuation">..</span>.\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> func\nOSError\n\nThe above exception was the direct cause of the following exception:\n\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nRuntimeError: Failed to <span class="token function">open</span> database\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过异常级联，我们可以清楚的看出异常抛出的链路。</p>\n<p>注意，在 <code>except</code> 语句和 <code>finally</code> 语句中抛出的异常是自动级联的。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> try:\n<span class="token punctuation">..</span>.     raise NameError<span class="token punctuation">(</span><span class="token string">\'aa\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. except NameError as err:\n<span class="token punctuation">..</span>.     raise RuntimeError from err\n<span class="token punctuation">..</span>.\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nNameError: aa\n\nThe above exception was the direct cause of the following exception:\n\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:\n  File <span class="token string">"&lt;stdin>"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nRuntimeError\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>前面说到，<code>finally</code> 语句可以用来处理异常发生后的收尾工作。但是很多时候会显得比较繁琐，比如读写文件的时候，如果忘记在 <code>finally</code> 语句中关闭文件，则会导致内存泄漏等严重问题。</p>\n<p>我们可以通过 <code>with</code> 语句来帮助我们自动处理这些收尾工作，使得代码更加简洁。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"myfile.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然，<code>with</code> 语句不是所有地方都能用。要使用 <code>with</code> 语句，需实现 <code>__enter__</code> 和 <code>__exit__</code> 方法，具体细节可以看<a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener noreferrer">这里<OutboundLink/></a>。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-10",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/error-exception.html",pathLocale:"/",permalink:null,slug:"error-exception",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/error-exception.md",filePathRelative:"courses/python/error-exception.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/error-exception.html.vue",componentFilePathRelative:"pages/courses/python/error-exception.html.vue",componentFileChunkName:"v-5f8c179c",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/error-exception.html.js",dataFilePathRelative:"pages/courses/python/error-exception.html.js",dataFileChunkName:"v-5f8c179c",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/error-exception.html",htmlFilePathRelative:"courses/python/error-exception.html"},{key:"v-11811d7e",path:"/courses/python/function.html",title:"函数",lang:"zh-CN",frontmatter:{title:"函数",description:"Python 中的函数定义，传参等。",keywords:["Python"],date:"2021-09-08T00:00:00.000Z",key:3},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"定义函数",slug:"定义函数",children:[]},{level:2,title:"函数参数",slug:"函数参数",children:[{level:3,title:"参数默认值",slug:"参数默认值",children:[]},{level:3,title:"关键字参数",slug:"关键字参数",children:[]},{level:3,title:"函数传参",slug:"函数传参",children:[]},{level:3,title:"解包参数",slug:"解包参数",children:[]}]},{level:2,title:"Lambda 表达式",slug:"lambda-表达式",children:[]}],content:"\n## 定义函数\n\n先来看一个 Fibonacci 函数的定义样例：\n\n```bash\n>>> def fib(n):\n...     \"\"\"Print a Fibonacci series up to n.\"\"\"\n...     a, b = 0, 1\n...     while a < n:\n...         print(a, end=' ')\n...         a, b = b, a+b\n...     print()\n...\n>>> # 调用定义好的函数\n... fib(2000)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597\n```\n\n函数定义必须使用 `def` 关键字，之后是函数名和参数列表。\n\n第二行的字符串是一段文档说明，可用于生成文档，同时我们可以通过 `fib.__doc__` 获取这个字符串。\n\n每个函数都有返回值，没有通过 `return` 语句返回的默认返回 `None`。\n\n每次函数在执行的时候，都会创建一个新的符号表来记录函数创建的本地变量。当需要使用某一个变量的时候，会先在当前函数的符号表中查找，如果没有找到，会再到上一层函数的符号表中查找，直到最终在全局符号表中查找。\n\n因此，在函数中，不能直接修改全局变量或者外层函数的变量的值，除非我们使用 `global` 语句后者 `nonlocal` 语句。\n\n当调用函数的时候，函数的参数也会记录到符号表中来，并且传参是值传递的方式，也就是说，如果参数是一个对象，传过来的值是指向这个对象的引用，而不是对象本身。\n\n我们还可以通过 `__annotations__` 来访问函数的元数据，比如参数的类型，返回值类型等信息。我们需要在定义函数的时候指定这些元数据。\n\n```bash\n>>> def f(ham: str, eggs: str = 'eggs') -> str:\n...     print(\"Annotations:\", f.__annotations__)\n...     print(\"Arguments:\", ham, eggs)\n...     return ham + ' and ' + eggs\n...\n>>> f('spam')\nAnnotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}\nArguments: spam eggs\n'spam and eggs'\n```\n\n## 函数参数\n\n### 参数默认值\n\n```python\ndef ask_ok(prompt, retries=4, reminder='Please try again!'):\n    while True:\n        ok = input(prompt)\n        if ok in ('y', 'ye', 'yes'):\n            return True\n        if ok in ('n', 'no', 'nop', 'nope'):\n            return False\n        retries = retries - 1\n        if retries < 0:\n            raise ValueError('invalid user response')\n        print(reminder)\n```\n\n上面的代码定义了两个默认值，我们可以有如下是三种方式调用这个函数：\n\n* 只传第一个必填参数 `ask_ok('Do you really want to quit?')`\n* 传一个必填参数和一个可选参数 `ask_ok('OK to overwrite the file?', 2)`\n* 所有参数都传 `ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')`\n\n注意，参数的默认值只计算一次，后续调用这个函数，参数的默认值不会重新计算。\n\n```python\ndef f(a, L=[]):\n    L.append(a)\n    return L\n\nprint(f(1))\nprint(f(2))\nprint(f(3))\n```\n\n输出：\n\n```python\n[1]\n[1, 2]\n[1, 2, 3]\n```\n\n### 关键字参数\n\n定义关键字参数的形式为 `kwarg=value`，如下样例：\n\n```python\ndef parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n    print(\"-- This parrot wouldn't\", action, end=' ')\n    print(\"if you put\", voltage, \"volts through it.\")\n    print(\"-- Lovely plumage, the\", type)\n    print(\"-- It's\", state, \"!\")\n```\n\n函数 `parrot` 有一个必填参数 `voltage` 和三个可选参数（`state`，`action`，和 `type`）。我们可以这么传参：\n\n```python\nparrot(1000)          # 1 个位置参数\nparrot(voltage=1000)  # 1 个关键字参数\nparrot(voltage=1000000, action='VOOOOOM') # 2 个关键字参数\nparrot(action='VOOOOOM', voltage=1000000) # 2 个关键字参数\nparrot('a million', 'bereft of life', 'jump') # 3 个位置参数\nparrot('a thousand', state='pushing up the daisies') # 1 个位置参数，一个关键字参数\n```\n\n如下传参方式会报错：\n\n```python\nparrot() # 必填参数未传\nparrot(voltage=5.0, 'dead') # 关键字参数后跟位置参数\nparrot(110, voltage=220) # 参数重复\nparrot(actor='John Cleese') # 未知的关键字参数\n```\n\n在调用函数的时候，关键字参数必须在位置参数后面。并且，所有的关键字参数必须与函数的定义匹配，不能传递未定义的关键字参数。在使用关键字参数的时候，参数顺序没有要求。同一个参数只能传递一个值，传递多个值会报错。\n\n当存在形式为 `**name` 的最终形式参数时，这个参数会收到一个字典，这个字典中保存着所有除了明确定义的关键字参数以外的关键字参数。当存在 `*name` 的形式参数的时候，这个参数会受到一个元组，这个元组中保存着所有除了明确定义的位置参数以外的位置参数。`*name` 参数必须在 `**name` 参数前面。\n\n```python\ndef cheeseshop(kind, *arguments, **keywords):\n    print(\"-- Do you have any\", kind, \"?\")\n    print(\"-- I'm sorry, we're all out of\", kind)\n    for arg in arguments:\n        print(arg)\n    print(\"-\" * 40)\n    for kw in keywords:\n        print(kw, \":\", keywords[kw])\n```\n\n我们这样调用这个函数：\n\n```python\ncheeseshop(\"Limburger\", \"It's very runny, sir.\",\n           \"It's really very, VERY runny, sir.\",\n           shopkeeper=\"Michael Palin\",\n           client=\"John Cleese\",\n           sketch=\"Cheese Shop Sketch\")\n```\n\n输出如下：\n\n```\n-- Do you have any Limburger ?\n-- I'm sorry, we're all out of Limburger\nIt's very runny, sir.\nIt's really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\n```\n\n### 函数传参\n\n通常情况下，给 Python 函数传参，既可以用位置参数，也可以用关键字参数。但是，传参的形式有一个约束：\n\n```\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n      -----------    ----------     ----------\n        |             |                  |\n        |        位置或关键字参数           |\n        |                                只能是关键字参数\n        只能是位置参数\n```\n\n`/` 和 `*` 是可先的，如果使用了这两个符号，则表示传递参数的形式。 `/` 之前的必须是位置参数，`*` 之后的必须是关键字参数。\n\n参考如下函数定义：\n\n```bash\n>>> def standard_arg(arg):\n...     print(arg)\n...\n>>> def pos_only_arg(arg, /):\n...     print(arg)\n...\n>>> def kwd_only_arg(*, arg):\n...     print(arg)\n...\n>>> def combined_example(pos_only, /, standard, *, kwd_only):\n...     print(pos_only, standard, kwd_only)\n```\n\n调用方式如下：\n\n```bash\n>>> standard_arg(2)\n2\n\n>>> standard_arg(arg=2)\n2\n\n>>> pos_only_arg(1)\n1\n\n>>> kwd_only_arg(arg=3)\n3\n\n>>> combined_example(1, 2, kwd_only=3)\n1 2 3\n\n>>> combined_example(1, standard=2, kwd_only=3)\n1 2 3\n```\n\n### 解包参数\n\n有些时候，函数的参数已经存在于一个列表或者字典里，我们需要对其进行解包，然后再作为参数值传给函数。\n\n我们可以使用 `*` 操作符对列表或者元组进行解包，使用 `**` 操作符对字典进行解包。\n\n```bash\n>>> args = [3, 6]\n>>> list(range(*args)) # 解包调用 list 函数\n[3, 4, 5]\n```\n\n```bash\n>>> def parrot(voltage, state='a stiff', action='voom'):\n...     print(\"-- This parrot wouldn't\", action, end=' ')\n...     print(\"if you put\", voltage, \"volts through it.\", end=' ')\n...     print(\"E's\", state, \"!\")\n...\n>>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\n>>> parrot(**d)\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\n```\n\n## Lambda 表达式\n\n通过 `lambda` 关键字可以创建 lambda 表达式。lambda 表达式本质上是函数的一个语法糖，用来创建一些简短的函数。\n\n```bash\n>>> def make_incrementor(n):\n...     return lambda x: x + n\n...\n>>> f = make_incrementor(42)\n>>> f(0)\n42\n>>> f(1)\n43\n```\n\n```bash\n>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n>>> pairs.sort(key=lambda pair: pair[1])\n>>> pairs\n[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]\n```\n",contentRendered:'<h2 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h2>\n<p>先来看一个 Fibonacci 函数的定义样例：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token string">""</span>"Print a Fibonacci series up to n.<span class="token string">""</span>"\n<span class="token punctuation">..</span>.     a, b <span class="token operator">=</span> <span class="token number">0</span>, <span class="token number">1</span>\n<span class="token punctuation">..</span>.     <span class="token keyword">while</span> a <span class="token operator">&lt;</span> n:\n<span class="token punctuation">..</span>.         print<span class="token punctuation">(</span>a, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.         a, b <span class="token operator">=</span> b, a+b\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># 调用定义好的函数</span>\n<span class="token punctuation">..</span>. fib<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">13</span> <span class="token number">21</span> <span class="token number">34</span> <span class="token number">55</span> <span class="token number">89</span> <span class="token number">144</span> <span class="token number">233</span> <span class="token number">377</span> <span class="token number">610</span> <span class="token number">987</span> <span class="token number">1597</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>函数定义必须使用 <code>def</code> 关键字，之后是函数名和参数列表。</p>\n<p>第二行的字符串是一段文档说明，可用于生成文档，同时我们可以通过 <code>fib.__doc__</code> 获取这个字符串。</p>\n<p>每个函数都有返回值，没有通过 <code>return</code> 语句返回的默认返回 <code>None</code>。</p>\n<p>每次函数在执行的时候，都会创建一个新的符号表来记录函数创建的本地变量。当需要使用某一个变量的时候，会先在当前函数的符号表中查找，如果没有找到，会再到上一层函数的符号表中查找，直到最终在全局符号表中查找。</p>\n<p>因此，在函数中，不能直接修改全局变量或者外层函数的变量的值，除非我们使用 <code>global</code> 语句后者 <code>nonlocal</code> 语句。</p>\n<p>当调用函数的时候，函数的参数也会记录到符号表中来，并且传参是值传递的方式，也就是说，如果参数是一个对象，传过来的值是指向这个对象的引用，而不是对象本身。</p>\n<p>我们还可以通过 <code>__annotations__</code> 来访问函数的元数据，比如参数的类型，返回值类型等信息。我们需要在定义函数的时候指定这些元数据。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def f<span class="token punctuation">(</span>ham: str, eggs: str <span class="token operator">=</span> <span class="token string">\'eggs\'</span><span class="token punctuation">)</span> -<span class="token operator">></span> str:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">"Annotations:"</span>, f.__annotations__<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">"Arguments:"</span>, ham, eggs<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     <span class="token builtin class-name">return</span> ham + <span class="token string">\' and \'</span> + eggs\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token string">\'spam\'</span><span class="token punctuation">)</span>\nAnnotations: <span class="token punctuation">{</span><span class="token string">\'ham\'</span><span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">\'str\'</span><span class="token operator">></span>, <span class="token string">\'return\'</span><span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">\'str\'</span><span class="token operator">></span>, <span class="token string">\'eggs\'</span><span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">\'str\'</span><span class="token operator">></span><span class="token punctuation">}</span>\nArguments: spam eggs\n<span class="token string">\'spam and eggs\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h2>\n<h3 id="参数默认值" tabindex="-1"><a class="header-anchor" href="#参数默认值" aria-hidden="true">#</a> 参数默认值</h3>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ask_ok</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> retries<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> reminder<span class="token operator">=</span><span class="token string">\'Please try again!\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>\n        ok <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> ok <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">\'y\'</span><span class="token punctuation">,</span> <span class="token string">\'ye\'</span><span class="token punctuation">,</span> <span class="token string">\'yes\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">True</span>\n        <span class="token keyword">if</span> ok <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">\'n\'</span><span class="token punctuation">,</span> <span class="token string">\'no\'</span><span class="token punctuation">,</span> <span class="token string">\'nop\'</span><span class="token punctuation">,</span> <span class="token string">\'nope\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">False</span>\n        retries <span class="token operator">=</span> retries <span class="token operator">-</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">\'invalid user response\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>reminder<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的代码定义了两个默认值，我们可以有如下是三种方式调用这个函数：</p>\n<ul>\n<li>只传第一个必填参数 <code>ask_ok(\'Do you really want to quit?\')</code></li>\n<li>传一个必填参数和一个可选参数 <code>ask_ok(\'OK to overwrite the file?\', 2)</code></li>\n<li>所有参数都传 <code>ask_ok(\'OK to overwrite the file?\', 2, \'Come on, only yes or no!\')</code></li>\n</ul>\n<p>注意，参数的默认值只计算一次，后续调用这个函数，参数的默认值不会重新计算。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> L\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>输出：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="关键字参数" tabindex="-1"><a class="header-anchor" href="#关键字参数" aria-hidden="true">#</a> 关键字参数</h3>\n<p>定义关键字参数的形式为 <code>kwarg=value</code>，如下样例：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">parrot</span><span class="token punctuation">(</span>voltage<span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">\'a stiff\'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">\'voom\'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">\'Norwegian Blue\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- This parrot wouldn\'t"</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"if you put"</span><span class="token punctuation">,</span> voltage<span class="token punctuation">,</span> <span class="token string">"volts through it."</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- Lovely plumage, the"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- It\'s"</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数 <code>parrot</code> 有一个必填参数 <code>voltage</code> 和三个可选参数（<code>state</code>，<code>action</code>，和 <code>type</code>）。我们可以这么传参：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>parrot<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>          <span class="token comment"># 1 个位置参数</span>\nparrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment"># 1 个关键字参数</span>\nparrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">\'VOOOOOM\'</span><span class="token punctuation">)</span> <span class="token comment"># 2 个关键字参数</span>\nparrot<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">\'VOOOOOM\'</span><span class="token punctuation">,</span> voltage<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token comment"># 2 个关键字参数</span>\nparrot<span class="token punctuation">(</span><span class="token string">\'a million\'</span><span class="token punctuation">,</span> <span class="token string">\'bereft of life\'</span><span class="token punctuation">,</span> <span class="token string">\'jump\'</span><span class="token punctuation">)</span> <span class="token comment"># 3 个位置参数</span>\nparrot<span class="token punctuation">(</span><span class="token string">\'a thousand\'</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">\'pushing up the daisies\'</span><span class="token punctuation">)</span> <span class="token comment"># 1 个位置参数，一个关键字参数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如下传参方式会报错：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>parrot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 必填参数未传</span>\nparrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token string">\'dead\'</span><span class="token punctuation">)</span> <span class="token comment"># 关键字参数后跟位置参数</span>\nparrot<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> voltage<span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">)</span> <span class="token comment"># 参数重复</span>\nparrot<span class="token punctuation">(</span>actor<span class="token operator">=</span><span class="token string">\'John Cleese\'</span><span class="token punctuation">)</span> <span class="token comment"># 未知的关键字参数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在调用函数的时候，关键字参数必须在位置参数后面。并且，所有的关键字参数必须与函数的定义匹配，不能传递未定义的关键字参数。在使用关键字参数的时候，参数顺序没有要求。同一个参数只能传递一个值，传递多个值会报错。</p>\n<p>当存在形式为 <code>**name</code> 的最终形式参数时，这个参数会收到一个字典，这个字典中保存着所有除了明确定义的关键字参数以外的关键字参数。当存在 <code>*name</code> 的形式参数的时候，这个参数会受到一个元组，这个元组中保存着所有除了明确定义的位置参数以外的位置参数。<code>*name</code> 参数必须在 <code>**name</code> 参数前面。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">cheeseshop</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span> <span class="token operator">*</span>arguments<span class="token punctuation">,</span> <span class="token operator">**</span>keywords<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- Do you have any"</span><span class="token punctuation">,</span> kind<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- I\'m sorry, we\'re all out of"</span><span class="token punctuation">,</span> kind<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> arg <span class="token keyword">in</span> arguments<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> kw <span class="token keyword">in</span> keywords<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>kw<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> keywords<span class="token punctuation">[</span>kw<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们这样调用这个函数：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>cheeseshop<span class="token punctuation">(</span><span class="token string">"Limburger"</span><span class="token punctuation">,</span> <span class="token string">"It\'s very runny, sir."</span><span class="token punctuation">,</span>\n           <span class="token string">"It\'s really very, VERY runny, sir."</span><span class="token punctuation">,</span>\n           shopkeeper<span class="token operator">=</span><span class="token string">"Michael Palin"</span><span class="token punctuation">,</span>\n           client<span class="token operator">=</span><span class="token string">"John Cleese"</span><span class="token punctuation">,</span>\n           sketch<span class="token operator">=</span><span class="token string">"Cheese Shop Sketch"</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>-- Do you have any Limburger ?\n-- I\'m sorry, we\'re all out of Limburger\nIt\'s very runny, sir.\nIt\'s really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="函数传参" tabindex="-1"><a class="header-anchor" href="#函数传参" aria-hidden="true">#</a> 函数传参</h3>\n<p>通常情况下，给 Python 函数传参，既可以用位置参数，也可以用关键字参数。但是，传参的形式有一个约束：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n      -----------    ----------     ----------\n        |             |                  |\n        |        位置或关键字参数           |\n        |                                只能是关键字参数\n        只能是位置参数\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>/</code> 和 <code>*</code> 是可先的，如果使用了这两个符号，则表示传递参数的形式。 <code>/</code> 之前的必须是位置参数，<code>*</code> 之后的必须是关键字参数。</p>\n<p>参考如下函数定义：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def standard_arg<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> def pos_only_arg<span class="token punctuation">(</span>arg, /<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> def kwd_only_arg<span class="token punctuation">(</span>*, arg<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> def combined_example<span class="token punctuation">(</span>pos_only, /, standard, *, kwd_only<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>pos_only, standard, kwd_only<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>调用方式如下：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> standard_arg<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token number">2</span>\n\n<span class="token operator">>></span><span class="token operator">></span> standard_arg<span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token number">2</span>\n\n<span class="token operator">>></span><span class="token operator">></span> pos_only_arg<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token number">1</span>\n\n<span class="token operator">>></span><span class="token operator">></span> kwd_only_arg<span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token number">3</span>\n\n<span class="token operator">>></span><span class="token operator">></span> combined_example<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token assign-left variable">kwd_only</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>\n\n<span class="token operator">>></span><span class="token operator">></span> combined_example<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token assign-left variable">standard</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">kwd_only</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="解包参数" tabindex="-1"><a class="header-anchor" href="#解包参数" aria-hidden="true">#</a> 解包参数</h3>\n<p>有些时候，函数的参数已经存在于一个列表或者字典里，我们需要对其进行解包，然后再作为参数值传给函数。</p>\n<p>我们可以使用 <code>*</code> 操作符对列表或者元组进行解包，使用 <code>**</code> 操作符对字典进行解包。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>*args<span class="token punctuation">))</span> <span class="token comment"># 解包调用 list 函数</span>\n<span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def parrot<span class="token punctuation">(</span>voltage, <span class="token assign-left variable">state</span><span class="token operator">=</span><span class="token string">\'a stiff\'</span>, <span class="token assign-left variable">action</span><span class="token operator">=</span><span class="token string">\'voom\'</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">"-- This parrot wouldn\'t"</span>, action, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">"if you put"</span>, voltage, <span class="token string">"volts through it."</span>, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">"E\'s"</span>, state, <span class="token string">"!"</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"voltage"</span><span class="token builtin class-name">:</span> <span class="token string">"four million"</span>, <span class="token string">"state"</span><span class="token builtin class-name">:</span> <span class="token string">"bleedin\' demised"</span>, <span class="token string">"action"</span><span class="token builtin class-name">:</span> <span class="token string">"VOOM"</span><span class="token punctuation">}</span>\n<span class="token operator">>></span><span class="token operator">></span> parrot<span class="token punctuation">(</span>**d<span class="token punctuation">)</span>\n-- This parrot wouldn<span class="token string">\'t VOOM if you put four million volts through it. E\'</span>s bleedin\' demised <span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> Lambda 表达式</h2>\n<p>通过 <code>lambda</code> 关键字可以创建 lambda 表达式。lambda 表达式本质上是函数的一个语法糖，用来创建一些简短的函数。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> def make_incrementor<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token builtin class-name">return</span> lambda x: x + n\n<span class="token punctuation">..</span>.\n<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> make_incrementor<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token number">42</span>\n<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token number">43</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">\'one\'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token string">\'two\'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">\'three\'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">\'four\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> pairs.sort<span class="token punctuation">(</span>key<span class="token operator">=</span>lambda pair: pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> pairs\n<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">\'four\'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">\'one\'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">\'three\'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token string">\'two\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-08",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/function.html",pathLocale:"/",permalink:null,slug:"function",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/function.md",filePathRelative:"courses/python/function.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/function.html.vue",componentFilePathRelative:"pages/courses/python/function.html.vue",componentFileChunkName:"v-11811d7e",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/function.html.js",dataFilePathRelative:"pages/courses/python/function.html.js",dataFileChunkName:"v-11811d7e",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/function.html",htmlFilePathRelative:"courses/python/function.html"},{key:"v-4ca84df2",path:"/courses/python/input-output.html",title:"输入与输出",lang:"zh-CN",frontmatter:{title:"输入与输出",description:"Python 中字符串格式化、文件读写等",keywords:["Python"],date:"2021-09-15T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"格式化输出",slug:"格式化输出",children:[{level:3,title:"格式化字符串字面量",slug:"格式化字符串字面量",children:[]},{level:3,title:"str.format()",slug:"str-format",children:[]},{level:3,title:"手动格式化",slug:"手动格式化",children:[]},{level:3,title:"老式的字符串格式化",slug:"老式的字符串格式化",children:[]}]},{level:2,title:"读写文件",slug:"读写文件",children:[{level:3,title:"操作文件对象",slug:"操作文件对象",children:[]},{level:3,title:"使用 json 保存结构化数据",slug:"使用-json-保存结构化数据",children:[]}]}],content:"\n## 格式化输出\n\n有四种格式化输出方式。\n\n### 格式化字符串字面量\n\n[格式化字符串字面量（formatted string literals）](https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings)，也简称 f-strings，通过在字符串前面加一个 `F` 或者 `f`，可以允许我们在字符串使用表达式（`{expression}`）。\n\n```bash\n>>> import math\n>>> print(f'The value of pi is approximately {math.pi:.3f}.')\nThe value of pi is approximately 3.142.\n```\n\n> 冒号后面是一个格式化表达式，在[Format Specification Mini-Language](https://docs.python.org/3/library/string.html#format-specification-mini-language)可以查看详细信息。\n\n### str.format()\n\n`str.format()` 的基本用法如下：\n\n```bash\n>>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni'))\nWe are the knights who say \"Ni!\"\n```\n\n我们可以给每一个表达式设置一个索引或者名称。\n\n```bash\n>>> print('{0} and {1}'.format('spam', 'eggs'))\nspam and eggs\n>>> print('{1} and {0}'.format('spam', 'eggs'))\neggs and spam\n>>> print('This {food} is {adjective}.'.format(\n...       food='spam', adjective='absolutely horrible'))\nThis spam is absolutely horrible.\n```\n\n### 手动格式化\n\n通过 `str.rjust()`、`str.ljust()`、`str.center()` 和 `srt.zfill()` 等方法来格式化。这几个函数的功能分别是右对齐、左对齐、居中对齐和左补零填充。\n\n```bash\n>>> for x in range(1, 11):\n...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')\n...     # Note use of 'end' on previous line\n...     print(repr(x*x*x).rjust(4))\n...\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000\n```\n\n### 老式的字符串格式化\n\n通过 `'string' % values` 的形式来实现字符串格式化，`string` 中的所有 `%` 都会被 `values` 中的相应元素替换。\n\n```bash\n>>> import math\n>>> print('The value of pi is approximately %5.3f.' % math.pi)\nThe value of pi is approximately 3.142.\n```\n\n更多格式化信息可以在 [printf-style String Formatting ](https://docs.python.org/3/library/stdtypes.html#old-string-formatting) 查看\n\n## 读写文件\n\n[`open()` 函数](https://docs.python.org/3/library/functions.html#open)返回一个文件对象，我们可以对这个文件对象进行一些操作。`open()` 函数支持指定读写模式，`r` 为只读模式，`w` 为只写模式，`a` 为追加模式，`r+` 为读写模式。\n\n通常来说，文件被以文本文件模式打开，我们可以通过参数来改变文件模式，比如 `b` 参数可以指定以二进制模式打开。\n\n在文本模式中，读取的文本行，换行符都是 `\\n`，Python 内部根据不同平台做了差异化处理。即读取的时候会将不同平台的换行符转换成 `\\n`，写入的时候会将 `\\n` 转换成不同平台的换行符。\n\n### 操作文件对象\n\n通过 `open()` 函数拿到文件对象以后，我们可以通过 `f.read(size)` 方法读取一段文本，未指定 `size` 则读取全部内容（当心读取大文件问题）。在到文件末尾时，`f.read()` 会返回空字符串（`''`）。\n\n```bash\n>>> f.read()\n'This is the entire file.\\n'\n>>> f.read()\n''\n```\n\n`f.readline()` 会逐行读取文本，每一行末尾都是一个换行符（`\\n`）。读到文件末尾则返回空字符串。\n\n```bash\n>>> f.readline()\n'This is the first line of the file.\\n'\n>>> f.readline()\n'Second line of the file\\n'\n>>> f.readline()\n''\n```\n\n我们可以通过 `list(f)` 或者 `f.readlines()` 读取文件内所有的行。\n\n`f.write(string)` 可以写入文件，返回写入的文本长度。\n\n```bash\n>>> f.write('This is a test\\n')\n15\n```\n\n`f.tell()` 返回当前读取的位置。我们可以通过 `f.seek(offset, whence)` 来改变读取位置。当 `whence` 为 0 时，从文件开始计算偏移量；当 `whence` 为 1 时，从当前读取位置计算偏移量；当 `whence` 为 2 时，从文件末尾开始计算偏移量。\n\n### 使用 json 保存结构化数据\n\n我们可以通过 [`json`](https://docs.python.org/3/library/json.html#module-json) 这个模块。\n\n```bash\n>>> import json\n>>> x = [1, 'simple', 'list']\n>>> json.dumps(x)\n'[1, \"simple\", \"list\"]'\n```\n\n如果已经拿到文件对象，则可以直接通过 `dump` 和 `load` 函数来实现写入和读取文件内容。\n\n```python\njson.dump(x, f)\nx = json.load(f)\n```\n",contentRendered:'<h2 id="格式化输出" tabindex="-1"><a class="header-anchor" href="#格式化输出" aria-hidden="true">#</a> 格式化输出</h2>\n<p>有四种格式化输出方式。</p>\n<h3 id="格式化字符串字面量" tabindex="-1"><a class="header-anchor" href="#格式化字符串字面量" aria-hidden="true">#</a> 格式化字符串字面量</h3>\n<p><a href="https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings" target="_blank" rel="noopener noreferrer">格式化字符串字面量（formatted string literals）<OutboundLink/></a>，也简称 f-strings，通过在字符串前面加一个 <code>F</code> 或者 <code>f</code>，可以允许我们在字符串使用表达式（<code>{expression}</code>）。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> math\n<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span>f<span class="token string">\'The value of pi is approximately {math.pi:.3f}.\'</span><span class="token punctuation">)</span>\nThe value of pi is approximately <span class="token number">3.142</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote>\n<p>冒号后面是一个格式化表达式，在<a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" target="_blank" rel="noopener noreferrer">Format Specification Mini-Language<OutboundLink/></a>可以查看详细信息。</p>\n</blockquote>\n<h3 id="str-format" tabindex="-1"><a class="header-anchor" href="#str-format" aria-hidden="true">#</a> str.format()</h3>\n<p><code>str.format()</code> 的基本用法如下：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'We are the {} who say "{}!"\'</span>.format<span class="token punctuation">(</span><span class="token string">\'knights\'</span>, <span class="token string">\'Ni\'</span><span class="token punctuation">))</span>\nWe are the knights <span class="token function">who</span> say <span class="token string">"Ni!"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们可以给每一个表达式设置一个索引或者名称。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'{0} and {1}\'</span>.format<span class="token punctuation">(</span><span class="token string">\'spam\'</span>, <span class="token string">\'eggs\'</span><span class="token punctuation">))</span>\nspam and eggs\n<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'{1} and {0}\'</span>.format<span class="token punctuation">(</span><span class="token string">\'spam\'</span>, <span class="token string">\'eggs\'</span><span class="token punctuation">))</span>\neggs and spam\n<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'This {food} is {adjective}.\'</span>.format<span class="token punctuation">(</span>\n<span class="token punctuation">..</span>.       <span class="token assign-left variable">food</span><span class="token operator">=</span><span class="token string">\'spam\'</span>, <span class="token assign-left variable">adjective</span><span class="token operator">=</span><span class="token string">\'absolutely horrible\'</span><span class="token punctuation">))</span>\nThis spam is absolutely horrible.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="手动格式化" tabindex="-1"><a class="header-anchor" href="#手动格式化" aria-hidden="true">#</a> 手动格式化</h3>\n<p>通过 <code>str.rjust()</code>、<code>str.ljust()</code>、<code>str.center()</code> 和 <code>srt.zfill()</code> 等方法来格式化。这几个函数的功能分别是右对齐、左对齐、居中对齐和左补零填充。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">11</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>.rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>, repr<span class="token punctuation">(</span>x*x<span class="token punctuation">)</span>.rjust<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     <span class="token comment"># Note use of \'end\' on previous line</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>x*x*x<span class="token punctuation">)</span>.rjust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.\n <span class="token number">1</span>   <span class="token number">1</span>    <span class="token number">1</span>\n <span class="token number">2</span>   <span class="token number">4</span>    <span class="token number">8</span>\n <span class="token number">3</span>   <span class="token number">9</span>   <span class="token number">27</span>\n <span class="token number">4</span>  <span class="token number">16</span>   <span class="token number">64</span>\n <span class="token number">5</span>  <span class="token number">25</span>  <span class="token number">125</span>\n <span class="token number">6</span>  <span class="token number">36</span>  <span class="token number">216</span>\n <span class="token number">7</span>  <span class="token number">49</span>  <span class="token number">343</span>\n <span class="token number">8</span>  <span class="token number">64</span>  <span class="token number">512</span>\n <span class="token number">9</span>  <span class="token number">81</span>  <span class="token number">729</span>\n<span class="token number">10</span> <span class="token number">100</span> <span class="token number">1000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="老式的字符串格式化" tabindex="-1"><a class="header-anchor" href="#老式的字符串格式化" aria-hidden="true">#</a> 老式的字符串格式化</h3>\n<p>通过 <code>\'string\' % values</code> 的形式来实现字符串格式化，<code>string</code> 中的所有 <code>%</code> 都会被 <code>values</code> 中的相应元素替换。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> math\n<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'The value of pi is approximately %5.3f.\'</span> % math.pi<span class="token punctuation">)</span>\nThe value of pi is approximately <span class="token number">3.142</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>更多格式化信息可以在 <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" target="_blank" rel="noopener noreferrer">printf-style String Formatting <OutboundLink/></a> 查看</p>\n<h2 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件" aria-hidden="true">#</a> 读写文件</h2>\n<p><a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener noreferrer"><code>open()</code> 函数<OutboundLink/></a>返回一个文件对象，我们可以对这个文件对象进行一些操作。<code>open()</code> 函数支持指定读写模式，<code>r</code> 为只读模式，<code>w</code> 为只写模式，<code>a</code> 为追加模式，<code>r+</code> 为读写模式。</p>\n<p>通常来说，文件被以文本文件模式打开，我们可以通过参数来改变文件模式，比如 <code>b</code> 参数可以指定以二进制模式打开。</p>\n<p>在文本模式中，读取的文本行，换行符都是 <code>\\n</code>，Python 内部根据不同平台做了差异化处理。即读取的时候会将不同平台的换行符转换成 <code>\\n</code>，写入的时候会将 <code>\\n</code> 转换成不同平台的换行符。</p>\n<h3 id="操作文件对象" tabindex="-1"><a class="header-anchor" href="#操作文件对象" aria-hidden="true">#</a> 操作文件对象</h3>\n<p>通过 <code>open()</code> 函数拿到文件对象以后，我们可以通过 <code>f.read(size)</code> 方法读取一段文本，未指定 <code>size</code> 则读取全部内容（当心读取大文件问题）。在到文件末尾时，<code>f.read()</code> 会返回空字符串（<code>\'\'</code>）。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> f.read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">\'This is the entire file.\\n\'</span>\n<span class="token operator">>></span><span class="token operator">></span> f.read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">\'\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>f.readline()</code> 会逐行读取文本，每一行末尾都是一个换行符（<code>\\n</code>）。读到文件末尾则返回空字符串。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">\'This is the first line of the file.\\n\'</span>\n<span class="token operator">>></span><span class="token operator">></span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">\'Second line of the file\\n\'</span>\n<span class="token operator">>></span><span class="token operator">></span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">\'\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们可以通过 <code>list(f)</code> 或者 <code>f.readlines()</code> 读取文件内所有的行。</p>\n<p><code>f.write(string)</code> 可以写入文件，返回写入的文本长度。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> f.write<span class="token punctuation">(</span><span class="token string">\'This is a test\\n\'</span><span class="token punctuation">)</span>\n<span class="token number">15</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>f.tell()</code> 返回当前读取的位置。我们可以通过 <code>f.seek(offset, whence)</code> 来改变读取位置。当 <code>whence</code> 为 0 时，从文件开始计算偏移量；当 <code>whence</code> 为 1 时，从当前读取位置计算偏移量；当 <code>whence</code> 为 2 时，从文件末尾开始计算偏移量。</p>\n<h3 id="使用-json-保存结构化数据" tabindex="-1"><a class="header-anchor" href="#使用-json-保存结构化数据" aria-hidden="true">#</a> 使用 json 保存结构化数据</h3>\n<p>我们可以通过 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener noreferrer"><code>json</code><OutboundLink/></a> 这个模块。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> json\n<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token string">\'simple\'</span>, <span class="token string">\'list\'</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> json.dumps<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token string">\'[1, "simple", "list"]\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果已经拿到文件对象，则可以直接通过 <code>dump</code> 和 <code>load</code> 函数来实现写入和读取文件内容。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">)</span>\nx <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-15",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/input-output.html",pathLocale:"/",permalink:null,slug:"input-output",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/input-output.md",filePathRelative:"courses/python/input-output.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/input-output.html.vue",componentFilePathRelative:"pages/courses/python/input-output.html.vue",componentFileChunkName:"v-4ca84df2",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/input-output.html.js",dataFilePathRelative:"pages/courses/python/input-output.html.js",dataFileChunkName:"v-4ca84df2",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/input-output.html",htmlFilePathRelative:"courses/python/input-output.html"},{key:"v-7207a2aa",path:"/courses/python/module.html",title:"模块",lang:"zh-CN",frontmatter:{title:"模块",description:"Python 中的模块",keywords:["Python"],date:"2021-09-09T00:00:00.000Z",key:4},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"查找模块",slug:"查找模块",children:[]},{level:2,title:"标准模块",slug:"标准模块",children:[]},{level:2,title:"包",slug:"包",children:[{level:3,title:"包内引用",slug:"包内引用",children:[]}]}],content:"\n随着程序越来越复杂，我们需要通过模块来管理代码。Python 中的模块是一个以 `.py` 结尾的文件。文件名就是模块名，在模块内部可以通过 `__name__` 来访问。\n\n在模块内部，模块有一个全局符号表，保存所有模块内的全局变量和函数。我们可以使用 `modname.itemname` 来访问这些全局变量和函数。模块内的代码，会在模块被导入的时候执行一次，且只会执行一次。\n\n我们可以通过 `import` 语句导入其他模块，`import` 语句有很多变种，我们来看几种用法。\n\n```bash\n>>> from fibo import fib, fib2 # 从 fibo 模块中导入 fib 和 fib2\n>>> import fibo # 导入 fibo 模块，之后通过 fibo.fib 的方式使用模块内的函数和变量\n>>> from fibo import * # 导入 fibo 模块中所有的变量和函数到当前模块中\n>>> import fibo as fib # 导入模块 fibo 并命名为 fib\n>>> from fibo import fib as fibonacci # 导入 fibo 模块中的 fib ，并命名为 fibonacci\n```\n\n当我们导入一个模块的时候，导入的信息会被存放在模块的符号表中。\n\n如果模块被当做脚本来执行，那么模块的 `__name__` 值会被设为 `__main__`，因此，我们可以在模块内通过这个特性来判断当前模块是被当做脚本来执行来时被当做模块是使用的。\n\n```python\nif __name__ == \"__main__\":\n    import sys\n    fib(int(sys.argv[1]))\n```\n\n此时我们通过 `python fibo.py <arguments>` 来运行模块，上面的代码会被执行，而通过 `import fibo` 导入模块时，上面的代码不会被执行。\n\n我们可以通过 `dir()` 函数来查看模块中定义了哪些变量和函数，比如：\n\n```bash\n>>> a = [1, 2, 3, 4, 5]\n>>> import fibo\n>>> fib = fibo.fib\n>>> dir()\n['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']\n```\n\n`dir()` 无法查看内置的变量和函数，我们可以通过 `builtins` 这个标准模块来查看：\n\n```bash\n>>> import builtins\n>>> dir(builtins)\n```\n\n## 查找模块\n\n假设我们现在要导入一个名为 `spam` 的模块。Python 首先会在内置的模块中查找，如果没找到，则会在 `sys.path` 指定的一堆目录中查找名为 `spam.py` 的文件。\n\n`sys.path` 指定的目录包含下面这些：\n* 包含当前脚本的目录\n* `PYTHONPATH` 环境变量指定的目录（类似于 shell 中的 PATH）\n* 安装环境的默认目录\n\n在初始化完成之后，可以通过代码修改 `sys.path`，包含当前脚本的目录处在模块查找路径的最前面。也就是说，如果在当前目录中有一个模块与系统标准库模块名称相同，那么当我们导入这个名称的模块时，会先命中当前目录中模块。\n\n## 标准模块\n\nPython 有很多标准模块，有些与特定的运行平台相关，有些是通用模块。比如 `sys` 模块就是通用模块。\n\n```bash\n>>> import sys\n>>> sys.ps1\n'>>> '\n>>> sys.ps2\n'... '\n>>> sys.ps1 = 'C> '\nC> print('Yuck!')\nYuck!\nC>\n```\n\n```bash\n>>> import sys\n>>> sys.path.append('/ufs/guido/lib/python')  # 修改 Python 查找模块的路径\n```\n\n## 包\n\n在 Python 中，用包来管理模块。`A.B` 表示使用包 `A` 中的模块 `B`。\n\n下面的目录结构展示了一个音频处理程序的包结构。\n```\nsound/                          # 顶层包\n      __init__.py               # 包初始化文件\n      formats/                  # 格式转换子包\n              __init__.py       # 包初始化文件\n              wavread.py\n              wavwrite.py\n              aiffread.py\n              aiffwrite.py\n              auread.py\n              auwrite.py\n              ...\n      effects/                  # 声音处理子包\n              __init__.py       # 包初始化文件\n              echo.py\n              surround.py\n              reverse.py\n              ...\n      filters/                  # 过滤器子包\n              __init__.py       # 包初始化文件\n              equalizer.py\n              vocoder.py\n              karaoke.py\n              ...\n```\n\n文件 `__init__.py` 是必须的，Python 通过这个文件来判断当前目录是一个包还是一个目录。`__init__.py` 可以是一个空文件，也可以做一些初始化工作。\n\n我们可以直接导入包中的子模块，\n\n```python\nimport sound.effects.echo\n```\n\n在使用这个模块的时候，我们必须使用全名，\n\n```python\nsound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\n```\n\n当然我们还可以这样导入模块：\n\n```python\nfrom sound.effects import echo\n\necho.echofilter(input, output, delay=0.7, atten=4)\n\nfrom sound.effects.echo import echofilter\n\nechofilter(input, output, delay=0.7, atten=4)\n```\n\n当使用 `from package import item` 导入的时候，`item` 可以是包中的模块、子包，甚至可以是包中定义的变量或函数。当 Python 找不到 `item` 的时候，会抛出 `ImportError` 错误。\n\n当我们使用 `from package import *` 会发生什么呢？如果我们在包的 `__init__.py` 中定义了 `__all__` 变量之后，`from package import *` 会导入 `__all__` 中定义的所有变量。\n\n比如在 `sound/effects/__init__.py` 中定义了\n\n```python\n__all__ = [\"echo\", \"surround\", \"reverse\"]\n```\n\n那么，当使用 `from sound.effects import *` 时，只会导入 `echo`、`surround`、`reverse` 三个变量。\n\n如果 `__init__.py` 中没有定义 `__all__` 呢？Python 不会导入所有的子包和模块。Python 会先确保 `sound.effects` 已经导入，然后导入这个包中定义的任何名字，即 `__init__.py` 中定义的名字，以及 `__init__.py` 中导入的任何子模块的名字。\n\n在编程实践中，我们不建议使用 `from package import *`，因为这样会导致代码的意图不清晰，我们应该使用 `from package import specific_submodule` 的方式。\n\n### 包内引用\n\n当一个包内有多个子包的时候，子包之前可能会有相互引用的需求。\n\n我们可以通过绝对路径的方式来引用其他子包。\n\n比如 `sound.filters.vocoder` 可以通过 `from sound.effects import echo` 来导入 `echo` 模块。\n\n也可以通过相对路径的方式来引用其他子包。\n\n比如：\n\n```python\nfrom . import echo\nfrom .. import formats\nfrom ..filters import equalizer\n```\n\n注意，相对路径是相对于当前模块所在的位置。同时，当模块被当做主模块 `__main__` 使用时，必须通过绝对路径的形式引用其他模块。\n",contentRendered:'<p>随着程序越来越复杂，我们需要通过模块来管理代码。Python 中的模块是一个以 <code>.py</code> 结尾的文件。文件名就是模块名，在模块内部可以通过 <code>__name__</code> 来访问。</p>\n<p>在模块内部，模块有一个全局符号表，保存所有模块内的全局变量和函数。我们可以使用 <code>modname.itemname</code> 来访问这些全局变量和函数。模块内的代码，会在模块被导入的时候执行一次，且只会执行一次。</p>\n<p>我们可以通过 <code>import</code> 语句导入其他模块，<code>import</code> 语句有很多变种，我们来看几种用法。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> from fibo <span class="token function">import</span> fib, fib2 <span class="token comment"># 从 fibo 模块中导入 fib 和 fib2</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> fibo <span class="token comment"># 导入 fibo 模块，之后通过 fibo.fib 的方式使用模块内的函数和变量</span>\n<span class="token operator">>></span><span class="token operator">></span> from fibo <span class="token function">import</span> * <span class="token comment"># 导入 fibo 模块中所有的变量和函数到当前模块中</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> fibo as fib <span class="token comment"># 导入模块 fibo 并命名为 fib</span>\n<span class="token operator">>></span><span class="token operator">></span> from fibo <span class="token function">import</span> fib as fibonacci <span class="token comment"># 导入 fibo 模块中的 fib ，并命名为 fibonacci</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当我们导入一个模块的时候，导入的信息会被存放在模块的符号表中。</p>\n<p>如果模块被当做脚本来执行，那么模块的 <code>__name__</code> 值会被设为 <code>__main__</code>，因此，我们可以在模块内通过这个特性来判断当前模块是被当做脚本来执行来时被当做模块是使用的。</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    <span class="token keyword">import</span> sys\n    fib<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时我们通过 <code>python fibo.py &lt;arguments&gt;</code> 来运行模块，上面的代码会被执行，而通过 <code>import fibo</code> 导入模块时，上面的代码不会被执行。</p>\n<p>我们可以通过 <code>dir()</code> 函数来查看模块中定义了哪些变量和函数，比如：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> fibo\n<span class="token operator">>></span><span class="token operator">></span> fib <span class="token operator">=</span> fibo.fib\n<span class="token operator">>></span><span class="token operator">></span> dir<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token string">\'__builtins__\'</span>, <span class="token string">\'__name__\'</span>, <span class="token string">\'a\'</span>, <span class="token string">\'fib\'</span>, <span class="token string">\'fibo\'</span>, <span class="token string">\'sys\'</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>dir()</code> 无法查看内置的变量和函数，我们可以通过 <code>builtins</code> 这个标准模块来查看：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> builtins\n<span class="token operator">>></span><span class="token operator">></span> dir<span class="token punctuation">(</span>builtins<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="查找模块" tabindex="-1"><a class="header-anchor" href="#查找模块" aria-hidden="true">#</a> 查找模块</h2>\n<p>假设我们现在要导入一个名为 <code>spam</code> 的模块。Python 首先会在内置的模块中查找，如果没找到，则会在 <code>sys.path</code> 指定的一堆目录中查找名为 <code>spam.py</code> 的文件。</p>\n<p><code>sys.path</code> 指定的目录包含下面这些：</p>\n<ul>\n<li>包含当前脚本的目录</li>\n<li><code>PYTHONPATH</code> 环境变量指定的目录（类似于 shell 中的 PATH）</li>\n<li>安装环境的默认目录</li>\n</ul>\n<p>在初始化完成之后，可以通过代码修改 <code>sys.path</code>，包含当前脚本的目录处在模块查找路径的最前面。也就是说，如果在当前目录中有一个模块与系统标准库模块名称相同，那么当我们导入这个名称的模块时，会先命中当前目录中模块。</p>\n<h2 id="标准模块" tabindex="-1"><a class="header-anchor" href="#标准模块" aria-hidden="true">#</a> 标准模块</h2>\n<p>Python 有很多标准模块，有些与特定的运行平台相关，有些是通用模块。比如 <code>sys</code> 模块就是通用模块。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> sys\n<span class="token operator">>></span><span class="token operator">></span> sys.ps1\n<span class="token string">\'>>> \'</span>\n<span class="token operator">>></span><span class="token operator">></span> sys.ps2\n<span class="token string">\'... \'</span>\n<span class="token operator">>></span><span class="token operator">></span> sys.ps1 <span class="token operator">=</span> <span class="token string">\'C> \'</span>\nC<span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">\'Yuck!\'</span><span class="token punctuation">)</span>\nYuck<span class="token operator">!</span>\nC<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> sys\n<span class="token operator">>></span><span class="token operator">></span> sys.path.append<span class="token punctuation">(</span><span class="token string">\'/ufs/guido/lib/python\'</span><span class="token punctuation">)</span>  <span class="token comment"># 修改 Python 查找模块的路径</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="包" tabindex="-1"><a class="header-anchor" href="#包" aria-hidden="true">#</a> 包</h2>\n<p>在 Python 中，用包来管理模块。<code>A.B</code> 表示使用包 <code>A</code> 中的模块 <code>B</code>。</p>\n<p>下面的目录结构展示了一个音频处理程序的包结构。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>sound/                          # 顶层包\n      __init__.py               # 包初始化文件\n      formats/                  # 格式转换子包\n              __init__.py       # 包初始化文件\n              wavread.py\n              wavwrite.py\n              aiffread.py\n              aiffwrite.py\n              auread.py\n              auwrite.py\n              ...\n      effects/                  # 声音处理子包\n              __init__.py       # 包初始化文件\n              echo.py\n              surround.py\n              reverse.py\n              ...\n      filters/                  # 过滤器子包\n              __init__.py       # 包初始化文件\n              equalizer.py\n              vocoder.py\n              karaoke.py\n              ...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>文件 <code>__init__.py</code> 是必须的，Python 通过这个文件来判断当前目录是一个包还是一个目录。<code>__init__.py</code> 可以是一个空文件，也可以做一些初始化工作。</p>\n<p>我们可以直接导入包中的子模块，</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">import</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在使用这个模块的时候，我们必须使用全名，</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo<span class="token punctuation">.</span>echofilter<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> atten<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当然我们还可以这样导入模块：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects <span class="token keyword">import</span> echo\n\necho<span class="token punctuation">.</span>echofilter<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> atten<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo <span class="token keyword">import</span> echofilter\n\nechofilter<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> atten<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当使用 <code>from package import item</code> 导入的时候，<code>item</code> 可以是包中的模块、子包，甚至可以是包中定义的变量或函数。当 Python 找不到 <code>item</code> 的时候，会抛出 <code>ImportError</code> 错误。</p>\n<p>当我们使用 <code>from package import *</code> 会发生什么呢？如果我们在包的 <code>__init__.py</code> 中定义了 <code>__all__</code> 变量之后，<code>from package import *</code> 会导入 <code>__all__</code> 中定义的所有变量。</p>\n<p>比如在 <code>sound/effects/__init__.py</code> 中定义了</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">,</span> <span class="token string">"surround"</span><span class="token punctuation">,</span> <span class="token string">"reverse"</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>那么，当使用 <code>from sound.effects import *</code> 时，只会导入 <code>echo</code>、<code>surround</code>、<code>reverse</code> 三个变量。</p>\n<p>如果 <code>__init__.py</code> 中没有定义 <code>__all__</code> 呢？Python 不会导入所有的子包和模块。Python 会先确保 <code>sound.effects</code> 已经导入，然后导入这个包中定义的任何名字，即 <code>__init__.py</code> 中定义的名字，以及 <code>__init__.py</code> 中导入的任何子模块的名字。</p>\n<p>在编程实践中，我们不建议使用 <code>from package import *</code>，因为这样会导致代码的意图不清晰，我们应该使用 <code>from package import specific_submodule</code> 的方式。</p>\n<h3 id="包内引用" tabindex="-1"><a class="header-anchor" href="#包内引用" aria-hidden="true">#</a> 包内引用</h3>\n<p>当一个包内有多个子包的时候，子包之前可能会有相互引用的需求。</p>\n<p>我们可以通过绝对路径的方式来引用其他子包。</p>\n<p>比如 <code>sound.filters.vocoder</code> 可以通过 <code>from sound.effects import echo</code> 来导入 <code>echo</code> 模块。</p>\n<p>也可以通过相对路径的方式来引用其他子包。</p>\n<p>比如：</p>\n<div class="language-python ext-py line-numbers-mode"><pre v-pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> echo\n<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">import</span> formats\n<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>filters <span class="token keyword">import</span> equalizer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，相对路径是相对于当前模块所在的位置。同时，当模块被当做主模块 <code>__main__</code> 使用时，必须通过绝对路径的形式引用其他模块。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-09-09",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/python/module.html",pathLocale:"/",permalink:null,slug:"module",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/python/module.md",filePathRelative:"courses/python/module.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/module.html.vue",componentFilePathRelative:"pages/courses/python/module.html.vue",componentFileChunkName:"v-7207a2aa",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/python/module.html.js",dataFilePathRelative:"pages/courses/python/module.html.js",dataFileChunkName:"v-7207a2aa",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/python/module.html",htmlFilePathRelative:"courses/python/module.html"}]}},561:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const p=(0,e.Wm)("div",{class:"custom-container tip"},[(0,e.Wm)("p",{class:"custom-container-title"},"TIP"),(0,e.Wm)("p",null,"Python 学习笔记")],-1),t=(0,e.uE)('<blockquote><p>参考链接：https://docs.python.org/3.9/</p></blockquote><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',2),o={render:function(n,s){const a=(0,e.up)("ArticleList");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)(a,{noTag:!0}),t],64)}}}}]);