"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7802],{4777:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-b1c699d8",path:"/solutions/micro-frontend/single-spa.html",title:"single-spa 技术分析",lang:"zh-CN",frontmatter:{title:"single-spa 技术分析",description:"对目前主流的 single-spa 框架进行技术分析，了解技术原理。",keywords:["micro frontend","微前端","single spa"],date:"2021-12-01T00:00:00.000Z",key:2,tags:["技术分析"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"核心能力",slug:"核心能力",children:[{level:3,title:"主应用的配置信息",slug:"主应用的配置信息",children:[]},{level:3,title:"子应用的生命周期函数",slug:"子应用的生命周期函数",children:[]}]},{level:2,title:"其他概念",slug:"其他概念",children:[{level:3,title:"子应用的分类",slug:"子应用的分类",children:[]},{level:3,title:"Layout Engine",slug:"layout-engine",children:[]},{level:3,title:"关于 SystemJS",slug:"关于-systemjs",children:[]}]},{level:2,title:"隔离",slug:"隔离",children:[{level:3,title:"样式隔离",slug:"样式隔离",children:[]},{level:3,title:"JS 隔离",slug:"js-隔离",children:[]}]},{level:2,title:"小结",slug:"小结",children:[]}],filePathRelative:"solutions/micro-frontend/single-spa.md"}},5134:(n,s,a)=>{a.r(s),a.d(s,{default:()=>zn});var p=a(6252);const t=(0,p.Uk)("在"),e=(0,p.Uk)("理解微前端技术原理"),o=(0,p.Uk)("中我们介绍了微前端的概念和核心技术原理。本篇我们结合目前业内主流的微前端实现 "),l={href:"https://single-spa.js.org/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("single-spa"),u=(0,p.Uk)(" 来说明在生产实践中是如何实现微前端的。"),r=(0,p.uE)('<p>single-spa 的文档略显凌乱，概念也比较多，初次接触它的同学容易抓不住重点。今天我们尝试整理出一条清晰的脉络，让感兴趣的同学能够快速理解它。</p><p>在 single-spa 的架构设计中，有两种主要角色，主应用和子应用，如下图。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLUB9ZzzDTKvvFMG7XFbqx0S9rHECxeV6TkRZWMXLqTUsGTUAGSC8buSpba9gN0dGI0000" alt="uml diagram"><p>主应用力求足够简单，只负责子应用的调度，业务逻辑都由子应用来承担。</p><h2 id="核心能力" tabindex="-1"><a class="header-anchor" href="#核心能力" aria-hidden="true">#</a> 核心能力</h2><p>其实总结来说，single-spa 的核心就是定义了一套协议。通过这套协议，主应用可以方便的知道在什么情况下激活哪个子应用。而这套协议主要包含两个部分：主应用的<strong>配置信息</strong>和子应用的<strong>生命周期函数</strong>。</p><h3 id="主应用的配置信息" tabindex="-1"><a class="header-anchor" href="#主应用的配置信息" aria-hidden="true">#</a> 主应用的配置信息</h3>',7),i=(0,p.Uk)("在 single-spa 中，这个配置信息叫 "),k={href:"https://single-spa.js.org/docs/configuration",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("Root Config"),b=(0,p.Uk)("。"),g=(0,p.uE)('<p>下面的样例展示了配置信息的结构：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;subApp1&quot;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> System<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/subApp1/code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  activeWhen<span class="token operator">:</span> <span class="token string">&quot;/subApp1&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>name</code> 就是子应用的名称，<code>app</code> 函数告诉主应用如何加载子应用的代码，<code>activeWhen</code> 告诉主应用何时激活子应用，也可以为一个返回布尔值的函数。</p>',3),d=(0,p.Uk)("通过 "),h={href:"https://single-spa.js.org/docs/api#registerapplication",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Wm)("code",null,"registerApplication",-1),v=(0,p.Uk)(" 将子应用的信息注册到主应用中。"),y=(0,p.uE)('<p>样例如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>singleSpa<span class="token punctuation">.</span><span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;appName&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> System<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&#39;appName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    activeWhen<span class="token operator">:</span> <span class="token string">&#39;/appName&#39;</span><span class="token punctuation">,</span>\n    customProps<span class="token operator">:</span> <span class="token punctuation">{</span>\n        authToken<span class="token operator">:</span> <span class="token string">&#39;xc67f6as87f7s9d&#39;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="子应用的生命周期函数" tabindex="-1"><a class="header-anchor" href="#子应用的生命周期函数" aria-hidden="true">#</a> 子应用的生命周期函数</h3><p>主应用在管理子应用的时候，通过子应用暴露的生命周期函数来实现子应用的启动和卸载。</p><p>主要有如下几个生命周期函数。</p><ul><li><p>bootstrap</p><p>这个生命周期函数会在应用第一次挂载前执行一次。就是说在子应用的代码加载完成以后，页面渲染之前执行。函数形式如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise\n    <span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 可以在这里部署只执行一次的初始化代码</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bootstrapped!&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>mount</p><p>当主应用判定需要激活这个子应用时会调用这个生命周期函数。在这个函数中实现子应用的挂载、页面渲染等逻辑。这个函数也只会执行一次。我们可以简单的理解为 <code>ReactDOM.render</code> 操作。函数形式如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 页面渲染逻辑</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mounted!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>unmount</p><p>当主应用判定需要卸载这个子应用时会调用这个生命周期函数。在这个函数中实现组件卸载、清理事件监听等逻辑。我们可以简单的理解为 <code>ReactDOM.unmountComponentAtNode</code> 操作。函数形式如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 页面卸载逻辑</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;unmounted!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><blockquote><p>观察每个生命周期函数的签名我们可以发现，每个函数都有一个 <code>props</code> 参数，主应用可以通过这个参数向子应用传递一些额外信息，后面会做说明。</p></blockquote>',7),q=(0,p.Uk)("为了方便各种技术栈的子应用能方便的接入，single-spa 提供了很多工具，可以在这里查到"),x={href:"https://single-spa.js.org/docs/ecosystem#help-for-frameworks",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("官方维护的工具列表"),w=(0,p.Uk)("。"),j=(0,p.Wm)("h2",{id:"其他概念",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#其他概念","aria-hidden":"true"},"#"),(0,p.Uk)(" 其他概念")],-1),U=(0,p.Wm)("h3",{id:"子应用的分类",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#子应用的分类","aria-hidden":"true"},"#"),(0,p.Uk)(" 子应用的分类")],-1),S=(0,p.Wm)("p",null,"single-spa 根据职能的不同，把子应用划分成三类：",-1),_={href:"https://single-spa.js.org/docs/module-types#applications",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("Application"),L=(0,p.Uk)(" 表示普通的子应用，需要实现上面提到的生命周期函数；"),C={href:"https://single-spa.js.org/docs/module-types#parcels",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("Parcel"),M=(0,p.Uk)(" 可以理解为可以跨子应用复用的业务单元，需要实现"),P={href:"https://single-spa.js.org/docs/parcels-api",target:"_blank",rel:"noopener noreferrer"},J=(0,p.Uk)("与之对应的生命周期函数"),G=(0,p.Uk)("；"),R={href:"https://single-spa.js.org/docs/module-types#utilities",target:"_blank",rel:"noopener noreferrer"},z=(0,p.Uk)("Utility"),N=(0,p.Uk)(" 表示一段可复用的逻辑，比如一个函数等，不做页面渲染。"),T=(0,p.Wm)("p",null,"不难看出，Parcel 和 Utility 都是为了共享和复用，也算是 single-spa 在框架层面给出的一种复用方案。",-1),B=(0,p.Wm)("h3",{id:"layout-engine",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#layout-engine","aria-hidden":"true"},"#"),(0,p.Uk)(" Layout Engine")],-1),D=(0,p.Wm)("p",null,"虽然 single-spa 的理念是让主应用尽可能的简单，但是在实践中，主应用通常会负责通用的顶部、底部通栏的渲染。这个时候，如何确定子应用的渲染位置就成了一个问题。",-1),F=(0,p.Uk)("single-spa 提供了 "),I={href:"https://single-spa.js.org/docs/layout-overview",target:"_blank",rel:"noopener noreferrer"},O=(0,p.Uk)("Layout Engine"),H=(0,p.Uk)("的方案。样例代码如下，与 Vue 颇为相似，详细的可以查看文档，这里不做过多叙述。"),V=(0,p.uE)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>single-spa-layout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>single-spa-router</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>topnav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@organization/nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>settings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@organization/settings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>route</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clients<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@organization/clients<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>route</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@organization/footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>single-spa-router</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="关于-systemjs" tabindex="-1"><a class="header-anchor" href="#关于-systemjs" aria-hidden="true">#</a> 关于 SystemJS</h3>',2),Z=(0,p.Uk)("很多人在提到 single-spa 的时候都会提到 "),X={href:"https://github.com/systemjs/systemjs",target:"_blank",rel:"noopener noreferrer"},K=(0,p.Uk)("SystemJS"),Q=(0,p.Uk)("，认为 SystemJS 是 single-spa 的核心之一。其实这是一个误区， SystemJS 并不是 single-spa 所必须的。"),Y=(0,p.Uk)("前面说到，子应用要实现生命周期函数，然后导出给主应用使用。关键就是这个“导出”的实现，这就涉及到 "),$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},nn=(0,p.Uk)("JavaScript 的模块化"),sn=(0,p.Uk)("问题。"),an=(0,p.uE)('<p>在一些现代浏览器中，我们可以通过在 <code>&lt;script&gt;</code> 标签上添加 <code>type=&quot;module&quot;</code> 来实现导入导出。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// or an inline script</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span>helperMethod<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./providesHelperMethod.js&#39;</span><span class="token punctuation">;</span>\n  <span class="token function">helperMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n// providesHelperMethod.js\nexport function helperMethod() {\n  console.info(`I&#39;m helping!`);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),pn=(0,p.Uk)("但是如果我们想要实现 "),tn=(0,p.Wm)("code",null,"import axios from 'axios'",-1),en=(0,p.Uk)(" 还需要借助于 "),on={href:"https://github.com/WICG/import-maps",target:"_blank",rel:"noopener noreferrer"},ln=(0,p.Wm)("code",null,"importmap",-1),cn=(0,p.Uk)("。"),un=(0,p.uE)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>importmap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token punctuation">{</span>\n       <span class="token string">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string">&quot;axios&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://cdn.jsdelivr.net/npm/axios@0.20.0/dist/axios.min.js&quot;</span>\n       <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在低版本浏览器中，我们就需要借助于一些 “Polyfill” 来实现模块化了。SystemJS 就是解决这个问题的。所以 single-spa 的样例中大量采用了 SystemJS 来加载应用。</p><p>其实也可以不用 SystemJS，webpack 也可以实现类似的能力，但是会加深主应用与子应用间的工程耦合。</p><h2 id="隔离" tabindex="-1"><a class="header-anchor" href="#隔离" aria-hidden="true">#</a> 隔离</h2>',4),rn=(0,p.Uk)("在"),kn=(0,p.Uk)("理解微前端技术原理"),mn=(0,p.Uk)("中，我们花了很长的篇幅来说明子应用隔离的思路。那么，single-spa 中是如何来实现隔离的呢？"),bn=(0,p.Wm)("h3",{id:"样式隔离",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#样式隔离","aria-hidden":"true"},"#"),(0,p.Uk)(" 样式隔离")],-1),gn=(0,p.Wm)("p",null,"single-spa 中的样式隔离可以分为两块来说。",-1),dn=(0,p.Uk)("首先是子应用样式的加载和卸载。single-spa 提供了 "),hn={href:"https://single-spa.js.org/docs/ecosystem-css#single-spa-css",target:"_blank",rel:"noopener noreferrer"},fn=(0,p.Uk)("single-spa-css"),vn=(0,p.Uk)(" 这个工具来实现。"),yn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> singleSpaCss <span class="token keyword">from</span> <span class="token string">&#39;single-spa-css&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cssLifecycles <span class="token operator">=</span> <span class="token function">singleSpaCss</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 需要加载的 css 列表</span>\n  cssUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;https://example.com/main.css&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 是否是 webpack 导出的 css，如果是要做额外处理（webpack 导出的文件名通常会有 hash）</span>\n  webpackExtractedCss<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 当子应用 unmount 的时候，css 是否需要一并删除</span>\n  shouldUnmount<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> reactLifecycles <span class="token operator">=</span> <span class="token function">singleSpaReact</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 加入到子应用的 bootstrap 里</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> bootstrap <span class="token operator">=</span> <span class="token punctuation">[</span>\n  cssLifecycles<span class="token punctuation">.</span>bootstrap<span class="token punctuation">,</span>\n  reactLifecycles<span class="token punctuation">.</span>bootstrap\n<span class="token punctuation">]</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> mount <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// 加入到子应用的 mount 里，css 放前面，不然 mount 后会有样式闪烁（FOUC）的问题</span>\n  cssLifecycles<span class="token punctuation">.</span>mount<span class="token punctuation">,</span>\n  reactLifecycles<span class="token punctuation">.</span>mount\n<span class="token punctuation">]</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> unmount <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// 后卸载 css，防止样式闪烁</span>\n  reactLifecycles<span class="token punctuation">.</span>unmount<span class="token punctuation">,</span>\n  cssLifecycles<span class="token punctuation">.</span>unmount\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>如果样式是 webpack 导出的，则每次构建后都要更新样式文件列表。single-spa 贴心的准备了一个插件来解决这个问题。只要在 webpack 的配置文件中添加如下插件即可。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ExposeRuntimeCssAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;single-spa-css/ExposeRuntimeCssAssetsPlugin.cjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">&quot;[name].css&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExposeRuntimeCssAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// filename 必须与 MiniCssExtractPlugin 中的 filename 一一对应</span>\n      filename<span class="token operator">:</span> <span class="token string">&quot;[name].css&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>解决了子应用样式加载和卸载问题以后，我们再来看子应用样式隔离的问题。</p>',4),qn=(0,p.Uk)("single-spa 给出了一些建议，比如使用 "),xn={href:"https://single-spa.js.org/docs/ecosystem-css#scoped-css",target:"_blank",rel:"noopener noreferrer"},Wn=(0,p.Uk)("Scoped CSS"),wn=(0,p.Uk)("，每个子应用都有一个固定前缀，类似于下面这样："),jn=(0,p.uE)('<div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/*\n&lt;div class=&quot;app1__settings-67f89dd87sf89ds&quot;&gt;&lt;/div&gt;\n*/</span>\n<span class="token selector">.app1__settings-67f89dd87sf89ds</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/*\n&lt;div data-df65s76dfs class=&quot;settings&quot;&gt;&lt;/div&gt;\n*/</span>\n<span class="token selector">.settings[data-df65s76dfs]</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/*\n&lt;div id=&quot;single-spa-application:@org-name/project-name&quot;&gt;\n    &lt;div class=&quot;settings&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n*/</span>\n#single-spa-application\\<span class="token punctuation">:</span>\\<span class="token atrule"><span class="token rule">@org-name</span>\\/project-name .settings</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',1),Un=(0,p.Uk)("有很多工具可以实现 Scoped CSS，比如 "),Sn={href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"},_n=(0,p.Uk)("CSS Modules"),En=(0,p.Uk)(" 等。"),Ln=(0,p.uE)('<p>最后一种方式我们可以通过 webpack 自动化的实现。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> prefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-prefix-selector&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">prefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      prefix<span class="token operator">:</span> <span class="token string">&quot;#single-spa-application\\\\:\\\\@org-name\\\\/project-name&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>single-spa 也提到了 Shadow DOM，我们在上一篇文章中已经分析过，这里不再赘述了。</p><h3 id="js-隔离" tabindex="-1"><a class="header-anchor" href="#js-隔离" aria-hidden="true">#</a> JS 隔离</h3>',4),Cn=(0,p.Uk)("single-spa 采用了类似于"),An=(0,p.Uk)("快照模式"),Mn=(0,p.Uk)("的隔离机制，通过 "),Pn={href:"https://single-spa.js.org/docs/ecosystem-leaked-globals",target:"_blank",rel:"noopener noreferrer"},Jn=(0,p.Uk)("single-spa-leaked-globals"),Gn=(0,p.Uk)(" 来实现。"),Rn=(0,p.uE)('<p>用法如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> singleSpaLeakedGlobals <span class="token keyword">from</span> <span class="token string">&#39;single-spa-leaked-globals&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 其它 single-spa-xxx 提供的生命周期函数</span>\n<span class="token keyword">const</span> frameworkLifecycles <span class="token operator">=</span> <span class="token operator">...</span>\n\n<span class="token comment">// 新添加的全局变量</span>\n<span class="token keyword">const</span> leakedGlobalsLifecycles <span class="token operator">=</span> <span class="token function">singleSpaLeakedGlobals</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  globalVariableNames<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jQuery&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> bootstrap <span class="token operator">=</span> <span class="token punctuation">[</span>\n  leakedGlobalsLifecycles<span class="token punctuation">.</span>bootstrap<span class="token punctuation">,</span> <span class="token comment">// 放在第一位</span>\n  frameworkLifecycles<span class="token punctuation">.</span>bootstrap<span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> mount <span class="token operator">=</span> <span class="token punctuation">[</span>\n  leakedGlobalsLifecycles<span class="token punctuation">.</span>mount<span class="token punctuation">,</span> <span class="token comment">// mount 时添加全局变量，如果之前有记录在案的，直接恢复</span>\n  frameworkLifecycles<span class="token punctuation">.</span>mount<span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> unmount <span class="token operator">=</span> <span class="token punctuation">[</span>\n  leakedGlobalsLifecycles<span class="token punctuation">.</span>unmount<span class="token punctuation">,</span> <span class="token comment">// 删掉新添加的全局变量</span>\n  frameworkLifecycles<span class="token punctuation">.</span>unmount<span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p>前面已经说过，快照模式的一个缺点是无法保证多个子应用同时运行时的有效隔离。</p></blockquote><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>总体来说，single-spa 算是基本实现了一个微前端框架需要具备的各种功能，但是又实现的不够彻底，遗留了很多问题需要解决。虽然官方提供了很多样例和最佳实践，但是总显得过于单薄，总给人一种“问题解决了，但是又没有完全解决”的感觉。</p><p>qiankun 基于 single-spa 开发，一定程度上解决了很多 single-spa 没有解决的问题。我们下篇详细说明。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',7),zn={render:function(n,s){const a=(0,p.up)("RouterLink"),zn=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[t,(0,p.Wm)(a,{to:"/solutions/micro-frontend/microfrontend.html"},{default:(0,p.w5)((()=>[e])),_:1}),o,(0,p.Wm)("a",l,[c,(0,p.Wm)(zn)]),u]),r,(0,p.Wm)("p",null,[i,(0,p.Wm)("a",k,[m,(0,p.Wm)(zn)]),b]),g,(0,p.Wm)("p",null,[d,(0,p.Wm)("a",h,[f,(0,p.Wm)(zn)]),v]),y,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[q,(0,p.Wm)("a",x,[W,(0,p.Wm)(zn)]),w])]),j,U,S,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",_,[E,(0,p.Wm)(zn)]),L]),(0,p.Wm)("li",null,[(0,p.Wm)("a",C,[A,(0,p.Wm)(zn)]),M,(0,p.Wm)("a",P,[J,(0,p.Wm)(zn)]),G]),(0,p.Wm)("li",null,[(0,p.Wm)("a",R,[z,(0,p.Wm)(zn)]),N])]),T,B,D,(0,p.Wm)("p",null,[F,(0,p.Wm)("a",I,[O,(0,p.Wm)(zn)]),H]),V,(0,p.Wm)("p",null,[Z,(0,p.Wm)("a",X,[K,(0,p.Wm)(zn)]),Q]),(0,p.Wm)("p",null,[Y,(0,p.Wm)("a",$,[nn,(0,p.Wm)(zn)]),sn]),an,(0,p.Wm)("p",null,[pn,tn,en,(0,p.Wm)("a",on,[ln,(0,p.Wm)(zn)]),cn]),un,(0,p.Wm)("p",null,[rn,(0,p.Wm)(a,{to:"/solutions/micro-frontend/microfrontend.html"},{default:(0,p.w5)((()=>[kn])),_:1}),mn]),bn,gn,(0,p.Wm)("p",null,[dn,(0,p.Wm)("a",hn,[fn,(0,p.Wm)(zn)]),vn]),yn,(0,p.Wm)("p",null,[qn,(0,p.Wm)("a",xn,[Wn,(0,p.Wm)(zn)]),wn]),jn,(0,p.Wm)("p",null,[Un,(0,p.Wm)("a",Sn,[_n,(0,p.Wm)(zn)]),En]),Ln,(0,p.Wm)("p",null,[Cn,(0,p.Wm)(a,{to:"/solutions/micro-frontend/microfrontend.html#%E5%BF%AB%E7%85%A7%E6%A8%A1%E5%BC%8F"},{default:(0,p.w5)((()=>[An])),_:1}),Mn,(0,p.Wm)("a",Pn,[Jn,(0,p.Wm)(zn)]),Gn]),Rn],64)}}}}]);