"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7735],{9252:(e,n,t)=>{t.r(n),t.d(n,{data:()=>r});const r={key:"v-4761b931",path:"/courses/network/",title:"计算机网络学习笔记",lang:"zh-CN",frontmatter:{title:"计算机网络学习笔记",description:"数据包在传输过程中，会经过网络中各种各样的设备，最终达到网络的另一端。本系列会先从 OSI 模型出发，详细说明网络的分层结构。之后会针对每一种典型设备做功能说明。最后，会基于样例说明每种设备、每种传输方式的工作原理。",sidebar:!1,date:"2021-07-19T00:00:00.000Z"},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],filePathRelative:"courses/network/README.md",articleList:[{key:"v-34b6fba1",path:"/courses/network/host-router-host.html",title:"经过路由器的主机间通信",lang:"zh-CN",frontmatter:{title:"经过路由器的主机间通信",description:"介绍需要经过路由器的两个主机间的通信过程，以及路由器的功能。",keywords:["network","switch","路由器"],date:"2021-07-28T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"路由器的功能",slug:"路由器的功能",children:[{level:3,title:"填充路由表",slug:"填充路由表",children:[]},{level:3,title:"填充 ARP 表",slug:"填充-arp-表",children:[]}]},{level:2,title:"路由器是如何工作的",slug:"路由器是如何工作的",children:[{level:3,title:"主机 A 到 R1",slug:"主机-a-到-r1",children:[]},{level:3,title:"指向接口的路由",slug:"指向接口的路由",children:[]},{level:3,title:"指向下一跳 IP 的路由",slug:"指向下一跳-ip-的路由",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n前面我们讨论了两个直接相连的主机间的通信和经过交换机的主机间通信，本篇我们来说说经过路由器的主机间通信。\n\n为了方便讨论，我们将使用下图来进行说明。我们会关注路由器 R1，以及它将数据包从主机 A 转发到主机 B 和主机 C 分别需要什么。\n\n![经过路由器的主机间通信](/courses/network/host-router-host-c.png)\n\n> 为了简便起见，图中我们仅使用四位十六进制数表示 MAC 地址。\n\n## 路由器的功能\n\n前面我们提到路由器的主要功能是促进网络之间的通信。每个路由器都会在两个网络之间创建一个边界，它们的主要作用是将数据包从一个网络转发到另一个网络。\n\n在上图中，路由器 R1 在网络 11.11.11.x 和网络 22.22.22.x 之间创建了一个边界。路由器 R2 在网络 22.22.22.x 和网络 33.33.33.x 之间创建了一个边界。两个路由器在网络 22.22.22.x 中都有一个接口。\n\n为了在网络之间转发数据包，路由器必须执行两项功能：填充和维护路由表，以及填充和维护 ARP 表。\n\n### 填充路由表\n\n路由表中保存了现有所有的网络。路由表开始时为空，路由器在获知到每个网络的新路由时填充会填充它。\n\n路由器可以通过多种方式了解每个网络的路由。我们将在本节中讨论其中的两个。\n\n直连路由（ Directly Connected route）是最简单直接的方法。当路由器接口配置了特定的 IP 地址时，路由器将知道它直接连接到的网络。\n\n例如，在上图中，R1 的左侧接口配置了 IP 地址 11.11.11.1。这告诉 R1 网络 11.11.11.x 的位置存在于其左侧接口之外。同样，R1 获悉 22.22.22.x 网络位于其右侧接口上。\n\n当然，路由器不能直接连接到每个网络。在上图中，R1 未连接到 33.33.33.x，但 R1 有需要将数据包发送给网络 33.33.33.x。这时候就需要借助于静态路由的方法。\n\n静态路由（Static Route）是由管理员手动配置的路由。就好像你明确告诉 R1 网络 33.33.33.x 存在于 R2 之后，为了到达它，R1 必须将数据包发送到 R2 的接口（配置了 IP 地址 22.22.22.2）。\n\n最后，在 R1 获悉两条直连路由后，并在 R1 配置了一条静态路由后，R1 将拥有一个类似于下图的路​​由表。\n\n![路由表](/courses/network/routing-table-c.png)\n\n路由表里记录了许多路由。每个路由都包含网络到接口或下一跳地址的映射。\n\n每当路由器收到一个数据包，它就会查询路由表来决定如何转发这个数据包。如果接收到的数据包中，目标地址不在路由表内，那么路由器会认为这个网络不存在，会丢弃这个数据包。\n\n除了上面两种方法以外，还有一种方法，动态路由（Dynamic Routing）。路由器之间会自动检测并相互通信，以告知彼此已知的路由。动态路由有很多种协议实现，考虑到复杂性，本文不做详细的说明。\n\n### 填充 ARP 表\n\n我们知道，第二层负责传输数据，因此，路由器还需要借助于 ARP 协议来获取 MAC 地址，这些信息被保存在路由器的 ARP 表中。\n\n路由器将使用其路由表来确定应接收数据包的下一个 IP 地址。如果路由显示目的地存在于直接连接的网络上，那么“下一个 IP 地址”就是数据包的目的地 IP 地址，也就是该数据包的最后一跳。\n\n与路由表不同，ARP 表是按需填充的。也就是说在上图中，R1 不会向主机 B 的 MAC 地址发起 ARP 请求，直到它有一个必须传送到主机 B 的数据包。\n\nARP 表中记录者 IP 地址到 MAC 地址的映射，如下图所示。\n\n![ARP 表](/courses/network/arp-table-c.png)\n\n## 路由器是如何工作的\n\n了解了路由器如何填充路由表和 ARP 表以后，我们现在来看看在网络通信中，路由器是如何工作的。\n\n在上面 R1 的路由表中，我们可以看到有两种类型的路由：一些指向接口，另一些指向下一跳 IP 地址。我们会针对这两种类型的路由分别说明。\n\n不过，首先我们得说明主机 A 是如何将数据包发送给路由器 R1 的。\n\n### 主机 A 到 R1\n\n主机 B 和主机 C 都处于外部网络中，要与它们通信就必须将数据包先发给主机 A 的默认网关（路由器 R1）。\n\n主机 A 会使用自己的 IP 地址 11.11.11.77 作为原 IP 地址，使用 22.22.22.88（主机 B） 或者 33.33.33.99（主机 C）作为目标地址来构建第三层数据头。要实现数据传输，主机 A 还需要知道下一跳的 MAC 地址来构建第二层数据头。\n\n如果主机 A 已经配置了其默认网关的 IP 地址，或者主机 A 已经与外部主机通信过。那么，主机 A 很可能已经有一个带有 R1 的 MAC 地址的 ARP 表记录。但是如果这是主机 A 与外部主机的第一次通信，则在构建第二层数据头之前，主机 A 会先通过 ARP 请求获取 R1 的 MAC 地址。\n\n当数据包到达路由器 R1 的时候，目标 IP 应该已经在 R1 的路由表中了。\n\n### 指向接口的路由\n\n在路由表中，指向接口的路由通常是路由器学习获得的，因为路由器直接连接到网络。如果数据包的目标 IP 地址位于直接连接到路由器的网络中，那么路由器就知道，它们负责将数据包传送到其最后一跳。\n\n与前面已经讨论过的相同，路由器使用第三层数据头信息来确定下一步将数据包发送到哪里，然后创建一个第二层数据头以将其发送到那里。在这个的例子中，此数据包必须经过的下一跳（也是最后一个）是到达主机 B 上的 NIC。\n\n![指向接口的路由](/courses/network/route-interface-c.png)\n\n在传输的过程中，第三层的数据头不变，与主机 A 初始创建的第三层数据头相同。变化的是第二层的数据头。新的第二层数据头原 MAC 地址变成了 bb11，路由器 R1 右边接口的 MAC 地址，目标 MAC 地址变成了 bbbb，主机 B 的 MAC 地址。原始的第二层数据头被丢弃掉了。\n\n### 指向下一跳 IP 的路由\n\n对于从主机 A 发送到主机 C 的数据包，目标 IP 地址将为 33.33.33.99。当 R1 查询其路由表时，它将确定 33.33.33.x 网络的下一跳位于 IP 地址 22.22.22.2，也就是 R2 的左边接口 IP 地址。\n\n此时，路由器 R1 就会构建一个第二层数据头，将数据包发送到路由器 R2，以便继续沿途转发此数据包。由于当前“跳”在 R1 和 R2 之间，因此它们的 MAC 地址将构成源 MAC 地址和目标 MAC 地址。\n\n![指向下一跳的路由1](/courses/network/route-nexthop1-c.png)\n\n第三层数据头保持不变，它包括了最初由主机 A 设置的源和目标 IP 地址，这些地址代表通信的两个“端”。第二层数据头在每一跳都完全后重新生成。\n\n如果 R1 没有 R2 的 MAC 地址，它会简单地向路由中的 IP 地址发起 ARP 请求：22.22.22.2。之后，就可以创建正确的第二层数据头，数据包就可以从 R1 发送到 R2 了。\n\n随着传输过程的继续，R2 将最终接收到数据包，然后像 R1 在上例中一样，将数据包传送到其最后一跳。\n\n这个过程可以根据需要不断重复。如果主机 A 尝试与路径中隔有 10 个路由器的主机 X 通信，则主机 A 需要 10 个这样的过程来将数据正确的输出过去。在这个传输路径中，每个中转路由器都有一个路由，将主机 X 所在的网络映射到路径中的下一跳 IP。直到与主机 X 所在网络直接连接的最终路由器。这个最终路由器将负责将数据包传送到它的最后一跳，主机 X 本身。\n\n\n## 总结\n\n本文对路由器是如何构建路由表和 ARP 表做了说明。\n\n同时，借助于示例，演示了路由器是如何跨网络传输数据的。\n",contentRendered:'<p>前面我们讨论了两个直接相连的主机间的通信和经过交换机的主机间通信，本篇我们来说说经过路由器的主机间通信。</p>\n<p>为了方便讨论，我们将使用下图来进行说明。我们会关注路由器 R1，以及它将数据包从主机 A 转发到主机 B 和主机 C 分别需要什么。</p>\n<p><img src="/courses/network/host-router-host-c.png" alt="经过路由器的主机间通信"></p>\n<blockquote>\n<p>为了简便起见，图中我们仅使用四位十六进制数表示 MAC 地址。</p>\n</blockquote>\n<h2 id="路由器的功能" tabindex="-1"><a class="header-anchor" href="#路由器的功能" aria-hidden="true">#</a> 路由器的功能</h2>\n<p>前面我们提到路由器的主要功能是促进网络之间的通信。每个路由器都会在两个网络之间创建一个边界，它们的主要作用是将数据包从一个网络转发到另一个网络。</p>\n<p>在上图中，路由器 R1 在网络 11.11.11.x 和网络 22.22.22.x 之间创建了一个边界。路由器 R2 在网络 22.22.22.x 和网络 33.33.33.x 之间创建了一个边界。两个路由器在网络 22.22.22.x 中都有一个接口。</p>\n<p>为了在网络之间转发数据包，路由器必须执行两项功能：填充和维护路由表，以及填充和维护 ARP 表。</p>\n<h3 id="填充路由表" tabindex="-1"><a class="header-anchor" href="#填充路由表" aria-hidden="true">#</a> 填充路由表</h3>\n<p>路由表中保存了现有所有的网络。路由表开始时为空，路由器在获知到每个网络的新路由时填充会填充它。</p>\n<p>路由器可以通过多种方式了解每个网络的路由。我们将在本节中讨论其中的两个。</p>\n<p>直连路由（ Directly Connected route）是最简单直接的方法。当路由器接口配置了特定的 IP 地址时，路由器将知道它直接连接到的网络。</p>\n<p>例如，在上图中，R1 的左侧接口配置了 IP 地址 11.11.11.1。这告诉 R1 网络 11.11.11.x 的位置存在于其左侧接口之外。同样，R1 获悉 22.22.22.x 网络位于其右侧接口上。</p>\n<p>当然，路由器不能直接连接到每个网络。在上图中，R1 未连接到 33.33.33.x，但 R1 有需要将数据包发送给网络 33.33.33.x。这时候就需要借助于静态路由的方法。</p>\n<p>静态路由（Static Route）是由管理员手动配置的路由。就好像你明确告诉 R1 网络 33.33.33.x 存在于 R2 之后，为了到达它，R1 必须将数据包发送到 R2 的接口（配置了 IP 地址 22.22.22.2）。</p>\n<p>最后，在 R1 获悉两条直连路由后，并在 R1 配置了一条静态路由后，R1 将拥有一个类似于下图的路​​由表。</p>\n<p><img src="/courses/network/routing-table-c.png" alt="路由表"></p>\n<p>路由表里记录了许多路由。每个路由都包含网络到接口或下一跳地址的映射。</p>\n<p>每当路由器收到一个数据包，它就会查询路由表来决定如何转发这个数据包。如果接收到的数据包中，目标地址不在路由表内，那么路由器会认为这个网络不存在，会丢弃这个数据包。</p>\n<p>除了上面两种方法以外，还有一种方法，动态路由（Dynamic Routing）。路由器之间会自动检测并相互通信，以告知彼此已知的路由。动态路由有很多种协议实现，考虑到复杂性，本文不做详细的说明。</p>\n<h3 id="填充-arp-表" tabindex="-1"><a class="header-anchor" href="#填充-arp-表" aria-hidden="true">#</a> 填充 ARP 表</h3>\n<p>我们知道，第二层负责传输数据，因此，路由器还需要借助于 ARP 协议来获取 MAC 地址，这些信息被保存在路由器的 ARP 表中。</p>\n<p>路由器将使用其路由表来确定应接收数据包的下一个 IP 地址。如果路由显示目的地存在于直接连接的网络上，那么“下一个 IP 地址”就是数据包的目的地 IP 地址，也就是该数据包的最后一跳。</p>\n<p>与路由表不同，ARP 表是按需填充的。也就是说在上图中，R1 不会向主机 B 的 MAC 地址发起 ARP 请求，直到它有一个必须传送到主机 B 的数据包。</p>\n<p>ARP 表中记录者 IP 地址到 MAC 地址的映射，如下图所示。</p>\n<p><img src="/courses/network/arp-table-c.png" alt="ARP 表"></p>\n<h2 id="路由器是如何工作的" tabindex="-1"><a class="header-anchor" href="#路由器是如何工作的" aria-hidden="true">#</a> 路由器是如何工作的</h2>\n<p>了解了路由器如何填充路由表和 ARP 表以后，我们现在来看看在网络通信中，路由器是如何工作的。</p>\n<p>在上面 R1 的路由表中，我们可以看到有两种类型的路由：一些指向接口，另一些指向下一跳 IP 地址。我们会针对这两种类型的路由分别说明。</p>\n<p>不过，首先我们得说明主机 A 是如何将数据包发送给路由器 R1 的。</p>\n<h3 id="主机-a-到-r1" tabindex="-1"><a class="header-anchor" href="#主机-a-到-r1" aria-hidden="true">#</a> 主机 A 到 R1</h3>\n<p>主机 B 和主机 C 都处于外部网络中，要与它们通信就必须将数据包先发给主机 A 的默认网关（路由器 R1）。</p>\n<p>主机 A 会使用自己的 IP 地址 11.11.11.77 作为原 IP 地址，使用 22.22.22.88（主机 B） 或者 33.33.33.99（主机 C）作为目标地址来构建第三层数据头。要实现数据传输，主机 A 还需要知道下一跳的 MAC 地址来构建第二层数据头。</p>\n<p>如果主机 A 已经配置了其默认网关的 IP 地址，或者主机 A 已经与外部主机通信过。那么，主机 A 很可能已经有一个带有 R1 的 MAC 地址的 ARP 表记录。但是如果这是主机 A 与外部主机的第一次通信，则在构建第二层数据头之前，主机 A 会先通过 ARP 请求获取 R1 的 MAC 地址。</p>\n<p>当数据包到达路由器 R1 的时候，目标 IP 应该已经在 R1 的路由表中了。</p>\n<h3 id="指向接口的路由" tabindex="-1"><a class="header-anchor" href="#指向接口的路由" aria-hidden="true">#</a> 指向接口的路由</h3>\n<p>在路由表中，指向接口的路由通常是路由器学习获得的，因为路由器直接连接到网络。如果数据包的目标 IP 地址位于直接连接到路由器的网络中，那么路由器就知道，它们负责将数据包传送到其最后一跳。</p>\n<p>与前面已经讨论过的相同，路由器使用第三层数据头信息来确定下一步将数据包发送到哪里，然后创建一个第二层数据头以将其发送到那里。在这个的例子中，此数据包必须经过的下一跳（也是最后一个）是到达主机 B 上的 NIC。</p>\n<p><img src="/courses/network/route-interface-c.png" alt="指向接口的路由"></p>\n<p>在传输的过程中，第三层的数据头不变，与主机 A 初始创建的第三层数据头相同。变化的是第二层的数据头。新的第二层数据头原 MAC 地址变成了 bb11，路由器 R1 右边接口的 MAC 地址，目标 MAC 地址变成了 bbbb，主机 B 的 MAC 地址。原始的第二层数据头被丢弃掉了。</p>\n<h3 id="指向下一跳-ip-的路由" tabindex="-1"><a class="header-anchor" href="#指向下一跳-ip-的路由" aria-hidden="true">#</a> 指向下一跳 IP 的路由</h3>\n<p>对于从主机 A 发送到主机 C 的数据包，目标 IP 地址将为 33.33.33.99。当 R1 查询其路由表时，它将确定 33.33.33.x 网络的下一跳位于 IP 地址 22.22.22.2，也就是 R2 的左边接口 IP 地址。</p>\n<p>此时，路由器 R1 就会构建一个第二层数据头，将数据包发送到路由器 R2，以便继续沿途转发此数据包。由于当前“跳”在 R1 和 R2 之间，因此它们的 MAC 地址将构成源 MAC 地址和目标 MAC 地址。</p>\n<p><img src="/courses/network/route-nexthop1-c.png" alt="指向下一跳的路由1"></p>\n<p>第三层数据头保持不变，它包括了最初由主机 A 设置的源和目标 IP 地址，这些地址代表通信的两个“端”。第二层数据头在每一跳都完全后重新生成。</p>\n<p>如果 R1 没有 R2 的 MAC 地址，它会简单地向路由中的 IP 地址发起 ARP 请求：22.22.22.2。之后，就可以创建正确的第二层数据头，数据包就可以从 R1 发送到 R2 了。</p>\n<p>随着传输过程的继续，R2 将最终接收到数据包，然后像 R1 在上例中一样，将数据包传送到其最后一跳。</p>\n<p>这个过程可以根据需要不断重复。如果主机 A 尝试与路径中隔有 10 个路由器的主机 X 通信，则主机 A 需要 10 个这样的过程来将数据正确的输出过去。在这个传输路径中，每个中转路由器都有一个路由，将主机 X 所在的网络映射到路径中的下一跳 IP。直到与主机 X 所在网络直接连接的最终路由器。这个最终路由器将负责将数据包传送到它的最后一跳，主机 X 本身。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>本文对路由器是如何构建路由表和 ARP 表做了说明。</p>\n<p>同时，借助于示例，演示了路由器是如何跨网络传输数据的。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-28",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/network/host-router-host.html",pathLocale:"/",permalink:null,slug:"host-router-host",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/network/host-router-host.md",filePathRelative:"courses/network/host-router-host.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-router-host.html.vue",componentFilePathRelative:"pages/courses/network/host-router-host.html.vue",componentFileChunkName:"v-34b6fba1",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-router-host.html.js",dataFilePathRelative:"pages/courses/network/host-router-host.html.js",dataFileChunkName:"v-34b6fba1",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/network/host-router-host.html",htmlFilePathRelative:"courses/network/host-router-host.html"},{key:"v-6e6c71cc",path:"/courses/network/host-switch-host.html",title:"经过交换机的主机间通信",lang:"zh-CN",frontmatter:{title:"经过交换机的主机间通信",description:"介绍需要经过交换机的两个主机间的通信过程，以及交换机的功能。",keywords:["network","switch","交换机"],date:"2021-07-26T00:00:00.000Z",key:4},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"交换机的功能",slug:"交换机的功能",children:[{level:3,title:"学习（Learning）",slug:"学习-learning",children:[]},{level:3,title:"泛洪（Flooding）",slug:"泛洪-flooding",children:[]},{level:3,title:"转发（Forwarding）",slug:"转发-forwarding",children:[]},{level:3,title:"过滤（Filtering）",slug:"过滤-filtering",children:[]}]},{level:2,title:"交换机是如何工作的",slug:"交换机是如何工作的",children:[{level:3,title:"广播（Broadcasts）",slug:"广播-broadcasts",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n在上一篇文章中，我们研究了两台主机直接相互通信所发生的一切。在本文中，我们将添加一个常见的网络设备：交换机。我们将看看通过交换机从主机到主机的通信会发生什么。\n\n## 交换机的功能\n\n交换机主要有四种功能：学习（Learning）、泛洪（Flooding）、转发（Forwarding）和过滤（Filtering）。\n\n### 学习（Learning）\n\n作为第二层设备，交换机将根据第二层数据头中的信息做出所有后续操作。具体来说，交换机会使用数据头中的源 MAC 地址和目标 MAC 地址来做出决策。\n\n交换机的功能之一是维护一个 MAC 地址表，将其每个交换机端口与所连接设备的 MAC 地址建立映射关系。\n\nMAC 地址表一开始是空的，每次交换机收到任何东西时，它都会查看传入帧的源 MAC 地址字段。它使用源 MAC 和接收帧的交换机端口在 MAC 地址表中构建条目。\n\n慢慢的每个连接的设备都不可避免地会发送一些数据包给交换机，交换机的 MAC 地址表将记录所有与之相连的设备的 MAC 地址。之后，交换机就可以轻松的进行数据转发了。\n\n### 泛洪（Flooding）\n\n尽管交换机有学习能力，但是当交换机接收到一个它不知道的设备的 MAC 地址时，交换机会简单地复制这个数据帧并将其发送到所有端口。这就是泛洪。\n\n泛洪可以确保如果目标设备存在并且它连接到交换机，它肯定会收到帧。\n\n每个连接到这个交换机的设备会接收这个数据帧并查看目标 MAC 地址字段。如果这个设备发现这个 MAC 地址不是自己的，那么设备会默默地丢弃这个数据帧。\n\n如果这个设备是要发送数据的目的设备，那么，这个设备在接收到数据之后，会生成一个响应发送给交换机。当发送到交换机时，交换机会将未知设备映射到其交换机端口，存在 MAC 地址表中。\n\n### 转发（Forwarding）\n\n理想情况下，对于遇到的每个目标 MAC，交换机在其 MAC 地址表中都有一个条目。\n\n当接收到数据帧时，交换机会将帧转发到适当的交换机端口。\n\n交换机有三种方法来转发数据帧：\n\n* 存储和转发\n    交换机将整个帧（数据头 + 数据）复制到内存缓冲区中，并在转发之前检查该帧是否存在错误。这种方法是最慢的，但允许最好的错误检测和附加功能，例如优先处理某些类型的流量以加快处理速度。\n* 直通\n    交换机不存储任何内容，只检查读取目标 MAC 地址和转发帧所需的最低限度。这种方法是最快的，但不提供错误检测或附加功能的能力。\n* Fragment Free\n    这种方法是前两种方法的混合。在转发帧之前，交换机仅检查帧的第一部分（64 字节）。如果发生传输错误，通常会在前 64 个字节内会有提现。因此，这种方法提供了“足够好”的错误检测，同时获得了避免在转发之前将整个帧存储在其内存中的速度和效率。\n\n> 值得指出的是，在现代，使用线速交换，这三者之间的速度差异可以忽略不计，并且大多数交换机以存储和转发模式运行。\n\n### 过滤（Filtering）\n\n过滤功能可以保证交换机永远不会将数据帧转发回接收到数据帧的同一端口。\n\n通常情况下，当交换机需要泛洪帧时会依赖过滤功能。帧将被复制并发送到每个交换机端口，除了接收帧的交换机端口。\n\n如果接收到的数据帧的目标 MAC 地址就是源 MAC 地址，通常情况下，交换机会认为发生了错误或者受到攻击，会丢弃该数据帧。\n\n\n## 交换机是如何工作的\n\n下图展示了交换机的工作过程。通常情况下，图中的主机需要借助于 ARP 协议找到目标主机的 MAC 地址，简便起见，图中省略了这部分的过程。\n\n![交换机的工作过程](/courses/network/host-switch-host-c.gif)\n\n主机 A 需要给主机 B 发送一些数据。\n\n在初始状态下，交换机的 MAC 地址表是空的。只有在收到帧时交换机才会填充 MAC 地址表。\n\n当主机 A 向交换机发送帧时，它包含 aaaa.aaaa.aaaa 的源 MAC 地址。交换机在 MAC 地址表中增加一条端口 1 到 MAC 地址 aaaa.aaaa.aaaa 的映射。\n\n然后，转发这个数据帧的时候，交换机发现 MAC 地址表中没有 bbbb.bbbb.bbbb 相关的记录。此时，交换机就会复制这个数据帧并将其从除了端口 1 以外的所有端口发出。\n\n这个数据帧随后被主机 C 和主机 B 接收。主机 C 在检查第二层数据头时发现这个数据帧不是发送给它的，于是就丢弃了数据。当主机 B 收到数据帧时，发现这个数据帧是发给自己的，于是接受这个数据帧，同时生成响应。\n\n当响应到达交换机时，交换机知道了目标 MAC 地址的映射端口，于是在 MAC 地址表中增加一条端口 2 到 MAC 地址 bbbb.bbbb.bbbb 的映射。\n\n之后，交换机开始查找目标 MAC 地址 (aaaa.aaaa.aaaa) ，并发现该地址存在于端口 1。于是交换机就简单地转发这个数据帧，因为它知道目标 MAC 地址的位置。\n\n### 广播（Broadcasts）\n\n关于广播和交换机的泛洪行为，经常会出现一些混淆。因为这两种行为的最终结果是相同的，但理解区别也很重要。\n\n广播的数据帧是发给本地网络上每一个设备的数据帧。一个广播帧的数据头与普通数据帧的数据头除了目标 MAC 地址被设置成了一个特殊地址：ffff.ffff.ffff 以外，其他别无不同。“全F”地址是专门为广播保留的。\n\n根据定义，如果交换机遇到目标 MAC 地址为 ffff.ffff.ffff 的数据包，它将始终泛洪该数据帧。换一种方式，由于地址 ffff.ffff.ffff 是保留的，因此交换机无法建立 MAC 地址表映射。因此，任何以该 MAC 地址为目的地的数据帧都将被泛洪出去。\n\n综上所述，广播是发送给本地网络上所有设备的帧 (ffff.ffff.ffff)，而泛洪是交换机可以执行的操作。根据定义，广播帧将始终被交换机泛洪。但是交换机永远不会广播帧（因为广播不是交换机的功能）。\n\n## 总结\n\n本文我们介绍了交换机的四种能力：学习、泛洪、转发和过滤。\n\n同时，我们通过一个样例描述了在交换机的工作过程中，这四种能力是如何发挥作用的。\n\n之后，我们对泛洪和广播做了说明，阐述了两者之间的区别。\n",contentRendered:'<p>在上一篇文章中，我们研究了两台主机直接相互通信所发生的一切。在本文中，我们将添加一个常见的网络设备：交换机。我们将看看通过交换机从主机到主机的通信会发生什么。</p>\n<h2 id="交换机的功能" tabindex="-1"><a class="header-anchor" href="#交换机的功能" aria-hidden="true">#</a> 交换机的功能</h2>\n<p>交换机主要有四种功能：学习（Learning）、泛洪（Flooding）、转发（Forwarding）和过滤（Filtering）。</p>\n<h3 id="学习-learning" tabindex="-1"><a class="header-anchor" href="#学习-learning" aria-hidden="true">#</a> 学习（Learning）</h3>\n<p>作为第二层设备，交换机将根据第二层数据头中的信息做出所有后续操作。具体来说，交换机会使用数据头中的源 MAC 地址和目标 MAC 地址来做出决策。</p>\n<p>交换机的功能之一是维护一个 MAC 地址表，将其每个交换机端口与所连接设备的 MAC 地址建立映射关系。</p>\n<p>MAC 地址表一开始是空的，每次交换机收到任何东西时，它都会查看传入帧的源 MAC 地址字段。它使用源 MAC 和接收帧的交换机端口在 MAC 地址表中构建条目。</p>\n<p>慢慢的每个连接的设备都不可避免地会发送一些数据包给交换机，交换机的 MAC 地址表将记录所有与之相连的设备的 MAC 地址。之后，交换机就可以轻松的进行数据转发了。</p>\n<h3 id="泛洪-flooding" tabindex="-1"><a class="header-anchor" href="#泛洪-flooding" aria-hidden="true">#</a> 泛洪（Flooding）</h3>\n<p>尽管交换机有学习能力，但是当交换机接收到一个它不知道的设备的 MAC 地址时，交换机会简单地复制这个数据帧并将其发送到所有端口。这就是泛洪。</p>\n<p>泛洪可以确保如果目标设备存在并且它连接到交换机，它肯定会收到帧。</p>\n<p>每个连接到这个交换机的设备会接收这个数据帧并查看目标 MAC 地址字段。如果这个设备发现这个 MAC 地址不是自己的，那么设备会默默地丢弃这个数据帧。</p>\n<p>如果这个设备是要发送数据的目的设备，那么，这个设备在接收到数据之后，会生成一个响应发送给交换机。当发送到交换机时，交换机会将未知设备映射到其交换机端口，存在 MAC 地址表中。</p>\n<h3 id="转发-forwarding" tabindex="-1"><a class="header-anchor" href="#转发-forwarding" aria-hidden="true">#</a> 转发（Forwarding）</h3>\n<p>理想情况下，对于遇到的每个目标 MAC，交换机在其 MAC 地址表中都有一个条目。</p>\n<p>当接收到数据帧时，交换机会将帧转发到适当的交换机端口。</p>\n<p>交换机有三种方法来转发数据帧：</p>\n<ul>\n<li>存储和转发\n交换机将整个帧（数据头 + 数据）复制到内存缓冲区中，并在转发之前检查该帧是否存在错误。这种方法是最慢的，但允许最好的错误检测和附加功能，例如优先处理某些类型的流量以加快处理速度。</li>\n<li>直通\n交换机不存储任何内容，只检查读取目标 MAC 地址和转发帧所需的最低限度。这种方法是最快的，但不提供错误检测或附加功能的能力。</li>\n<li>Fragment Free\n这种方法是前两种方法的混合。在转发帧之前，交换机仅检查帧的第一部分（64 字节）。如果发生传输错误，通常会在前 64 个字节内会有提现。因此，这种方法提供了“足够好”的错误检测，同时获得了避免在转发之前将整个帧存储在其内存中的速度和效率。</li>\n</ul>\n<blockquote>\n<p>值得指出的是，在现代，使用线速交换，这三者之间的速度差异可以忽略不计，并且大多数交换机以存储和转发模式运行。</p>\n</blockquote>\n<h3 id="过滤-filtering" tabindex="-1"><a class="header-anchor" href="#过滤-filtering" aria-hidden="true">#</a> 过滤（Filtering）</h3>\n<p>过滤功能可以保证交换机永远不会将数据帧转发回接收到数据帧的同一端口。</p>\n<p>通常情况下，当交换机需要泛洪帧时会依赖过滤功能。帧将被复制并发送到每个交换机端口，除了接收帧的交换机端口。</p>\n<p>如果接收到的数据帧的目标 MAC 地址就是源 MAC 地址，通常情况下，交换机会认为发生了错误或者受到攻击，会丢弃该数据帧。</p>\n<h2 id="交换机是如何工作的" tabindex="-1"><a class="header-anchor" href="#交换机是如何工作的" aria-hidden="true">#</a> 交换机是如何工作的</h2>\n<p>下图展示了交换机的工作过程。通常情况下，图中的主机需要借助于 ARP 协议找到目标主机的 MAC 地址，简便起见，图中省略了这部分的过程。</p>\n<p><img src="/courses/network/host-switch-host-c.gif" alt="交换机的工作过程"></p>\n<p>主机 A 需要给主机 B 发送一些数据。</p>\n<p>在初始状态下，交换机的 MAC 地址表是空的。只有在收到帧时交换机才会填充 MAC 地址表。</p>\n<p>当主机 A 向交换机发送帧时，它包含 aaaa.aaaa.aaaa 的源 MAC 地址。交换机在 MAC 地址表中增加一条端口 1 到 MAC 地址 aaaa.aaaa.aaaa 的映射。</p>\n<p>然后，转发这个数据帧的时候，交换机发现 MAC 地址表中没有 bbbb.bbbb.bbbb 相关的记录。此时，交换机就会复制这个数据帧并将其从除了端口 1 以外的所有端口发出。</p>\n<p>这个数据帧随后被主机 C 和主机 B 接收。主机 C 在检查第二层数据头时发现这个数据帧不是发送给它的，于是就丢弃了数据。当主机 B 收到数据帧时，发现这个数据帧是发给自己的，于是接受这个数据帧，同时生成响应。</p>\n<p>当响应到达交换机时，交换机知道了目标 MAC 地址的映射端口，于是在 MAC 地址表中增加一条端口 2 到 MAC 地址 bbbb.bbbb.bbbb 的映射。</p>\n<p>之后，交换机开始查找目标 MAC 地址 (aaaa.aaaa.aaaa) ，并发现该地址存在于端口 1。于是交换机就简单地转发这个数据帧，因为它知道目标 MAC 地址的位置。</p>\n<h3 id="广播-broadcasts" tabindex="-1"><a class="header-anchor" href="#广播-broadcasts" aria-hidden="true">#</a> 广播（Broadcasts）</h3>\n<p>关于广播和交换机的泛洪行为，经常会出现一些混淆。因为这两种行为的最终结果是相同的，但理解区别也很重要。</p>\n<p>广播的数据帧是发给本地网络上每一个设备的数据帧。一个广播帧的数据头与普通数据帧的数据头除了目标 MAC 地址被设置成了一个特殊地址：ffff.ffff.ffff 以外，其他别无不同。“全F”地址是专门为广播保留的。</p>\n<p>根据定义，如果交换机遇到目标 MAC 地址为 ffff.ffff.ffff 的数据包，它将始终泛洪该数据帧。换一种方式，由于地址 ffff.ffff.ffff 是保留的，因此交换机无法建立 MAC 地址表映射。因此，任何以该 MAC 地址为目的地的数据帧都将被泛洪出去。</p>\n<p>综上所述，广播是发送给本地网络上所有设备的帧 (ffff.ffff.ffff)，而泛洪是交换机可以执行的操作。根据定义，广播帧将始终被交换机泛洪。但是交换机永远不会广播帧（因为广播不是交换机的功能）。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>本文我们介绍了交换机的四种能力：学习、泛洪、转发和过滤。</p>\n<p>同时，我们通过一个样例描述了在交换机的工作过程中，这四种能力是如何发挥作用的。</p>\n<p>之后，我们对泛洪和广播做了说明，阐述了两者之间的区别。</p>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-26",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/network/host-switch-host.html",pathLocale:"/",permalink:null,slug:"host-switch-host",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/network/host-switch-host.md",filePathRelative:"courses/network/host-switch-host.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-switch-host.html.vue",componentFilePathRelative:"pages/courses/network/host-switch-host.html.vue",componentFileChunkName:"v-6e6c71cc",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-switch-host.html.js",dataFilePathRelative:"pages/courses/network/host-switch-host.html.js",dataFileChunkName:"v-6e6c71cc",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/network/host-switch-host.html",htmlFilePathRelative:"courses/network/host-switch-host.html"},{key:"v-15e0f4b2",path:"/courses/network/host-switch-router-host.html",title:"经过交换机和路由器的主机间通信",lang:"zh-CN",frontmatter:{title:"经过交换机和路由器的主机间通信",description:"介绍需要经过交换机、路由器的两个主机间的通信过程，阐述网络通信的基本过程。",keywords:["network","switch","router"],date:"2021-07-28T00:00:00.000Z",key:6},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[],content:'\n前面分别介绍了两个直接相连的主机之间、网络内经过交换机的主机之间以及网络间需要借助于路由器的主机之间的通信过程。基本涵盖了一般的网络通信场景。\n\n本文不再重复前面的叙述了，贴一个视频，综合描述一下数据包是如何在网络间传输的。\n\n<video controls style="width:100%" autoplay>\n  <source src="/courses/network/network.mp4">\n  <p>你的浏览器不支持视屏，请点击<a href="/courses/network/network.mp4">链接</a>查看</p>\n</video>\n',contentRendered:'<p>前面分别介绍了两个直接相连的主机之间、网络内经过交换机的主机之间以及网络间需要借助于路由器的主机之间的通信过程。基本涵盖了一般的网络通信场景。</p>\n<p>本文不再重复前面的叙述了，贴一个视频，综合描述一下数据包是如何在网络间传输的。</p>\n<video controls style="width:100%" autoplay>\n  <source src="/courses/network/network.mp4">\n  <p>你的浏览器不支持视屏，请点击<a href="/courses/network/network.mp4">链接</a>查看</p>\n</video>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-28",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/network/host-switch-router-host.html",pathLocale:"/",permalink:null,slug:"host-switch-router-host",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/network/host-switch-router-host.md",filePathRelative:"courses/network/host-switch-router-host.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-switch-router-host.html.vue",componentFilePathRelative:"pages/courses/network/host-switch-router-host.html.vue",componentFileChunkName:"v-15e0f4b2",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-switch-router-host.html.js",dataFilePathRelative:"pages/courses/network/host-switch-router-host.html.js",dataFileChunkName:"v-15e0f4b2",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/network/host-switch-router-host.html",htmlFilePathRelative:"courses/network/host-switch-router-host.html"},{key:"v-58863653",path:"/courses/network/host-to-host.html",title:"直接相连的主机间通信",lang:"zh-CN",frontmatter:{title:"直接相连的主机间通信",description:"介绍直接相连的两个主机之间是如何通信的，以及 ARP 协议是如果工作的。",keywords:["network","ARP Protocol","地址解析协议"],date:"2021-07-26T00:00:00.000Z",key:3},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"主机到主机的通信",slug:"主机到主机的通信",children:[]},{level:2,title:"总结",slug:"总结",children:[]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],content:"\n在互联网中有各种各样的设备，它们之间的通信方式也多种多样。两个直接相连的主机之间的通信最简单，也是所有其他通信方式的基础。理解了两个直接相连的主机之间的通信，就能快速理解经过路由器、交换机等设备的通信。\n\n## 主机到主机的通信\n\n直接相连的两个主机处在同一个网络中，主机 A 和主机 B 的 IP 地址属于同一个网络。\n\n![主机到主机的通信](/courses/network/host-to-host-c.png)\n\n每个主机都分配有唯一的 IP 地址和 MAC 地址，同时，因为主机也是第三层设备，因此主机也有一个 ARP 表。在初始时刻，ARP 表是空的。\n\n现在，主机 A 要像主机 B 发送一些数据。它知道主机 B 的 IP 地址，也知道自己的 IP 地址，可以正常的生成 第三层的数据头。\n\n我们前面说过，第二层要传递数据包，必须要有 MAC 地址。主机 A 是知道自己的 MAC 地址的，但是不知道主机 B 的 MAC 地址。主机 A 的 ARP 表里也没有关于主机 B 的 IP 地址的记录。现在主机 A 要如何才能知道主机 B 的 MAC 地址呢？\n\n主机 A 需要发起一个 ARP 请求，来寻求主机 B 的 MAC 地址。\n\n![ARP 请求](/courses/network/host-to-host-arp-c.png)\n\n这个 ARP 请求就是一个单个数据包，数据包里面包含的信息是，“如果谁的 IP 地址是 10.10.10.20，请将你的 MAC 地址发给我。”。\n\n直到现在，主机 A 依然不知道主机 B 是否存在，因此 ARP 请求是以广播的形似发出去的。所有与主机 A 同一个网络的主机都会接收到这个请求。\n\n在 ARP 请求中，主机 A 写入了自己的 MAC 地址，因此，接收到 ARP 请求的主机 B 是可以轻松的将自己的 MAC 地址定向发送给主机 A 的。\n\n![ARP 响应](/courses/network/host-to-host-arp-resp-c.png)\n\n主机 B 接收到主机 A 的 ARP 请求以后，它就知道了主机 A 的 IP 地址和 MAC 地址，这些信息就会被添加到主机 B 的 ARP 表中。\n\n同时，主机 B 将自己的 IP 地址和 MAC 地址以单播的形式发送给主机 A，网络中的其他主机不会收到这个 ARP 响应。\n\n主机 A 在接收到 ARP 响应以后，将主机 B 的 IP 地址和 MAC 地址添加到自己的 ARP 表中。\n\n之后，主机 A 就可以与主机 B 正常通信了。\n\n![主机 A 和主机 B 的通信](/courses/network/host-to-host-communicate-c.png)\n\n## 总结\n\n网络中的通信方式多种多样，主机与主机间直接通信的方式非常少见，但是这种通信方式确实整个互联网中设备间相互通信的基础。\n\n了解了主机间相互通信的原理，我们就可以理解交换机、路由器等是如何实现网络间的通信了。\n\n比较关键的一点是，主机是不知道它是直接与一个交换机相连还是与目标主机相连的，它需要借助于 ARP 协议来确定要目标主机或者下一跳的 MAC 地址。\n\n## 参考资料\n\n* [ARP 协议](https://www.youtube.com/watch?v=QPi5Nvxaosw)\n",contentRendered:'<p>在互联网中有各种各样的设备，它们之间的通信方式也多种多样。两个直接相连的主机之间的通信最简单，也是所有其他通信方式的基础。理解了两个直接相连的主机之间的通信，就能快速理解经过路由器、交换机等设备的通信。</p>\n<h2 id="主机到主机的通信" tabindex="-1"><a class="header-anchor" href="#主机到主机的通信" aria-hidden="true">#</a> 主机到主机的通信</h2>\n<p>直接相连的两个主机处在同一个网络中，主机 A 和主机 B 的 IP 地址属于同一个网络。</p>\n<p><img src="/courses/network/host-to-host-c.png" alt="主机到主机的通信"></p>\n<p>每个主机都分配有唯一的 IP 地址和 MAC 地址，同时，因为主机也是第三层设备，因此主机也有一个 ARP 表。在初始时刻，ARP 表是空的。</p>\n<p>现在，主机 A 要像主机 B 发送一些数据。它知道主机 B 的 IP 地址，也知道自己的 IP 地址，可以正常的生成 第三层的数据头。</p>\n<p>我们前面说过，第二层要传递数据包，必须要有 MAC 地址。主机 A 是知道自己的 MAC 地址的，但是不知道主机 B 的 MAC 地址。主机 A 的 ARP 表里也没有关于主机 B 的 IP 地址的记录。现在主机 A 要如何才能知道主机 B 的 MAC 地址呢？</p>\n<p>主机 A 需要发起一个 ARP 请求，来寻求主机 B 的 MAC 地址。</p>\n<p><img src="/courses/network/host-to-host-arp-c.png" alt="ARP 请求"></p>\n<p>这个 ARP 请求就是一个单个数据包，数据包里面包含的信息是，“如果谁的 IP 地址是 10.10.10.20，请将你的 MAC 地址发给我。”。</p>\n<p>直到现在，主机 A 依然不知道主机 B 是否存在，因此 ARP 请求是以广播的形似发出去的。所有与主机 A 同一个网络的主机都会接收到这个请求。</p>\n<p>在 ARP 请求中，主机 A 写入了自己的 MAC 地址，因此，接收到 ARP 请求的主机 B 是可以轻松的将自己的 MAC 地址定向发送给主机 A 的。</p>\n<p><img src="/courses/network/host-to-host-arp-resp-c.png" alt="ARP 响应"></p>\n<p>主机 B 接收到主机 A 的 ARP 请求以后，它就知道了主机 A 的 IP 地址和 MAC 地址，这些信息就会被添加到主机 B 的 ARP 表中。</p>\n<p>同时，主机 B 将自己的 IP 地址和 MAC 地址以单播的形式发送给主机 A，网络中的其他主机不会收到这个 ARP 响应。</p>\n<p>主机 A 在接收到 ARP 响应以后，将主机 B 的 IP 地址和 MAC 地址添加到自己的 ARP 表中。</p>\n<p>之后，主机 A 就可以与主机 B 正常通信了。</p>\n<p><img src="/courses/network/host-to-host-communicate-c.png" alt="主机 A 和主机 B 的通信"></p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>网络中的通信方式多种多样，主机与主机间直接通信的方式非常少见，但是这种通信方式确实整个互联网中设备间相互通信的基础。</p>\n<p>了解了主机间相互通信的原理，我们就可以理解交换机、路由器等是如何实现网络间的通信了。</p>\n<p>比较关键的一点是，主机是不知道它是直接与一个交换机相连还是与目标主机相连的，它需要借助于 ARP 协议来确定要目标主机或者下一跳的 MAC 地址。</p>\n<h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=QPi5Nvxaosw" target="_blank" rel="noopener noreferrer">ARP 协议<OutboundLink/></a></li>\n</ul>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-26",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/network/host-to-host.html",pathLocale:"/",permalink:null,slug:"host-to-host",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/network/host-to-host.md",filePathRelative:"courses/network/host-to-host.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-to-host.html.vue",componentFilePathRelative:"pages/courses/network/host-to-host.html.vue",componentFileChunkName:"v-58863653",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/host-to-host.html.js",dataFilePathRelative:"pages/courses/network/host-to-host.html.js",dataFileChunkName:"v-58863653",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/network/host-to-host.html",htmlFilePathRelative:"courses/network/host-to-host.html"},{key:"v-05b9340a",path:"/courses/network/key-devices.html",title:"网络中的关键设备",lang:"zh-CN",frontmatter:{title:"网络中的关键设备",description:"对互联网中各种关键设备进行功能说明",keywords:["network","host","switch","router","ARP Protocol"],date:"2021-07-25T00:00:00.000Z",key:2},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"主机（host）",slug:"主机-host",children:[]},{level:2,title:"网络（network）",slug:"网络-network",children:[]},{level:2,title:"交换机（switch）",slug:"交换机-switch",children:[]},{level:2,title:"路由器（router）",slug:"路由器-router",children:[]},{level:2,title:"地址解析协议（Address Resolution Protocol，ARP）",slug:"地址解析协议-address-resolution-protocol-arp",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\n互联网是由无数个小网络组成的，在这些网络中有各种各样的设备。今天我们来说一说实现网络通信的几个关键设备，以及这些设备是如何实现其功能的。\n\n## 主机（host）\n\n主机范指互联网上的任何一个端点设备，这个设备可以是发起数据传输的起点，也可以是接受数据的终点。\n\n最经典的例子就是我们的电脑。\n\n![主机](/courses/network/host-c.png)\n\n主机运行应用程序来与最终用户交互，同时，主机也会将数据写入网络进行传输。因此，主机可以操作所有的七层 OSI 模型。\n\n典型的网络传输中，通信双方通常被成为客户端和服务端。客户端发起请求，服务端处理请求并返回客户端需要的数据。\n\n## 网络（network）\n\n一个网络一般有至少两个主机组成。一个网络有多重存在形式：\n\n- 教室中的一组 PC，在同一地点组成一个网络。\n- 在家庭网络中，有多重类型的设备，手机、电脑、打印机等，这些设备组成家庭网络。\n- 在一家咖啡店里，WIFI 网络中有很多连接到这个 WIFI 的移动设备。\n- 一家公司通常有多个网络，比如供开发人员使用的开发网络，供全员使用的办公网络等。\n\n每种网络的功能不同，网络中的设备彼此连接通信，同时这些设备还可以与网络外的其他设备通信。实际上，这个互联网是由若干个互相连接的网络组成的。\n\n## 交换机（switch）\n\n交换机是一个网络内的设备，负责网络内的数据通信。\n\n交换机工作在 OSI 模型中的第二层，也就是说交换机只处理数据帧中第二层的数据头。第二层的数据头中包含两[跳](./osi-model.md#第二层-数据链路层)的地址信息（源和目标的 MAC 地址）。\n\n![交换机](/courses/network/switch-c.png)\n\n在交换机中维护这一个 MAC 地址表。这个地址表记录着每一个插在交换机端口上的设备的 MAC 地址。一个交换机有多个端口，从 24 个到 48 个，到 96 个，甚至更多。\n\n交换机通过读取接受到的数据的来源 MAC 地址来扩展 MAC 地址表。同时，交换机会根据目标 MAC 地址和 MAC 地址表来确定使用哪个端口。\n\n如果交换机无法确定使用哪个端口，则会将这条数据逐端口转发（排除接收数据的端口）。\n\n## 路由器（router）\n\n路由器是一个网络间的设备，负责网络间的通信。路由器上的每一个接口都会创建一个网络边界。\n\n路由器工作在 OSI 模型中的第三层，也就是说路由器只处理数据帧中第三层的数据头。第三层的数据头中包含端到端的地址信息（比如源和目标的 IP 地址）。\n\n![路由器](/courses/network/router-device-c.png)\n\n上图左侧的路由器（R1）和右侧的路由器（R2）创建了三个隔离的网络（(11.11.11.x，22.22.22.x 和 33.33.33.x)），R1 的右侧接口和 R2 的左侧接口处在同一个网络中。\n\n网络 11.11.11.x 中的主机要想与网络 33.33.33.x 中的主机进行通信，就必须将数据发送给路由器 R1，然后在发送给路由器 R2，最后在由路由器 R2 发送给网络 33.33.33.x 中的主机。\n\n路由器通过路由表（Routing Table）来实现上述功能。这个表中记录了去向所有路由器知道的网络的路径。这些记录通常被称为路由。表中的每一条记录包含一个 IP 网络和能够到达该网络的下一个路由器的地址。\n\n注意，对于路由器来说，路由表记录了所有它知道的网络。如果路由器接收到一个发往它不知道的网络的数据包，那么就该路由器而言，该网络一定不存在。因此，如果一个数据包的目标网络不在路由器的路由表中，该数据包会被路由器抛弃。\n\n## 地址解析协议（Address Resolution Protocol，ARP）\n\n前面我们讨论过第二层的 MAC 地址，以及第三层的 IP 地址。地址解析协议将这两个地址联接起来。\n\n一般来说，两个主机在进行通信之前，是知道对方的 IP 地址的。获取这个 IP 地址的方式有很多种，比如别人已经给定地址，或者通过 DNS 获取。\n\n知道了 IP 地址，但是却无法知道对方的 MAC 地址。主机会通过 ARP 协议来确定对方的 MAC 地址。换句话说，ARP 协议使用 IP 地址来确定 MAC 地址。建立联系的 IP 地址和 MAC 地址被存放在 ARP 表中。\n\n![ARP](/courses/network/arp-c.png)\n\n在上图中，有三个网络。首先，如果紫色网络内的主机要与紫色网络内的其他主机通信，通过 IP 地址可以判断出目标主机在同一个网络内。源主机通过 ARP 协议可以确定目标主机的 MAC 地址，从而可以设置第二层数据头如下：\n\n![网络内的 ARP](/courses/network/inner-network-arp-c.png)\n\n当紫色网路中的主机要与右边红色网络中的主机进行通信时，通过 IP 地址就可以判断出目标主机处在紫色网络外。这时，紫色网络中的主机就知道需要将数据包发给路由器 R1。如果主机确定目标主机是网络外的设备，那么它就会通过 ARP 协议获取最近的路由器的 MAC 地址。\n\n![网络外的 ARP](/courses/network/outer-network-arp-c.png)\n\n总结一下 ARP：\n\n- 如果目标主机处在网络内，那么源主机就通过 ARP 确定目标主机的 MAC 地址。\n- 如果目标主机处在网络外，那么源主机就通过 ARP 确定最近的路由器的 MAC 地址。\n\n我们知道，第二层负责逐跳传输数据包，第三层则负责端到端的传输数据包。ARP 就是帮助第三层来确定正确的第二层数据头来完成数据传输。\n\n## 总结\n\n本篇和[前面的一篇](./osi-model) 介绍了网络中的种种概念，这些是计算机网络中的基础。\n\n首先我们介绍了 OSI 模型中各层的职能。\n\n- 第一层负责在物理媒介中传输 0/1 数据流。\n- 第二层使用 MAC 地址来实现逐跳的数据传输。\n- 第三层使用 IP 地址来实现端到端的数据传输。\n- 第四层通过端口号来实现应用服务到应用服务的数据传输。\n\n我们还讨论了网络中的设备。\n\n- 交换机负责网络内的通信，工作在第二层。\n- 路由器负责网络间的通信，工作在第三层。\n- ARP 通过已知的 IP 地址来确定的未知的 MAC 地址。\n\n在各个设备中，使用了不同的映射表。\n\n- 交换机使用 MAC 地址表，来确定交换机的端口和 MAC 地址的映射关系。\n- 路由器使用路由表，来确定网络和能到这个网路的下一个路由器的地址。\n- 所有的第三层设备都使用 ARP 表来确定 IP 地址的 MAC 地址。\n",contentRendered:'<p>互联网是由无数个小网络组成的，在这些网络中有各种各样的设备。今天我们来说一说实现网络通信的几个关键设备，以及这些设备是如何实现其功能的。</p>\n<h2 id="主机-host" tabindex="-1"><a class="header-anchor" href="#主机-host" aria-hidden="true">#</a> 主机（host）</h2>\n<p>主机范指互联网上的任何一个端点设备，这个设备可以是发起数据传输的起点，也可以是接受数据的终点。</p>\n<p>最经典的例子就是我们的电脑。</p>\n<p><img src="/courses/network/host-c.png" alt="主机"></p>\n<p>主机运行应用程序来与最终用户交互，同时，主机也会将数据写入网络进行传输。因此，主机可以操作所有的七层 OSI 模型。</p>\n<p>典型的网络传输中，通信双方通常被成为客户端和服务端。客户端发起请求，服务端处理请求并返回客户端需要的数据。</p>\n<h2 id="网络-network" tabindex="-1"><a class="header-anchor" href="#网络-network" aria-hidden="true">#</a> 网络（network）</h2>\n<p>一个网络一般有至少两个主机组成。一个网络有多重存在形式：</p>\n<ul>\n<li>教室中的一组 PC，在同一地点组成一个网络。</li>\n<li>在家庭网络中，有多重类型的设备，手机、电脑、打印机等，这些设备组成家庭网络。</li>\n<li>在一家咖啡店里，WIFI 网络中有很多连接到这个 WIFI 的移动设备。</li>\n<li>一家公司通常有多个网络，比如供开发人员使用的开发网络，供全员使用的办公网络等。</li>\n</ul>\n<p>每种网络的功能不同，网络中的设备彼此连接通信，同时这些设备还可以与网络外的其他设备通信。实际上，这个互联网是由若干个互相连接的网络组成的。</p>\n<h2 id="交换机-switch" tabindex="-1"><a class="header-anchor" href="#交换机-switch" aria-hidden="true">#</a> 交换机（switch）</h2>\n<p>交换机是一个网络内的设备，负责网络内的数据通信。</p>\n<p>交换机工作在 OSI 模型中的第二层，也就是说交换机只处理数据帧中第二层的数据头。第二层的数据头中包含两<RouterLink to="/courses/network/osi-model.html#%E7%AC%AC%E4%BA%8C%E5%B1%82-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">跳</RouterLink>的地址信息（源和目标的 MAC 地址）。</p>\n<p><img src="/courses/network/switch-c.png" alt="交换机"></p>\n<p>在交换机中维护这一个 MAC 地址表。这个地址表记录着每一个插在交换机端口上的设备的 MAC 地址。一个交换机有多个端口，从 24 个到 48 个，到 96 个，甚至更多。</p>\n<p>交换机通过读取接受到的数据的来源 MAC 地址来扩展 MAC 地址表。同时，交换机会根据目标 MAC 地址和 MAC 地址表来确定使用哪个端口。</p>\n<p>如果交换机无法确定使用哪个端口，则会将这条数据逐端口转发（排除接收数据的端口）。</p>\n<h2 id="路由器-router" tabindex="-1"><a class="header-anchor" href="#路由器-router" aria-hidden="true">#</a> 路由器（router）</h2>\n<p>路由器是一个网络间的设备，负责网络间的通信。路由器上的每一个接口都会创建一个网络边界。</p>\n<p>路由器工作在 OSI 模型中的第三层，也就是说路由器只处理数据帧中第三层的数据头。第三层的数据头中包含端到端的地址信息（比如源和目标的 IP 地址）。</p>\n<p><img src="/courses/network/router-device-c.png" alt="路由器"></p>\n<p>上图左侧的路由器（R1）和右侧的路由器（R2）创建了三个隔离的网络（(11.11.11.x，22.22.22.x 和 33.33.33.x)），R1 的右侧接口和 R2 的左侧接口处在同一个网络中。</p>\n<p>网络 11.11.11.x 中的主机要想与网络 33.33.33.x 中的主机进行通信，就必须将数据发送给路由器 R1，然后在发送给路由器 R2，最后在由路由器 R2 发送给网络 33.33.33.x 中的主机。</p>\n<p>路由器通过路由表（Routing Table）来实现上述功能。这个表中记录了去向所有路由器知道的网络的路径。这些记录通常被称为路由。表中的每一条记录包含一个 IP 网络和能够到达该网络的下一个路由器的地址。</p>\n<p>注意，对于路由器来说，路由表记录了所有它知道的网络。如果路由器接收到一个发往它不知道的网络的数据包，那么就该路由器而言，该网络一定不存在。因此，如果一个数据包的目标网络不在路由器的路由表中，该数据包会被路由器抛弃。</p>\n<h2 id="地址解析协议-address-resolution-protocol-arp" tabindex="-1"><a class="header-anchor" href="#地址解析协议-address-resolution-protocol-arp" aria-hidden="true">#</a> 地址解析协议（Address Resolution Protocol，ARP）</h2>\n<p>前面我们讨论过第二层的 MAC 地址，以及第三层的 IP 地址。地址解析协议将这两个地址联接起来。</p>\n<p>一般来说，两个主机在进行通信之前，是知道对方的 IP 地址的。获取这个 IP 地址的方式有很多种，比如别人已经给定地址，或者通过 DNS 获取。</p>\n<p>知道了 IP 地址，但是却无法知道对方的 MAC 地址。主机会通过 ARP 协议来确定对方的 MAC 地址。换句话说，ARP 协议使用 IP 地址来确定 MAC 地址。建立联系的 IP 地址和 MAC 地址被存放在 ARP 表中。</p>\n<p><img src="/courses/network/arp-c.png" alt="ARP"></p>\n<p>在上图中，有三个网络。首先，如果紫色网络内的主机要与紫色网络内的其他主机通信，通过 IP 地址可以判断出目标主机在同一个网络内。源主机通过 ARP 协议可以确定目标主机的 MAC 地址，从而可以设置第二层数据头如下：</p>\n<p><img src="/courses/network/inner-network-arp-c.png" alt="网络内的 ARP"></p>\n<p>当紫色网路中的主机要与右边红色网络中的主机进行通信时，通过 IP 地址就可以判断出目标主机处在紫色网络外。这时，紫色网络中的主机就知道需要将数据包发给路由器 R1。如果主机确定目标主机是网络外的设备，那么它就会通过 ARP 协议获取最近的路由器的 MAC 地址。</p>\n<p><img src="/courses/network/outer-network-arp-c.png" alt="网络外的 ARP"></p>\n<p>总结一下 ARP：</p>\n<ul>\n<li>如果目标主机处在网络内，那么源主机就通过 ARP 确定目标主机的 MAC 地址。</li>\n<li>如果目标主机处在网络外，那么源主机就通过 ARP 确定最近的路由器的 MAC 地址。</li>\n</ul>\n<p>我们知道，第二层负责逐跳传输数据包，第三层则负责端到端的传输数据包。ARP 就是帮助第三层来确定正确的第二层数据头来完成数据传输。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>本篇和<a href="./osi-model">前面的一篇</a> 介绍了网络中的种种概念，这些是计算机网络中的基础。</p>\n<p>首先我们介绍了 OSI 模型中各层的职能。</p>\n<ul>\n<li>第一层负责在物理媒介中传输 0/1 数据流。</li>\n<li>第二层使用 MAC 地址来实现逐跳的数据传输。</li>\n<li>第三层使用 IP 地址来实现端到端的数据传输。</li>\n<li>第四层通过端口号来实现应用服务到应用服务的数据传输。</li>\n</ul>\n<p>我们还讨论了网络中的设备。</p>\n<ul>\n<li>交换机负责网络内的通信，工作在第二层。</li>\n<li>路由器负责网络间的通信，工作在第三层。</li>\n<li>ARP 通过已知的 IP 地址来确定的未知的 MAC 地址。</li>\n</ul>\n<p>在各个设备中，使用了不同的映射表。</p>\n<ul>\n<li>交换机使用 MAC 地址表，来确定交换机的端口和 MAC 地址的映射关系。</li>\n<li>路由器使用路由表，来确定网络和能到这个网路的下一个路由器的地址。</li>\n<li>所有的第三层设备都使用 ARP 表来确定 IP 地址的 MAC 地址。</li>\n</ul>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-25",deps:[],hoistedTags:[],links:[{raw:"./osi-model.md#%E7%AC%AC%E4%BA%8C%E5%B1%82-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82",relative:"courses/network/osi-model.md",absolute:"/courses/network/osi-model.md"}],pathInferred:"/courses/network/key-devices.html",pathLocale:"/",permalink:null,slug:"key-devices",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/network/key-devices.md",filePathRelative:"courses/network/key-devices.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/key-devices.html.vue",componentFilePathRelative:"pages/courses/network/key-devices.html.vue",componentFileChunkName:"v-05b9340a",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/key-devices.html.js",dataFilePathRelative:"pages/courses/network/key-devices.html.js",dataFileChunkName:"v-05b9340a",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/network/key-devices.html",htmlFilePathRelative:"courses/network/key-devices.html"},{key:"v-217e82ee",path:"/courses/network/osi-model.html",title:"OSI 模型",lang:"zh-CN",frontmatter:{title:"OSI 模型",description:"对 OSI 模型进行概念性的说明",keywords:["network","OSI model"],date:"2021-07-19T00:00:00.000Z",key:1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"第一层：物理层",slug:"第一层-物理层",children:[]},{level:2,title:"第二层：数据链路层",slug:"第二层-数据链路层",children:[]},{level:2,title:"第三层：网络层",slug:"第三层-网络层",children:[]},{level:2,title:"第二层和第三层的区别",slug:"第二层和第三层的区别",children:[]},{level:2,title:"第四层：传输层",slug:"第四层-传输层",children:[]},{level:2,title:"第五、六、七层",slug:"第五、六、七层",children:[]},{level:2,title:"封装与解封装",slug:"封装与解封装",children:[]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],content:'\n> 开放式系统互联模型（Open System Interconnection Model，简称为 OSI 模型），描述了互联网的功能组成。\n\nOSI 模型共分七层，如下图，每一层都实现了专有的功能，七层组合在一起，便实现了网络通信。\n\n<img src="/courses/network/osi-c.png" style="display:block;margin:0 auto;" />\n\n我们现在来看每一层的具体功能。\n\n## 第一层：物理层\n\n物理层负责传输 0/1 比特流。\n\n这一层负责处理两个网络节点之间的物理媒介，比如网线、WIFI。之所以命名为物理层，是因为这一层在上世纪 70 年代就已经被命名，那时候无线网络还未产生。\n\n在物理层，数据的实际形式与传输的物理媒介息息相关。比如以太网，比特流是通过电脉冲传输的，而对于 WIFI 来说，比特流是通过无线电波传输的，对于光线来说，比特流是通过光脉冲传输的。\n\n![物理传输媒介](/courses/network/physical-wires-c.png)\n\n另外，中继器和集线器也工作在物理层。\n\n中继器将信号从一个媒介传输到另一个媒介，从而扩大信号的传输范围。比如大型 WIFI 网络的部署中，就需要中继器来扩大信号范围。\n\n集线器是一个多端口中继器。如果一个集线器上连接有四个设备，一个设备上发出的数据将会被发送到另外三个设备上。\n\n## 第二层：数据链路层\n\n数据链路层负责与物理层交互，换句话说，数据链路层负责将 0/1 比特流放进传输媒介，和从传输媒介中读取 0/1 比特流。\n\n网卡（Network Interface Card，NIC）就是典型的数据链路层设备。不管是直接插网线的网卡还是 WIFI 网卡，都是从传输媒介中读写 0/1 比特流，区别仅仅是操作媒介不同。\n\n数据链路层会将 0/1 打包成一个个的数据块，这些块被称为帧（Frame）。\n\n在数据链路层中，通过 MAC 地址（Media Access Control address）来实现寻址。MAC 地址由设备厂商预先烧录在硬件上的地址，唯一标识这个设备。\n\n![网卡与交换机](/courses/network/nics-and-switches-c.png)\n\n除了网卡，交换机也工作在数据链路层。交换机主要负责网络间的通信。\n\n总而言之，数据链路层的功能就是负责将数据包从一个网卡传输到另一个网卡。或者说数据链路层负责逐跳的传输数据。\n\n## 第三层：网络层\n网络层负责端到端的传输数据包。\n\n网络层通过 IP 地址（Internet Protocol address）来确定网络中每一个节点的地址。\n\nIP 地址是个逻辑地址，不与具体的设备永久绑定，这一点与 MAC 地址不同。\n\n![路由器](/courses/network/router-c.png)\n\n路由器工作在网络层，它的主要职责是负责网络间的通信，是网络的边界。如果要与不在当前网络中的设备进行通信，则必须要使用路由器。\n\n## 第二层和第三层的区别\n搞清楚第二层和第三层之间的交互和区别对于理解数据如何在网络节点之间传输非常重要。\n\n比如，既然在数据链路层已经有了 MAC 地址，为什么还要在网络层中使用 IP 地址呢？\n\n其实，网络层和数据链路层的分工不同：\n* 数据链路层使用 MAC 地址来逐跳的传输数据。\n* 网络层使用 IP 地址来实现端到端的数据传输。\n\n当网络中的一个节点要发送数据的时候，会将源节点 IP 和目标节点 IP 都封装在数据包的 IP 头中。\n\nIP 头和数据将会被进一步的封装在 MAC 地址头中，这个地址头同时还封装了当前跳和下一跳的 MAC 地址。\n\n![数据传输展示](/courses/network/l2-vs-l3-c.gif)\n\n注意，在每个路由器之间，MAC 地址头都被解开，然后在发往下一跳的时候重新封装。IP 头只会在最终目的节点被解开。也就是说 IP 负责端到端的数据传输，而 MAC 负责逐跳传输数据。\n\n## 第四层：传输层\n传输层负责处理网络中的数据流。\n\n在已经连接到网络中的计算机上，同一时间可能同时运行着浏览器、音乐播放器、即时通讯系统比如微信等。每一个应用都是从网络上读写数据。\n\n如何来区分哪一个数据流是浏览器的，哪一段数据流是音乐播放器的呢？\n\n![传输层](/courses/network/layer4-c.png)\n\n第四层通过端口号来实现数据流的区分。\n\n在网络层中，有两种协议，TCP 协议（Transmission Control Protocol）和 UDP 协议（User Datagram Protocol）。\n\nTCP 和 UDP 都有 65536 个端口可供使用。每个应用数据流的 IP 报文中都含有源节点和目标节点的端口号。\n\nTCP 和 UDP 使用不同的机制来传输数据，本文不做详细讨论。\n\n总而言之，如果数据链路层负责逐跳传输数据，网络层负责端到端传输数据，那么传输层则是负责服务到服务的传输数据。\n\n## 第五、六、七层\n\n会话层、表示层和应用层负责对网络上传输过来的数据进行最后的处理。\n\n站在网络传输的角度上来看，第五、六、七层已经不是十分重要，在 [TCP/IP 模型](https://zh.wikipedia.org/wiki/TCP/IP) 中更是将这三层合并成了一层。\n\n本文不对这三层做特别说明。\n\n## 封装与解封装\n\n最后，我们要说一下在数据传输过程中的封装与解封装。\n\n在网络中，数据会被逐层处理。在发送端，数据在被从上到下逐层处理的过程中，每一层都会添加额外的信息来实现这一层的功能，知道最终这些数据被转换成 0/1 比特流发送出去。\n\n比如：\n\n* 传输层会向数据包中添加 TCP 头，里面包含源节点和目标节点的端口。\n* 网络层会向数据包中添加 IP 头，里面包含源节点和目标节点的 IP 地址。\n* 数据链路层会向数据包中添加以太网头，里面包含源节点和目标节点的 MAC 地址。\n\n当数据到达接收端后，每一层的都会解封装数据包，移除这一层的头，然后将剩余的数据包往上层传递，直到应用层。\n\n下图展示了数据包封装与解封装的过程。\n\n![封装与解封装](/courses/network/encap-decap-c.gif)\n\n注意，上图仅仅是一个示例，具体每一层添加什么样的头会根据该层的通信协议确定。\n\n总而言之，数据在传输过程中，先在发送端从上到下进行封装，每一层都会加上特定的头，直到最终数据被以 0/1 比特流的形式写入传输媒介中传输。数据到达接收端之后，会从下到上逐层去除之前加上的头，最终数据被传递给应用层使用。\n\n\n\n\n## 参考资料\n* [OSI 模型](https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B)\n',contentRendered:'<blockquote>\n<p>开放式系统互联模型（Open System Interconnection Model，简称为 OSI 模型），描述了互联网的功能组成。</p>\n</blockquote>\n<p>OSI 模型共分七层，如下图，每一层都实现了专有的功能，七层组合在一起，便实现了网络通信。</p>\n<img src="/courses/network/osi-c.png" style="display:block;margin:0 auto;" />\n<p>我们现在来看每一层的具体功能。</p>\n<h2 id="第一层-物理层" tabindex="-1"><a class="header-anchor" href="#第一层-物理层" aria-hidden="true">#</a> 第一层：物理层</h2>\n<p>物理层负责传输 0/1 比特流。</p>\n<p>这一层负责处理两个网络节点之间的物理媒介，比如网线、WIFI。之所以命名为物理层，是因为这一层在上世纪 70 年代就已经被命名，那时候无线网络还未产生。</p>\n<p>在物理层，数据的实际形式与传输的物理媒介息息相关。比如以太网，比特流是通过电脉冲传输的，而对于 WIFI 来说，比特流是通过无线电波传输的，对于光线来说，比特流是通过光脉冲传输的。</p>\n<p><img src="/courses/network/physical-wires-c.png" alt="物理传输媒介"></p>\n<p>另外，中继器和集线器也工作在物理层。</p>\n<p>中继器将信号从一个媒介传输到另一个媒介，从而扩大信号的传输范围。比如大型 WIFI 网络的部署中，就需要中继器来扩大信号范围。</p>\n<p>集线器是一个多端口中继器。如果一个集线器上连接有四个设备，一个设备上发出的数据将会被发送到另外三个设备上。</p>\n<h2 id="第二层-数据链路层" tabindex="-1"><a class="header-anchor" href="#第二层-数据链路层" aria-hidden="true">#</a> 第二层：数据链路层</h2>\n<p>数据链路层负责与物理层交互，换句话说，数据链路层负责将 0/1 比特流放进传输媒介，和从传输媒介中读取 0/1 比特流。</p>\n<p>网卡（Network Interface Card，NIC）就是典型的数据链路层设备。不管是直接插网线的网卡还是 WIFI 网卡，都是从传输媒介中读写 0/1 比特流，区别仅仅是操作媒介不同。</p>\n<p>数据链路层会将 0/1 打包成一个个的数据块，这些块被称为帧（Frame）。</p>\n<p>在数据链路层中，通过 MAC 地址（Media Access Control address）来实现寻址。MAC 地址由设备厂商预先烧录在硬件上的地址，唯一标识这个设备。</p>\n<p><img src="/courses/network/nics-and-switches-c.png" alt="网卡与交换机"></p>\n<p>除了网卡，交换机也工作在数据链路层。交换机主要负责网络间的通信。</p>\n<p>总而言之，数据链路层的功能就是负责将数据包从一个网卡传输到另一个网卡。或者说数据链路层负责逐跳的传输数据。</p>\n<h2 id="第三层-网络层" tabindex="-1"><a class="header-anchor" href="#第三层-网络层" aria-hidden="true">#</a> 第三层：网络层</h2>\n<p>网络层负责端到端的传输数据包。</p>\n<p>网络层通过 IP 地址（Internet Protocol address）来确定网络中每一个节点的地址。</p>\n<p>IP 地址是个逻辑地址，不与具体的设备永久绑定，这一点与 MAC 地址不同。</p>\n<p><img src="/courses/network/router-c.png" alt="路由器"></p>\n<p>路由器工作在网络层，它的主要职责是负责网络间的通信，是网络的边界。如果要与不在当前网络中的设备进行通信，则必须要使用路由器。</p>\n<h2 id="第二层和第三层的区别" tabindex="-1"><a class="header-anchor" href="#第二层和第三层的区别" aria-hidden="true">#</a> 第二层和第三层的区别</h2>\n<p>搞清楚第二层和第三层之间的交互和区别对于理解数据如何在网络节点之间传输非常重要。</p>\n<p>比如，既然在数据链路层已经有了 MAC 地址，为什么还要在网络层中使用 IP 地址呢？</p>\n<p>其实，网络层和数据链路层的分工不同：</p>\n<ul>\n<li>数据链路层使用 MAC 地址来逐跳的传输数据。</li>\n<li>网络层使用 IP 地址来实现端到端的数据传输。</li>\n</ul>\n<p>当网络中的一个节点要发送数据的时候，会将源节点 IP 和目标节点 IP 都封装在数据包的 IP 头中。</p>\n<p>IP 头和数据将会被进一步的封装在 MAC 地址头中，这个地址头同时还封装了当前跳和下一跳的 MAC 地址。</p>\n<p><img src="/courses/network/l2-vs-l3-c.gif" alt="数据传输展示"></p>\n<p>注意，在每个路由器之间，MAC 地址头都被解开，然后在发往下一跳的时候重新封装。IP 头只会在最终目的节点被解开。也就是说 IP 负责端到端的数据传输，而 MAC 负责逐跳传输数据。</p>\n<h2 id="第四层-传输层" tabindex="-1"><a class="header-anchor" href="#第四层-传输层" aria-hidden="true">#</a> 第四层：传输层</h2>\n<p>传输层负责处理网络中的数据流。</p>\n<p>在已经连接到网络中的计算机上，同一时间可能同时运行着浏览器、音乐播放器、即时通讯系统比如微信等。每一个应用都是从网络上读写数据。</p>\n<p>如何来区分哪一个数据流是浏览器的，哪一段数据流是音乐播放器的呢？</p>\n<p><img src="/courses/network/layer4-c.png" alt="传输层"></p>\n<p>第四层通过端口号来实现数据流的区分。</p>\n<p>在网络层中，有两种协议，TCP 协议（Transmission Control Protocol）和 UDP 协议（User Datagram Protocol）。</p>\n<p>TCP 和 UDP 都有 65536 个端口可供使用。每个应用数据流的 IP 报文中都含有源节点和目标节点的端口号。</p>\n<p>TCP 和 UDP 使用不同的机制来传输数据，本文不做详细讨论。</p>\n<p>总而言之，如果数据链路层负责逐跳传输数据，网络层负责端到端传输数据，那么传输层则是负责服务到服务的传输数据。</p>\n<h2 id="第五、六、七层" tabindex="-1"><a class="header-anchor" href="#第五、六、七层" aria-hidden="true">#</a> 第五、六、七层</h2>\n<p>会话层、表示层和应用层负责对网络上传输过来的数据进行最后的处理。</p>\n<p>站在网络传输的角度上来看，第五、六、七层已经不是十分重要，在 <a href="https://zh.wikipedia.org/wiki/TCP/IP" target="_blank" rel="noopener noreferrer">TCP/IP 模型<OutboundLink/></a> 中更是将这三层合并成了一层。</p>\n<p>本文不对这三层做特别说明。</p>\n<h2 id="封装与解封装" tabindex="-1"><a class="header-anchor" href="#封装与解封装" aria-hidden="true">#</a> 封装与解封装</h2>\n<p>最后，我们要说一下在数据传输过程中的封装与解封装。</p>\n<p>在网络中，数据会被逐层处理。在发送端，数据在被从上到下逐层处理的过程中，每一层都会添加额外的信息来实现这一层的功能，知道最终这些数据被转换成 0/1 比特流发送出去。</p>\n<p>比如：</p>\n<ul>\n<li>传输层会向数据包中添加 TCP 头，里面包含源节点和目标节点的端口。</li>\n<li>网络层会向数据包中添加 IP 头，里面包含源节点和目标节点的 IP 地址。</li>\n<li>数据链路层会向数据包中添加以太网头，里面包含源节点和目标节点的 MAC 地址。</li>\n</ul>\n<p>当数据到达接收端后，每一层的都会解封装数据包，移除这一层的头，然后将剩余的数据包往上层传递，直到应用层。</p>\n<p>下图展示了数据包封装与解封装的过程。</p>\n<p><img src="/courses/network/encap-decap-c.gif" alt="封装与解封装"></p>\n<p>注意，上图仅仅是一个示例，具体每一层添加什么样的头会根据该层的通信协议确定。</p>\n<p>总而言之，数据在传输过程中，先在发送端从上到下进行封装，每一层都会加上特定的头，直到最终数据被以 0/1 比特流的形式写入传输媒介中传输。数据到达接收端之后，会从下到上逐层去除之前加上的头，最终数据被传递给应用层使用。</p>\n<h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>\n<ul>\n<li><a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">OSI 模型<OutboundLink/></a></li>\n</ul>\n<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',date:"2021-07-19",deps:[],hoistedTags:[],links:[],pathInferred:"/courses/network/osi-model.html",pathLocale:"/",permalink:null,slug:"osi-model",filePath:"/Users/bingooo/workspace/everfind/website/docs/courses/network/osi-model.md",filePathRelative:"courses/network/osi-model.md",componentFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/osi-model.html.vue",componentFilePathRelative:"pages/courses/network/osi-model.html.vue",componentFileChunkName:"v-217e82ee",dataFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/.temp/pages/courses/network/osi-model.html.js",dataFilePathRelative:"pages/courses/network/osi-model.html.js",dataFileChunkName:"v-217e82ee",htmlFilePath:"/Users/bingooo/workspace/everfind/website/docs/.vuepress/dist/courses/network/osi-model.html",htmlFilePathRelative:"courses/network/osi-model.html"}]}},8894:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var r=t(6252);const o=(0,r.Wm)("div",{class:"custom-container tip"},[(0,r.Wm)("p",{class:"custom-container-title"},"TIP"),(0,r.Wm)("p",null,"计算机网络学习笔记")],-1),s=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:"/courses/network/network-c.gif",alt:"network"})],-1),i=(0,r.Wm)("p",null,"我们浏览网页、观看视频，都是跟互联网在打交道。互联网将全世界的计算机联接起来，使得他们可以彼此通信。",-1),a=(0,r.Wm)("p",null,"当我们的计算机要发送数据的时候，会将这些数据切分为小的数据块，这些块叫做包（package）。这些数据包就像是信封一样，将数据传输出去。",-1),p=(0,r.Wm)("p",null,"本系列将对在数据包从网络的一端传输到另一端的过程中，每个设备、每一步发生的事情做详细说明。",-1),l=(0,r.uE)('<blockquote><p>参考链接：https://www.practicalnetworking.net/series/packet-traveling/packet-traveling/</p></blockquote><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',2),c={render:function(e,n){const t=(0,r.up)("ArticleList");return(0,r.wg)(),(0,r.j4)(r.HY,null,[o,s,i,a,p,(0,r.Wm)(t,{noTag:!0}),l],64)}}}}]);