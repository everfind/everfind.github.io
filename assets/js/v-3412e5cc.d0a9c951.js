"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4466],{911:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-3412e5cc",path:"/courses/webpack/file-hash.html",title:"给文件名添加 hash 值",lang:"zh-CN",frontmatter:{title:"给文件名添加 hash 值",description:"介绍 Webpack 中如何给文件名添加 hash 值",keywords:["Webpack"],date:"2021-01-22T00:00:00.000Z",key:20},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"占位符（placeholder）",slug:"占位符-placeholder",children:[]},{level:2,title:"使用占位符",slug:"使用占位符",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/file-hash.md"}},6916:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<p>如果每次构建输出的文件名称是一样的，会给在客户端做长缓存带来很大的麻烦。因此，我们需要在输出的文件名中添加一些 hash 值，使得每次构建输出的文件名称是不一样的。</p><blockquote><p>从 Webpack 5 开始，Webpack 开始使用固定的方式来决定输出的文件名，我们可以通过 <code>optimization.moduleIds</code> 和 <code>optimization.chunkIds</code> 这两个字段进行控制。</p></blockquote><h2 id="占位符-placeholder" tabindex="-1"><a class="header-anchor" href="#占位符-placeholder" aria-hidden="true">#</a> 占位符（placeholder）</h2><p>Webpack 提供了一些占位符：</p><ul><li><code>[id]</code> 返回 chunk id</li><li><code>[path]</code> 返回文件路径</li><li><code>[name]</code> 返回文件名</li><li><code>[ext]</code> 返回文件扩展名</li><li><code>[fullhash]</code> 返回本次构建的 hash，如果本次构建过程中有任何一部分发生变化，这个 hash 也会变化</li><li><code>[chunkhash]</code> 返回每一个 entry chunk 的 hash。Webpack 配置定义的每一个 entry 都有一个自己的 hash，当 entry 中任何一部分发生变化，这个 hash 也会发生变化。<code>[chunkhash]</code> 比 <code>[fullhash]</code> 粒度更细一点。</li><li><code>[contenthash]</code> 返回模块内容的 hash。从 Webpack 5 开始，这个 hash 值被默认使用在生产模式构建中。</li></ul><p>假设有如下配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token constant">PATHS</span><span class="token punctuation">.</span>build<span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">&#39;[name].[contenthash].js&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Webpack 构建输出的文件名为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>main.d587bbd6e38337f5accd.js\nvendor.dc746a5db4ed650296e1.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此时，如果文件内容发生变化，则 <code>[contenthash]</code> 也会相应的变化，此时，浏览器缓存就会失效，浏览器就会重新发起一个请求来加载变化了的文件。即，如果仅仅只要 <code>main.js</code> 发生了变化，那么浏览器只会重新请求加载 <code>main.js</code>。</p><p>我们还可以将 hash 值加载请求参数中，比如 <code>main.js?d587bbd6e38337f5accd</code>, 这样的话，输出文件名不变，通过查询参数的变化来使缓存失效。</p><h2 id="使用占位符" tabindex="-1"><a class="header-anchor" href="#使用占位符" aria-hidden="true">#</a> 使用占位符</h2><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n      chunkFilename<span class="token operator">:</span> <span class="token string">&quot;[name].[contenthash].js&quot;</span><span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token string">&quot;[name].[contenthash].js&quot;</span><span class="token punctuation">,</span>\n      assetModuleFilename<span class="token operator">:</span> <span class="token string">&quot;[name].[contenthash][ext][query]&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>同时，我们还要给 css 也加上 hash。</p><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">extractCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//    filename: &quot;[name].css&quot;,</span>\n        filename<span class="token operator">:</span> <span class="token string">&quot;[name].[contenthash].css&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>npm run build</code>，可以看到输出如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 129 KiB\n    asset 935.a25ff4285adcf5d835fd.js 126 KiB [emitted] [immutable] [minimized] (id hint: vendors) 2 related assets\n    asset main.fdae79f138a0e0cd6a30.js 3.38 KiB [emitted] [immutable] [minimized] (name: main) 1 related asset\n    asset 958.1752e720e564a63a9d5f.js 204 bytes [emitted] [immutable] [minimized] 1 related asset\n  asset main.dd02bdb46b234aa6a450.css 1.37 KiB [emitted] [immutable] [minimized] (name: main)\n  asset index.html 322 bytes [emitted]\n  Entrypoint main 131 KiB (182 KiB) = 935.a25ff4285adcf5d835fd.js 126 KiB main.dd02bdb46b234aa6a450.css 1.37 KiB main.fdae79f138a0e0cd6a30.js 3.38 KiB 2 auxiliary assets\n  runtime modules 7.92 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 18695 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>现在尝试编辑 <code>main.css</code>，可以发现构建输出的文件名发生了变化。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webpack 提供的占位符可以帮助我们给输出文件名添加额外信息。</p><p>在这些占位符中，最有价值的是 <code>[name]</code>, <code>[contenthash]</code> 和 <code>[ext]</code>。 <code>[contenthash]</code> 基于文件内容生成 hash 值。</p><p>如果要导出 css 文件，即用了 <code>MiniCssExtractPlugin</code>，那么也需要在 css 文件名中使用 <code>[contenthash]</code>。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',25),p={render:function(s,n){return e}}}}]);