"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8992],{3132:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2c3a8771",path:"/tools/oclif.html",title:"一个 CLI 开发框架 oclif",lang:"zh-CN",frontmatter:{title:"一个 CLI 开发框架 oclif",date:"2021-09-16T00:00:00.000Z",description:"命令行工具开发框架 colif 简介",keywords:["cli","命令行","oclif"],tags:["工具"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"基本用法",slug:"基本用法",children:[{level:3,title:"定义命令",slug:"定义命令",children:[]},{level:3,title:"使用生命周期钩子",slug:"使用生命周期钩子",children:[]},{level:3,title:"使用插件",slug:"使用插件",children:[]},{level:3,title:"错误处理",slug:"错误处理",children:[]}]},{level:2,title:"其他功能",slug:"其他功能",children:[{level:3,title:"cli-ux",slug:"cli-ux",children:[]},{level:3,title:"node-notifier",slug:"node-notifier",children:[]}]}],filePathRelative:"tools/oclif.md"}},186:(n,s,a)=>{a.r(s),a.d(s,{default:()=>R});var p=a(6252);const e=(0,p.Wm)("p",null,"CLI（命令行工具，Command Line Interface）大家都非常熟悉了，比如 create-react-app 等。我们今天介绍一个 CLI 工具的开发框架，可以帮助我们快速构建 CLI 工具。",-1),t={href:"https://oclif.io/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("oclif"),c=(0,p.Uk)("（发音为 'oh-cliff'） 是一个命令行工具开发框架，功能丰富，开发方便。同时 oclif 还支持通过 TypeScript 来开发，对于习惯使用 TypeScript 的同学来说非常友好。"),l=(0,p.uE)('<h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><p>oclif 提供两种运行模式，一种是单一命令模式，类似于 curl，通过各种参数使用不同的功能。另一种是多命令模式，类似于 git，可以定义子命令来实现不同的功能。</p><p>下面的两个样例分别展示了单一命令模式和多命令模式的使用方法.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ npx oclif single mynewcli\n? <span class="token function">npm</span> package name <span class="token punctuation">(</span>mynewcli<span class="token punctuation">)</span>: mynewcli\n$ <span class="token builtin class-name">cd</span> mynewcli\n$ ./bin/run\nhello world from ./src/index.js<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>单命令模式下，会在 <code>src</code> 目录下生成一个 <code>index.{ts,js}</code> 文件，我们在这个文件里定义命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ npx oclif multi mynewcli\n? <span class="token function">npm</span> package name <span class="token punctuation">(</span>mynewcli<span class="token punctuation">)</span>: mynewcli\n$ <span class="token builtin class-name">cd</span> mynewcli\n$ ./bin/run --version\nmynewcli/0.0.0 darwin-x64 node-v9.5.0\n$ ./bin/run --help\nUSAGE\n  $ mynewcli <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>\n\nCOMMANDS\n  hello\n  <span class="token builtin class-name">help</span>   display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> mynewcli\n\n$ ./bin/run hello\nhello world from ./src/hello.js<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>多命令模式下，会在 <code>src</code> 目录下生成一个 <code>commands</code> 目录，这个目录下的每一个文件就是一个子命令。比如 <code>./src/commands/hello.ts</code>、<code>./src/commands/goodbye.ts</code>。</p><p>注意，多命令模式下命令和文件之间一个隐式的对应关系，比如 <code>src/commands</code> 目录下的文件是子命令。如果 <code>src/commands</code> 下是一个目录，则目录下的多个文件会形成一个 <code>Topic</code>。</p><p>加入有如下目录结构：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>package.json\nsrc/\n└── commands/\n    └── config/\n        ├── index.ts\n        ├── set.ts\n        └── get.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么，命令最终的执行形式为： <code>mynewcli config</code>，<code>mynewcli config:set</code> 和 <code>mynewcli config:get</code>。</p><h3 id="定义命令" tabindex="-1"><a class="header-anchor" href="#定义命令" aria-hidden="true">#</a> 定义命令</h3><p>不管是单一命令模式还是多命令模式，开发者只需要定义一个 <code>class</code> 继承 <code>Command</code> 类即可。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> Command <span class="token keyword">from</span> <span class="token string">&#39;@oclif/command&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> description <span class="token operator">=</span> <span class="token string">&#39;description of this example command&#39;</span>\n\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;running my command&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如上，在命令运行地时候，会自动执行 <code>run</code> 方法。</p><p><code>Command</code> 还提供了很多工具方法，比如 <code>this.log</code>、<code>this.warn</code>、<code>this.error</code>、<code>this.exit</code> 等，方便在运行过程中打印日志信息。</p><p>命令行工具通常都需要定义一些参数，oclif 支持两种参数定义形式，一种是 <code>argument</code>，用于定义有顺序要求的参数，一种是 <code>flag</code>，用于定义没有顺序要求的参数。</p><h4 id="定义-argument" tabindex="-1"><a class="header-anchor" href="#定义-argument" aria-hidden="true">#</a> 定义 argument</h4><p>argument 的使用如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ mycli firstArg secondArg <span class="token comment"># 参数顺序不能乱</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们可以这样定义 argument 参数：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> Command <span class="token keyword">from</span> <span class="token string">&#39;@oclif/command&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCLI</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;firstArg&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;secondArg&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过对象的形式获取参数</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> args <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>MyCLI<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">running my command with args: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span>firstArg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span>secondArg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token comment">// 也可以通过数组的形式获取参数</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> argv <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>MyCLI<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">running my command with args: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>我们可以对 argument 参数进行属性定义：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span>               <span class="token comment">// 参数名称，之后通过 argv[name] 的形式获取参数</span>\n    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token comment">// 是否必填</span>\n    description<span class="token operator">:</span> <span class="token string">&#39;output file&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 参数描述</span>\n    hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 是否从命令的 help 信息中隐藏</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> input <span class="token operator">=&gt;</span> <span class="token string">&#39;output&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 参数处理函数，可以改变用户输入的值</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>           <span class="token comment">// 参数默认值</span>\n    options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 参数的可选范围</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="定义-flag" tabindex="-1"><a class="header-anchor" href="#定义-flag" aria-hidden="true">#</a> 定义 flag</h4><p>flag 的使用形式如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ mycli --force --file<span class="token operator">=</span>./myfile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们可以这样定义 flag 参数：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> Command<span class="token punctuation">,</span> <span class="token punctuation">{</span>flags<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@oclif/command&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCLI</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> flags <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可以通过 --force 或 -f 来指定参数</span>\n    force<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>char<span class="token operator">:</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    file<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>flags<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>MyCLI<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">.</span>force<span class="token punctuation">)</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--force is set&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--file is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flags<span class="token punctuation">.</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>我们可以对 flag 参数进行属性定义：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> flags <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    char<span class="token operator">:</span> <span class="token string">&#39;n&#39;</span><span class="token punctuation">,</span>                    <span class="token comment">// 参数短名称</span>\n    description<span class="token operator">:</span> <span class="token string">&#39;name to print&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 参数描述</span>\n    hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token comment">// 是否从 help 信息中隐藏</span>\n    multiple<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 是否支持对这个参数设置多个值</span>\n    env<span class="token operator">:</span> <span class="token string">&#39;MY_NAME&#39;</span><span class="token punctuation">,</span>               <span class="token comment">// 默认值使用的环境变量的名称</span>\n    options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// 可选值列表</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> input <span class="token operator">=&gt;</span> <span class="token string">&#39;output&#39;</span><span class="token punctuation">,</span>     <span class="token comment">// 对用户输入进行处理</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>             <span class="token comment">// 默认值，也可以是一个返回字符串的函数</span>\n    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 是否必填</span>\n    dependsOn<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;extra-flag&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 依赖的其他 flag 参数列表</span>\n    exclusive<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;extra-flag&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 不能一起使用的其他 flag 参数列表</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 布尔值参数</span>\n  force<span class="token operator">:</span> flags<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    char<span class="token operator">:</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 默认值，可以是一个返回布尔值的函数</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="使用生命周期钩子" tabindex="-1"><a class="header-anchor" href="#使用生命周期钩子" aria-hidden="true">#</a> 使用生命周期钩子</h3><p>oclif 提供了一些生命周期钩子，可以让开发者在工具运行的各个阶段进行一些额外操作。</p><p>我们可以这样定义一个钩子函数：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Hook <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@oclif/config&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> hook<span class="token operator">:</span> Hook<span class="token operator">&lt;</span><span class="token string">&#39;init&#39;</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">example init hook running before </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同时，还需要在 <code>package.json</code> 中注册这个钩子函数：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;oclif&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;commands&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/commands&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/hooks/init/example&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>oclif 还支持定义多个钩子函数，多个钩子函数会并行运行：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;oclif&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;commands&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/commands&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;./lib/hooks/init/example&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;./lib/hooks/init/another_hook&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>目前支持的生命周期钩子如下：</p><ul><li><code>init</code> - 在 CLI 完成初始化之后，找到对应命令之前。</li><li><code>prerun</code> - 在 <code>init</code> 完成，并找到对应命令之后，但是在命令运行之前。</li><li><code>postrun</code> - 在命令运行结束之后，并没有错误发生。</li><li><code>command_not_found</code> - 没有找到对应命令，在展示错误信息之前。</li></ul><h3 id="使用插件" tabindex="-1"><a class="header-anchor" href="#使用插件" aria-hidden="true">#</a> 使用插件</h3><p>oclif 官方和社区提供了很多有用的插件可以供新开发的命令行工具使用，只需要在 <code>package.json</code> 中声明即可。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mycli&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n  <span class="token property">&quot;oclif&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;@oclif/plugin-help&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;@oclif/plugin-not-found&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可用的插件有：</p>',45),i={href:"https://github.com/oclif/plugin-not-found",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("@oclif/plugin-not-found"),u=(0,p.Uk)(' 当未找到命令的时候提供一个友好的 "did you mean" 信息。'),k={href:"https://github.com/oclif/plugin-plugins",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("@oclif/plugin-plugins"),d=(0,p.Uk)(" 允许用户给你的命令行工具添加插件。"),b={href:"https://github.com/oclif/plugin-update",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("@oclif/plugin-update"),f=(0,p.Uk)(" 自动更新插件。"),h={href:"https://github.com/oclif/plugin-help",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("@oclif/plugin-help"),v=(0,p.Uk)(" 帮助信息插件。"),w={href:"https://github.com/oclif/plugin-warn-if-update-available",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("@oclif/plugin-warn-if-update-available"),q=(0,p.Uk)(" 当有可用更新时，展示一个警告信息提示更新。"),W={href:"https://github.com/oclif/plugin-autocomplete",target:"_blank",rel:"noopener noreferrer"},C=(0,p.Uk)("@oclif/plugin-autocomplete"),U=(0,p.Uk)(" 提供 bash/zsh 的自动补全。"),j=(0,p.uE)('<h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3><p>命令行运行难免会出错，oclif 提供了两种错误处理的方法。</p><h4 id="command-catch" tabindex="-1"><a class="header-anchor" href="#command-catch" aria-hidden="true">#</a> <code>Command.catch</code></h4><p>每个 <code>Command</code> 实例都有一个 <code>catch</code> 方法，开发者可以在这个方法中处理错误。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Command<span class="token punctuation">,</span> flags<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@oclif/command&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something or</span>\n    <span class="token comment">// re-throw to be handled globally</span>\n    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="bin-run-的-catch" tabindex="-1"><a class="header-anchor" href="#bin-run-的-catch" aria-hidden="true">#</a> <code>bin/run</code> 的 <code>catch</code></h4><p><code>bin/run</code> 是每个 oclif 命令行工具的入口文件，我们可以通过 <code>bin/run</code> 的 <code>catch</code> 方法抓取错误，包括 <code>Command</code> 中重新抛出的错误。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;@oclif/errors/handle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">//或</span>\n\n<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> oclifHandler <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;@oclif/errors/handle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// do any extra work with error</span>\n  <span class="token keyword">return</span> <span class="token function">oclifHandler</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="其他功能" tabindex="-1"><a class="header-anchor" href="#其他功能" aria-hidden="true">#</a> 其他功能</h2><h3 id="cli-ux" tabindex="-1"><a class="header-anchor" href="#cli-ux" aria-hidden="true">#</a> cli-ux</h3>',10),$=(0,p.Uk)("oclif 官方维护的 "),_={href:"https://github.com/oclif/cli-ux",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("cli-ux"),L=(0,p.Uk)(" 库提供了许多使用的功能。"),M=(0,p.Uk)("通过 "),A=(0,p.Wm)("code",null,"cliux.prompt()",-1),H=(0,p.Uk)(" 函数可以实现简单的交互功能。如果有更复杂的交互需求，可以使用 "),E={href:"https://github.com/SBoudrias/Inquirer.js",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("inquirer"),N=(0,p.Uk)("。"),O=(0,p.Wm)("li",null,[(0,p.Uk)("通过 "),(0,p.Wm)("code",null,"cliux.action"),(0,p.Uk)(" 可以实现旋转 loading 效果。")],-1),T=(0,p.Wm)("li",null,[(0,p.Uk)("通过 "),(0,p.Wm)("code",null,"cliux.table"),(0,p.Uk)(" 可以展示表格数据。")],-1),z=(0,p.Wm)("h3",{id:"node-notifier",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#node-notifier","aria-hidden":"true"},"#"),(0,p.Uk)(" node-notifier")],-1),D=(0,p.Uk)("通过 "),Y={href:"https://github.com/mikaelbr/node-notifier",target:"_blank",rel:"noopener noreferrer"},B=(0,p.Uk)("node-notifier"),G=(0,p.Uk)(" 可以实现跨平台的通知信息展示。"),P=(0,p.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),R={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[(0,p.Wm)("a",t,[o,(0,p.Wm)(a)]),c]),l,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",i,[r,(0,p.Wm)(a)]),u]),(0,p.Wm)("li",null,[(0,p.Wm)("a",k,[m,(0,p.Wm)(a)]),d]),(0,p.Wm)("li",null,[(0,p.Wm)("a",b,[g,(0,p.Wm)(a)]),f]),(0,p.Wm)("li",null,[(0,p.Wm)("a",h,[y,(0,p.Wm)(a)]),v]),(0,p.Wm)("li",null,[(0,p.Wm)("a",w,[x,(0,p.Wm)(a)]),q]),(0,p.Wm)("li",null,[(0,p.Wm)("a",W,[C,(0,p.Wm)(a)]),U])]),j,(0,p.Wm)("p",null,[$,(0,p.Wm)("a",_,[I,(0,p.Wm)(a)]),L]),(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[M,A,H,(0,p.Wm)("a",E,[S,(0,p.Wm)(a)]),N]),O,T]),z,(0,p.Wm)("p",null,[D,(0,p.Wm)("a",Y,[B,(0,p.Wm)(a)]),G]),P],64)}}}}]);