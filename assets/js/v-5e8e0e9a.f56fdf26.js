"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7255],{48:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-5e8e0e9a",path:"/courses/webpack/tree-shaking.html",title:"Tree Shaking",lang:"zh-CN",frontmatter:{title:"Tree Shaking",description:"介绍 Webpack 中如何进行 Tree Shaking",keywords:["Webpack"],date:"2021-01-20T00:00:00.000Z",key:18},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Tree Shaking 示例",slug:"tree-shaking-示例",children:[]},{level:2,title:"包级别的 Tree Shaking",slug:"包级别的-tree-shaking",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/tree-shaking.md"}},2812:(e,n,a)=>{a.r(n),a.d(n,{default:()=>u});var s=a(6252);const t=(0,s.uE)('<p>Tree Shaking 是 ES2015 模块定义方式提供的一个特性。Webpack 通过静态的分析模块定义，可以知道模块中哪些代码被使用了，那么代码没有被使用过。从 Webpack 5 开始，Tree Shaking 功能更加强大，可以支持嵌套代码、CommonJS 规范定义的代码的 Tree Shaking.</p><h2 id="tree-shaking-示例" tabindex="-1"><a class="header-anchor" href="#tree-shaking-示例" aria-hidden="true">#</a> Tree Shaking 示例</h2><p>我们先定义一个包含不会被使用的代码的模块。</p><p><strong>src/shake.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">shake</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;shake&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bake</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bake&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> shake<span class="token punctuation">,</span> bake <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在应用代码中是只用其中一部分。</p><p><strong>src/index.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">...</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> bake <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./shake&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此时，执行 <code>npm run build</code>，查看构建输出的代码（<code>dist/main.js</code>），可以看到代码中只有 <code>console.log(&quot;bake&quot;)</code> 而没有 <code>console.log(&quot;shake&quot;)</code>.</p><blockquote><p>如果要与 TypeScript 配合使用，我们需要设置 <code>compilerOptions.module</code> 为 <code>es2015</code>。这么做是为了将 ES2015 的模块定义留给 Webpack 来处理。</p></blockquote><h2 id="包级别的-tree-shaking" tabindex="-1"><a class="header-anchor" href="#包级别的-tree-shaking" aria-hidden="true">#</a> 包级别的 Tree Shaking</h2><p>Webpack 同样支持针对 npm 包的 Tree Shaking。如果一个包需要支持 Tree Shaking，这个包需要将 ES2015 模块以外的代码都进行转换，然后通过 <code>package.json</code> 中的 <code>module</code> 字段指定 ES2015 模块的代码。这样 Webpack 就可以通过 <code>module</code> 找到 ES2015 的模块，然后应用 Tree Shaking。</p><p>如果需要与 Babel 一起使用，则需要设置 <code>&quot;modules&quot;: false</code>，这样才能让 Webpack 来处理 ES2015 模块。</p><p>另外，需要注意，为了能更好的应用 Tree Shaking，如果包里没有产生副作用的代码，则可以在 <code>package.json</code> 中增加 <code>&quot;sideEffects&quot;: false</code> 来显示标明。</p>',14),p=(0,s.Uk)("另一种对第三方包进行 Tree Shaking 的方式是使用 "),o={href:"https://www.npmjs.com/package/babel-plugin-transform-imports",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("babel-plugin-transform-imports"),i=(0,s.Uk)(" 这个包来对模块中的 "),r=(0,s.Wm)("code",null,"import",-1),l=(0,s.Uk)(" 语句做一些处理，使得 Webpack 能更好的进行 Tree Shaking。"),k=(0,s.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Tree Shaking 是一个很强大的功能，一个包如果要支持 Tree Shaking 的话，需要源代码使用 ES2015，同时在 <code>package.json</code> 中设置 <code>module</code> 字段。</p><p>Tree Shaking 会删除未被使用的代码。</p><p>如果要使用 Tree Shaking，需要以 ES2015 来编写源代码。</p><p>如果你是一个包的开发者，要想支持 Tree Shaking，则需要将源代码中非 ES2015 模块的代码进行必要的转换，同时可以借助于 <code>&quot;sideEffects&quot;: false</code> 来让 Webpack 更好的应用 Tree Shaking.</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',6),u={render:function(e,n){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[t,(0,s.Wm)("p",null,[p,(0,s.Wm)("a",o,[c,(0,s.Wm)(a)]),i,r,l]),k],64)}}}}]);