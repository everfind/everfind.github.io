"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[3982],{2729:(e,t,a)=>{a.r(t),a.d(t,{data:()=>r});const r={key:"v-60d0b1eb",path:"/solutions/graphql/bff.html",title:"快速理解 BFF",lang:"zh-CN",frontmatter:{title:"快速理解 BFF",description:"什么是 BFF？如何建设 BFF？",keywords:["BFF"],date:"2021-06-23T00:00:00.000Z",key:1,tags:["概念"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"BFF 的诞生背景",slug:"bff-的诞生背景",children:[]},{level:2,title:"如何建设 BFF？",slug:"如何建设-bff",children:[]},{level:2,title:"BFF 带来了哪些挑战？",slug:"bff-带来了哪些挑战",children:[]},{level:2,title:"参考文献",slug:"参考文献",children:[]}],filePathRelative:"solutions/graphql/bff.md"}},9481:(e,t,a)=>{a.r(t),a.d(t,{default:()=>h});var r=a(6252);const F=(0,r.uE)('<p>BFF（Backend For Frontend）这个模式出来很多年了，业界也有很多不错的实践。本文旨在对什么是 BFF，以及在什么情况下适合使用 BFF 做一些说明。</p><h2 id="bff-的诞生背景" tabindex="-1"><a class="header-anchor" href="#bff-的诞生背景" aria-hidden="true">#</a> BFF 的诞生背景</h2><p>在互联网的发展过程中，Web 应用的功能变得越来越丰富。极端情况下，有一些页面甚至需要调用几十个接口来完成数据的获取。随着移动互联网的发展，移动 APP、H5 页面大大拓宽了前端的工作领域，同时也带来了多样的页面数据获取需求。</p><p>在传统的开发模式中，后端服务直接为前端页面提供 API 接口。换句话说，后端的接口设计受页面的影响非常大。在互联网场景下，前端页面的变化是非常快的，也就意味着后端的接口也要跟着变。那么，势必会影响到后端的领域能力沉淀。同时，由于不同的 UI 端对数据的需求不尽相同，后端往往需要针对不同的端提供定制化的接口，这加剧了这个问题的影响。</p><p>那么，如何才能有效解决这个问题呢？</p><h2 id="如何建设-bff" tabindex="-1"><a class="header-anchor" href="#如何建设-bff" aria-hidden="true">#</a> 如何建设 BFF？</h2><p>BFF 全称是 Backend For Frontend。这里面有两个关键词，一个是 BFF 的服务对象，即 BFF 是为前端数据服务的。一个是 BFF 的本身存在形式，BFF 是一个后端服务，负责对后端领域数据接口进行聚合、裁剪以及编排。</p><p>在回答如何建设 BFF 这个问题之前，我们需要先明确一个问题，就是由谁来构建 BFF？</p><p>现在各大互联网公司都有关于 BFF 的实践，有的是前端团队负责 BFF，有的是后端团队负责 BFF。</p><p>我们不妨可以对比下前端和后端团队来构建 BFF 的优缺点。</p><table><thead><tr><th>谁来构建</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>前端</td><td>能对页面的定制化需求做出快速反应，几乎没有沟通成本</td><td>需要具备后端开发能力，对人的要求更高；同时需要前端深入理解业务模型</td></tr><tr><td>后端</td><td>对业务模型理解更加透彻；服务管理的工具更丰富</td><td>沟通成本高</td></tr></tbody></table><p>这两种实践没有孰优孰劣，无非是哪种方式更适合各自技术团队的技术能力构成和组织架构罢了。</p><p>我所在的团队中，前端团队有一定的服务端开发能力，同时前端更接近于用户，对数据的定制化需求更加迫切，因此，我们采用的是由前端团队来负责建设 BFF。</p><h4 id="如何划分-bff" tabindex="-1"><a class="header-anchor" href="#如何划分-bff" aria-hidden="true">#</a> 如何划分 BFF？</h4><p>单一服务的 BFF 只适合于业务初始阶段，当业务逐步发展，BFF 对接的业务模型越来越多，对接的前端展现形式也越来越多，我们就需要思考 BFF 如何划分了。</p><p>这里有两个问题需要解决，一个是如何处理各端差异的问题，一个是如何管理业务模型的问题。</p><h5 id="如何处理各端差异" tabindex="-1"><a class="header-anchor" href="#如何处理各端差异" aria-hidden="true">#</a> 如何处理各端差异</h5><p>我们前面就说到，BFF 诞生的一个出发点就是要解决因为端的差异导致对数据需求的不同的问题。</p><p>为了能快速响应各端的数据需求，同时减少各端之间的相互影响，我们需要针对各端单独起 BFF 服务。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbL2726q8u10H16U6fIl9ER6rmKmNawjUtfvCPdStgVTYs4YBnOj-XfxrGKaGbBNqvfG1PvFcN5iuxjK16k06S5NLqxk2L0yy5yc3rGSGKzFJjKwv0bK6n5aK2s75a2nGrGkp3jG9P0iGD50jaEP0aKEnnIyrA0GGm0" alt="uml diagram"><h5 id="如何管理业务模型" tabindex="-1"><a class="header-anchor" href="#如何管理业务模型" aria-hidden="true">#</a> 如何管理业务模型</h5><p>后端的业务模型都是领域相关的，比如用户模型、订单模型、商品模型，这些模型不会在同一个服务内，而是分别在用户领域、订单领域、商品领域的服务里面。</p><p>通常情况下，我们有两种方式来建立 BFF 的领域能力。一种是在 BFF 中通过目录、模块的形式进行规范管理，BFF 以单体服务的形式存在。一种是将领域能力独立成服务，对后端领域能力进行领域内的数据聚合。面向各个端的 BFF 服务再将各个领域的 BFF 服务数据进行二次聚合。</p><p>前一种方式的架构图与上面一样，后一种的架构图如下。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbL2726q8u10H16U6fIl9ER6rmKmNawjUtfv4O4_yMwHKzxfoBn9onzEQK1mNy-PSMpZkte-f_DwNtQjH3P11GHi1d88X1Je29S0SuAkhfsS4S2tGVcmzm95LVGqxD3TYwoC9AhKOGHZaSMHl83r0vqiv65aSn64KQOZIoCP3R2F2JZeNv668fa1qmERZAIHL0vXF58ja7b75BpKe190000" alt="uml diagram"><p>将领域 BFF 服务单独拆分出来，需要面向端的 BFF 将数据做二次聚合。这增加了额外的复杂性。同时，如果后端领域服务拆分的很细的话，BFF 服务的颗粒度划分也需要做一些深入的思考。这个我们会在后面的文章中详细分析。</p><h4 id="构建-bff-的基本原则是什么" tabindex="-1"><a class="header-anchor" href="#构建-bff-的基本原则是什么" aria-hidden="true">#</a> 构建 BFF 的基本原则是什么？</h4><p>BFF 作为一个沟通前后端的中间层服务，势必在建设过程中遇到很多难以确定边界的事情。比如一个功能到底是放在 BFF 做还是放在后端服务来做，有时候这样的问题最终得依赖经验丰富的开发同学来解决。</p><p>那么，我们在构建 BFF 的时候，需要确定一些基本原则，来尽量减少这类问题的发生。</p><ul><li><strong>BFF 要聚焦在对数据的聚合、裁剪和编排上</strong></li></ul><p>BFF 作为一个服务，理论上什么功能都可以做。但是我们要明确构建 BFF 的目的，就是为了解决前端页面差异化的展示需求。因此，BFF 应该聚焦在对数据的聚合、裁剪，以及在必要情况对后端接口进行一定的编排的能力。其他的问题，虽然 BFF 也可以轻松解决，但是还是要交给后端服务来实现。</p><ul><li><strong>所有的 UI 都应该与 BFF 对接</strong></li></ul><p>有了 BFF 以后，我们应该将所有针对 UI 的数据支持都收口到 BFF 上来。换句话说就是所有 UI 的数据都应该从 BFF 中获取，尽量避免即从后端服务直接获取数据，又从 BFF 获取数据的情况。</p><h2 id="bff-带来了哪些挑战" tabindex="-1"><a class="header-anchor" href="#bff-带来了哪些挑战" aria-hidden="true">#</a> BFF 带来了哪些挑战？</h2><p>对于前端开发人员来说，BFF 带来了一个全新的技术环境。需要开发人员快速学习并掌握服务端开发的基本技能，包括但不限于基础的服务端开发能力、基础的运维能力等。</p><p>同时，前端同学要完成思维方式的转变，BFF 虽然为前端页面的数据服务，但是其本身是一个后端服务，作为 API 的消费者的同时，也是 API 的生产者，所有后端服务可能遇到的问题，BFF 都可能遇到。比如对外提供的 API 如何保证兼容性等。</p><p>除了硬性的技能要求以外，BFF 带给前端开发人员最大的挑战是需要开发人员更加细致的了解业务。需要从具体业务、乃至整个产品的角度来思考，这对习惯于聚焦页面展现效果的前端开发人员来说，也是一个极大的工作思路的转变。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',38),i={href:"https://samnewman.io/patterns/architectural/bff/",target:"_blank",rel:"noopener noreferrer"},p=(0,r.Uk)("Pattern: Backends For Frontends"),l={href:"https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B",target:"_blank",rel:"noopener noreferrer"},n=(0,r.Uk)("康威定律"),d=(0,r.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),h={render:function(e,t){const a=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.j4)(r.HY,null,[F,(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,[(0,r.Wm)("a",i,[p,(0,r.Wm)(a)])]),(0,r.Wm)("li",null,[(0,r.Wm)("a",l,[n,(0,r.Wm)(a)])])]),d],64)}}}}]);