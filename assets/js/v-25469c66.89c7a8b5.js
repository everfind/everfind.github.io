"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7199],{5650:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-25469c66",path:"/courses/webpack/remove-css.html",title:"删除多余样式",lang:"zh-CN",frontmatter:{title:"删除多余样式",description:"介绍 Webpack 如何删除多余的样式",keywords:["Webpack"],date:"2021-01-09T00:00:00.000Z",key:7},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"PurgeCSS",slug:"purgecss",children:[]},{level:2,title:"critical-path-css-tools",slug:"critical-path-css-tools",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/remove-css.md"}},8542:(n,s,a)=>{a.r(s),a.d(s,{default:()=>_});var e=a(6252);const p=(0,e.Uk)("像 "),t={href:"https://www.npmjs.com/package/bootstrap",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("Bootstrap"),o=(0,e.Uk)(" 和 "),l={href:"https://www.npmjs.com/package/tailwind",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Tailwind"),i=(0,e.Uk)(" 这类的框架通常都会有很多的样式，有时候我们仅仅使用了一个功能，却不得不引入一个庞大的样式包。本篇介绍一些删除多余样式的方法。"),u=(0,e.Wm)("h2",{id:"purgecss",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#purgecss","aria-hidden":"true"},"#"),(0,e.Uk)(" PurgeCSS")],-1),k={href:"https://www.npmjs.com/package/purgecss",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("PurgeCSS"),m=(0,e.Uk)(" 通过分析代码，可以分析出哪些样式类被使用，从而将未被使用的样式从项目中移除。我们以 Tailwind 为例做个说明，如何使用 PurgeCSS。"),b=(0,e.uE)('<p>安装 Tailwind</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> tailwindcss postcss-loader --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们需要借助与 PostCSS 来使用 Tailwind。</p><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">tailwind</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  loader<span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> <span class="token punctuation">{</span>\n    postcssOptions<span class="token operator">:</span> <span class="token punctuation">{</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cssLoaders <span class="token operator">=</span> <span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">tailwind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token comment">// parts.extractCSS(),</span>\n  parts<span class="token punctuation">.</span><span class="token function">extractCSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loaders<span class="token operator">:</span> cssLoaders <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在项目中导入 Tailwind 的样式</p><p><strong>src/main.css</strong></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> cornsilk<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在代码中使用 Tailwind 的样式类 <strong>src/component.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;rounded bg-red-100 border max-w-md m-4 p-4&#39;</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>启动开发服务器，<code>npm run start</code>, 查看浏览器结果 <img src="/courses/webpack/hellowold-c.png" alt="da07c43af07e0642f092dc1e1a8da0e4.png"></p><p>执行构建，<code>npm run build</code>, 输出如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset main.css 3.39 MiB [compared for emit] [big] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  asset main.js 193 bytes [emitted] [minimized] (name: main)\n  Entrypoint main [big] 3.39 MiB = main.css 3.39 MiB main.js 193 bytes\n  orphan modules 266 bytes [orphan] 2 modules\n  code generated modules 365 bytes (javascript) 3.39 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 365 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/main.css 3.39 MiB [code generated]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>从构建结果中可以看到，样式文件变大了，有 3.39 MB. 我们用 PurgeCSS 来优化一下。</p>',16),g=(0,e.Uk)("安装 "),h={href:"https://www.npmjs.com/package/purgecss-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("purgecss-webpack-plugin"),w=(0,e.Uk)(" 插件"),x=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> glob purgecss-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>修改配置 <strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;glob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> PurgeCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;purgecss-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">ALL_FILES</span> <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/*.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">eliminateUnusedCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">PurgeCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      paths<span class="token operator">:</span> <span class="token constant">ALL_FILES</span><span class="token punctuation">,</span> <span class="token comment">// Consider extracting as a parameter</span>\n      extractors<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token function-variable function">extractor</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n            content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^&lt;&gt;&quot;&#39;`\\s]*[^&lt;&gt;&quot;&#39;`\\s:]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// const productionConfig = merge([]);</span>\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">eliminateUnusedCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行构建，<code>npm run build</code>, 输出结果如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: asset main.css 7.52 KiB [emitted] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  asset main.js 193 bytes [compared for emit] [minimized] (name: main)\n  Entrypoint main 7.71 KiB = main.css 7.52 KiB main.js 193 bytes\n  orphan modules 266 bytes [orphan] 2 modules\n  code generated modules 365 bytes (javascript) 3.39 MiB (css/mini-extract) [code generated]\n    ./src/index.js + 2 modules 365 bytes [built] [code generated]\n    css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/main.css 3.39 MiB [code generated]\n  webpack 5.11.1 compiled successfully in 4901 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以看到，输出样式减小到了 7.52 KB.</p>',8),f={href:"https://www.npmjs.com/package/uncss",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("uncss"),j=(0,e.Uk)(" 是 PurgeCSS 的一个替代方案，可以作为 PostCSS 的插件来使用。"),S=(0,e.Wm)("h2",{id:"critical-path-css-tools",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#critical-path-css-tools","aria-hidden":"true"},"#"),(0,e.Uk)(" critical-path-css-tools")],-1),C={href:"https://github.com/addyosmani/critical-path-css-tools",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("critical-path-css-tools"),U=(0,e.Uk)(" 换了一个角度，不减少构建结果的大小，而是从关键渲染路径的角度出发，先渲染页面，然后通过分析关键渲染路径上的样式使用来确定哪些样式需要优先加载。"),P=(0,e.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>使用 PurgeCSS 可以有效的帮助我们减小构建结果的大小。在构建使用了样式框架的静态站点时尤为适用。</p><p>PurgeCSS 通过静态分析源代码的形式来检测未被使用的样式。</p><p>我们通过 purgecss-webpack-plugin 这个插件来使用 PurgeCSS。</p><p>通常情况下，PurgeCSS 可以帮助我们移除大部分的未使用样式，但是如果代码中的样式都是动态引用的，那么移除效果会打个折扣。</p><p>关键路径渲染是另一种 CSS 优化策略，旨在尽快的展示内容，而不是等待所有样式加载完之后才渲染。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',7),_={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("p",null,[p,(0,e.Wm)("a",t,[c,(0,e.Wm)(a)]),o,(0,e.Wm)("a",l,[r,(0,e.Wm)(a)]),i]),u,(0,e.Wm)("p",null,[(0,e.Wm)("a",k,[d,(0,e.Wm)(a)]),m]),b,(0,e.Wm)("p",null,[g,(0,e.Wm)("a",h,[v,(0,e.Wm)(a)]),w]),x,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",f,[y,(0,e.Wm)(a)]),j])]),S,(0,e.Wm)("p",null,[(0,e.Wm)("a",C,[W,(0,e.Wm)(a)]),U]),P],64)}}}}]);