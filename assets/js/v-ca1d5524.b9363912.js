"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8279],{8525:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-ca1d5524",path:"/courses/webpack/3rd-lib.html",title:"处理第三方包",lang:"zh-CN",frontmatter:{title:"处理第三方包",description:"介绍 Webpack 中如何处理第三方包",keywords:["Webpack"],date:"2021-02-03T00:00:00.000Z",key:32},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"resolve.alias",slug:"resolve-alias",children:[]},{level:2,title:"resolve.modules",slug:"resolve-modules",children:[]},{level:2,title:"resolve.extensions",slug:"resolve-extensions",children:[]},{level:2,title:"resolve.plugins",slug:"resolve-plugins",children:[]},{level:2,title:"不处理某些包",slug:"不处理某些包",children:[]},{level:2,title:"处理全局变量",slug:"处理全局变量",children:[{level:3,title:"注入全局变量",slug:"注入全局变量",children:[]}]},{level:2,title:"解析全局变量",slug:"解析全局变量",children:[]},{level:2,title:"暴露全局变量",slug:"暴露全局变量",children:[]},{level:2,title:"删除未使用的模块",slug:"删除未使用的模块",children:[]},{level:2,title:"处理预构建的包",slug:"处理预构建的包",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/3rd-lib.md"}},8148:(n,s,a)=>{a.r(s),a.d(s,{default:()=>V});var e=a(6252);const p=(0,e.uE)('<p>有些时候，一些 npm 包并没有按照规范的方式打包，或者本身 npm 包比较老旧，这时候我们需要修改一些配置，使得 Webpack 正确的处理这些包。</p><h2 id="resolve-alias" tabindex="-1"><a class="header-anchor" href="#resolve-alias" aria-hidden="true">#</a> resolve.alias</h2><p>有些 npm 包不怎么规范，<code>package.json</code> 中 <code>main</code> 字段没有指向正确的文件。或者我们想让 Webpack 加载其他版本的构建结果。此时我们需要通过 <code>resolve.alias</code> 来重新指定模块路径。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      demo<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;node_modules/demo/dist/demo.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的配置告诉 Webpack 当遇到 <code>demo</code> 开头的模块时，使用指定的路径来寻找。我们还可以将 <code>demo</code> 配置成一个正则来匹配。</p><p>比如，我们可以通过 <code>resolve.alias</code> 来加载 React 已经构建好的 <code>.min.js</code> 版本，放弃一些 <code>propTypes</code> 校验，来减小构建大小。</p><blockquote><p>在 loader 中，我们可以通过 <code>resolveLoader.alias</code> 实现同样的效果。</p></blockquote><h2 id="resolve-modules" tabindex="-1"><a class="header-anchor" href="#resolve-modules" aria-hidden="true">#</a> resolve.modules</h2><p>我们可以通过 <code>resolve.modules</code> 来修改 Webpack 查找模块的地址。比如，默认情况下，Webpack 只会在 <code>node_modules</code> 目录下查找模块，我们通过如下配置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> resolve<span class="token operator">:</span> <span class="token punctuation">{</span> modules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使得 Webpack 优先从 <code>demo</code> 目录下查找，找不到再去 <code>node_modules</code> 目录下查找模块。</p><p>在大项目中，如果我们想自定义查找模块的地址，这个配置项非常有用。</p><h2 id="resolve-extensions" tabindex="-1"><a class="header-anchor" href="#resolve-extensions" aria-hidden="true">#</a> resolve.extensions</h2><p>默认情况下，Webpack 只会解析 <code>.js</code>，<code>.json</code> 和 <code>.mjs</code> 文件，我们可以通过 <code>resolve.extensions</code> 来修改。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> resolve<span class="token operator">:</span> <span class="token punctuation">{</span> extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.jsx&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这个例子使得 Webpack 可以解析 <code>.jsx</code> 文件。</p><h2 id="resolve-plugins" tabindex="-1"><a class="header-anchor" href="#resolve-plugins" aria-hidden="true">#</a> resolve.plugins</h2>',17),t=(0,e.Uk)("默认情况下，Webpack 会使用目录下的 "),o=(0,e.Wm)("code",null,"index",-1),l=(0,e.Uk)(" 文件来作为模块的返回，"),c=(0,e.Wm)("code",null,"resolve.plugins",-1),r=(0,e.Uk)(" 可以帮助我们对这一行为进行定制。"),i={href:"https://www.npmjs.com/package/directory-named-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("directory-named-webpack-plugin"),d=(0,e.Uk)(" 就是一个很好的例子，通过这个插件，我们可以将 "),k=(0,e.Wm)("code",null,'import foo from "./foo";',-1),m=(0,e.Uk)(" 变成 "),b=(0,e.Wm)("code",null,'import foo from "./foo/foo.js";',-1),g=(0,e.Uk)("。"),v={href:"https://www.npmjs.com/package/babel-plugin-module-resolver",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("babel-plugin-module-resolver"),x=(0,e.Uk)(" 这个插件功能类似，只是为 Babel 提供服务。"),j=(0,e.uE)('<h2 id="不处理某些包" tabindex="-1"><a class="header-anchor" href="#不处理某些包" aria-hidden="true">#</a> 不处理某些包</h2><p>一些第三方包，比如 JQuery 通常都是通过 CDN 部署，页面直接引用即可。因此，在 Webpack 配置中我们需要将这一类的包标识为 <code>external</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> externals<span class="token operator">:</span> <span class="token punctuation">{</span> jquery<span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>有些时候我们为了防止 CDN 出现问题，我们还需要做一些防备手段，当从 CDN 加载失败以后，可以从本服务器进行加载。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  window<span class="token punctuation">.</span>jQuery <span class="token operator">||</span>\n    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;script src=&quot;js/jquery-3.1.1.min.js&quot;&gt;&lt;\\/script&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',5),f=(0,e.Uk)("从 Webpack 5 开始，支持设置 "),W={href:"https://webpack.js.org/configuration/externals/#externalstype",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("externalsType"),w=(0,e.Uk)(" 字段，来自定义加载模块的方式。比如设置为 "),U=(0,e.Wm)("code",null,'"promise"',-1),q=(0,e.Uk)("，则会异步加载，设置为 "),_=(0,e.Wm)("code",null,'"import"',-1),P=(0,e.Uk)(" 则会使用 "),C=(0,e.Wm)("code",null,"import()",-1),R=(0,e.Uk)(" 的方式加载。我们还可以针对每一个包做自定义，比如我们可以配置异步加载 JQuery， "),$=(0,e.Wm)("code",null,'["jquery", "promise"]',-1),E=(0,e.Uk)("。"),N=(0,e.Wm)("h2",{id:"处理全局变量",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#处理全局变量","aria-hidden":"true"},"#"),(0,e.Uk)(" 处理全局变量")],-1),T=(0,e.Wm)("p",null,[(0,e.Uk)("有一些包会使用全局变量，比如 JQuery 中会使用 "),(0,e.Wm)("code",null,"$"),(0,e.Uk)("。Webpack 提供了一些处理这些全局变量的方法。")],-1),Q=(0,e.Wm)("h3",{id:"注入全局变量",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#注入全局变量","aria-hidden":"true"},"#"),(0,e.Uk)(" 注入全局变量")],-1),D={href:"https://www.npmjs.com/package/imports-loader",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("imports-loader"),J=(0,e.Uk)(" 可以帮助我们将全局变量注入到我们的模块中。在下面的例子中，Webpack 会为每一个模块都注入 "),L=(0,e.Wm)("code",null,"import $ from 'jquery';",-1),z=(0,e.Uk)("。"),A=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;imports-loader&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;default jquery $&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="解析全局变量" tabindex="-1"><a class="header-anchor" href="#解析全局变量" aria-hidden="true">#</a> 解析全局变量</h2><p>Webapck 的 <code>ProvidePlugin</code> 插件可以帮助 Webpack 正确的处理模块中的全局变量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> $<span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="暴露全局变量" tabindex="-1"><a class="header-anchor" href="#暴露全局变量" aria-hidden="true">#</a> 暴露全局变量</h2>',5),B=(0,e.Uk)("有时候我们需要将模块内的一些变量暴露到全局中给其他模块使用。"),G={href:"https://www.npmjs.com/package/expose-loader",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("expose-loader"),O=(0,e.Uk)(" 可以实现这个功能。"),Y=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  loader<span class="token operator">:</span> <span class="token string">&#39;expose-loader&#39;</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> <span class="token punctuation">{</span>\n    exposes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;React&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Z=(0,e.Uk)("如果你需要在暴露全局变量的时候执行一些逻辑，则可以使用 "),F={href:"https://www.npmjs.com/package/script-loader",target:"_blank",rel:"noopener noreferrer"},K=(0,e.Uk)("script-loader"),M=(0,e.Uk)("。"),S=(0,e.uE)('<h2 id="删除未使用的模块" tabindex="-1"><a class="header-anchor" href="#删除未使用的模块" aria-hidden="true">#</a> 删除未使用的模块</h2><p>有些模块会携带很多我们不需要的信息。比如 <code>moment</code> 这个包，会带有很多 <code>locale</code> 文件，这会增加我们的构建大小。我们可以使用 Webpack 的<code>IgnorePlugin</code> 这个插件来忽略这些文件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      resourceRegExp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      contextRegExp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果需要加载某一个特殊的 <code>locale</code> 文件，则可以使用 <code>ContextReplacementPlugin</code> 插件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment[\\/\\\\]locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">de|fi</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="处理预构建的包" tabindex="-1"><a class="header-anchor" href="#处理预构建的包" aria-hidden="true">#</a> 处理预构建的包</h2><p>Webpack 在处理一些依赖包的时候，如果使用了预构建（已经构建完毕并压缩过等）的版本，则会报下面这样的错误。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>WARNING in ../~/jasmine-promises/dist/jasmine-promises.js\nCritical dependencies:\n1:113-120 This seems to be a pre-built javascript file. Though this is possible, it&#39;s not recommended. Try to require the original source to get better results.\n @ ../~/jasmine-promises/dist/jasmine-promises.js 1:113-120\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通常情况下，我们有两种方法处理。一种是将解析包的路径指向包的源代码版本。另一种是使用 <code>module.noParse</code> 来跳过处理这个包。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span> noParse<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules\\/demo\\/index.js</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们在构建的时候可能会碰到各种各样因为依赖包导致的构建问题。Webpack 提供了一些处理这些依赖包的方法，我们可以根据需要使用。</p><p>通过 Webpack 我们还可以使用其他包中的全局变量，也可以将自己模块内的信息以全局变量的形式暴露出去。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',14),V={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,o,l,c,r,(0,e.Wm)("a",i,[u,(0,e.Wm)(a)]),d,k,m,b,g]),(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",v,[h,(0,e.Wm)(a)]),x])]),j,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[f,(0,e.Wm)("a",W,[y,(0,e.Wm)(a)]),w,U,q,_,P,C,R,$,E])]),N,T,Q,(0,e.Wm)("p",null,[(0,e.Wm)("a",D,[I,(0,e.Wm)(a)]),J,L,z]),A,(0,e.Wm)("p",null,[B,(0,e.Wm)("a",G,[H,(0,e.Wm)(a)]),O]),Y,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[Z,(0,e.Wm)("a",F,[K,(0,e.Wm)(a)]),M])]),S],64)}}}}]);