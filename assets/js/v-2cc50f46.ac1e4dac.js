"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[9134],{3811:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2cc50f46",path:"/posts/2022/01/28/web-selection.html",title:"网页里的“选中复制”到底选了个啥？",lang:"zh-CN",frontmatter:{title:"网页里的“选中复制”到底选了个啥？",description:"介绍用户选中相关的规范定义，并结合 deeplink 库说明在实际中的使用。",keywords:["selection","range","deeplink","选中"],date:"2022-01-28T00:00:00.000Z",permalinkPattern:"posts/:year/:month/:day/:slug.html",tags:["通用知识"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"如何定义选中的范围",slug:"如何定义选中的范围",children:[{level:3,title:"边界点",slug:"边界点",children:[]},{level:3,title:"范围",slug:"范围",children:[]},{level:3,title:"选中",slug:"选中",children:[]}]},{level:2,title:"deeplinks 中的使用",slug:"deeplinks-中的使用",children:[]}],filePathRelative:"posts/web-selection.md"}},6077:(n,s,a)=>{a.r(s),a.d(s,{default:()=>tn});var e=a(6252);const t=(0,e.Wm)("p",null,"当我们在网页中选中某一段内容的时候，浏览器会添加选中效果来标识选中的范围。我们可以从左到右选，也可以从右到左选。我们可以选择文字，也可以选择图片，或者选择图片加文字。浏览器是如何处理我们的选中操作的呢？",-1),p=(0,e.Wm)("p",null,"我最近在处理一个网页选中的问题，顺便研究了一下规范中是如何定义选中的，发现还是蛮有趣的，分享一下。",-1),o=(0,e.Wm)("h2",{id:"如何定义选中的范围",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#如何定义选中的范围","aria-hidden":"true"},"#"),(0,e.Uk)(" 如何定义选中的范围")],-1),c=(0,e.Wm)("p",null,"不管是从左到右，还是从右到左，又或者是单单选择一个字，我们都选中了一个范围。范围由两个边界点构成。",-1),l=(0,e.Wm)("h3",{id:"边界点",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#边界点","aria-hidden":"true"},"#"),(0,e.Uk)(" 边界点")],-1),u=(0,e.Wm)("p",null,"规范中是这么定义边界点（boundary point）的：",-1),i=(0,e.Uk)("A "),r={href:"https://dom.spec.whatwg.org/#boundary-points",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("boundary point"),d=(0,e.Uk)(" is a tuple consisting of a node (a node) and an offset (a non-negative integer)."),m=(0,e.uE)('<p>边界点由两部分组成，一个是边界点所在节点（node），另一个是边界点在节点中的偏移量。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello, everfind!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>举个例子，上面的文本中，如果我们选择了 <code>everfind</code> 这段，那么边界点就是 <code>(p, 7)</code> 和 <code>(p, 15)</code>。</p>',3),b=(0,e.Uk)("边界点之间有三种位置关系：前面、相等和后面。具体的"),g={href:"https://dom.spec.whatwg.org/#concept-range-bp-position",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("位置计算方法"),f=(0,e.Uk)("可以参考规范定义。"),y=(0,e.Wm)("h3",{id:"范围",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#范围","aria-hidden":"true"},"#"),(0,e.Uk)(" 范围")],-1),w=(0,e.Uk)("范围（"),x={href:"https://dom.spec.whatwg.org/#ranges",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("range"),v=(0,e.Uk)("）由两个边界点来定义，两个边界点被称为开始（start）节点和结束（end）节点。"),N=(0,e.uE)('<p><img src="/posts/images/web-selection/node-tree-c.png" alt="range 样例"></p><p>上图展示了一段 DOM 结构，如果我们选中了 <code>syndata is awes</code> 这段文字，那么范围可以表示如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> firstText <span class="token operator">=</span> p<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 假设 p 指向 P 元素</span>\n<span class="token keyword">const</span> secondText <span class="token operator">=</span> em<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span> <span class="token comment">// 假设 em 指向 EM 元素</span>\nrange<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span>firstText<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前面有一个空格</span>\nrange<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span>secondText<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，在一个范围中，开始节点不能在结束节点的后面。如果开始节点与结束节点相等，则认为范围是折叠的（collapsed）。如果开始节点在结束节点后面，则范围会被强制置为折叠的。</p><p>在上面的样例中，我们使用了 <code>Range</code> 类，其实还有一个 <code>StaticRange</code> 类。<code>Range</code> 定义的范围会随着节点树的变化而变化，比如用户节点改变了节点树中的内容，那么通过 <code>Range</code> 定义的范围内容也会随着变化。而 <code>StaticRange</code> 定义的范围比较轻量，不会随着节点树的变化而变化。</p><h3 id="选中" tabindex="-1"><a class="header-anchor" href="#选中" aria-hidden="true">#</a> 选中</h3>',6),U=(0,e.Uk)("定义清楚“范围”以后，就能够定义“选中”这个概念了。在"),R={href:"https://w3c.github.io/selection-api/",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("关于“选中”的规范"),S=(0,e.Uk)("中，规范要求，“选中”是一个单例对象，且只能与一个“范围”对象关联。如果“选中”没有与任何“范围”对象关联，那么“选中”就是空的（empty）。“选中”在初始状态下都是空的。"),O=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Selection</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> attribute Node<span class="token operator">?</span> anchorNode<span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> attribute unsigned long anchorOffset<span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> attribute Node<span class="token operator">?</span> focusNode<span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> attribute unsigned long focusOffset<span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> attribute <span class="token builtin">boolean</span> isCollapsed<span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> attribute unsigned long rangeCount<span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> attribute DOMString type<span class="token punctuation">;</span>\n  Range <span class="token function">getRangeAt</span><span class="token punctuation">(</span>unsigned long index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">undefined</span> <span class="token function">addRange</span><span class="token punctuation">(</span>Range range<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">undefined</span> <span class="token function">removeRange</span><span class="token punctuation">(</span>Range range<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">undefined</span> <span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',1),A=(0,e.Uk)("上面摘录了一些 "),C={href:"https://w3c.github.io/selection-api/#selection-interface",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Wm)("code",null,"Selection",-1),_=(0,e.Uk)(" 接口"),j=(0,e.Uk)(" 的字段说明，我们可以看到，Selection 对象中并不是直接保存 "),D=(0,e.Wm)("code",null,"Range",-1),P=(0,e.Uk)(" 对象，而是通过 "),q=(0,e.Wm)("code",null,"anchorNode",-1),M=(0,e.Uk)("、"),L=(0,e.Wm)("code",null,"anchorOffset",-1),H=(0,e.Uk)("、"),I=(0,e.Wm)("code",null,"focusNode",-1),z=(0,e.Uk)("、"),F=(0,e.Wm)("code",null,"focusOffset",-1),X=(0,e.Uk)(" 来标识选中的范围。"),G=(0,e.uE)('<p>我们知道，用户选择是有方向的，而 <code>Range</code> 中的开始节点与结束节点是严格按照 DOM 顺序的，因此 <code>Selection</code> 做了变通。<code>anchorNode</code> 是用户开始选择的位置，<code>focusNode</code> 是用户结束选择的位置。如果您使用桌面鼠标进行选择，则 <code>anchorNode</code> 放置在您按下鼠标按钮的位置，<code>focusNode</code> 放置在您释放鼠标按钮的位置。千万不要将 <code>anchorNode</code>、<code>focusNode</code> 与 <code>Range</code> 的开始节点、结束节点相混淆。</p><blockquote><p>我们看到，在 <code>Selection</code> 接口中定义了一些 <code>Range</code> 操作函数，看着像是可以有多个 <code>Range</code>。其实 <code>Selection</code> API 最初由 Netscape 创建并允许多个范围（例如，允许用户从 <code>&lt;table&gt;</code> 中选择一列）。但是，Gecko 以外的浏览器并没有实现多个范围。规范最终要求 <code>Selection</code> 始终具有单个 <code>Range</code>。</p></blockquote><p>在浏览器中，我们可以通过 <code>document.getSelection()</code> 和 <code>window.getSelection()</code> 来获取选中的内容，这两个 API 是相等的。通过 <code>Selection</code> 接口中定义的操作函数，我们可以动态需改选中的内容。</p><h2 id="deeplinks-中的使用" tabindex="-1"><a class="header-anchor" href="#deeplinks-中的使用" aria-hidden="true">#</a> deeplinks 中的使用</h2>',4),Y={href:"https://github.com/WesleyAC/deeplinks",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("deeplinks"),B=(0,e.Uk)(" 是一个选中内容分享工具。它通过 "),J=(0,e.Wm)("code",null,"Selection",-1),K=(0,e.Uk)(" API，将用户选中的文本计算出一个 hash 值，然后将这个 hash 值放到 URL 中的 fragment 部分。用户打开这个新的 URL 时，deeplinks 会通过 fragment 计算出选中的范围，通过 "),Q=(0,e.Wm)("code",null,"Selection",-1),V=(0,e.Uk)(" API 高亮选中的文字。"),$=(0,e.Uk)("在其核心 API "),nn={href:"https://github.com/WesleyAC/deeplinks/blob/main/src/versions/2.ts#L104",target:"_blank",rel:"noopener noreferrer"},sn=(0,e.Wm)("code",null,"selectionToFragment",-1),an=(0,e.Uk)(" 函数中，"),en=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">selectionToFragment</span><span class="token punctuation">(</span>selection<span class="token operator">:</span> Selection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span> <span class="token class-name">HashNodeOffset</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> Text<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">type</span> <span class="token class-name">DupeData</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> ranges<span class="token operator">:</span> <span class="token punctuation">[</span>HashNodeOffset<span class="token punctuation">,</span> HashNodeOffset<span class="token punctuation">,</span> DupeData<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> selection<span class="token punctuation">.</span>rangeCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token function">normalizeRange</span><span class="token punctuation">(</span>selection<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// normalizeRange 去除非 Text 节点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>range <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>range<span class="token punctuation">.</span>collapsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>startNode<span class="token punctuation">,</span> endNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>range<span class="token punctuation">.</span>startContainer<span class="token punctuation">,</span> range<span class="token punctuation">.</span>endContainer<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>startNode<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token constant">TEXT_NODE</span> <span class="token operator">&amp;&amp;</span> endNode<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ranges<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n          <span class="token punctuation">[</span><span class="token function">hashNode</span><span class="token punctuation">(</span>startNode <span class="token keyword">as</span> Text<span class="token punctuation">)</span><span class="token punctuation">,</span> startNode <span class="token keyword">as</span> Text<span class="token punctuation">,</span> <span class="token function">fromNumber</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>startOffset <span class="token operator">-</span> <span class="token function">countLeadingWhitespace</span><span class="token punctuation">(</span>startNode <span class="token keyword">as</span> Text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">[</span><span class="token function">hashNode</span><span class="token punctuation">(</span>endNode <span class="token keyword">as</span> Text<span class="token punctuation">)</span><span class="token punctuation">,</span> endNode <span class="token keyword">as</span> Text<span class="token punctuation">,</span> <span class="token function">fromNumber</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>endOffset <span class="token operator">-</span> <span class="token function">countLeadingWhitespace</span><span class="token punctuation">(</span>endNode <span class="token keyword">as</span> Text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>endNode <span class="token keyword">as</span> Text<span class="token punctuation">)</span><span class="token punctuation">.</span>wholeText<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>我们可以看到，通过 <code>selection.getRangeAt(i)</code> 获取当前选中范围，然后通过一些操作过滤掉非 Text 节点，拿到只包含文本的新的 <code>Range</code>。之后经过一些计算，标记出用户选中的真实范围。</p><blockquote><p>由于 deeplinks 本身实现逻辑较为复杂，与本篇主题有一些偏离，这里没有详细说明，感兴趣的同学可以自行阅读源码。</p></blockquote><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',4),tn={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,p,o,c,l,u,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[i,(0,e.Wm)("a",r,[k,(0,e.Wm)(a)]),d])]),m,(0,e.Wm)("p",null,[b,(0,e.Wm)("a",g,[h,(0,e.Wm)(a)]),f]),y,(0,e.Wm)("p",null,[w,(0,e.Wm)("a",x,[W,(0,e.Wm)(a)]),v]),N,(0,e.Wm)("p",null,[U,(0,e.Wm)("a",R,[T,(0,e.Wm)(a)]),S]),O,(0,e.Wm)("p",null,[A,(0,e.Wm)("a",C,[E,_,(0,e.Wm)(a)]),j,D,P,q,M,L,H,I,z,F,X]),G,(0,e.Wm)("p",null,[(0,e.Wm)("a",Y,[Z,(0,e.Wm)(a)]),B,J,K,Q,V]),(0,e.Wm)("p",null,[$,(0,e.Wm)("a",nn,[sn,(0,e.Wm)(a)]),an]),en],64)}}}}]);