"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[1040],{9974:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-11811d7e",path:"/courses/python/function.html",title:"函数",lang:"zh-CN",frontmatter:{title:"函数",description:"Python 中的函数定义，传参等。",keywords:["Python"],date:"2021-09-08T00:00:00.000Z",key:3},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"定义函数",slug:"定义函数",children:[]},{level:2,title:"函数参数",slug:"函数参数",children:[{level:3,title:"参数默认值",slug:"参数默认值",children:[]},{level:3,title:"关键字参数",slug:"关键字参数",children:[]},{level:3,title:"函数传参",slug:"函数传参",children:[]},{level:3,title:"解包参数",slug:"解包参数",children:[]}]},{level:2,title:"Lambda 表达式",slug:"lambda-表达式",children:[]}],filePathRelative:"courses/python/function.md"}},9839:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h2><p>先来看一个 Fibonacci 函数的定义样例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token string">&quot;&quot;</span>&quot;Print a Fibonacci series up to n.<span class="token string">&quot;&quot;</span>&quot;\n<span class="token punctuation">..</span>.     a, b <span class="token operator">=</span> <span class="token number">0</span>, <span class="token number">1</span>\n<span class="token punctuation">..</span>.     <span class="token keyword">while</span> a <span class="token operator">&lt;</span> n:\n<span class="token punctuation">..</span>.         print<span class="token punctuation">(</span>a, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.         a, b <span class="token operator">=</span> b, a+b\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 调用定义好的函数</span>\n<span class="token punctuation">..</span>. fib<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">13</span> <span class="token number">21</span> <span class="token number">34</span> <span class="token number">55</span> <span class="token number">89</span> <span class="token number">144</span> <span class="token number">233</span> <span class="token number">377</span> <span class="token number">610</span> <span class="token number">987</span> <span class="token number">1597</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>函数定义必须使用 <code>def</code> 关键字，之后是函数名和参数列表。</p><p>第二行的字符串是一段文档说明，可用于生成文档，同时我们可以通过 <code>fib.__doc__</code> 获取这个字符串。</p><p>每个函数都有返回值，没有通过 <code>return</code> 语句返回的默认返回 <code>None</code>。</p><p>每次函数在执行的时候，都会创建一个新的符号表来记录函数创建的本地变量。当需要使用某一个变量的时候，会先在当前函数的符号表中查找，如果没有找到，会再到上一层函数的符号表中查找，直到最终在全局符号表中查找。</p><p>因此，在函数中，不能直接修改全局变量或者外层函数的变量的值，除非我们使用 <code>global</code> 语句后者 <code>nonlocal</code> 语句。</p><p>当调用函数的时候，函数的参数也会记录到符号表中来，并且传参是值传递的方式，也就是说，如果参数是一个对象，传过来的值是指向这个对象的引用，而不是对象本身。</p><p>我们还可以通过 <code>__annotations__</code> 来访问函数的元数据，比如参数的类型，返回值类型等信息。我们需要在定义函数的时候指定这些元数据。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def f<span class="token punctuation">(</span>ham: str, eggs: str <span class="token operator">=</span> <span class="token string">&#39;eggs&#39;</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> str:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;Annotations:&quot;</span>, f.__annotations__<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;Arguments:&quot;</span>, ham, eggs<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     <span class="token builtin class-name">return</span> ham + <span class="token string">&#39; and &#39;</span> + eggs\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">)</span>\nAnnotations: <span class="token punctuation">{</span><span class="token string">&#39;ham&#39;</span><span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>, <span class="token string">&#39;return&#39;</span><span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>, <span class="token string">&#39;eggs&#39;</span><span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>\nArguments: spam eggs\n<span class="token string">&#39;spam and eggs&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h2><h3 id="参数默认值" tabindex="-1"><a class="header-anchor" href="#参数默认值" aria-hidden="true">#</a> 参数默认值</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ask_ok</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> retries<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> reminder<span class="token operator">=</span><span class="token string">&#39;Please try again!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>\n        ok <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> ok <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ye&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">True</span>\n        <span class="token keyword">if</span> ok <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nope&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">False</span>\n        retries <span class="token operator">=</span> retries <span class="token operator">-</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;invalid user response&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>reminder<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的代码定义了两个默认值，我们可以有如下是三种方式调用这个函数：</p><ul><li>只传第一个必填参数 <code>ask_ok(&#39;Do you really want to quit?&#39;)</code></li><li>传一个必填参数和一个可选参数 <code>ask_ok(&#39;OK to overwrite the file?&#39;, 2)</code></li><li>所有参数都传 <code>ask_ok(&#39;OK to overwrite the file?&#39;, 2, &#39;Come on, only yes or no!&#39;)</code></li></ul><p>注意，参数的默认值只计算一次，后续调用这个函数，参数的默认值不会重新计算。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> L\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>输出：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="关键字参数" tabindex="-1"><a class="header-anchor" href="#关键字参数" aria-hidden="true">#</a> 关键字参数</h3><p>定义关键字参数的形式为 <code>kwarg=value</code>，如下样例：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">parrot</span><span class="token punctuation">(</span>voltage<span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">&#39;a stiff&#39;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;voom&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;Norwegian Blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- This parrot wouldn&#39;t&quot;</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;if you put&quot;</span><span class="token punctuation">,</span> voltage<span class="token punctuation">,</span> <span class="token string">&quot;volts through it.&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- Lovely plumage, the&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- It&#39;s&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数 <code>parrot</code> 有一个必填参数 <code>voltage</code> 和三个可选参数（<code>state</code>，<code>action</code>，和 <code>type</code>）。我们可以这么传参：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>parrot<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>          <span class="token comment"># 1 个位置参数</span>\nparrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment"># 1 个关键字参数</span>\nparrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;VOOOOOM&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 2 个关键字参数</span>\nparrot<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">&#39;VOOOOOM&#39;</span><span class="token punctuation">,</span> voltage<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token comment"># 2 个关键字参数</span>\nparrot<span class="token punctuation">(</span><span class="token string">&#39;a million&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bereft of life&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jump&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 3 个位置参数</span>\nparrot<span class="token punctuation">(</span><span class="token string">&#39;a thousand&#39;</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">&#39;pushing up the daisies&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1 个位置参数，一个关键字参数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如下传参方式会报错：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>parrot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 必填参数未传</span>\nparrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token string">&#39;dead&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 关键字参数后跟位置参数</span>\nparrot<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> voltage<span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">)</span> <span class="token comment"># 参数重复</span>\nparrot<span class="token punctuation">(</span>actor<span class="token operator">=</span><span class="token string">&#39;John Cleese&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 未知的关键字参数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在调用函数的时候，关键字参数必须在位置参数后面。并且，所有的关键字参数必须与函数的定义匹配，不能传递未定义的关键字参数。在使用关键字参数的时候，参数顺序没有要求。同一个参数只能传递一个值，传递多个值会报错。</p><p>当存在形式为 <code>**name</code> 的最终形式参数时，这个参数会收到一个字典，这个字典中保存着所有除了明确定义的关键字参数以外的关键字参数。当存在 <code>*name</code> 的形式参数的时候，这个参数会受到一个元组，这个元组中保存着所有除了明确定义的位置参数以外的位置参数。<code>*name</code> 参数必须在 <code>**name</code> 参数前面。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">cheeseshop</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span> <span class="token operator">*</span>arguments<span class="token punctuation">,</span> <span class="token operator">**</span>keywords<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- Do you have any&quot;</span><span class="token punctuation">,</span> kind<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- I&#39;m sorry, we&#39;re all out of&quot;</span><span class="token punctuation">,</span> kind<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> arg <span class="token keyword">in</span> arguments<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> kw <span class="token keyword">in</span> keywords<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>kw<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> keywords<span class="token punctuation">[</span>kw<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们这样调用这个函数：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>cheeseshop<span class="token punctuation">(</span><span class="token string">&quot;Limburger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;It&#39;s very runny, sir.&quot;</span><span class="token punctuation">,</span>\n           <span class="token string">&quot;It&#39;s really very, VERY runny, sir.&quot;</span><span class="token punctuation">,</span>\n           shopkeeper<span class="token operator">=</span><span class="token string">&quot;Michael Palin&quot;</span><span class="token punctuation">,</span>\n           client<span class="token operator">=</span><span class="token string">&quot;John Cleese&quot;</span><span class="token punctuation">,</span>\n           sketch<span class="token operator">=</span><span class="token string">&quot;Cheese Shop Sketch&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>-- Do you have any Limburger ?\n-- I&#39;m sorry, we&#39;re all out of Limburger\nIt&#39;s very runny, sir.\nIt&#39;s really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="函数传参" tabindex="-1"><a class="header-anchor" href="#函数传参" aria-hidden="true">#</a> 函数传参</h3><p>通常情况下，给 Python 函数传参，既可以用位置参数，也可以用关键字参数。但是，传参的形式有一个约束：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n      -----------    ----------     ----------\n        |             |                  |\n        |        位置或关键字参数           |\n        |                                只能是关键字参数\n        只能是位置参数\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>/</code> 和 <code>*</code> 是可先的，如果使用了这两个符号，则表示传递参数的形式。 <code>/</code> 之前的必须是位置参数，<code>*</code> 之后的必须是关键字参数。</p><p>参考如下函数定义：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def standard_arg<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def pos_only_arg<span class="token punctuation">(</span>arg, /<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def kwd_only_arg<span class="token punctuation">(</span>*, arg<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def combined_example<span class="token punctuation">(</span>pos_only, /, standard, *, kwd_only<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>pos_only, standard, kwd_only<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>调用方式如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> standard_arg<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token number">2</span>\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> standard_arg<span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token number">2</span>\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pos_only_arg<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token number">1</span>\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> kwd_only_arg<span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token number">3</span>\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> combined_example<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token assign-left variable">kwd_only</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> combined_example<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token assign-left variable">standard</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">kwd_only</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="解包参数" tabindex="-1"><a class="header-anchor" href="#解包参数" aria-hidden="true">#</a> 解包参数</h3><p>有些时候，函数的参数已经存在于一个列表或者字典里，我们需要对其进行解包，然后再作为参数值传给函数。</p><p>我们可以使用 <code>*</code> 操作符对列表或者元组进行解包，使用 <code>**</code> 操作符对字典进行解包。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>*args<span class="token punctuation">))</span> <span class="token comment"># 解包调用 list 函数</span>\n<span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def parrot<span class="token punctuation">(</span>voltage, <span class="token assign-left variable">state</span><span class="token operator">=</span><span class="token string">&#39;a stiff&#39;</span>, <span class="token assign-left variable">action</span><span class="token operator">=</span><span class="token string">&#39;voom&#39;</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;-- This parrot wouldn&#39;t&quot;</span>, action, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;if you put&quot;</span>, voltage, <span class="token string">&quot;volts through it.&quot;</span>, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;E&#39;s&quot;</span>, state, <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;voltage&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;four million&quot;</span>, <span class="token string">&quot;state&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bleedin&#39; demised&quot;</span>, <span class="token string">&quot;action&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;VOOM&quot;</span><span class="token punctuation">}</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> parrot<span class="token punctuation">(</span>**d<span class="token punctuation">)</span>\n-- This parrot wouldn<span class="token string">&#39;t VOOM if you put four million volts through it. E&#39;</span>s bleedin&#39; demised <span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> Lambda 表达式</h2><p>通过 <code>lambda</code> 关键字可以创建 lambda 表达式。lambda 表达式本质上是函数的一个语法糖，用来创建一些简短的函数。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> def make_incrementor<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     <span class="token builtin class-name">return</span> lambda x: x + n\n<span class="token punctuation">..</span>.\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> make_incrementor<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token number">42</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token number">43</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">&#39;three&#39;</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">&#39;four&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pairs.sort<span class="token punctuation">(</span>key<span class="token operator">=</span>lambda pair: pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pairs\n<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">&#39;four&#39;</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">&#39;three&#39;</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',52),t={render:function(n,s){return p}}}}]);