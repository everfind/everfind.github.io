"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6474],{6663:(e,n,t)=>{t.r(n),t.d(n,{data:()=>s});const s={key:"v-157614ea",path:"/courses/architecture-of-react-app/configuration.html",title:"项目初始化配置",lang:"zh-CN",frontmatter:{title:"项目初始化配置",description:"对项目中需要使用的静态检查、代码格式化等工具进行说明，并给出样例。",keywords:["React","架构","配置"],date:"2021-08-09T00:00:00.000Z",key:1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"ESLint",slug:"eslint",children:[]},{level:2,title:"Prettier",slug:"prettier",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[]},{level:2,title:"Husky",slug:"husky",children:[]},{level:2,title:"绝对路径导入",slug:"绝对路径导入",children:[]}],filePathRelative:"courses/architecture-of-react-app/configuration.md"}},8061:(e,n,t)=>{t.r(n),t.d(n,{default:()=>M});var s=t(6252);const a=(0,s.Uk)("通常我们都是通过 "),r={href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("Create React App(CRA)"),o=(0,s.Uk)(" 来初始化项目，初始化后的项目已经包含了静态检查、格式化等工具的配置。我们今天不讲如何使用 CRA，我们来讲讲这些工具都是干什么的，同时给出通用的配置样例。"),l=(0,s.Wm)("h2",{id:"eslint",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#eslint","aria-hidden":"true"},"#"),(0,s.Uk)(" ESLint")],-1),i={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("ESLint"),u=(0,s.Uk)(" 是一款面向 JavaScript 的代码静态检查工具。通过 ESLint 我们可以避免编码过程中的一些低级错误，同时也能尽量保证代码的风格统一。ESLint 的配置通常保存在 "),d=(0,s.Wm)("code",null,".eslintrc.js",-1),m=(0,s.Uk)(" 文件中。"),k={href:"https://github.com/everfind/bulletproof-react/blob/master/.eslintrc.js",target:"_blank",rel:"noopener noreferrer"},h=(0,s.Uk)("这是一份 ESLint 的配置样例"),b=(0,s.Wm)("h2",{id:"prettier",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#prettier","aria-hidden":"true"},"#"),(0,s.Uk)(" Prettier")],-1),g={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},y=(0,s.Uk)("Prettier"),f=(0,s.Uk)(' 是一款代码格式化工具。通过 Prettier，我们可以保证整个代码库的编码风格是一致的。借助于编辑器的 "format on save" 功能，我们可以轻松的实现代码自动格式化。Prettier 的配置通常保存在 '),W=(0,s.Wm)("code",null,".prettierrc",-1),x=(0,s.Uk)(" 文件中。"),v={href:"https://github.com/everfind/bulletproof-react/blob/master/.prettierrc",target:"_blank",rel:"noopener noreferrer"},q=(0,s.Uk)("这是一份 Prettier 的配置样例"),U=(0,s.Wm)("h2",{id:"typescript",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#typescript","aria-hidden":"true"},"#"),(0,s.Uk)(" TypeScript")],-1),j=(0,s.Wm)("p",null,"ESLint 是静态检查工具，而 JavaScript 是一门动态语言，很多错误只有在运行时才能发现，比如类型不匹配等。在大项目中，这种问题尤其突出。",-1),S={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},w=(0,s.Uk)("TypeScript"),_=(0,s.Uk)(" 作为一门静态类型语言，可以很大程度上帮助我们解决这方面的问题。特别是在重构代码的时候，当我们改变一个类型的声明时，TypeScript 会帮助我们找出所有使用这个类型的地方，并给出错误提示，我们可以逐一进行修改。"),C=(0,s.Wm)("h2",{id:"husky",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#husky","aria-hidden":"true"},"#"),(0,s.Uk)(" Husky")],-1),E={href:"https://typicode.github.io/husky/#/",target:"_blank",rel:"noopener noreferrer"},L=(0,s.Uk)("Husky"),P=(0,s.Uk)(" 是一个辅助执行 git 钩子的工具。在执行 "),H=(0,s.Wm)("code",null,"git commit",-1),T=(0,s.Uk)(" 之前，通过 Husky 执行静态检查、代码格式化等任务，可以保证提交的代码都是符合规范的。可以在"),R={href:"https://typicode.github.io/husky/#/?id=usage",target:"_blank",rel:"noopener noreferrer"},A=(0,s.Uk)("这里"),J=(0,s.Uk)("了解如何使用 Husky。"),O=(0,s.uE)('<h2 id="绝对路径导入" tabindex="-1"><a class="header-anchor" href="#绝对路径导入" aria-hidden="true">#</a> 绝对路径导入</h2><p>我们应该在项目中使用绝对路径导入，这样当我们需要移动文件的时候会非常方便，同时也可以避免迷惑的 <code>../../../Component</code> 导入路径。</p><p>在 JavaScript 项目中我们可以这么配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// jsconfig.json</span>\n<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/*&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 TypeScript 项目中可以这么配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>\n<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/*&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们可以定义多个路径映射，但是通常 <code>@/*</code> 就已经够用了。<code>src/components/MyComponent</code> 可以这样导入 <code>@/components/MyComponent</code>。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',8),M={render:function(e,n){const t=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[(0,s.Wm)("p",null,[a,(0,s.Wm)("a",r,[p,(0,s.Wm)(t)]),o]),l,(0,s.Wm)("p",null,[(0,s.Wm)("a",i,[c,(0,s.Wm)(t)]),u,d,m]),(0,s.Wm)("p",null,[(0,s.Wm)("a",k,[h,(0,s.Wm)(t)])]),b,(0,s.Wm)("p",null,[(0,s.Wm)("a",g,[y,(0,s.Wm)(t)]),f,W,x]),(0,s.Wm)("p",null,[(0,s.Wm)("a",v,[q,(0,s.Wm)(t)])]),U,j,(0,s.Wm)("p",null,[(0,s.Wm)("a",S,[w,(0,s.Wm)(t)]),_]),C,(0,s.Wm)("p",null,[(0,s.Wm)("a",E,[L,(0,s.Wm)(t)]),P,H,T,(0,s.Wm)("a",R,[A,(0,s.Wm)(t)]),J]),O],64)}}}}]);