"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[2290],{2258:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-3bab95e0",path:"/courses/webpack/web-worker.html",title:"Web Worker",lang:"zh-CN",frontmatter:{title:"Web Worker",description:"介绍 Webpack 中如何处理Web Worker",keywords:["Webpack"],date:"2021-01-31T00:00:00.000Z",key:29},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加一个 worker",slug:"添加一个-worker",children:[]},{level:2,title:"添加一个宿主",slug:"添加一个宿主",children:[]},{level:2,title:"数据共享",slug:"数据共享",children:[]},{level:2,title:"其他选择",slug:"其他选择",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/web-worker.md"}},3395:(n,a,s)=>{s.r(a),s.d(a,{default:()=>R});var e=s(6252);const t={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("Web Worker"),o=(0,e.Uk)(" 可以实现将复杂、耗时的计算从 JavaScript 的主执行进程中抽离出来，以后台任务的形式运行，避免影响主执行进程。Web Worker 无法操作 DOM 元素。"),r=(0,e.Uk)("在前面"),c=(0,e.Uk)("设置构建输出目标"),l=(0,e.Uk)("一章中我们介绍过构建 Web Worker 的配置，这里我们介绍一下具体的使用方法。"),i=(0,e.uE)('<h2 id="添加一个-worker" tabindex="-1"><a class="header-anchor" href="#添加一个-worker" aria-hidden="true">#</a> 添加一个 worker</h2><p>一个 Worker 需要关注两件事情，一个是接收消息，一个是响应消息。在这之前，Worker 进行计算处理。</p><p><strong>src/worker.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> text <span class="token operator">+</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="添加一个宿主" tabindex="-1"><a class="header-anchor" href="#添加一个宿主" aria-hidden="true">#</a> 添加一个宿主</h2><p>宿主需要初始化 Worker 并与 Worker 进行通信。</p><p><strong>src/component.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">text <span class="token operator">=</span> <span class="token constant">HELLO</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> state<span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n  element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> state<span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>完成这两步以后，我们就可以实现按钮的文案来自于 worker 计算的结果了。我们还可以将 worker 的响应改成异步的形式，加一些延时，看看按钮的变化。</p><h2 id="数据共享" tabindex="-1"><a class="header-anchor" href="#数据共享" aria-hidden="true">#</a> 数据共享</h2>',10),u=(0,e.Uk)("考虑到 Worker 与宿主间通信过程中数据序列化的开销，我们可以通过 "),k={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownershi",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("Transferable objects"),m=(0,e.Uk)(" 来降低序列化的开销，同时还可以考虑使用 "),b={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("SharedArrayBuffer"),g=(0,e.Uk)(" 来共享数据。"),W=(0,e.Wm)("h2",{id:"其他选择",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#其他选择","aria-hidden":"true"},"#"),(0,e.Uk)(" 其他选择")],-1),w=(0,e.Uk)("在 Webpack 5 之前，我们可以使用 "),f={href:"https://www.npmjs.com/package/worker-loader",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("worker-loader"),y=(0,e.Uk)(" 来构建 Worker，现在依然可以使用，worker-loader 提供了更加细粒度的配置。"),v=(0,e.Uk)("借助于 "),U={href:"https://www.npmjs.com/package/workerize-loader",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("workerize-loader"),_=(0,e.Uk)(" 和 "),S={href:"https://www.npmjs.com/package/worker-plugin",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("worker-plugin"),z=(0,e.Uk)(" 我们可以想普通 JavaScript 模块一样定义 Worker，同时还可以避免使用上面样例中 "),A=(0,e.Wm)("code",null,"self",-1),P=(0,e.Uk)("。"),E={href:"https://threads.js.org/",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("threads.js"),M=(0,e.Uk)(" 提供了功能更加丰富，也更加复杂的解决方案。Thread.js 提供了可观察对象、线程池等特性。我们可以通过 "),T={href:"https://github.com/andywer/threads-plugin",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("threads-plugin"),J=(0,e.Uk)(" 将其与 Webpack 结合起来。"),O=(0,e.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Web Worker 可以将复杂的计算等任务从 JavaScript 主执行进程中剥离出来，作为后台任务运行。Worker 无法直接操作用户 UI。</p><p>Web Worker 的通信开销比较大，不过随着上面介绍的一些技术的发展，这个问题将会得到改善。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',4),R={render:function(n,a){const s=(0,e.up)("OutboundLink"),R=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",t,[p,(0,e.Wm)(s)]),o]),(0,e.Wm)("p",null,[r,(0,e.Wm)(R,{to:"/courses/webpack/output-target.html"},{default:(0,e.w5)((()=>[c])),_:1}),l]),i,(0,e.Wm)("p",null,[u,(0,e.Wm)("a",k,[d,(0,e.Wm)(s)]),m,(0,e.Wm)("a",b,[h,(0,e.Wm)(s)]),g]),W,(0,e.Wm)("p",null,[w,(0,e.Wm)("a",f,[x,(0,e.Wm)(s)]),y]),(0,e.Wm)("p",null,[v,(0,e.Wm)("a",U,[j,(0,e.Wm)(s)]),_,(0,e.Wm)("a",S,[L,(0,e.Wm)(s)]),z,A,P]),(0,e.Wm)("p",null,[(0,e.Wm)("a",E,[I,(0,e.Wm)(s)]),M,(0,e.Wm)("a",T,[H,(0,e.Wm)(s)]),J]),O],64)}}}}]);