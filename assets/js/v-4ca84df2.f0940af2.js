"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[9174],{4679:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4ca84df2",path:"/courses/python/input-output.html",title:"输入与输出",lang:"zh-CN",frontmatter:{title:"输入与输出",description:"Python 中字符串格式化、文件读写等",keywords:["Python"],date:"2021-09-15T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"格式化输出",slug:"格式化输出",children:[{level:3,title:"格式化字符串字面量",slug:"格式化字符串字面量",children:[]},{level:3,title:"str.format()",slug:"str-format",children:[]},{level:3,title:"手动格式化",slug:"手动格式化",children:[]},{level:3,title:"老式的字符串格式化",slug:"老式的字符串格式化",children:[]}]},{level:2,title:"读写文件",slug:"读写文件",children:[{level:3,title:"操作文件对象",slug:"操作文件对象",children:[]},{level:3,title:"使用 json 保存结构化数据",slug:"使用-json-保存结构化数据",children:[]}]}],filePathRelative:"courses/python/input-output.md"}},1110:(n,s,a)=>{a.r(s),a.d(s,{default:()=>I});var e=a(6252);const p=(0,e.Wm)("h2",{id:"格式化输出",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#格式化输出","aria-hidden":"true"},"#"),(0,e.Uk)(" 格式化输出")],-1),t=(0,e.Wm)("p",null,"有四种格式化输出方式。",-1),o=(0,e.Wm)("h3",{id:"格式化字符串字面量",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#格式化字符串字面量","aria-hidden":"true"},"#"),(0,e.Uk)(" 格式化字符串字面量")],-1),l={href:"https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("格式化字符串字面量（formatted string literals）"),c=(0,e.Uk)("，也简称 f-strings，通过在字符串前面加一个 "),i=(0,e.Wm)("code",null,"F",-1),u=(0,e.Uk)(" 或者 "),d=(0,e.Wm)("code",null,"f",-1),k=(0,e.Uk)("，可以允许我们在字符串使用表达式（"),m=(0,e.Wm)("code",null,"{expression}",-1),b=(0,e.Uk)("）。"),g=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">import</span> math\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span>f<span class="token string">&#39;The value of pi is approximately {math.pi:.3f}.&#39;</span><span class="token punctuation">)</span>\nThe value of pi is approximately <span class="token number">3.142</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),h=(0,e.Uk)("冒号后面是一个格式化表达式，在"),f={href:"https://docs.python.org/3/library/string.html#format-specification-mini-language",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("Format Specification Mini-Language"),x=(0,e.Uk)("可以查看详细信息。"),y=(0,e.uE)('<h3 id="str-format" tabindex="-1"><a class="header-anchor" href="#str-format" aria-hidden="true">#</a> str.format()</h3><p><code>str.format()</code> 的基本用法如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;We are the {} who say &quot;{}!&quot;&#39;</span>.format<span class="token punctuation">(</span><span class="token string">&#39;knights&#39;</span>, <span class="token string">&#39;Ni&#39;</span><span class="token punctuation">))</span>\nWe are the knights <span class="token function">who</span> say <span class="token string">&quot;Ni!&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们可以给每一个表达式设置一个索引或者名称。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;{0} and {1}&#39;</span>.format<span class="token punctuation">(</span><span class="token string">&#39;spam&#39;</span>, <span class="token string">&#39;eggs&#39;</span><span class="token punctuation">))</span>\nspam and eggs\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;{1} and {0}&#39;</span>.format<span class="token punctuation">(</span><span class="token string">&#39;spam&#39;</span>, <span class="token string">&#39;eggs&#39;</span><span class="token punctuation">))</span>\neggs and spam\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;This {food} is {adjective}.&#39;</span>.format<span class="token punctuation">(</span>\n<span class="token punctuation">..</span>.       <span class="token assign-left variable">food</span><span class="token operator">=</span><span class="token string">&#39;spam&#39;</span>, <span class="token assign-left variable">adjective</span><span class="token operator">=</span><span class="token string">&#39;absolutely horrible&#39;</span><span class="token punctuation">))</span>\nThis spam is absolutely horrible.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="手动格式化" tabindex="-1"><a class="header-anchor" href="#手动格式化" aria-hidden="true">#</a> 手动格式化</h3><p>通过 <code>str.rjust()</code>、<code>str.ljust()</code>、<code>str.center()</code> 和 <code>srt.zfill()</code> 等方法来格式化。这几个函数的功能分别是右对齐、左对齐、居中对齐和左补零填充。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">11</span><span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>.rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>, repr<span class="token punctuation">(</span>x*x<span class="token punctuation">)</span>.rjust<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>, <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>.     <span class="token comment"># Note use of &#39;end&#39; on previous line</span>\n<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>x*x*x<span class="token punctuation">)</span>.rjust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">))</span>\n<span class="token punctuation">..</span>.\n <span class="token number">1</span>   <span class="token number">1</span>    <span class="token number">1</span>\n <span class="token number">2</span>   <span class="token number">4</span>    <span class="token number">8</span>\n <span class="token number">3</span>   <span class="token number">9</span>   <span class="token number">27</span>\n <span class="token number">4</span>  <span class="token number">16</span>   <span class="token number">64</span>\n <span class="token number">5</span>  <span class="token number">25</span>  <span class="token number">125</span>\n <span class="token number">6</span>  <span class="token number">36</span>  <span class="token number">216</span>\n <span class="token number">7</span>  <span class="token number">49</span>  <span class="token number">343</span>\n <span class="token number">8</span>  <span class="token number">64</span>  <span class="token number">512</span>\n <span class="token number">9</span>  <span class="token number">81</span>  <span class="token number">729</span>\n<span class="token number">10</span> <span class="token number">100</span> <span class="token number">1000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="老式的字符串格式化" tabindex="-1"><a class="header-anchor" href="#老式的字符串格式化" aria-hidden="true">#</a> 老式的字符串格式化</h3><p>通过 <code>&#39;string&#39; % values</code> 的形式来实现字符串格式化，<code>string</code> 中的所有 <code>%</code> 都会被 <code>values</code> 中的相应元素替换。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">import</span> math\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;The value of pi is approximately %5.3f.&#39;</span> % math.pi<span class="token punctuation">)</span>\nThe value of pi is approximately <span class="token number">3.142</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',11),W=(0,e.Uk)("更多格式化信息可以在 "),j={href:"https://docs.python.org/3/library/stdtypes.html#old-string-formatting",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("printf-style String Formatting "),w=(0,e.Uk)(" 查看"),q=(0,e.Wm)("h2",{id:"读写文件",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#读写文件","aria-hidden":"true"},"#"),(0,e.Uk)(" 读写文件")],-1),T={href:"https://docs.python.org/3/library/functions.html#open",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Wm)("code",null,"open()",-1),z=(0,e.Uk)(" 函数"),E=(0,e.Uk)("返回一个文件对象，我们可以对这个文件对象进行一些操作。"),N=(0,e.Wm)("code",null,"open()",-1),P=(0,e.Uk)(" 函数支持指定读写模式，"),C=(0,e.Wm)("code",null,"r",-1),F=(0,e.Uk)(" 为只读模式，"),S=(0,e.Wm)("code",null,"w",-1),L=(0,e.Uk)(" 为只写模式，"),H=(0,e.Wm)("code",null,"a",-1),M=(0,e.Uk)(" 为追加模式，"),O=(0,e.Wm)("code",null,"r+",-1),R=(0,e.Uk)(" 为读写模式。"),Y=(0,e.uE)('<p>通常来说，文件被以文本文件模式打开，我们可以通过参数来改变文件模式，比如 <code>b</code> 参数可以指定以二进制模式打开。</p><p>在文本模式中，读取的文本行，换行符都是 <code>\\n</code>，Python 内部根据不同平台做了差异化处理。即读取的时候会将不同平台的换行符转换成 <code>\\n</code>，写入的时候会将 <code>\\n</code> 转换成不同平台的换行符。</p><h3 id="操作文件对象" tabindex="-1"><a class="header-anchor" href="#操作文件对象" aria-hidden="true">#</a> 操作文件对象</h3><p>通过 <code>open()</code> 函数拿到文件对象以后，我们可以通过 <code>f.read(size)</code> 方法读取一段文本，未指定 <code>size</code> 则读取全部内容（当心读取大文件问题）。在到文件末尾时，<code>f.read()</code> 会返回空字符串（<code>&#39;&#39;</code>）。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f.read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">&#39;This is the entire file.\\n&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f.read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">&#39;&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>f.readline()</code> 会逐行读取文本，每一行末尾都是一个换行符（<code>\\n</code>）。读到文件末尾则返回空字符串。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">&#39;This is the first line of the file.\\n&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">&#39;Second line of the file\\n&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">&#39;&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们可以通过 <code>list(f)</code> 或者 <code>f.readlines()</code> 读取文件内所有的行。</p><p><code>f.write(string)</code> 可以写入文件，返回写入的文本长度。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f.write<span class="token punctuation">(</span><span class="token string">&#39;This is a test\\n&#39;</span><span class="token punctuation">)</span>\n<span class="token number">15</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>f.tell()</code> 返回当前读取的位置。我们可以通过 <code>f.seek(offset, whence)</code> 来改变读取位置。当 <code>whence</code> 为 0 时，从文件开始计算偏移量；当 <code>whence</code> 为 1 时，从当前读取位置计算偏移量；当 <code>whence</code> 为 2 时，从文件末尾开始计算偏移量。</p><h3 id="使用-json-保存结构化数据" tabindex="-1"><a class="header-anchor" href="#使用-json-保存结构化数据" aria-hidden="true">#</a> 使用 json 保存结构化数据</h3>',12),Z=(0,e.Uk)("我们可以通过 "),A={href:"https://docs.python.org/3/library/json.html#module-json",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Wm)("code",null,"json",-1),D=(0,e.Uk)(" 这个模块。"),G=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">import</span> json\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token string">&#39;simple&#39;</span>, <span class="token string">&#39;list&#39;</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json.dumps<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token string">&#39;[1, &quot;simple&quot;, &quot;list&quot;]&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果已经拿到文件对象，则可以直接通过 <code>dump</code> 和 <code>load</code> 函数来实现写入和读取文件内容。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">)</span>\nx <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',4),I={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,o,(0,e.Wm)("p",null,[(0,e.Wm)("a",l,[r,(0,e.Wm)(a)]),c,i,u,d,k,m,b]),g,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[h,(0,e.Wm)("a",f,[v,(0,e.Wm)(a)]),x])]),y,(0,e.Wm)("p",null,[W,(0,e.Wm)("a",j,[U,(0,e.Wm)(a)]),w]),q,(0,e.Wm)("p",null,[(0,e.Wm)("a",T,[_,z,(0,e.Wm)(a)]),E,N,P,C,F,S,L,H,M,O,R]),Y,(0,e.Wm)("p",null,[Z,(0,e.Wm)("a",A,[B,(0,e.Wm)(a)]),D]),G],64)}}}}]);