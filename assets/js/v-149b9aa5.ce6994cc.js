"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8332],{7650:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-149b9aa5",path:"/courses/webpack/extend-plugin.html",title:"通过插件来扩展 Webpack",lang:"zh-CN",frontmatter:{title:"通过插件来扩展 Webpack",description:"介绍 Webpack 中如何开发自定义插件",keywords:["Webpack"],date:"2021-02-05T00:00:00.000Z",key:34},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"Webpack 插件的基本定义",slug:"webpack-插件的基本定义",children:[]},{level:2,title:"设置插件的开发环境",slug:"设置插件的开发环境",children:[]},{level:2,title:"实现插件的功能",slug:"实现插件的功能",children:[]},{level:2,title:"给插件传递参数",slug:"给插件传递参数",children:[]},{level:2,title:"编译器和编译信息",slug:"编译器和编译信息",children:[]},{level:2,title:"通过编译信息输出文件",slug:"通过编译信息输出文件",children:[]},{level:2,title:"处理 warning 和 error",slug:"处理-warning-和-error",children:[]},{level:2,title:"插件中还可以有插件",slug:"插件中还可以有插件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/extend-plugin.md"}},6296:(n,s,a)=>{a.r(s),a.d(s,{default:()=>un});var p=a(6252);const t=(0,p.Uk)("与 loader 相比，插件可以更加灵活的扩展 Webpack 的功能。借助于插件机制，我们可以访问到 Webpack 的编译器和编译过程，通过各种钩子，我们可以方便的处理各种定制逻辑。Webpack 本身就是一个插件的集合，这些插件都按照 "),e={href:"https://www.npmjs.com/package/tapable",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("tapable"),c=(0,p.Uk)(" 插件接口规范实现。"),l=(0,p.Wm)("p",null,"与 loader 不同，我们没有脱离于 Webpack 运行插件的方法，在插件的开发过程中，我们始终需要通过 Webpack 来运行插件。",-1),u=(0,p.Wm)("h2",{id:"webpack-插件的基本定义",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#webpack-插件的基本定义","aria-hidden":"true"},"#"),(0,p.Uk)(" Webpack 插件的基本定义")],-1),i=(0,p.Uk)("一个 Webpack 插件必须要定义一个 "),r=(0,p.Wm)("code",null,"apply(compiler)",-1),k=(0,p.Uk)(" 函数，同时在构造函数中接受一个 "),m=(0,p.Wm)("code",null,"options",-1),b=(0,p.Uk)(" 参数。我们可以通过 "),d={href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("schema-utils"),h=(0,p.Uk)(" 来对参数做一些校验。"),f=(0,p.Uk)("当我们将插件集成到 Webpack 配置中后，Webpack 会调用插件的构造函数初始化插件，之后调用 "),w=(0,p.Wm)("code",null,"apply(compiler)",-1),y=(0,p.Uk)(" 函数。"),v=(0,p.Wm)("code",null,"compiler",-1),j=(0,p.Uk)(" 对象提供了 Webpack 的一些插件 API，提供也提供了非常多的钩子。这些钩子可以在"),W={href:"https://webpack.js.org/api/plugins/compiler/",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("官方文档"),U=(0,p.Uk)(" 中查到。"),P=(0,p.Wm)("h2",{id:"设置插件的开发环境",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#设置插件的开发环境","aria-hidden":"true"},"#"),(0,p.Uk)(" 设置插件的开发环境")],-1),D=(0,p.Uk)("为了更方便的开发插件，通常我们会在插件之上套一个壳子。在这个壳子中获取插件的输出，做一些断言等处理。我们可以借助于 "),S={href:"https://www.npmjs.com/package/memfs",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("memfs"),q=(0,p.Uk)(" 和 "),E=(0,p.Wm)("code",null,"compiler.outputFileSystem",-1),C=(0,p.Uk)(" 来处理插件中的文件系统输出。"),A=(0,p.uE)('<p>先安装 memfs.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> memfs --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>现在实现一个壳子。</p><p><strong>plugins/test.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createFsFromVolume<span class="token punctuation">,</span> Volume <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;memfs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// The compiler helper accepts filenames should be in the output</span>\n<span class="token comment">// so it&#39;s possible to assert the output easily.</span>\n<span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> filenames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> <span class="token function">createFsFromVolume</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> memfs <span class="token operator">=</span> compiler<span class="token punctuation">.</span>outputFileSystem<span class="token punctuation">;</span>\n\n    compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Now only errors are captured from stats.</span>\n      <span class="token comment">// It&#39;s possible to capture more to assert.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;errors-only&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      filenames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 假设 Webpack 输出在 ./dist.</span>\n        ret<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> memfs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token string">&#39;./test-entry.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>添加测试文件。</p><p><strong>plugins/test-entry.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello from entry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="实现插件的功能" tabindex="-1"><a class="header-anchor" href="#实现插件的功能" aria-hidden="true">#</a> 实现插件的功能</h2><p>插件的核心要处理两件事情，一是提供一个 apply 函数，二是处理构造参数。</p><p><strong>plugins/demo-plugin.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;applying&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在测试一下这个插件，我们修改一下 <code>plugins/test.js</code> 的代码。</p><p><strong>plugins/test.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">...</span>\n\n<span class="token keyword">const</span> DemoPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./demo-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token string">&quot;./test-entry.js&quot;</span><span class="token punctuation">,</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DemoPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这时候执行 <code>node ./test.js</code>，我们可以看到控制台输出了 <code>applying</code> 这条信息。</p><h2 id="给插件传递参数" tabindex="-1"><a class="header-anchor" href="#给插件传递参数" aria-hidden="true">#</a> 给插件传递参数</h2><p>我们通过构造函数给插件传递参数。</p><p><strong>plugins/demo-plugin.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;apply&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>添加一些参数。</p><p><strong>plugins/test.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> <span class="token string">&#39;./test-entry.js&#39;</span><span class="token punctuation">,</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DemoPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>此时再执行 <code>node ./test.js</code>，可以看到 <code>apply { name: &#39;demo&#39; }</code> 的输出。</p><h2 id="编译器和编译信息" tabindex="-1"><a class="header-anchor" href="#编译器和编译信息" aria-hidden="true">#</a> 编译器和编译信息</h2><p><code>apply</code> 接受一个 <code>compiler</code> 参数。</p><p><strong>plugins/demo-plugin.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',28),F=(0,p.Uk)("通过 Webpack 的"),I={href:"https://webpack.js.org/api/plugins/",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Uk)("插件文档"),T=(0,p.Uk)("，我们可以看到编译器提供了很多钩子，每一个钩子都与一个编译阶段对应。比如我们需要输出文件，我们可以监听 "),R=(0,p.Wm)("code",null,"emit",-1),V=(0,p.Uk)(" 事件获取文件内容。"),L=(0,p.uE)('<p>修改插件代码，监听 <code>compilation</code> 事件。</p><p><strong>plugins/demo-plugin.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&#39;DemoPlugin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此时执行 <code>node ./test.js</code> 我们可以看到输出了非常多的信息。这个编译信息里包含了 Webpack 整个的依赖图信息。我们可以通过 <code>compilation</code> 访问 <code>entry</code>，<code>chunk</code>，<code>module</code> 等。</p><h2 id="通过编译信息输出文件" tabindex="-1"><a class="header-anchor" href="#通过编译信息输出文件" aria-hidden="true">#</a> 通过编译信息输出文件</h2>',5),O=(0,p.Wm)("code",null,"compilation",-1),H=(0,p.Uk)(" 上的 "),M=(0,p.Wm)("code",null,"assets",-1),z=(0,p.Uk)(" 可以用来输出一些资源文件。我们需要借助于 "),G={href:"https://www.npmjs.com/package/webpack-sources",target:"_blank",rel:"noopener noreferrer"},Y=(0,p.Uk)("webpack-sources"),Z=(0,p.Uk)(" 这个文件抽象工具来实现。从 Webpack 5 开始，webpack-sources 已经被默认集成到了 webpack 中。"),$=(0,p.uE)('<p>我们通过 <code>webpack-sources</code> 的 <code>RawSource</code> 来输出文件。</p><p><strong>plugins/demo-plugin.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> sources<span class="token punctuation">,</span> Compilation <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">&#39;DemoPlugin&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">;</span>\n\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>processAssets<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> pluginName<span class="token punctuation">,</span>\n          <span class="token comment">// See lib/Compilation.js in webpack for more</span>\n          stage<span class="token operator">:</span> Compilation<span class="token punctuation">.</span><span class="token constant">PROCESS_ASSETS_STAGE_ADDITIONAL</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> compilation<span class="token punctuation">.</span><span class="token function">emitAsset</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">sources<span class="token punctuation">.</span>RawSource</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>为了确保文件已经输出，我们调整下 <code>test.js</code> 的代码。</p><p><strong>plugins/test.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">await</span> <span class="token function">compile</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span>\n        entry<span class="token operator">:</span> <span class="token string">&#39;./test-entry.js&#39;</span><span class="token punctuation">,</span>\n        plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DemoPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>node ./test.js</code>，可以看到控制台输出 <code>{ demo: &#39;hello&#39; }</code>。</p><h2 id="处理-warning-和-error" tabindex="-1"><a class="header-anchor" href="#处理-warning-和-error" aria-hidden="true">#</a> 处理 warning 和 error</h2><p>我们可以通过 <code>throw new Error(&quot;Message&quot;)</code> 的方式来终止插件的运行。如果我们希望将告警信息或者错误信息提示给用户，我们可以通过 <code>compilation.warnings</code> 和 <code>compilation.errors</code> 来实现。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>compilation<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;warning&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncompilation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Webpack 还提供了记录日志的 API。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> logger <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getInfrastructureLogger</span><span class="token punctuation">(</span><span class="token string">&#39;Demo Plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello from compiler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',12),B=(0,p.Uk)("这个日志 API 与普通的 "),J=(0,p.Wm)("code",null,"console.error",-1),K=(0,p.Uk)("、"),Q=(0,p.Wm)("code",null,"console.warning",-1),X=(0,p.Uk)(" 等相似，可以通过"),nn={href:"https://webpack.js.org/api/logging/",target:"_blank",rel:"noopener noreferrer"},sn=(0,p.Uk)("官方的日志文档"),an=(0,p.Uk)("了解详细信息。"),pn=(0,p.Wm)("h2",{id:"插件中还可以有插件",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#插件中还可以有插件","aria-hidden":"true"},"#"),(0,p.Uk)(" 插件中还可以有插件")],-1),tn=(0,p.Uk)("插件还可以提供自己的钩子函数。"),en={href:"https://www.npmjs.com/package/html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},on=(0,p.Uk)("html-webpack-plugin"),cn=(0,p.Uk)(" 就是一个很好的例子。"),ln=(0,p.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>插件可以截断 Webpack 的执行过程，做一些定制处理逻辑。虽然 loader 也可以实现类似的能力，但是插件比 loader 更加的灵活。</p><p>插件可以和 loader 结合使用，比如 <code>MiniCssExtractPlugin</code>。</p><p>插件可以访问 Webpack 的 <code>compiler</code> 和 <code>compilation</code>。这两个对象都提供了丰富的钩子函数以供调用。</p><p>插件可以输出新的资源文件，也可以将已有的资源文件处理后重新输出。</p><p>插件可以有自己的插件体系，<code>HtmlWebpackPlugin</code> 就是一个很好的例子。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',7),un={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[t,(0,p.Wm)("a",e,[o,(0,p.Wm)(a)]),c]),l,u,(0,p.Wm)("p",null,[i,r,k,m,b,(0,p.Wm)("a",d,[g,(0,p.Wm)(a)]),h]),(0,p.Wm)("p",null,[f,w,y,v,j,(0,p.Wm)("a",W,[x,(0,p.Wm)(a)]),U]),P,(0,p.Wm)("p",null,[D,(0,p.Wm)("a",S,[_,(0,p.Wm)(a)]),q,E,C]),A,(0,p.Wm)("p",null,[F,(0,p.Wm)("a",I,[N,(0,p.Wm)(a)]),T,R,V]),L,(0,p.Wm)("p",null,[O,H,M,z,(0,p.Wm)("a",G,[Y,(0,p.Wm)(a)]),Z]),$,(0,p.Wm)("p",null,[B,J,K,Q,X,(0,p.Wm)("a",nn,[sn,(0,p.Wm)(a)]),an]),pn,(0,p.Wm)("p",null,[tn,(0,p.Wm)("a",en,[on,(0,p.Wm)(a)]),cn]),ln],64)}}}}]);