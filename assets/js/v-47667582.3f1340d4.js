"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[615],{685:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-47667582",path:"/code-reading/dataloader/cache.html",title:"Dataloader 缓存能力解读",lang:"zh-CN",frontmatter:{title:"Dataloader 缓存能力解读",description:"Dataloader 通过缓存来避免一个周期内重复请求相同的数据。默认缓存是一个 Map 对象，我们也可以自定义。本文介绍 Dataloader 的缓存实现原理和相关操作说明。",keywords:["dataloader","cache","缓存"],date:"2021-08-08T00:00:00.000Z",key:2},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"缓存的实现",slug:"缓存的实现",children:[]},{level:2,title:"使用请求级别的缓存",slug:"使用请求级别的缓存",children:[]},{level:2,title:"命中缓存与批处理",slug:"命中缓存与批处理",children:[]},{level:2,title:"手动缓存数据 prime",slug:"手动缓存数据-prime",children:[]},{level:2,title:"清除缓存",slug:"清除缓存",children:[]}],filePathRelative:"code-reading/dataloader/cache.md"}},4688:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(6252);const e=(0,p.uE)('<p>在 Dataloader 的构造函数中，有三个配置项与缓存有关：</p><ul><li><code>cache</code> 是否开启缓存，为 true 表示开启缓存，默认为 true。</li><li><code>cacheKeyFn</code> 缓存 key 的生成函数，从 <code>load</code> 函数的 key 生成缓存 key.</li><li><code>cacheMap</code> 存储数据的缓存对象，默认为 <code>new Map()</code>，也可以是满足要求的任何对象。</li></ul><h2 id="缓存的实现" tabindex="-1"><a class="header-anchor" href="#缓存的实现" aria-hidden="true">#</a> 缓存的实现</h2>',3),t=(0,p.Uk)("我们"),c=(0,p.Uk)("上一篇"),o=(0,p.Uk)("说过，"),l=(0,p.Wm)("code",null,"load",-1),u=(0,p.Uk)(" 函数每次都会先检查一次缓存，如果缓存直接命中，就直接返回缓存的数据。"),r=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// load 函数的部分实现</span>\n<span class="token keyword">var</span> cacheMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cacheMap<span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> cachedPromise <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedPromise<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> cacheHits <span class="token operator">=</span> batch<span class="token punctuation">.</span>cacheHits <span class="token operator">||</span> <span class="token punctuation">(</span>batch<span class="token punctuation">.</span>cacheHits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      cacheHits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>cachedPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>this._cacheMap</code> 是在构造函数中通过 <code>getValidCacheMap</code> 获取的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValidCacheMap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> <span class="token operator">?</span>Options<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CacheMap<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> shouldCache <span class="token operator">=</span> <span class="token operator">!</span>options <span class="token operator">||</span> options<span class="token punctuation">.</span>cache <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> cacheMap <span class="token operator">=</span> options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>cacheMap<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> cacheFunctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clear&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> missingFunctions <span class="token operator">=</span> cacheFunctions<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span>fnName<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cacheMap <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> cacheMap<span class="token punctuation">[</span>fnName<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>missingFunctions<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;Custom cacheMap missing methods: &#39;</span> <span class="token operator">+</span> missingFunctions<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> cacheMap<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>从 <code>getValidCacheMap</code> 的代码可以看到，如果没有指定 <code>cacheMap</code>，则默认是返回 <code>new Map()</code> 作为缓存对象。</p><p>如果指定了 <code>cacheMap</code>，则会校验指定的对象是否满足 <code>get</code>、<code>set</code>、<code>delete</code>、<code>clear</code> 这四个接口，如果满足则使用，否则报错。也就是说，用户指定的缓存对象必须要有这四个函数才能被 Dataloader 使用。</p><h2 id="使用请求级别的缓存" tabindex="-1"><a class="header-anchor" href="#使用请求级别的缓存" aria-hidden="true">#</a> 使用请求级别的缓存</h2><p>从 <code>load</code> 函数的代码可以看到，每次调用 <code>load(key)</code>，都会先尝试从缓存中读取。不同的用户访问同一个资源可能获取的信息不同，比如权限不同等。如果使用全局缓存的话，会导致各种各样的问题。因此，我们需要确保只缓存单次请求级别。</p><p>有两种方式可以实现，一种是确保 Dataloader 是请求级别，及在请求的开始实例化 Dataloader。</p><p>下面的代码展示了如何在 express 中使用请求级别的 Dataloader.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createLoaders</span><span class="token punctuation">(</span><span class="token parameter">authToken</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    users<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DataLoader</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ids</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">genUsers</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> authToken <span class="token operator">=</span> <span class="token function">authenticateUser</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> loaders <span class="token operator">=</span> <span class="token function">createLoaders</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderPage</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> loaders<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',10),i=(0,p.Uk)("另一种是借助于 "),k={href:"https://nodejs.org/api/async_hooks.html",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("async_hooks"),b=(0,p.Uk)(" 模块，全局缓存来管理请求缓存，即每次请求的缓存单独管理，请求结束释放缓存。因为一些限制，无法使用第一种方式，笔者在项目中使用了这个方法，受篇幅限制这里我们不做详细实现了。"),m=(0,p.uE)('<h2 id="命中缓存与批处理" tabindex="-1"><a class="header-anchor" href="#命中缓存与批处理" aria-hidden="true">#</a> 命中缓存与批处理</h2><p>在 <code>load</code> 函数的源码解读中我们可以看到，即使命中了缓存，函数的调用结果也不是立即返回的，而是等到与 <code>batchLoadFn</code> 的结果一起返回。也就是说命中缓存的调用和需要发起请求的调用会一起返回。为什么这么设计的？这么做是为了 Dataloader 能为后续的数据请求做优化。</p><p>举个例子，假如 <code>User 1</code> 一开始是被缓存了的（借助于 <code>prime</code> 函数，后面说）。但是因为 <code>User 1</code> 和 <code>User 2</code> 是一个时间周期内调用的，那么他们的结果也会在同一时间返回。这样的话，后续的 <code>user.bestFriendID</code> 请求也会在下一个时间周期同时请求。那么，总共会想远端服务发送两个请求（查用户一次，查好友一次）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>userLoader<span class="token punctuation">.</span><span class="token function">prime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bestFriend<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getBestFriend</span><span class="token punctuation">(</span><span class="token parameter">userID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> userLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">await</span> userLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>bestFriendID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// In one part of your application</span>\n<span class="token function">getBestFriend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Elsewhere</span>\n<span class="token function">getBestFriend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果命中的缓存立即返回的话，那么查 <code>User 1</code> 好友的请求可能会提前发出，那么就可能会造成总共需要发送三次数据查询请求了。因为每个 <code>user.bestFriendID</code> 的查询时间不一样。</p><h2 id="手动缓存数据-prime" tabindex="-1"><a class="header-anchor" href="#手动缓存数据-prime" aria-hidden="true">#</a> 手动缓存数据 <code>prime</code></h2><p><code>prime</code> 函数允许我们手动地向缓存中插入数据。代码如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">prime</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">V</span> <span class="token operator">|</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> cacheMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cacheMap<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> cacheKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_cacheKeyFn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Only add the key if it does not already exist.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Cache a rejected promise if the value is an Error, in order to match</span>\n        <span class="token comment">// the behavior of load(key).</span>\n        <span class="token keyword">var</span> promise<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          promise <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// Since this is a case where an Error is intentionally being primed</span>\n          <span class="token comment">// for a given key, we want to disable unhandled promise rejection.</span>\n          promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          promise <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        cacheMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>我们可以看到，如果要插入缓存的 key 已经存在，则直接忽略，不会更新缓存。否则会向缓存中插入一个 Promise，然后等待 <code>batchScheduleFn</code> 调度。</p><p><code>prime</code> 函数还支持缓存错误信息，只需要保证缓存的值是 <code>Error</code> 类的一个实例就可以了。</p><h2 id="清除缓存" tabindex="-1"><a class="header-anchor" href="#清除缓存" aria-hidden="true">#</a> 清除缓存</h2><p>Dataloader 有两个 API 可以清除缓存：<code>clear</code> 和 <code>clearAll</code>。他们的代码都非常简单，就不做过多说明了。代码如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// clear 函数实现</span>\n<span class="token function">clear</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> cacheMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cacheMap<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> cacheKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_cacheKeyFn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cacheMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// clearAll 函数实现</span>\n<span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> cacheMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cacheMap<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cacheMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',14),h={render:function(n,s){const a=(0,p.up)("RouterLink"),h=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)(a,{to:"/code-reading/dataloader/batch.html"},{default:(0,p.w5)((()=>[c])),_:1}),o,l,u]),r,(0,p.Wm)("p",null,[i,(0,p.Wm)("a",k,[d,(0,p.Wm)(h)]),b]),m],64)}}}}]);