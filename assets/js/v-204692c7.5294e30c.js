"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6406],{6146:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-204692c7",path:"/posts/2022/01/13/vite-and-microfrontend.html",title:"使用 vite 构建项目并实现接入微前端",lang:"zh-CN",frontmatter:{title:"使用 vite 构建项目并实现接入微前端",description:"本文是在项目中使用 vite 构建的经验记录，同时给出如何构建微前端应用的方案。",keywords:["vite","micro frontend","qiankun"],date:"2022-01-13T00:00:00.000Z",permalinkPattern:"posts/:year/:month/:day/:slug.html",tags:["经验总结"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"基础配置",slug:"基础配置",children:[]},{level:2,title:"支持微前端构建",slug:"支持微前端构建",children:[]},{level:2,title:"其他说明",slug:"其他说明",children:[{level:3,title:"1. 老旧浏览器的支持",slug:"_1-老旧浏览器的支持",children:[]},{level:3,title:"2. 关于 TypeScript 的说明",slug:"_2-关于-typescript-的说明",children:[]},{level:3,title:"3. 对接 CDN",slug:"_3-对接-cdn",children:[]},{level:3,title:"4. 构建出错",slug:"_4-构建出错",children:[]}]},{level:2,title:"小结",slug:"小结",children:[]}],filePathRelative:"posts/vite-and-microfrontend.md"}},8710:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Rn});var p=a(6252);const e=(0,p.Uk)("得益于 "),t={href:"https://esbuild.github.io/faq/#why-is-esbuild-fast",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("esbuild 的超高性能"),o=(0,p.Uk)("，vite 在诞生之初就备受关注，且一直保持着活跃的开发迭代。截至目前，vite 已经迭代到了 2.7.10 版本，各方面也基本具备了在生产使用的条件。这段时间，我在项目中尝试了使用 vite 进行打包构建，本文就是这次构建的过程记录。"),c=(0,p.Wm)("h2",{id:"基础配置",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#基础配置","aria-hidden":"true"},"#"),(0,p.Uk)(" 基础配置")],-1),r=(0,p.Uk)("首先使用"),u={href:"https://vitejs.dev/guide/#scaffolding-your-first-vite-project",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("vite 官方脚手架"),k=(0,p.Uk)("生成项目。"),m=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> create vite vite-demo --template react-ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),b=(0,p.Uk)("上面这行命令使用 "),d=(0,p.Wm)("code",null,"react-ts",-1),g=(0,p.Uk)(" 模板创建了一个叫 "),v=(0,p.Wm)("code",null,"vite-demo",-1),h=(0,p.Uk)(" 的项目。由于我在的团队日常使用 react 和 typescript 开发居多，因此选择了 "),f=(0,p.Wm)("code",null,"react-ts",-1),y=(0,p.Uk)(" 这个模板，vite 官方支持的模板还有很多，可以在 "),x={href:"https://github.com/vitejs/vite/tree/main/packages/create-vite",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("create-vite"),w=(0,p.Uk)(" 中查看。"),W=(0,p.uE)('<p>项目初始化完成以后，目录结构如下：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>.\n|____index.html\n|____.gitignore\n|____package.json\n|____tsconfig.json\n|____vite.config.ts\n|____src\n| |____App.tsx\n| |____main.tsx\n| |____App.css\n| |____index.css\n| |____vite-env.d.ts\n| |____logo.svg\n| |____favicon.svg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>其中 vite.config.ts 内容如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n<span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-react&#39;</span>\n\n<span class="token comment">// https://vitejs.dev/config/</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>可以看出，vite 官方已经做了比较完善的封装，相较于之前版本，开发体验提升了很多。</p></blockquote><p>按照指示安装完依赖，启动应用以后，速度确实很快。现在我们来做一些基本改造。</p><p>我通常使用 less 来写样式，vite 已经做了很好的支持，在安装完依赖以后，只需要直接在代码中引用 <code>xxx.less</code> 即可。对于一个久经考验的开发者来说，样式还是要引入作用域的，通常使用 css modules。</p><p>安装 less 预处理器，</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> --dev <span class="token function">less</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后修改 <code>vite.config.ts</code> 文件，添加 css modules 配置：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  css<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">module</span>s<span class="token operator">:</span> <span class="token punctuation">{</span>\n      localsConvention<span class="token operator">:</span> <span class="token string">&#39;camelCaseOnly&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 我们使用驼峰形式</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>添加完配置以后，只要将原来的 <code>xxx.less</code> 改成 <code>xxx.module.less</code> 即可，这点与 create-react-app 是一样的。</p>',12),q=(0,p.Uk)("这里推荐一个 vscode 插件 "),U={href:"https://marketplace.visualstudio.com/items?itemName=clinyong.vscode-css-modules",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("clinyong.vscode-css-modules"),E=(0,p.Uk)(" 可以实现编码时样式类名的智能提示，同时点击样式类名可以跳转到样式定义的地方，非常好用。如果在编写样式时使用的是中划线形式的命名方式，比如 "),C=(0,p.Wm)("code",null,".xxx-container",-1),A=(0,p.Uk)("，那么需要额外配置这个 vscode 插件，如下："),M=(0,p.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;cssModules.camelCase&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样可以实现编写样式时使用中划线形式，在代码中使用的还是驼峰式的。</p>',2),P=(0,p.Uk)("由于我开发的是一个中后台项目，使用了 antd 和 lodash，大家都知道，这两个是按需加载大户，以前我们使用 "),S={href:"https://www.npmjs.com/package/babel-plugin-import",target:"_blank",rel:"noopener noreferrer"},D=(0,p.Uk)("babel-plugin-import"),N=(0,p.Uk)(" 来处理，vite 生态里也有很多类似的方案。我选用了 "),T={href:"https://www.npmjs.com/package/vite-plugin-imp",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("vite-plugin-imp"),O=(0,p.Uk)(" 这个插件，修改 "),F=(0,p.Wm)("code",null,"vite.config.ts",-1),H=(0,p.Uk)(" 如下："),R=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> vitePluginImp <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-imp&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">vitePluginImp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      libList<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          libName<span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>\n          libDirectory<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n          camel2DashComponentName<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          libName<span class="token operator">:</span> <span class="token string">&#39;antd&#39;</span><span class="token punctuation">,</span>\n          <span class="token function">style</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// use less</span>\n              <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">antd/es/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/style/index.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  css<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      less<span class="token operator">:</span> <span class="token punctuation">{</span>\n        javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',1),$=(0,p.Uk)("antd 已经默认支持了 Tree Shaking，上面的配置最终只会处理样式的按需加载。lodash 不支持 Tree Shaking，我们也可以使用 ESM 版本 "),L={href:"https://www.npmjs.com/package/lodash-es",target:"_blank",rel:"noopener noreferrer"},J=(0,p.Uk)("lodash-es"),z=(0,p.Uk)("，这样就可以不使用 vite-plugin-imp 了，配置如下："),B=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      find<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^lodash$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      replacement<span class="token operator">:</span> <span class="token string">&#39;lodash-es&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),G=(0,p.uE)('<p>通常，我们在开发前端项目时，需要一些代理来调用后端 API 接口，vite 配置如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span>\n      proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;/api_path/&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          target<span class="token operator">:</span> <span class="token string">&#39;http://xxx.server.domain.com/&#39;</span><span class="token punctuation">,</span>\n          changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),K=(0,p.Uk)("代理底层都是基于 "),Y={href:"https://www.npmjs.com/package/http-proxy",target:"_blank",rel:"noopener noreferrer"},V=(0,p.Uk)("http-proxy"),Z=(0,p.Uk)(" 实现，这里不做过多说明了。"),Q=(0,p.Wm)("p",null,"现在可以愉快的开发代码了。",-1),X=(0,p.Wm)("h2",{id:"支持微前端构建",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#支持微前端构建","aria-hidden":"true"},"#"),(0,p.Uk)(" 支持微前端构建")],-1),nn=(0,p.Uk)("因为我们的中后台应用是使用微前端（qiankun）来管理的，上面的配置，打包完成后不能被 qiankun 识别，主要原因可以看看"),sn={href:"https://github.com/umijs/qiankun/issues/1257",target:"_blank",rel:"noopener noreferrer"},an=(0,p.Uk)("这里"),pn=(0,p.Uk)("，我们需要做一些额外处理。"),en=(0,p.uE)('<p>我们知道，使用 webpack 构建微前端是，需要添加如下三个配置项：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span>\n    library<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">APP_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-[name]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    jsonpFunction<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">webpackJsonp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">APP_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 vite 中，可以直接通过设置 <code>build.rollupOptions.format</code> 为 <code>umd</code> 来设置 UMD 规范，但是实际构建结果却不能被 qiankun 识别，猜想是可能跟 vite 使用 html entry 有关系。</p><p>换一个思路，我们把当前整个应用当做一个 library 来构建，输出为 UMD 规范，然后手动写入一个 html 文件，加载这个输出的 JS。</p><p>修改配置如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lib<span class="token operator">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">,</span>\n      entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/index.tsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      formats<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;umd&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>配置完成之后，执行 <code>yarn build</code> 提示如下错误：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>UMD and IIFE output formats are not supported for code-splitting builds.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>因为我们的应用中有路由，使用了按需加载。我们将 rollup 的 <code>inlineDynamicImports</code> 配置打开：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        inlineDynamicImports<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样，构建完成之后，dist 目录下有两个文件 <code>style.css</code> 和 <code>xxx.umd.js</code>。</p><p>现在我们要生成 <code>index.html</code> 了。</p><p>因为 vite 在开发态直接使用 ES Modules，是不打包的，因此生成开发态的 <code>index.html</code> 和生产的 <code>index.html</code> 是不同的。</p><p>我们修改项目根目录下的 <code>index.html</code> 为：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/svg+xml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/favicon.svg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- style placeholder --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- script placeholder --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意当中的两行注释，我们会在开发态和生产构建做不同的处理。</p>',16),tn=(0,p.Uk)("vite 插件 API 中有一个 "),ln={href:"https://vitejs.dev/guide/api-plugin.html#transformindexhtml",target:"_blank",rel:"noopener noreferrer"},on=(0,p.Wm)("code",null,"transformindexhtml",-1),cn=(0,p.Uk)(" 可以定制开发态的 html 内容，因此，我们开发态的配置如下："),rn=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// https://vitejs.dev/config/</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;dev html&#39;</span><span class="token punctuation">,</span>\n      apply<span class="token operator">:</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span>\n      <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>indexHtml<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> indexHtml\n          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!-- style placeholder --&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!-- script placeholder --&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;script type=&quot;module&quot; src=&quot;/src/index.tsx&quot;&gt;&lt;/script&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),un=(0,p.Uk)("生产构建需要借助于 "),kn={href:"https://www.npmjs.com/package/@rollup/plugin-html",target:"_blank",rel:"noopener noreferrer"},mn=(0,p.Wm)("code",null,"@rollup/plugin-html",-1),bn=(0,p.Uk)(" 这个插件来实现定制 html 内容。"),dn=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> html <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-html&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> entryHtml <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;build html&#39;</span><span class="token punctuation">,</span>\n      apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token function-variable function">template</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> entryHtml\n            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n              <span class="token string">&#39;&lt;!-- style placeholder --&gt;&#39;</span><span class="token punctuation">,</span>\n              <span class="token string">&#39;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; /&gt;&#39;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n              <span class="token string">&#39;&lt;!-- script placeholder --&gt;&#39;</span><span class="token punctuation">,</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;script type=&quot;text/javascript&quot; src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.umd.js&quot;&gt;&lt;/script&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>通过上面的配置，再次构建，qiankun 可以加载这个子应用了。</p><h2 id="其他说明" tabindex="-1"><a class="header-anchor" href="#其他说明" aria-hidden="true">#</a> 其他说明</h2><h3 id="_1-老旧浏览器的支持" tabindex="-1"><a class="header-anchor" href="#_1-老旧浏览器的支持" aria-hidden="true">#</a> 1. 老旧浏览器的支持</h3>',4),gn=(0,p.Uk)("由于我这次的项目是中后台项目，对老旧浏览器的支持诉求不强烈，就没有在项目中做处理。其实 vite 官方也是给了解决方案的，就是 "),vn={href:"https://github.com/vitejs/vite/tree/main/packages/plugin-legacy",target:"_blank",rel:"noopener noreferrer"},hn=(0,p.Uk)("@vitejs/plugin-legacy"),fn=(0,p.Uk)(" 这个插件。"),yn=(0,p.Uk)("原理也非常简单，就是通过 "),xn=(0,p.Wm)("code",null,"<script nomodule>",-1),_n=(0,p.Uk)(" 来实现在不支持 ES Modules 的浏览器执行相关脚本，同时使用 "),wn={href:"https://github.com/systemjs/systemjs",target:"_blank",rel:"noopener noreferrer"},Wn=(0,p.Wm)("code",null,"SystemJS",-1),qn=(0,p.Uk)(" 来加载模块。"),Un=(0,p.Wm)("h3",{id:"_2-关于-typescript-的说明",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#_2-关于-typescript-的说明","aria-hidden":"true"},"#"),(0,p.Uk)(" 2. 关于 TypeScript 的说明")],-1),jn=(0,p.Uk)("脚手架初始化完成以后就可以用 TypeScript 开发，这里格外说明一点，就是需要开启编译器选项 "),En=(0,p.Wm)("code",null,"isolatedModules:true",-1),Cn=(0,p.Uk)("，因为 vite 使用 esbuild 处理 ts 文件，只将 ts转换成 js 而不做类型检查（依赖编辑器处理类型检查，比如 vscode）。因此，当遇到一些纯类型的导入导出时，会出错，需要开启 "),An=(0,p.Wm)("code",null,"isolatedModules:true",-1),Mn=(0,p.Uk)(" 来避免这个问题。如果因为一些原因无法开启这个选项，则可以使用 "),Pn={href:"https://www.npmjs.com/package/rollup-plugin-friendly-type-imports",target:"_blank",rel:"noopener noreferrer"},Sn=(0,p.Uk)("rollup-plugin-friendly-type-imports"),Dn=(0,p.Uk)(" 这个包来处理，这个包的 README 里也说明了为什么会有这样的问题。"),Nn=(0,p.uE)('<h3 id="_3-对接-cdn" tabindex="-1"><a class="header-anchor" href="#_3-对接-cdn" aria-hidden="true">#</a> 3. 对接 CDN</h3><p>基于上面的配置构建出来的结果，浏览器在加载资源的时候，都是使用的根路径（<code>/</code>）加载，如果使用 CDN 的话会出现资源加载 404 的问题。</p><p>我们可以配置 <code>base</code> 来设置基础路径，类似于 webpack 的 <code>PUBLIC_PATH</code>。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  base<span class="token operator">:</span> <span class="token string">&#39;/some/public/path&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-构建出错" tabindex="-1"><a class="header-anchor" href="#_4-构建出错" aria-hidden="true">#</a> 4. 构建出错</h3><h4 id="_4-1-找不到包" tabindex="-1"><a class="header-anchor" href="#_4-1-找不到包" aria-hidden="true">#</a> 4.1 找不到包</h4><p>报错信息为：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>[plugin: vite:dep-scan] Failed to resolve entry for package &quot;xxx&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通常是依赖包未在 package.json 正确配置 main、module 等字段，导致 vite 无法找到包的入口。</p><p>可以设置通过设置别名的方式，将其映射到正确的文件上。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      find<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^SOME_PACKAGE_NAME$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      replacement<span class="token operator">:</span> <span class="token string">&#39;SOME_PACKAGE_NAME/dist/xxx.es.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_4-2-请求超时" tabindex="-1"><a class="header-anchor" href="#_4-2-请求超时" aria-hidden="true">#</a> 4.2 请求超时</h4><p>报错信息为：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>net::ERR_ABORTED 408 (Request Timeout)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>启动开发服务器后，浏览器出现请求超时错误。是因为 vite 检测到对依赖包的请求，且该依赖尚未被 vite 处理过，这时候会会触发预构建，导致请求超时以及页面重载。</p><p>我们可以多刷新几次等 vite 完成预构建，也可以将依赖加入 <code>optimizeDeps.include</code> 来提前处理。</p><h4 id="_4-3-导入模块出错" tabindex="-1"><a class="header-anchor" href="#_4-3-导入模块出错" aria-hidden="true">#</a> 4.3 导入模块出错</h4><p>报错信息为：</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>Internal server error: Failed to resolve import &quot;./chunk-7L3SPMWF.js&quot; from &quot;node_modules/.vite/antd.js?v=7bec0e27&quot;. Does the file exist?\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',19),Tn=(0,p.Uk)("可能是因为一些依赖包输出的格式 vite 还不支持，可以看看这个 "),In={href:"https://github.com/vitejs/vite/issues/3308",target:"_blank",rel:"noopener noreferrer"},On=(0,p.Uk)("issue"),Fn=(0,p.Uk)("。"),Hn=(0,p.uE)('<p>这个错误只在开发服务器运行处理过程中存在，待页面正常展示后就不出现了，忽略这个错误之后，目前看也没产生什么影响。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>总体来说，vite 已经基本具备了生产使用的条件。如果是常规的应用开发，vite 的配置非常简单，可以说是开箱即用。如果需要添加额外的配置也非常方便。</p><p>目前比较大的问题是周边生态还不是特别成熟，很多已经成熟的包对于 vite（ES Modules）的支持比较弱。同时，如果团队内基建氛围比较浓厚的话，自己开发的工具包也要考虑这方面的问题。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',5),Rn={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[e,(0,p.Wm)("a",t,[l,(0,p.Wm)(a)]),o]),c,(0,p.Wm)("p",null,[r,(0,p.Wm)("a",u,[i,(0,p.Wm)(a)]),k]),m,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[b,d,g,v,h,f,y,(0,p.Wm)("a",x,[_,(0,p.Wm)(a)]),w])]),W,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[q,(0,p.Wm)("a",U,[j,(0,p.Wm)(a)]),E,C,A]),M]),(0,p.Wm)("p",null,[P,(0,p.Wm)("a",S,[D,(0,p.Wm)(a)]),N,(0,p.Wm)("a",T,[I,(0,p.Wm)(a)]),O,F,H]),R,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[$,(0,p.Wm)("a",L,[J,(0,p.Wm)(a)]),z]),B]),G,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[K,(0,p.Wm)("a",Y,[V,(0,p.Wm)(a)]),Z])]),Q,X,(0,p.Wm)("p",null,[nn,(0,p.Wm)("a",sn,[an,(0,p.Wm)(a)]),pn]),en,(0,p.Wm)("p",null,[tn,(0,p.Wm)("a",ln,[on,(0,p.Wm)(a)]),cn]),rn,(0,p.Wm)("p",null,[un,(0,p.Wm)("a",kn,[mn,(0,p.Wm)(a)]),bn]),dn,(0,p.Wm)("p",null,[gn,(0,p.Wm)("a",vn,[hn,(0,p.Wm)(a)]),fn]),(0,p.Wm)("p",null,[yn,xn,_n,(0,p.Wm)("a",wn,[Wn,(0,p.Wm)(a)]),qn]),Un,(0,p.Wm)("p",null,[jn,En,Cn,An,Mn,(0,p.Wm)("a",Pn,[Sn,(0,p.Wm)(a)]),Dn]),Nn,(0,p.Wm)("p",null,[Tn,(0,p.Wm)("a",In,[On,(0,p.Wm)(a)]),Fn]),Hn],64)}}}}]);