"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8822],{7335:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-106129de",path:"/courses/webpack/env.html",title:"环境变量",lang:"zh-CN",frontmatter:{title:"环境变量",description:"介绍 Webpack 中的环境变量",keywords:["Webpack"],date:"2021-01-21T00:00:00.000Z",key:19},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"DefinePlugin 的基础用法",slug:"defineplugin-的基础用法",children:[]},{level:2,title:"设置 process .env.NODE_ENV",slug:"设置-process-env-node-env",children:[]},{level:2,title:"根据环境变量加载不同的模块",slug:"根据环境变量加载不同的模块",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/env.md"}},6289:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var e=a(6252);const p=(0,e.uE)('<p>有些时候我们希望某些代码只在特定环境中能够执行。前面讲到，代码压缩工具会将死代码（<code>if(false)</code>）删除，因此，我们可以基于这个特性，通过 <code>DefinePlugin</code> 定义一些环境变量，来将类似</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if (process.env.NODE_ENV === &quot;development&quot;) {\n  console.log(&quot;Hello during development&quot;);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样的代码转换成 <code>if(true)</code> 或者 <code>if(false)</code> 的形式。</p><p>从 Webpack 4 开始，<code>process.env.NODE_ENV</code> 默认根据 <code>mode</code> 参数设置，但是仅限于 Webpack 内部。如果想要将 <code>process.env.NODE_ENV</code> 传给给其他工具，则需要在 Webpack 外或者在 Webpack 配置文件中定义。</p><blockquote><p>除了使用 <code>process.env.NODE_ENV</code>, 我们还可以通过 <code>webpack.EnvironmentPlugin([&quot;NODE_ENV&quot;])</code> 读取环境变量，底层基于 <code>DefinePlugin</code>。</p></blockquote>',5),t={href:"https://www.npmjs.com/package/dotenv-webpack",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("dotenv-webpack"),c=(0,e.Uk)(" 从一个 "),l=(0,e.Wm)("code",null,".env",-1),i=(0,e.Uk)(" 文件中读取配置，然后内部使用 "),u=(0,e.Wm)("code",null,"DefinePlugin",-1),r=(0,e.Uk)(" 来定义环境变量。"),k=(0,e.uE)('<h2 id="defineplugin-的基础用法" tabindex="-1"><a class="header-anchor" href="#defineplugin-的基础用法" aria-hidden="true">#</a> <code>DefinePlugin</code> 的基础用法</h2><p>有下面这段代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>bar <span class="token operator">===</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Free</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果将 <code>bar</code> 替换成字符串 <code>&quot;foobar&quot;</code>，则代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;foobar&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在进行代码压缩的时候，通过代码分析，上面的代码与下面这段等价：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>则最终生成代码为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Not free</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>基于条件的删除代码是 <code>DefinePlugin</code> 的核心能力。代码压缩器会分析代码，并将无用代码完全删除。</p>',10),d=(0,e.Uk)("在 Babel 中，"),b={href:"https://www.npmjs.com/package/babel-plugin-transform-define",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("babel-plugin-transform-define"),m=(0,e.Uk)(" 有着同样的功能。"),v=(0,e.uE)('<h2 id="设置-process-env-node-env" tabindex="-1"><a class="header-anchor" href="#设置-process-env-node-env" aria-hidden="true">#</a> 设置 <code>process .env.NODE_ENV</code></h2><p>因为 Webpack 是直接替换变量文本，因此在定义环境变量值的时候，我们需要 <code>JSON.stringify</code> 一下。此时，环境变量的值为 <code>&quot;demo&quot;</code>，然后 Webpack 会逐个替换找到的文本。</p><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">setFreeVariable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  env<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">setFreeVariable</span><span class="token punctuation">(</span><span class="token string">&#39;HELLO&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello from config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在应用代码中：</p><p><strong>src/component.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token comment">// export default (text = &quot;Hello world&quot;) =&gt; {</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">text <span class="token operator">=</span> <span class="token constant">HELLO</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时运行代码，可以看到按钮的文案发生了变化。</p><h2 id="根据环境变量加载不同的模块" tabindex="-1"><a class="header-anchor" href="#根据环境变量加载不同的模块" aria-hidden="true">#</a> 根据环境变量加载不同的模块</h2><p>我们可以借助于 <code>DefinePlugin</code> 来有条件的加载某些模块。比如有如下代码：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.\n└── store\n    ├── index.js\n    ├── store.dev.js\n    └── store.prod.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 <code>index.js</code> 中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./store.prod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./store.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时，我们通过 <code>DefinePlugin</code> 定义 <code>NODE_ENV</code> 来加载不同的模块。值得注意的是，这里只能使用 CommonJS 模块语法，因为 ES2015 不支持动态导入模块。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webpack 可以通过 <code>DefinePlugin</code> 和 <code>EnvironmentPlugin</code> 来定义环境变量。<code>EnvironmentPlugin</code> 同时还会将系统环境变量也添加进来。</p><p><code>DefinePlugin</code> 会基于 Webpack 的分析进行自由变量替换。在 Babel 中也有类似的功能。</p><p>一些代码压缩工具会将死代码删除，因此我们可以借助于 <code>DefinePlugin</code> 来生成死代码，从而将这些代码从构建输出结果中删除。</p><p><code>DefinePlugin</code> 还可以被应用在模块级别，通过一个包装函数，我们可以有条件的决定使用哪个模块。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',22),f={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",t,[o,(0,e.Wm)(a)]),c,l,i,u,r])]),k,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[d,(0,e.Wm)("a",b,[g,(0,e.Wm)(a)]),m])]),v],64)}}}}]);