"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[3626],{2069:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2cb53d93",path:"/courses/webpack/load-image.html",title:"加载图片",lang:"zh-CN",frontmatter:{title:"加载图片",description:"介绍 Webpack 中如何处理图片",keywords:["Webpack"],date:"2021-01-12T00:00:00.000Z",key:10},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"把图片添加到项目中",slug:"把图片添加到项目中",children:[]},{level:2,title:"使用 srcset",slug:"使用-srcset",children:[]},{level:2,title:"优化图片",slug:"优化图片",children:[]},{level:2,title:"加载 SVG",slug:"加载-svg",children:[]},{level:2,title:"动态加载图片",slug:"动态加载图片",children:[]},{level:2,title:"加载雪碧图",slug:"加载雪碧图",children:[]},{level:2,title:"使用图片占位符",slug:"使用图片占位符",children:[]},{level:2,title:"代码中如何使用图片",slug:"代码中如何使用图片",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/load-image.md"}},3573:(n,s,a)=>{a.r(s),a.d(s,{default:()=>dn});var e=a(6252);const p=(0,e.uE)('<p>Webpack 可以帮助我们处理项目中的图片。在之前的版本中，我们需要通过 <code>url-loader</code> 或者 <code>file-loader</code> 来处理图片资源，从 Webpack 5 开始，Webpack 内置了这些能力，我们只需要指定特定的选项就可以了。</p><ul><li><code>type: &quot;asset/inline&quot;</code> 将图片资源转成 base64 编码的形式保存在输出的代码中。这么做减少了页面请求数量，但是会增加构建输出的大小。该能力原来是 <code>url-loader</code> 提供。</li><li><code>type: &quot;asset/resource&quot;</code> 与 <code>file-loader</code> 能力相同，输出图片到单独的文件中。</li><li><code>type: &quot;asset/source&quot;</code> 与 <code>raw-loader</code> 能力相同，返回模块的原始内容。</li><li><code>type: &quot;asset&quot;</code> 是 <code>type: &quot;asset/inline&quot;</code> 和 <code>type: &quot;asset/source&quot;</code> 的混合体，取决于资源的大小，与 <code>file-loader</code> 的 <code>limit</code> 功能相同。</li></ul><p><code>output.assetModuleFilename</code> 用来设置输出资源文件的名称，<code>[hash][ext][query]</code> 是三个占位符可选项，同时支持设置路径。</p><h2 id="把图片添加到项目中" tabindex="-1"><a class="header-anchor" href="#把图片添加到项目中" aria-hidden="true">#</a> 把图片添加到项目中</h2><p>上面提到了各种处理图片的方式，下面是具体配置：</p><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">loadImages</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> limit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>\n        parser<span class="token operator">:</span> <span class="token punctuation">{</span> dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span> maxSize<span class="token operator">:</span> limit <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">loadImages</span><span class="token punctuation">(</span><span class="token punctuation">{</span> limit<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>测试一下我们配置，下载一张图片，然后添加到项目中。</p><p><strong>src/main.css</strong></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> cornsilk<span class="token punctuation">;</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;./logo.png&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>\n  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>构建结果会根据 <code>limit</code> 的不同而不同。如果图片大小小于 <code>limit</code>，则图片会被内联在构建输出的代码里，否则会被以单独的文件形式输出。</p><h2 id="使用-srcset" tabindex="-1"><a class="header-anchor" href="#使用-srcset" aria-hidden="true">#</a> 使用 <code>srcset</code></h2>',14),t=(0,e.Uk)("现在浏览器支持给图片添加 "),o=(0,e.Wm)("code",null,"srcset",-1),c=(0,e.Uk)(" 属性，来根据不同条件使用不同的图片已达到最好的显示效果。可以通过 "),l={href:"https://www.npmjs.com/package/resize-image-loader",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("resize-image-loader"),i=(0,e.Uk)(", "),u={href:"https://www.npmjs.com/package/html-loader-srcset",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("html-loader-srcset"),d=(0,e.Uk)(" 和 "),m={href:"https://www.npmjs.com/package/responsive-loader",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("responsive-loader"),b=(0,e.Uk)(" 这几个包来实现这个功能。"),h=(0,e.Wm)("h2",{id:"优化图片",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#优化图片","aria-hidden":"true"},"#"),(0,e.Uk)(" 优化图片")],-1),v=(0,e.Uk)("压缩图片可以有效减少生产环境的带宽占用，提升网站性能。如果你想压缩一下图片，则可以用这几个包，"),w={href:"https://www.npmjs.com/package/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("image-webpack-loader"),W=(0,e.Uk)(","),x={href:"https://www.npmjs.com/package/svgo-loader",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("svgo-loader"),j=(0,e.Uk)("(只适用于 svg)，和 "),U={href:"https://www.npmjs.com/package/imagemin-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("imagemin-webpack-plugin"),_=(0,e.Uk)(". 注意，这些 loader 需要确保在最前面运行。"),S=(0,e.uE)('<h2 id="加载-svg" tabindex="-1"><a class="header-anchor" href="#加载-svg" aria-hidden="true">#</a> 加载 SVG</h2><p>Webpack 支持多种加载 svg 的方法，最简单的方法就是通过 <code>type</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后直接在样式中引用：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.icon</span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;../assets/icon.svg&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如下几个 loader 也可以实现加载 svg。</p>',6),C={href:"https://www.npmjs.com/package/svg-inline-loader",target:"_blank",rel:"noopener noreferrer"},$=(0,e.Uk)("svg-inline-loader"),z=(0,e.Uk)(" 这个 loader 会删除 svg 中无用的标签。"),E={href:"https://www.npmjs.com/package/svg-sprite-loader",target:"_blank",rel:"noopener noreferrer"},P=(0,e.Uk)("svg-sprite-loader"),L=(0,e.Uk)(" 这个 loader 可以将多个 svg 合并到一个雪碧图中。这个 loader 同时也支持 .jpg 和 .png 图片。"),R={href:"https://www.npmjs.com/package/svg-url-loader",target:"_blank",rel:"noopener noreferrer"},F=(0,e.Uk)("svg-url-loader"),G=(0,e.Uk)(" 将 svg 图片以 UTF-8 编码的 data-url 形式输出，比 base64 编码性能更好。"),I={href:"https://www.npmjs.com/package/@svgr/webpack",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("@svgr/webpack"),V=(0,e.Uk)(" 将 svg 图片以 React 组件的形式输出。"),H=(0,e.Wm)("h2",{id:"动态加载图片",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#动态加载图片","aria-hidden":"true"},"#"),(0,e.Uk)(" 动态加载图片")],-1),M=(0,e.Wm)("p",null,"Webpack 还支持动态加载图片，原理与代码按需加载的原理相同，后面会介绍。",-1),N=(0,e.Wm)("h2",{id:"加载雪碧图",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#加载雪碧图","aria-hidden":"true"},"#"),(0,e.Uk)(" 加载雪碧图")],-1),O=(0,e.Wm)("p",null,"雪碧图可以帮助我们将多个图片合并到一个图片中，减少网页请求数量。",-1),Y={href:"https://www.npmjs.com/package/webpack-spritesmith",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("webpack-spritesmith"),A=(0,e.Uk)(" 这个插件可以将多个图片合成为一个雪碧图，同时输出 Sass/Less/Stylus 的 mixins。我们需要在配置中添加 "),B=(0,e.Wm)("code",null,"SpritesmithPlugin",-1),D=(0,e.Uk)(" 插件，指向要组合额图片，同时制定一个输出的 mixins 名称，然后，代码中就可以使用雪碧图了。"),J=(0,e.uE)('<div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;~sprite.sass&quot;</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.close-button</span> <span class="token punctuation">{</span>\n  <span class="token function">sprite</span><span class="token punctuation">(</span>$close<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.open-button</span> <span class="token punctuation">{</span>\n  <span class="token function">sprite</span><span class="token punctuation">(</span>$open<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="使用图片占位符" tabindex="-1"><a class="header-anchor" href="#使用图片占位符" aria-hidden="true">#</a> 使用图片占位符</h2>',2),K={href:"https://www.npmjs.com/package/image-trace-loader",target:"_blank",rel:"noopener noreferrer"},Q=(0,e.Uk)("image-trace-loader"),X=(0,e.Uk)(" 这个包加载图片，同时以 "),nn=(0,e.Wm)("code",null,"image/svg+xml",-1),sn=(0,e.Uk)(" 的 url 编码的形式输出图片。与 "),an=(0,e.Wm)("code",null,"file-loader",-1),en=(0,e.Uk)(" 和 "),pn=(0,e.Wm)("code",null,"url-loader",-1),tn=(0,e.Uk)(" 一起使用，可以实现在请求真实图片的时候，先试用图片占位符显示。"),on={href:"https://www.npmjs.com/package/lqip-loader",target:"_blank",rel:"noopener noreferrer"},cn=(0,e.Uk)("lqip-loader"),ln=(0,e.Uk)(" 这个包实现的功能类似，但是 "),rn=(0,e.Wm)("code",null,"lqip-loader",-1),un=(0,e.Uk)(" 会用一个模糊图片替代。"),kn=(0,e.uE)('<h2 id="代码中如何使用图片" tabindex="-1"><a class="header-anchor" href="#代码中如何使用图片" aria-hidden="true">#</a> 代码中如何使用图片</h2><p>除了在样式中通过 <code>@import</code> 和 <code>url()</code> 的方式引用图片，在代码我们还可以这么用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> src <span class="token keyword">from</span> <span class="token string">&#39;./avatar.png&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Profile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>src<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从 Webpack 5 开始，我们还可以这么用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Profile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;./avatar.png&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同时也可以动态加载图片</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> src <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./avatars/\\${avatar}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过 <code>type</code> 字段在调整不同资源的加载方式。在 Webpack 5 以前，通过 <code>file-loader</code> 和 <code>url-loader</code> 来实现。</p><p>通过根据图片的大小来决定图片输出的方式。</p><p>可以将多个小图片合并成一个雪碧图，来减少网络请求。</p><p>Webpack 还支持动态加载图片。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',13),dn={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,o,c,(0,e.Wm)("a",l,[r,(0,e.Wm)(a)]),i,(0,e.Wm)("a",u,[k,(0,e.Wm)(a)]),d,(0,e.Wm)("a",m,[g,(0,e.Wm)(a)]),b]),h,(0,e.Wm)("p",null,[v,(0,e.Wm)("a",w,[f,(0,e.Wm)(a)]),W,(0,e.Wm)("a",x,[y,(0,e.Wm)(a)]),j,(0,e.Wm)("a",U,[q,(0,e.Wm)(a)]),_]),S,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",C,[$,(0,e.Wm)(a)]),z]),(0,e.Wm)("li",null,[(0,e.Wm)("a",E,[P,(0,e.Wm)(a)]),L]),(0,e.Wm)("li",null,[(0,e.Wm)("a",R,[F,(0,e.Wm)(a)]),G]),(0,e.Wm)("li",null,[(0,e.Wm)("a",I,[T,(0,e.Wm)(a)]),V])]),H,M,N,O,(0,e.Wm)("p",null,[(0,e.Wm)("a",Y,[Z,(0,e.Wm)(a)]),A,B,D]),J,(0,e.Wm)("p",null,[(0,e.Wm)("a",K,[Q,(0,e.Wm)(a)]),X,nn,sn,an,en,pn,tn]),(0,e.Wm)("p",null,[(0,e.Wm)("a",on,[cn,(0,e.Wm)(a)]),ln,rn,un]),kn],64)}}}}]);