"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[8025],{9359:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-042365c5",path:"/courses/webpack/extend-loader.html",title:"通过 loader 来扩展 Webpack",lang:"zh-CN",frontmatter:{title:"通过 loader 来扩展 Webpack",description:"介绍 Webpack 中如何开发自定义 loader",keywords:["Webpack"],date:"2021-02-04T00:00:00.000Z",key:33},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"借助于 loader-runner 来单独运行一个 loader",slug:"借助于-loader-runner-来单独运行一个-loader",children:[]},{level:2,title:"实现一个异步 loader",slug:"实现一个异步-loader",children:[]},{level:2,title:"只返回输出结果",slug:"只返回输出结果",children:[]},{level:2,title:"写文件",slug:"写文件",children:[]},{level:2,title:"给 loader 传递参数",slug:"给-loader-传递参数",children:[]},{level:2,title:"在 Webpack 中使用自定义 loader",slug:"在-webpack-中使用自定义-loader",children:[]},{level:2,title:"loader 的执行过程",slug:"loader-的执行过程",children:[]},{level:2,title:"在 loader 中使用缓存",slug:"在-loader-中使用缓存",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/extend-loader.md"}},5624:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var p=a(6252);const t=(0,p.Wm)("p",null,"Loader 是 Webpack 中非常重要的组成部分，前面章节中已经介绍了很多 loader 的用法。本章对 loader 的细节做一些详细说明。",-1),e=(0,p.Wm)("h2",{id:"借助于-loader-runner-来单独运行一个-loader",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#借助于-loader-runner-来单独运行一个-loader","aria-hidden":"true"},"#"),(0,p.Uk)(" 借助于 loader-runner 来单独运行一个 loader")],-1),o=(0,p.Uk)("我们可以通过 "),c={href:"https://www.npmjs.com/package/loader-runner",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("loader-runner"),u=(0,p.Uk)(" 实现不借助于 Webpack 直接运行一个 loader。首先安装 loader-runner."),r=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> loader-runner --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们先写一个简单的 loader，这个 loader 将输入的文本重复一遍再输出。</p><p><strong>loaders/demo-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> input <span class="token operator">+</span> input<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们在项目根目录下准备一个 <code>demo.txt</code> 文件，里面写入一些文本。</p><p>现在，我们来运行 loader-runner。</p><p><strong>run-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> runLoaders <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-runner&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">&#39;./demo.txt&#39;</span><span class="token punctuation">,</span>\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./loaders/demo-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    readResource<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>此时，执行 <code>node ./run-loader.js</code>，可以看到输出内容为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  result: [ &#39;foobar\\nfoobar\\n&#39; ],\n  resourceBuffer: &lt;Buffer 66 6f 6f 62 61 72 0a&gt;,\n  cacheable: true,\n  fileDependencies: [ &#39;./demo.txt&#39; ],\n  contextDependencies: [],\n  missingDependencies: []\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以看到输出的文本内容和一些元数据信息。</p><blockquote><p>如果我们的 loader 是安装在项目本地，我们可以直接通过 loader 的名字来查找 loader，<code>loaders: [&quot;babel-loader&quot;]</code>。</p></blockquote><h2 id="实现一个异步-loader" tabindex="-1"><a class="header-anchor" href="#实现一个异步-loader" aria-hidden="true">#</a> 实现一个异步 loader</h2><p>上面的例子中，我们同步实现了一些功能，但是在某些情况下，我们需要进行一些异步处理，这时候，我们可以借助于 Webpack 提供的异步 API <code>this.async()</code>。函数返回一个回调函数，与 NodeJS 的回调函数签名一致。</p><p><strong>loaders/demo-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> input <span class="token operator">+</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>注意，我们使用的 <code>this</code>，因此无法使用箭头函数。</p></blockquote><p>此时，执行 <code>node ./run-loader.js</code>，我们看到同样的输出内容。</p><p>如果我们需要抛出错误，则可以这么实现。</p><p><strong>loaders/demo-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Demo error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时，运行结果将会是一个错误信息。</p><h2 id="只返回输出结果" tabindex="-1"><a class="header-anchor" href="#只返回输出结果" aria-hidden="true">#</a> 只返回输出结果</h2><p>我们可以在 loader 中只返回代码，比如</p><p><strong>loaders/demo-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这种做法在需要动态生成代码的时候将会非常有用。</p><h2 id="写文件" tabindex="-1"><a class="header-anchor" href="#写文件" aria-hidden="true">#</a> 写文件</h2><p>像 file-loader 之类的 loader 会输出文件。Webpack 提供了 <code>this.emitFile</code> API。因为 loader-runner 没有实现这个 API，因此我们需要 mock 掉。</p><p><strong>run-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">&#39;./demo.txt&#39;</span><span class="token punctuation">,</span>\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./loaders/demo-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    context<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">emitFile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    readResource<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>作为一个处理资源的 loader，核心任务就是输出资源内容和文件路径。</p>',32),i=(0,p.Uk)("我们可以借助于 "),k={href:"https://www.npmjs.com/package/loader-utils",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("loader-utils"),b=(0,p.Uk)(" 来对文件名做一些定制处理。"),m=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> loader-utils --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>loaders/demo-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">interpolateName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;[hash].[ext]&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    content<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">__webpack_public_path__ + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Webpack 还提供了 <code>this.emitWarning(&lt;string&gt;)</code> 和 <code>this.emitError(&lt;string&gt;)</code> 方法，我们同样需要在 loader-runder 中 mock。</p><blockquote><p>loader-utils 包含了许多实用方法。比如 <code>loaderUtils.parseQuery(this.resourceQuery)</code> 可以处理传递给 loader 的查询参数。</p></blockquote><p>下一步就是如何将文件名传递给下一个 loader。</p><h2 id="给-loader-传递参数" tabindex="-1"><a class="header-anchor" href="#给-loader-传递参数" aria-hidden="true">#</a> 给 loader 传递参数</h2><p>我们简单的调整一下：</p><p><strong>run-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> runLoaders <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-runner&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">&#39;./demo.txt&#39;</span><span class="token punctuation">,</span>\n\n    <span class="token comment">//    loaders: [path.resolve(__dirname, &quot;./loaders/demo-loader&quot;)],</span>\n\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./loaders/demo-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;demo.[ext]&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    context<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">emitFile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    readResource<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在 demo loader 中可以使用这个 <code>name</code> 参数。</p><p><strong>loaders/demo-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;loader-utils&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n <span class="token comment">// const url = loaderUtils.interpolateName(this, &quot;[hash].[ext]&quot;, {</span>\n <span class="token comment">//   content,</span>\n <span class="token comment">// });</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">interpolateName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>执行 <code>node ./run-loader.js</code>，可以看到输出如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  result: [ &#39;export default __webpack_public_path__ + &quot;demo.txt&quot;;&#39; ],\n  resourceBuffer: &lt;Buffer 66 6f 6f 62 61 72 0a&gt;,\n  cacheable: true,\n  fileDependencies: [ &#39;./demo.txt&#39; ],\n  contextDependencies: [],\n  missingDependencies: []\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',15),g=(0,p.Uk)("我们可以在使用参数之前对参数进行一些校验，这是可以使用 "),h={href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("schema-utils"),v=(0,p.Uk)("。"),y=(0,p.uE)('<h2 id="在-webpack-中使用自定义-loader" tabindex="-1"><a class="header-anchor" href="#在-webpack-中使用自定义-loader" aria-hidden="true">#</a> 在 Webpack 中使用自定义 loader</h2><p><strong>src/component.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;!../loaders/demo-loader?name=foo!./main.css&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面的使用方式非常繁琐，我们可以在 webpack 的配置文件中给 loader 定义一个别名，</p><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    resolveLoader<span class="token operator">:</span> <span class="token punctuation">{</span>\n      alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&quot;demo-loader&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n          __dirname<span class="token punctuation">,</span>\n          <span class="token string">&quot;loaders/demo-loader.js&quot;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这时候，我们可以这样引用这个 loader</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// import &quot;!../loaders/demo-loader?name=foo!./main.css&quot;;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;!demo-loader?name=foo!./main.css&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们也可以通过 Webpack 的<code>rule</code> 来引用 loader。</p><h2 id="loader-的执行过程" tabindex="-1"><a class="header-anchor" href="#loader-的执行过程" aria-hidden="true">#</a> loader 的执行过程</h2><p><img src="/courses/webpack/extend-loader-c.png" alt="23ffe365f20592287b5b0ef2ef282684.png"> webpack 中 loader 的执行过程。</p><p>像浏览器中的事件一样，Webpack 中 loader 的执行过程也分两个阶段。我们可以在 pitch 的过程中做一些定制处理逻辑。Webpack 会从左到右解析 loader，然后从右到左执行。</p><p>我们可以定义一个 pitch-loader 来定制 loader 的解析过程，我们设置可以终止 loader 的解析。</p><p><strong>loaders/pitch-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> input <span class="token operator">+</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">remaining<span class="token punctuation">,</span> preceding<span class="token punctuation">,</span> input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Remaining: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>remaining<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, preceding: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>preceding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\nInput: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token string">&#39;pitched&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>每个 loader 都可以提供一个 <code>pitch</code> 函数给 Webpack 调用，在 <code>pitch</code> 函数里做一些定制处理。</p></blockquote><p>修改 run-loader，如下</p><p><strong>run-loader.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">runLoaders</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    resource<span class="token operator">:</span> <span class="token string">&quot;./demo.txt&quot;</span><span class="token punctuation">,</span>\n    loaders<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>\n      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./loaders/pitch-loader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行 <code>node ./run-loader.js</code> 可以看到输出的一些定制处理信息。</p><h2 id="在-loader-中使用缓存" tabindex="-1"><a class="header-anchor" href="#在-loader-中使用缓存" aria-hidden="true">#</a> 在 loader 中使用缓存</h2><p>默认情况下 Webpack 都会开启 loader 的缓存，除非我们通过 <code>this.cacheable(false)</code> 来禁用。我们可以通过下面的代码来了解 loader 的缓存是如何工作的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Calls only once for given resourcePath</span>\n  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> item <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载到缓存中</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> item<span class="token punctuation">;</span> <span class="token comment">// 命中缓存</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 未命中缓存</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>pitch loader 可以被用来添加一些额外的元数据信息。本例中，在 pitch 阶段，构建缓存，然后在执行阶段使用缓存。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>loader-runner 可以帮助我们理解 loader 是如何工作的。</p><p>在 Webpack 中，loader 既可以是同步的，也可以是异步的。Webpack 提供了 <code>this.async()</code> 来实现异步 loader。</p><p>我们可以通过 loader 实现动态生成代码。</p><p>可以使用 loader-utils 来处理参数，同时使用 schema-utils 来对参数进行校验。</p><p>在本地开发的时候，我们可以借助于 <code>resolveLoader.alias</code> 的形式避免不必要的路径引用。</p><p>loader 的 pitch 阶段可以方便我们添加一些元数据和做 loader 的解决做一些定制化操作。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',32),w={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,e,(0,p.Wm)("p",null,[o,(0,p.Wm)("a",c,[l,(0,p.Wm)(a)]),u]),r,(0,p.Wm)("p",null,[i,(0,p.Wm)("a",k,[d,(0,p.Wm)(a)]),b]),m,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[g,(0,p.Wm)("a",h,[f,(0,p.Wm)(a)]),v])]),y],64)}}}}]);