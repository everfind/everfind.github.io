"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[7266],{5043:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3f63723d",path:"/code-reading/hotkey.html",title:"实现一个快捷键响应系统",lang:"zh-CN",frontmatter:{title:"实现一个快捷键响应系统",date:"2021-09-28T00:00:00.000Z",description:"通过 @github/hotkey 来看如何实现一个快捷键响应系统",keywords:["github/hotkey","快捷键"]},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"功能描述",slug:"功能描述",children:[]},{level:2,title:"如何实现",slug:"如何实现",children:[{level:3,title:"注册快捷键",slug:"注册快捷键",children:[]},{level:3,title:"响应键盘输入事件",slug:"响应键盘输入事件",children:[]}]}],filePathRelative:"code-reading/hotkey.md"}},5665:(n,s,a)=>{a.r(s),a.d(s,{default:()=>R});var p=a(6252);const t=(0,p.Uk)("在 GitHub 的页面上有很多快捷键可以使用，比如键入 "),e=(0,p.Wm)("code",null,"g",-1),o=(0,p.Uk)(" + "),c=(0,p.Wm)("code",null,"c",-1),l=(0,p.Uk)(" 键选中 Code 标签页，键入 "),u=(0,p.Wm)("code",null,"g",-1),r=(0,p.Uk)(" + "),i=(0,p.Wm)("code",null,"i",-1),k=(0,p.Uk)(" 选中 Issues 标签页。这里是 "),d={href:"https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("GitHub 支持的快捷键列表"),m=(0,p.Uk)("。那么，这么丰富的快捷键，是如何来实现的呢？我们今天就通过 GitHub 官方的 "),g={href:"https://www.npmjs.com/package/@github/hotkey",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("@github/hotkey"),h=(0,p.Uk)(" 来一窥究竟。"),f=(0,p.uE)('<h2 id="功能描述" tabindex="-1"><a class="header-anchor" href="#功能描述" aria-hidden="true">#</a> 功能描述</h2><p>在需要支持快捷键的元素上，通过 <code>data-hotkey</code> 属性添加快捷键序列，然后通过 <code>@github/hotkey</code> 暴露的 <code>install</code> 方法使得快捷键生效。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/page/2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>j<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/help<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Control+h<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Help<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/rails/rails<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>g c<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/search<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-hotkey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>s,/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>install<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@github/hotkey&#39;</span>\n\n<span class="token comment">// Install all the hotkeys on the page</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-hotkey]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">install</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>添加快捷键的规则是：</p><ul><li>如果一个元素上支持多个快捷键，则不同的快捷键之间通过 <code>,</code> 分割。</li><li>组合键通过 <code>+</code> 连接，比如 <code>Control + j</code>。</li><li>如果一个快捷键序列中有多个按键，则通过空格<code></code>连接，比如 <code>g c</code>。</li></ul>',6),w=(0,p.Uk)("我们在这里可以查到"),v={href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("键盘上每个功能按键对应事件键值名称"),T=(0,p.Uk)("，方便设置快捷键。"),L=(0,p.uE)('<h2 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现" aria-hidden="true">#</a> 如何实现</h2><p>我们先看 <code>install</code> 函数的实现。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>element<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> hotkey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 响应键盘输入事件</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>hotkeyRadixTrie<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> keyDownHandler<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 注册快捷键</span>\n  <span class="token keyword">const</span> hotkeys <span class="token operator">=</span> <span class="token function">expandHotkeyToEdges</span><span class="token punctuation">(</span>hotkey <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-hotkey&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> leaves <span class="token operator">=</span> hotkeys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>h <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>hotkeyRadixTrie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token keyword">as</span> Leaf<span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  elementsLeaves<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> leaves<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 <code>install</code> 函数中有两部分功能，第一部分是注册快捷键，第二部分是响应键盘输入事件并触发快捷键动作。</p><h3 id="注册快捷键" tabindex="-1"><a class="header-anchor" href="#注册快捷键" aria-hidden="true">#</a> 注册快捷键</h3><p>因为代码较短，我们逐行说明。</p><p>首先，通过 <code>expandHotkeyToEdges</code> 函数解析元素的 <code>data-hotkey</code> 属性，获得设置的快捷键列表。快捷键的设置规则在前面功能描述中已经说明。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">expandHotkeyToEdges</span><span class="token punctuation">(</span>hotkey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> hotkey<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>edge <span class="token operator">=&gt;</span> edge<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>之后通过这行代码实现了快捷键注册。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> leaves <span class="token operator">=</span> hotkeys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>h <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>hotkeyRadixTrie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token keyword">as</span> Leaf<span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后一行实则是一个缓存，方便在 <code>uninstall</code> 函数中删除已经添加的快捷键，不赘述了。</p><p>因此，整个注册过程核心就是 <code>hotkeyRadixTrie</code>，<code>hotkeyRadixTrie</code> 是一棵前缀树，在系统启动时就已经初始化。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> hotkeyRadixTrie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RadixTrie<span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>所谓前缀树，就是 N 叉树的一种特殊形式。通常来说，一个前缀树是用来存储字符串的。前缀树的每一个节点代表一个字符串（前缀）。每一个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的原始字符串，以及通往该子节点路径上所有的字符组成的。 <img src="/code-reading/hotkey/trie-tree-c.png" alt="前缀树"></p></blockquote><p>在 <code>@github/hotkey</code> 中，有两个类一起实现了前缀树的功能，<code>RadixTrie</code> 和 <code>Leaf</code>。</p><p><code>Leaf</code> 类，顾名思义就是树的叶子节点，其中保存着注册了快捷键的元素。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  parent<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n  children<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>trie<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> trie\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 如果叶子节点保存的所有元素都已经删除，则从前缀树中删除这个叶子节点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在叶子节点中添加一个元素</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>RadixTrie</code> 类实现了前缀树的主体功能，<code>RadixTrie</code> 的功能实现其实是树中的一个非叶子节点，它的子节点可以是一个 <code>Leaf</code> 节点，也可以是另一个 <code>RadixTrie</code> 节点。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  parent<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n  children<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>trie<span class="token operator">?</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> trie <span class="token operator">||</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">get</span><span class="token punctuation">(</span>edge<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>edge<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">insert</span><span class="token punctuation">(</span>edges<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> currentNode<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edges<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> edge <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token keyword">let</span> nextNode<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> currentNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span>\n      <span class="token comment">// If we&#39;re at the end of this set of edges:</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> edges<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果末端节点是 RadixTrie 节点，则删除这个节点，并用 Leaf 节点替代</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextNode <span class="token keyword">instanceof</span> <span class="token class-name">RadixTrie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          currentNode<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">)</span>\n          nextNode <span class="token operator">=</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          nextNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span>\n          currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">=</span> nextNode\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> nextNode\n        <span class="token comment">// We&#39;re not at the end of this set of edges:</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前快捷键序列还没有结束，如果节点是一个 Leaf 节点，则删除这个节点，并用 RadixTrie 节点替代</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextNode <span class="token keyword">instanceof</span> <span class="token class-name">Leaf</span><span class="token punctuation">)</span> nextNode <span class="token operator">=</span> <span class="token keyword">null</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          nextNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RadixTrie</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span>\n          currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">=</span> nextNode\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      currentNode <span class="token operator">=</span> nextNode\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> currentNode\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>我们可以看到，<code>RadixTrie</code> 的 <code>insert</code> 方法会根据前面 <code>expandHotkeyToEdges</code> 方法获取到的快捷键列表，在当前 <code>RadixTrie</code> 节点上动态的添加新的 <code>RadixTrie</code> 或者 <code>Leaf</code> 节点。在添加过程中，如果之前已经有相同序列的快捷键添加，则会覆盖之前的快捷键设置。</p><p><code>insert</code> 方法返回一个 <code>Leaf</code> 节点，在前面的获取快捷键列表然后批量调用 <code>insert</code> 方法之后，都会调用返回的 <code>Leaf</code> 节点的 <code>add</code> 方法将这个元素添加到叶子节点中去。</p><h3 id="响应键盘输入事件" tabindex="-1"><a class="header-anchor" href="#响应键盘输入事件" aria-hidden="true">#</a> 响应键盘输入事件</h3><p>有了前缀树以后，响应键盘输入事件就是根据输入的键值遍历前缀树了。功能在 <code>keyDownHandler</code> 函数中。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">keyDownHandler</span><span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFormField</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span>ownerDocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-hotkey-scope=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>resetTriePositionTimer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>resetTriePositionTimer<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  resetTriePositionTimer <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resetTriePosition<span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// If the user presses a hotkey that doesn&#39;t exist in the Trie,</span>\n  <span class="token comment">// they&#39;ve pressed a wrong key-combo and we should reset the flow</span>\n  <span class="token keyword">const</span> newTriePosition <span class="token operator">=</span> <span class="token punctuation">(</span>currentTriePosition <span class="token keyword">as</span> RadixTrie<span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">eventToHotkeyString</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newTriePosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resetTriePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  currentTriePosition <span class="token operator">=</span> newTriePosition\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>newTriePosition <span class="token keyword">instanceof</span> <span class="token class-name">Leaf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> shouldFire <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token keyword">const</span> elementToFire <span class="token operator">=</span> newTriePosition<span class="token punctuation">.</span>children<span class="token punctuation">[</span>newTriePosition<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> hotkeyScope <span class="token operator">=</span> elementToFire<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-hotkey-scope&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFormField</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>id <span class="token operator">!==</span> elementToFire<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-hotkey-scope&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        shouldFire <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hotkeyScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      shouldFire <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldFire<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fireDeterminedAction</span><span class="token punctuation">(</span>elementToFire<span class="token punctuation">)</span>\n      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">resetTriePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>这段代码可以分成三个部分来看。</p><p>第一部分是一些校验逻辑，比如接收到的事件已经被 <code>preventDefault</code> 了，或者触发事件的元素类型错误。对于表单元素，还有一些特殊的校验逻辑。</p><p>第二部分是恢复逻辑。因为用户输入是逐个按键输入的，因此 <code>keydown</code> 事件也是逐次触发的。因此，我们需要一个全局指针来遍历前缀树。这个指针一开始是指向根节点 <code>hotkeyRadixTrie</code> 的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> currentTriePosition<span class="token operator">:</span> RadixTrie<span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span> <span class="token operator">|</span> Leaf<span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span> <span class="token operator">=</span> hotkeyRadixTrie\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当用户停止输入之后，不管有没有命中快捷键，我们需要将这个指针回拨到根节点的位置。这个就是恢复逻辑的功能。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">resetTriePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  resetTriePositionTimer <span class="token operator">=</span> <span class="token keyword">null</span>\n  currentTriePosition <span class="token operator">=</span> hotkeyRadixTrie\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第三部分就是响应快捷键的核心逻辑。</p><p>首先会通过 <code>eventToHotkeyString</code> 函数将事件键值翻译为快捷键，是的键值与前缀树中保存的一致。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">hotkey</span><span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> elideShift <span class="token operator">=</span> event<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Key&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>shiftKey <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> event<span class="token punctuation">.</span>key\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>ctrlKey <span class="token operator">?</span> <span class="token string">&#39;Control+&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>altKey <span class="token operator">?</span> <span class="token string">&#39;Alt+&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>metaKey <span class="token operator">?</span> <span class="token string">&#39;Meta+&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n    event<span class="token punctuation">.</span>shiftKey <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>elideShift <span class="token operator">?</span> <span class="token string">&#39;Shift+&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>之后，在当前节点指针 <code>currentTriePosition</code> 根据新获取的键值获取下一个树节点。如果下一个节点为空，说明未命中快捷键，执行恢复逻辑并返回。</p><p>如果找到了下一个节点，则将当前节点指针 <code>currentTriePosition</code> 往下移一个节点。如果找到的这个新节点是一个 <code>Leaf</code> 节点，则获取这个叶子节点中保存的元素，并在这个元素上执行 <code>fireDeterminedAction</code> 动作。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fireDeterminedAction</span><span class="token punctuation">(</span>el<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFormField</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>fireDeterminedAction</code> 执行的动作就是，如果这个元素是一个表单元素，则让这个元素获取焦点，否则触发点击事件。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',38),R={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[t,e,o,c,l,u,r,i,k,(0,p.Wm)("a",d,[b,(0,p.Wm)(a)]),m,(0,p.Wm)("a",g,[y,(0,p.Wm)(a)]),h]),f,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[w,(0,p.Wm)("a",v,[x,(0,p.Wm)(a)]),T])]),L],64)}}}}]);