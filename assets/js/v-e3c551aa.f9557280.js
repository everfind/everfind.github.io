"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[1470],{2759:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-e3c551aa",path:"/courses/webpack/load-css.html",title:"加载样式文件",lang:"zh-CN",frontmatter:{title:"加载样式文件",description:"介绍 Webpack 如何处理样式文件",keywords:["Webpack"],date:"2021-01-07T00:00:00.000Z",key:5},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"加载 css 文件",slug:"加载-css-文件",children:[]},{level:2,title:"添加初始样式",slug:"添加初始样式",children:[]},{level:2,title:"PostCSS",slug:"postcss",children:[]},{level:2,title:"使用 CSS 预处理器",slug:"使用-css-预处理器",children:[]},{level:2,title:"深入理解 css-loader",slug:"深入理解-css-loader",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/load-css.md"}},2973:(s,a,n)=>{n.r(a),n.d(a,{default:()=>O});var e=n(6252);const p=(0,e.Wm)("p",null,[(0,e.Uk)("默认情况下，Webpack 不支持处理样式文件，需要借助于 "),(0,e.Wm)("code",null,"loader"),(0,e.Uk)(" 和 插件。")],-1),o=(0,e.Wm)("h2",{id:"加载-css-文件",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#加载-css-文件","aria-hidden":"true"},"#"),(0,e.Uk)(" 加载 css 文件")],-1),t=(0,e.Uk)("要加载 css 文件，我们需要 "),c={href:"https://www.npmjs.com/package/css-loader",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("css-loader"),r=(0,e.Uk)(" 和 "),i={href:"https://www.npmjs.com/package/style-loader",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("style-loader"),d=(0,e.Uk)("."),k=(0,e.uE)('<p>css-loader 会在所有匹配到的文件中查找 <code>@import</code> 和 <code>url()</code> 语句，并将它们当成普通的 import 语句来处理。如果 <code>@import</code> 语句指向了一个外部资源，比如一个 url 链接，那么 css-loader 会跳过。</p><p>style-loader 会将样式注入到 html 上的 style 元素中。可以通过配置来修改将样式注入 style 元素的方式。同时 style-loader 也实现了 HMR 接口，提供了更好的开发体验。</p><p>将样式内联到页面中通常不是一个好的实践方式，我们需要使用 <code>MiniCssExtractPlugin</code> 这个插件来讲 css 导出到文件中。这个插件后面章节会做说明。</p><p>安装依赖包：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> css-loader style-loader --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在 <strong>webpack.parts.js</strong> 中添加</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">loadCSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的配置说明如果文件是 <code>.css</code> 结尾，则需要使用这两个 loader。loader 返回处理后的文件内容，loader 之间可以像 Unix 的管道一样连接起来，从右向左一次处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">styleLoader</span><span class="token punctuation">(</span><span class="token function">cssLoader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将配置组合到 <strong>webpack.config.js</strong> 中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">loadCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="添加初始样式" tabindex="-1"><a class="header-anchor" href="#添加初始样式" aria-hidden="true">#</a> 添加初始样式</h2><p><strong>src/main.css</strong></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> cornsilk<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在代码中引用这段样式， <strong>src/index.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./main.css&quot;</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动开发服务器 <code>npm run start</code>，可以看到浏览器中的背景色发生了变化。这时，修改背景色为 <code>background: lime</code>, 浏览器中的背景色会发生相应变化。</p><p><img src="/courses/webpack/helloworld-color-c.png" alt="helloworld"></p><h2 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss" aria-hidden="true">#</a> PostCSS</h2>',19),m={href:"http://postcss.org/",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("PostCSS"),b=(0,e.Uk)(" 允许你通过其提供的各种插件对 CSS 做各种转换处理。PostCSS 类似于处理样式的 Babel。后面章节会做说明。"),h=(0,e.Wm)("h2",{id:"使用-css-预处理器",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#使用-css-预处理器","aria-hidden":"true"},"#"),(0,e.Uk)(" 使用 CSS 预处理器")],-1),v=(0,e.Wm)("p",null,"Webpack 支持多种主流的 CSS 预处理器。",-1),x=(0,e.Uk)("可以通过 "),y={href:"https://www.npmjs.com/package/less-loader",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("less-loader"),w=(0,e.Uk)(" 使用 less 预处理器。"),W=(0,e.Uk)("可以通过 "),j={href:"https://www.npmjs.com/package/sass-loader",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("sass-loader"),S=(0,e.Uk)(" 或者 "),C={href:"https://www.npmjs.com/package/fast-sass-loader",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("fast-sass-loader"),q=(0,e.Uk)(" 来使用 sass 预处理器。"),L=(0,e.Uk)("可以通过 "),P={href:"https://www.npmjs.com/package/stylus-loader",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("stylus-loader"),H=(0,e.Uk)(" 来使用 stylus 预处理器。"),M=(0,e.Wm)("h2",{id:"深入理解-css-loader",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#深入理解-css-loader","aria-hidden":"true"},"#"),(0,e.Uk)(" 深入理解 css-loader")],-1),R=(0,e.Wm)("p",null,[(0,e.Uk)("要更好的使用 css-loader，首先需要明白 css-loader 是如何查找文件的。css-loader 默认只处理相对路径导入的模块，绝对路径导入("),(0,e.Wm)("code",null,'url("https://mydomain.com/static/demo.png")'),(0,e.Uk)(")或者根路径导入（"),(0,e.Wm)("code",null,'url("/static/img/demo.png")'),(0,e.Uk)("）的模块不会被处理。")],-1),$=(0,e.Uk)("如果项目中需要使用到这些外部模块，需要将这些模块拷贝到项目中来，可以借助 "),z={href:"https://www.npmjs.com/package/copy-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Uk)("webpack-copy-plugin"),J=(0,e.Uk)(" 完成。"),N=(0,e.uE)('<p>如果你需要自定义 css-loader 如何处理要导入的模块，你需要设置 <code>importLoaders</code> 这个选项，来告诉 css-loader 在处理待导入模块之前，该模块必须要被多少个其他模块处理过。</p><p>举个例子加以说明。比如需要在 css 文件导入一个 sass 文件，<code>@import &quot;./variables.sass&quot;;</code>， 那么为了能处理 sass 文件，loader 的配置需要配置为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span> importLoaders<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>此时，<code>importLoaders</code> 为 1，告诉 css-loader 在处理导入的模块时，需要确保被导入的模块需要被 sass-loader 处理过。如果添加更多的 loader，比如再加一个 postcss-loader， 则 <code>importLoaders</code> 需要改为 2.</p><blockquote><p><code>importLoaders</code> 选项只在 css-loader 无法处理待导入的模块的时候才会被使用。比如上面的例子 css 文件中导入了一个 sass 文件，要处理 sass 文件需要借助于 sass-loader，因此需要确保在 css-loader 处理模块之前，sass-loader 先处理了该模块。而如果在 sass 文件中导入 sass 文件，则模块本身已经被 sass-loader 处理过，就不需要 css-loader 处理 sass 文件了。</p></blockquote><p>如果需要导入 <code>node_modules</code> 目录下的样式文件，则需要加一个 <code>~</code> 前缀。比如导入 bootstrap 的样式文件 <code>@import &quot;~bootstrap/less/bootstrap&quot;;</code>。<code>~</code> 告诉 webpack 该模块不是一个相对路径引入的模块，需要在 node_modules 目录下查找。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webapck 可以处理各种格式的样式文件，默认情况下，所有样式都会编译成 JavaScript bundle。</p><p>css-loader 处理 <code>@import</code> 和 <code>url()</code> 语句，style-loader 负责将样式编译成 js，同时实现了 HMR 接口。</p><p>Webapck 支持多种预处理器，可以将各种格式的样式转换成 CSS，常见的预处理器有 Sass，Less 和 Stylus。</p><p>PostCSS 借助其自身的插件系统，提供了多种处理 CSS 的能力，比如自动添加前缀等。</p><p>默认情况下 css-loader 不会处理绝对路径导入和根目录导入的模块。css-loader 通过 <code>importLoaders</code> 选项支持自定义模块导入处理能力。如果要导入一个 node_moduels 目录下的文件，需要使用 <code>~</code> 前缀。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',13),O={render:function(s,a){const n=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,o,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",c,[l,(0,e.Wm)(n)]),r,(0,e.Wm)("a",i,[u,(0,e.Wm)(n)]),d]),k,(0,e.Wm)("p",null,[(0,e.Wm)("a",m,[g,(0,e.Wm)(n)]),b]),h,v,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[x,(0,e.Wm)("a",y,[f,(0,e.Wm)(n)]),w]),(0,e.Wm)("li",null,[W,(0,e.Wm)("a",j,[U,(0,e.Wm)(n)]),S,(0,e.Wm)("a",C,[_,(0,e.Wm)(n)]),q]),(0,e.Wm)("li",null,[L,(0,e.Wm)("a",P,[E,(0,e.Wm)(n)]),H])]),M,R,(0,e.Wm)("p",null,[$,(0,e.Wm)("a",z,[B,(0,e.Wm)(n)]),J]),N],64)}}}}]);