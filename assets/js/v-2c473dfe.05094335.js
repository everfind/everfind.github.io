"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[6378],{3397:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-2c473dfe",path:"/courses/webpack/clean-build.html",title:"清理构建目录",lang:"zh-CN",frontmatter:{title:"清理构建目录",description:"介绍 Webpack 中如何清理构建目录",keywords:["Webpack"],date:"2021-01-18T00:00:00.000Z",key:16},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"如何清理构建目录",slug:"如何清理构建目录",children:[]},{level:2,title:"给输出文件添加版本说明",slug:"给输出文件添加版本说明",children:[]},{level:2,title:"拷贝文件",slug:"拷贝文件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/clean-build.md"}},4976:(n,a,s)=>{s.r(a),s.d(a,{default:()=>C});var p=s(6252);const e=(0,p.uE)('<p>Webpack 每一次构建都会将结果输出到指定目录，如过不清理输出目录的话，目录下的文件会越来越多、越来越乱。因此，我们需要在每次构建之前，先清理构建目录。</p><h2 id="如何清理构建目录" tabindex="-1"><a class="header-anchor" href="#如何清理构建目录" aria-hidden="true">#</a> 如何清理构建目录</h2><p>通常又两种做法，一种是直接在 <code>npm scripts</code> 中通过 <code>rm -rf ./build &amp;&amp; webpack</code> 或者 <code>rimraf ./build &amp;&amp; webpack</code> 的方式来直接清理目录，另一种是通过 <code>clean-webpack-plugin</code> 插件来实现。</p>',3),t=(0,p.Uk)("安装 "),c={href:"https://www.npmjs.com/package/clean-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("clean-webpack-plugin"),l=(0,p.Uk)(" 插件"),i=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> clean-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加到配置中：</p><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">clean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> output<span class="token operator">:</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parts<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样配置一次，每次构建之前，Webpack 都会先清空构建输出目录。</p><h2 id="给输出文件添加版本说明" tabindex="-1"><a class="header-anchor" href="#给输出文件添加版本说明" aria-hidden="true">#</a> 给输出文件添加版本说明</h2>',8),u=(0,p.Uk)("给构建输出的文件添加当次构建的版本号可以极大的方便问题定位。"),r={href:"https://webpack.js.org/plugins/banner-plugin/",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("webpack.BannerPlugin"),d=(0,p.Uk)(" 可以实现这个功能，与 "),b={href:"https://www.npmjs.com/package/git-revision-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("git-revision-webpack-plugin"),m=(0,p.Uk)(" 插件结合使用的时候，我们可以在输出文件中添加注释。"),h=(0,p.uE)('<p>安装依赖包：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> git-revision-webpack-plugin --develop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.parts.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> GitRevisionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;git-revision-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">attachRevision</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      banner<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">GitRevisionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>parts<span class="token punctuation">.</span><span class="token function">attachRevision</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>执行 <code>npm run build</code>， 我们可以看到输出目录中，以 <code>.LICENSE.txt</code> 结尾的文件，文件开头都有类似于 <code>/*! 0b5bb05 */</code> 或 <code>/*! v1.7.0-9-g5f82fe8 */</code> 的注释。文件开头的注释可以定制，我们可以通过 <code>webpack.DefinePlugin</code> 来实现。</p><h2 id="拷贝文件" tabindex="-1"><a class="header-anchor" href="#拷贝文件" aria-hidden="true">#</a> 拷贝文件</h2>',8),v=(0,p.Uk)("我们可以通过 Webpack 将一些文件在不打包处理的情况下直接拷贝到输出目录中。在 Webpack 中可以使用 "),w={href:"https://www.npmjs.com/package/copy-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("copy-webpack-plugin"),y=(0,p.Uk)(" 这个插件。"),x=(0,p.Uk)("除了 Webpack 插件，也可以使用 "),j={href:"https://www.npmjs.com/package/cpy-cli",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("cpy-cli"),U=(0,p.Uk)(" 这个命令行工具。"),q=(0,p.uE)('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webpack 中的很多插件都是在完成一个独立的任务，此时 Webpack 更像是一个任务执行器。当然，我们也可以借助去其他工具完成这些任务。</p><p>通常可以在构建输出中添加当次构建的版本号，方便问题定位。</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',4),C={render:function(n,a){const s=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)("a",c,[o,(0,p.Wm)(s)]),l]),i,(0,p.Wm)("p",null,[u,(0,p.Wm)("a",r,[k,(0,p.Wm)(s)]),d,(0,p.Wm)("a",b,[g,(0,p.Wm)(s)]),m]),h,(0,p.Wm)("p",null,[v,(0,p.Wm)("a",w,[f,(0,p.Wm)(s)]),y]),(0,p.Wm)("p",null,[x,(0,p.Wm)("a",j,[W,(0,p.Wm)(s)]),U]),q],64)}}}}]);