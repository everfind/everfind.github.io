"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4415],{597:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-5dfbc298",path:"/courses/webpack/bundle-split.html",title:"Bundle Spliting",lang:"zh-CN",frontmatter:{title:"Bundle Spliting",description:"介绍 Webpack 中如何进行代码分割",keywords:["Webpack"],date:"2021-01-17T00:00:00.000Z",key:15},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"添加 vendor bundle",slug:"添加-vendor-bundle",children:[]},{level:2,title:"定制分割输出",slug:"定制分割输出",children:[]},{level:2,title:"分割、合并代码块",slug:"分割、合并代码块",children:[]},{level:2,title:"在入口处的 Bundle Spliting",slug:"在入口处的-bundle-spliting",children:[]},{level:2,title:"Webpack 中的代码块（Chunk）类型",slug:"webpack-中的代码块-chunk-类型",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"courses/webpack/bundle-split.md"}},1806:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<p>除了代码分割（Code Spliting）以外，Webpack 还提供了另一种优化代码加载的方式，那就是构建输出分割（Bundle Spliting）。我们通常见到的 Bundle Spliting 的例子是将所有的三方库代码都打包到一个叫 vendor 的 bundle 中。</p><p>通过 Bundle Spliting，我们可以实现当应用代码发生变化的时候，浏览器只加载应用代码，应用依赖的三方库代码依然使用缓存。三方库代码发生变化同理。</p><p>举个例子来说明，假如在使用 Bundle Spliting 之前，应用构建输出文件为 main.js(100 kb)。使用 Bundle Spliting 之后，应用构建输出为 app.js(10 kb), vender.js(90 kb)。这时候，当应用代码 app.js 发生变化以后，浏览器只需要加载 10 kb 代码就可以了。</p><blockquote><p>为了配合浏览器缓存，我们需要给文件都加上 hash 值，后面章节会详细讨论。</p></blockquote><p>Bundle Splting 通过 <code>optimization.splitChunks.cacheGroups</code> 来实现。</p><p>我们在 demo 项目中加入 React.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> react react-dom\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在项目中引入 React。</p><p><strong>src/index.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时执行 <code>npm run build</code>, 输出结果如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by path *.js 127 KiB\n    asset main.js 127 KiB [emitted] [minimized] (name: main) 2 related assets\n    asset 958.js 183 bytes [compared for emit] [minimized] 1 related asset\n  asset main.css 7.94 KiB [compared for emit] (name: main)\n  asset index.html 229 bytes [compared for emit]\n  Entrypoint main 135 KiB (179 KiB) = main.css 7.94 KiB main.js 127 KiB 1 auxiliary asset\n  runtime modules 6.71 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 13865 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>可以看到，main.js 有 127 kb。现在来优化一下。</p><h2 id="添加-vendor-bundle" tabindex="-1"><a class="header-anchor" href="#添加-vendor-bundle" aria-hidden="true">#</a> 添加 <code>vendor</code> bundle</h2><p>在 Webpack 4 之前，我们使用 <code>CommonsChunkPlugin</code> 来实现 Bundle Spliting。Webpack 4 以后，Webpack 默认支持了 Bundle Spliting，只需要添加一些配置即可。</p><p>我们将 node_modules 下的代码都打包到 vendor bundle 中去。</p><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token punctuation">{</span> optimization<span class="token operator">:</span> <span class="token punctuation">{</span> splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span> chunks<span class="token operator">:</span> <span class="token string">&#39;all&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时，再执行 <code>npm run build</code>, 观察下输出结果。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>⬡ webpack: Build Finished\n⬡ webpack: assets by status 128 KiB [emitted]\n    asset 935.js 125 KiB [emitted] [minimized] (id hint: vendors) 2 related assets\n    asset main.js 3.28 KiB [emitted] [minimized] (name: main) 1 related asset\n    asset index.html 259 bytes [emitted]\n  assets by status 8.12 KiB [compared for emit]\n    asset main.css 7.94 KiB [compared for emit] (name: main)\n    asset 958.js 183 bytes [compared for emit] [minimized] 1 related asset\n  Entrypoint main 136 KiB (181 KiB) = 935.js 125 KiB main.css 7.94 KiB main.js 3.28 KiB 2 auxiliary assets\n  runtime modules 7.81 KiB 10 modules\n  orphan modules 465 bytes [orphan] 2 modules\n  code generated modules 133 KiB (javascript) 4.18 MiB (css/mini-extract) [code generated]\n    modules by path ./node_modules/ 133 KiB\n      modules by path ./node_modules/react/ 6.48 KiB 2 modules\n      modules by path ./node_modules/react-dom/ 119 KiB 2 modules\n      modules by path ./node_modules/scheduler/ 4.91 KiB\n        ./node_modules/scheduler/index.js 198 bytes [built] [code generated]\n        ./node_modules/scheduler/cjs/scheduler.production.min.js 4.72 KiB [built] [code generated]\n      ./node_modules/object-assign/index.js 2.06 KiB [built] [code generated]\n    modules by path ./src/ 633 bytes (javascript) 4.18 MiB (css/mini-extract)\n      ./src/index.js + 2 modules 600 bytes [built] [code generated]\n      css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[3]!./src/main.css 4.18 MiB [code generated]\n      ./src/lazy.js 33 bytes [built] [code generated]\n  webpack 5.11.1 compiled successfully in 13200 ms\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>main.js 大小变成了 3.28 kb。此时，应用的 bundle 与下图类似。</p><p><img src="/courses/webpack/bundle-split-c.png" alt="Bundle Spliting"></p><h2 id="定制分割输出" tabindex="-1"><a class="header-anchor" href="#定制分割输出" aria-hidden="true">#</a> 定制分割输出</h2><p>上面的配置可以重写如下，我们针对 node_modules 下的文件，使用更加细粒度的控制。</p><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token operator">...</span><span class="token punctuation">{</span>\n    optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n      splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n        cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n          commons<span class="token operator">:</span> <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;vendor&#39;</span><span class="token punctuation">,</span>\n            chunks<span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p><code>initial</code> 对使用了 code spliting 的模块不生效，而 <code>all</code> 可以。</p></blockquote><p>从 Webpack 5 开始，我们可以基于资源类型做更多的自定义配置。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// css/mini-extra is injected by mini-css-extract-plugin</span>\n      minSize<span class="token operator">:</span> <span class="token punctuation">{</span> javascript<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token string">&#39;css/mini-extra&#39;</span><span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="分割、合并代码块" tabindex="-1"><a class="header-anchor" href="#分割、合并代码块" aria-hidden="true">#</a> 分割、合并代码块</h2><p>Webpack 通过如下两个插件来控制最终输出的代码。</p><ul><li><code>AggressiveSplittingPlugin</code> 可以分割出更多更小的代码块。这个插件非常适合 HTTP/2.</li><li><code>AggressiveMergingPlugin</code> 恰恰相反，会将小的代码块合并成大的代码块。</li></ul><p>下面是两个插件的配置样例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>AggressiveSplittingPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      minSize<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n      maxSize<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">AggressiveMergingPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      minSizeReduce<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      moveToParents<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>每一个插件都有一个思考平衡点，因为如果代码块分割的越多越小，我们缓存的效果越差，同时请求也越多。</p><p><code>webpack.optimize</code> 包含了 <code>LimitChunkCountPlugin</code> 和 <code>MinChunkSizePlugin</code>，提供了针对代码块大小的更进一步的控制。</p><h2 id="在入口处的-bundle-spliting" tabindex="-1"><a class="header-anchor" href="#在入口处的-bundle-spliting" aria-hidden="true">#</a> 在入口处的 Bundle Spliting</h2><p>从 Webpack 5 开始，我们可以在入口处（entry）使用 Bundle Spliting。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      dependOn<span class="token operator">:</span> <span class="token string">&#39;vendor&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    vendor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>使用了这个配置，我们可以去除 <code>optimization.splitChunks</code> 的配置了，输出效果一样。</p><blockquote><p>注意，在于 <code>webpack-plugin-serve</code> 一同使用的时候，我们需要在 <code>app.import</code> 中加入 <code>webpack-plugin-serve/client</code>。</p></blockquote><h2 id="webpack-中的代码块-chunk-类型" tabindex="-1"><a class="header-anchor" href="#webpack-中的代码块-chunk-类型" aria-hidden="true">#</a> Webpack 中的代码块（Chunk）类型</h2><p>在上面的例子中，我们使用了多种代码块类型。Webpack 中主要有三种代码块：</p><ul><li>Entry Chunk， 包含 Webpack 的运行时和需要加载的模块信息表。</li><li>Normal chunk，不包含 Webpack 运行时，相反，这些代码块通常通过一个包装函数（比如 JSONP）动态加载。</li><li>Initial chunk，是只在应用初始加载的时候加载的代码块，Initial chunk 是 Normal chunk.</li></ul><p>作为用户，我们不需要严格知道每种类型的确切含义，但是要知道 Entry chunk 和 Normal chunk 的区别。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们可以通过 <code>optimization.splitChunks.cacheGroups</code> 来定义分割形式。在生产构建中，Webpack 会默认使用。</p><p>vendor bundle 包含了所有来自于三方包的代码。</p><p>Webpack 的一些插件提供了更细粒度的 Bundle Spliting 控制。比如 <code>AggressiveSplittingPlugin</code> 和 <code>AggressiveMergingPlugin</code>。</p><p>Webpack 内部实现依赖了三种代码块类型：Entry chunk, Normal chunk 和 Initial chunk.</p><div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',51),p={render:function(n,s){return e}}}}]);