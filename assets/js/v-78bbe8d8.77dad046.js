"use strict";(self.webpackChunkeverfind_website=self.webpackChunkeverfind_website||[]).push([[4107],{2712:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-78bbe8d8",path:"/code-reading/react/install.html",title:"阅读源码之前的准备工作",lang:"zh-CN",frontmatter:{title:"阅读源码之前的准备工作",description:null,keywords:["React","源码阅读"],date:"2021-08-22T00:00:00.000Z",key:1},excerpt:'<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align: center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />关注微信公众号，获取最新推送~</p><p style="text-align: center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;" />加微信，深入交流~</p></div>',headers:[{level:2,title:"下载代码",slug:"下载代码",children:[]},{level:2,title:"安装依赖",slug:"安装依赖",children:[]},{level:2,title:"阅读工具",slug:"阅读工具",children:[]}],filePathRelative:"code-reading/react/install.md"}},8407:(e,n,a)=>{a.r(n),a.d(n,{default:()=>x});var s=a(6252);const l=(0,s.uE)('<p>阅读源码之前当然是先准备好阅读环境了。React 经过这么多年的发展，代码仓库已经非常庞大，安装依赖也有些麻烦，因此独立出一篇记录准备环境中遇到的问题，以及我们需要使用哪些工具。</p><h2 id="下载代码" tabindex="-1"><a class="header-anchor" href="#下载代码" aria-hidden="true">#</a> 下载代码</h2><p>React 源代码托管在 Github 上，通过如下命令可以将源代码下载到本地。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:facebook/react.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>鉴于目前的网络环境，访问 Github 不是很友好，我们可以稍稍优化下，减少代码下载时间。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:facebook/react.git --depth<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>由于我们要基于 v16.13.1 版本的代码，因此我们是全量下载代码。</p></blockquote><h2 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h2><p>下载完成之后，我们需要安装项目的依赖，在安装过程中，我们碰到了几个问题，记录如下。</p><p>首先在代码更目录执行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装依赖，在安装过程中，报了一个错误：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>error /Users/xxx/workspace/open-source/react/node_modules/gifsicle: Command failed.\nExit code: 1\nCommand: node lib/install.js\nArguments:\nDirectory: /Users/xxx/workspace/open-source/react/node_modules/gifsicle\nOutput:\n⚠ connect ECONNREFUSED 0.0.0.0:443\n  ⚠ gifsicle pre-build test failed\n  ℹ compiling from source\n  ✖ Error: Command failed: /bin/sh -c autoreconf -ivf\n/bin/sh: autoreconf: command not found\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>是因为 React 的依赖包中依赖了 autoconf 这个包，我们使用 Homebrew 来安装。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>brew <span class="token function">install</span> autoconf automake libtool\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>默认情况下，Homebrew 会先执行更新，这是一项非常耗时的操作，我们可以通过设置环境变量 <code>HOMEBREW_NO_AUTO_UPDATE=1</code> 来禁用更新。可以将这个环境变量写入 <code>~/.bashrc</code> 中，每次执行 Homebrew 都生效：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>export HOMEBREW_NO_AUTO_UPDATE=1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者在命令行使用，单次生效：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">HOMEBREW_NO_AUTO_UPDATE</span><span class="token operator">=</span><span class="token number">1</span> brew <span class="token function">install</span> autoconf automake libtool\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Homebrew 安装完成后，重新执行 <code>yarn</code> 命令，过了一段时间，提示 electron 安装超时。我们可以通过在 <code>~/.npmrc</code> 中添加如下配置（注意最后的 &#39;/&#39;）：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>electron_mirror=https://npm.taobao.org/mirrors/electron/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将 electron 的镜像源设置为淘宝的站点，来加速下载。</p><h2 id="阅读工具" tabindex="-1"><a class="header-anchor" href="#阅读工具" aria-hidden="true">#</a> 阅读工具</h2><p>工欲善其事必先利其器，没有一个好的工具怎么能提高阅读代码的效率呢？</p><p>作为一个前端开发人员，VSCode 是一个不错的选择。</p>',25),r=(0,s.Uk)("使用 VSCode 打开代码以后，会发现每个代码文件都提示很多语法错误。原因是 React 代码中使用 "),t={href:"https://flow.org/en",target:"_blank",rel:"noopener noreferrer"},i=(0,s.Uk)("Flow"),o=(0,s.Uk)(" 来声明类型，VSCode 中 TS 引擎默认会对 JS 进行语法检查，因此会提示在 JS 文件中不能声明类型，需要将文件重命名为 TS 文件。"),c=(0,s.Wm)("p",null,[(0,s.Uk)("这当然属于误报，我们需要在设置中关闭 JS 检查。"),(0,s.Wm)("code",null,"CMD + ,"),(0,s.Uk)(" 打开设置页面，输入 "),(0,s.Wm)("code",null,"javascript.validate"),(0,s.Uk)("，去勾选查出来的第一项即可。")],-1),p=(0,s.Uk)("同时我们也建议安装下 "),d={href:"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("Flow Language Support"),m=(0,s.Uk)(" 这个插件，可以提供对 Flow 提供很好的支持。"),b=(0,s.Uk)("在解决完满屏的红色错误提示以后，我们需要安装 "),g={href:"https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks",target:"_blank",rel:"noopener noreferrer"},h=(0,s.Uk)("Bookmarks"),v=(0,s.Uk)(" 这个插件，有了它，我们可以在任意代码打一个标签，然后在任意时间点通过这个标签返回到这段代码，避免在庞大的代码仓库中迷路。"),k=(0,s.uE)('<div style="display:flex;align-items:center;justify-content:center;"><p style="text-align:center;margin-top:10px;color:#999;"><img src="/qrcode-c.jpg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">关注微信公众号，获取最新推送~</p><p style="text-align:center;margin-top:10px;color:#999;"><img src="/card-c.jpeg" style="width:200px;height:200px;display:block;margin:10px auto;opacity:0.8;">加微信，深入交流~</p></div>',1),x={render:function(e,n){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[l,(0,s.Wm)("p",null,[r,(0,s.Wm)("a",t,[i,(0,s.Wm)(a)]),o]),c,(0,s.Wm)("p",null,[p,(0,s.Wm)("a",d,[u,(0,s.Wm)(a)]),m]),(0,s.Wm)("p",null,[b,(0,s.Wm)("a",g,[h,(0,s.Wm)(a)]),v]),k],64)}}}}]);